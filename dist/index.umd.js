(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('events'), require('util'), require('tty'), require('os'), require('http'), require('https'), require('dns'), require('stream'), require('vm'), require('fs'), require('path'), require('worker_threads'), require('module'), require('url'), require('buffer'), require('assert'), require('async_hooks'), require('crypto')) :
    typeof define === 'function' && define.amd ? define(['exports', 'events', 'util', 'tty', 'os', 'http', 'https', 'dns', 'stream', 'vm', 'fs', 'path', 'worker_threads', 'module', 'url', 'buffer', 'assert', 'async_hooks', 'crypto'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {}), global.require$$1$2, global.require$$2, global.require$$1$1, global.require$$0$1, global.require$$0$2, global.require$$1$3, global.require$$2$1, global.require$$0$9, global.require$$0$3, global.require$$0$4, global.require$$3$3, global.require$$2$2, global.require$$0$8, global.require$$0$6, global.require$$0$5, global.require$$0$7, global.require$$0$a, global.require$$2$3));
})(this, (function (exports, require$$1$2, require$$2, require$$1$1, require$$0$1, require$$0$2, require$$1$3, require$$2$1, require$$0$9, require$$0$3, require$$0$4, require$$3$3, require$$2$2, require$$0$8, require$$0$6, require$$0$5, require$$0$7, require$$0$a, require$$2$3) { 'use strict';

    const GB = {
        code: 'gb',
        name: 'United Kingdom',
        languageCode: 'en-uk',
        timezones: ['GMT'],
        zipcodeFormats: ['AAA 9AA', 'AA99 9AA', 'AA9 9AA'],
        regions: ['London', 'West Midlands', 'North West', 'South West'],
        counties: ['Kent', 'Essex', 'Devon', 'Surrey', 'Cheshire', 'Cambridge'],
        cities: ['Aberdeen', 'Belfast', 'Birmingham', 'Bradford-Leeds', 'Brighton', 'Bristol', 'Cardiff', 'Coventry', 'Dundee', 'Edinburgh', 'Glasgow', 'Hull', 'Kent', 'Liverpool', 'Manchester'],
        streets: ['Victoria', 'London', 'Church', 'Green', 'Manor', 'Kings', 'Mill', 'York'],
        streetSuffixes: ['Road', 'Street', 'Avenue', 'Crescent', 'Lane', 'Grove'],
        houseNameFormats: ['N', 'W'],
        houseNamePrefixes: ['The', 'Ivy', 'Sunny', 'Green', 'Red'],
        houseNameSuffixes: ['Barn', 'Lodge', 'Cottage', 'Bungalow', 'House', 'Farm', 'Woodlands', 'Stables'],
        bank: {
            iban: ' AA99AAAA99999999999999'
        },
        names: {
            female: ['Rosemary', 'Macie', 'Jamie', 'Kaitlin', 'Donna', 'Delilah', 'Susan', 'Alexis', 'Jada', 'Jordyn', 'Aria', 'Perla', 'Isabell', 'Monica', 'Zoe', 'Leia', 'Marely', 'Miley', 'Daphne', 'Avery', 'Caitlyn', 'Mayra', 'Serenity', 'Luna', 'Juliet', 'India', 'Monserrat', 'Brittany', 'Kendal', 'Phoenix', 'Taylor', 'Savanah', 'Danika', 'Madelyn', 'Fernanda', 'Kristina', 'Mia', 'Tia', 'Ali', 'Jaslyn', 'Lila', 'Evelyn', 'Saniya', 'Haven', 'Olivia', 'Nora', 'Abigail', 'Alisa', 'Julissa', 'Lucille', 'Hillary', 'Aileen', 'Miah', 'Dayana', 'Giselle', 'Skylar', 'Aurora', 'Jaylah', 'Kali', 'Alaina', 'Christina', 'Claudia', 'Scarlet', 'Aniyah', 'Helena', 'Areli', 'Paisley', 'Elisa', 'Jaliyah', 'Mattie', 'Finley', 'Ada', 'Janessa', 'Melissa', 'Jennifer', 'Elle', 'Laura', 'Nicole', 'Mikaela', 'Karley', 'Anika', 'Erica', 'Abril', 'Clarissa', 'Kamari', 'Adriana', 'Micah', 'Armani', 'Violet', 'Siena', 'Alia', 'Campbell', 'Catherine', 'Haleigh', 'Bryanna', 'Makayla', 'Tanya', 'Emma', 'Lindsey', 'Amani'],
            male: ['Antony', 'Urijah', 'Giovanni', 'Memphis', 'Bailey', 'Fabian', 'Ty', 'River', 'Lorenzo', 'Beckham', 'Sterling', 'Augustus', 'Semaj', 'Ruben', 'Santiago', 'Abram', 'Layton', 'Griffin', 'Carlos', 'Jonathan', 'Davin', 'Elian', 'Aditya', 'Lucas', 'Roy', 'Samson', 'Stephen', 'Andre', 'Jaquan', 'John', 'Roberto', 'Jaydon', 'Quentin', 'Declan', 'Adam', 'Cory', 'Tyrone', 'Cannon', 'Jacoby', 'Giancarlo', 'Slade', 'Abdiel', 'Tyler', 'Ezequiel', 'Brogan', 'Camron', 'Logan', 'Isaac', 'Jonah', 'Vance', 'Joaquin', 'Rodrigo', 'Emerson', 'Giovanny', 'Zachary', 'Davian', 'Quincy', 'Gianni', 'Johnathan', 'Finley', 'Ramiro', 'Brooks', 'Moses', 'Eddie', 'Isiah', 'Harper', 'Gunner', 'Braylen', 'Joel', 'Ross', 'William', 'Aaden', 'Stanley', 'Nikolas', 'Lewis', 'Braedon', 'Miguel', 'Patrick', 'Kyan', 'Timothy', 'Roger', 'Jaidyn', 'Karter', 'Brice', 'Peter', 'Duncan', 'Sullivan', 'Micah', 'Alfred', 'Zack', 'Zayne', 'Malakai', 'Johan', 'Marley', 'Xavier', 'Matthew', 'Rodney', 'Carsen', 'Ashton', 'Saul'],
            middleNames: ['Iyana', 'Giana', 'Kyla', 'Zoie', 'Ashtyn', 'Fatima', 'Taniyah', 'Hanna', 'Marianna', 'Valentina', 'Luz', 'Karly', 'Finley', 'Kaylin', 'Amiya', 'Whitney', 'Kailyn', 'Rebekah', 'Alexandria', 'Brenda', 'Maggie', 'Ingrid', 'Maia', 'Gwendolyn', 'Mayra', 'Halle', 'Aliana', 'Kaya', 'Abbey', 'Diana', 'Annika', 'Bridget', 'Precious', 'Kiana', 'Tianna', 'Aiyana', 'Meredith', 'Skyler', 'Lesly', 'Talia', 'Denisse', 'Mina', 'Jaslyn', 'Shayla', 'Aniya', 'Amaris', 'Aurora', 'Fernanda', 'Vivian', 'Campbell'],
            nicknames: ['Silly Sally', 'Frogger', 'Half Pint', 'Coach', 'Amiga', 'Guy', 'T-Dawg', 'Diet Coke', '4-Wheel', 'Chicken Legs', 'Red', 'Captain', 'Prego', 'Redbull', 'Con', 'Lovey', 'Sassafras', 'Dulce', 'Gingersnap', 'Fido', 'Baby Bird', 'Twinkly', 'Music Man', 'Carrot', 'Dork', 'Oompa Loompa', 'Chef', 'Bandit', 'Pretty Lady', 'Kitten', 'Sassy', 'Thumper', 'Bunny Rabbit', 'Donut', 'Candy', 'Chewbacca', 'Amore', 'PB&J', 'Birdy', 'Hubby', 'Cold Brew', 'Donuts', 'Swiss Miss', 'Shrinkwrap', 'Pixie Stick', 'Rainbow', 'Beautiful', 'Tough Guy', 'Figgy', 'Frankfurter'],
            lastNames: ['Benton', 'Sharp', 'Tanner', 'Braun', 'Conway', 'Mcclure', 'Kramer', 'Tapia', 'Boyle', 'Fitzpatrick', 'Craig', 'Mcgrath', 'Church', 'Estes', 'Reid', 'Grimes', 'Blevins', 'Caldwell', 'Mccarty', 'Copeland', 'Fields', 'Shea', 'Joyce', 'Bird', 'Burnett', 'Powell', 'Zuniga', 'Spence', 'Chambers', 'Cordova', 'Rojas', 'Hinton', 'Holder', 'Cantu', 'Johns', 'Freeman', 'Pratt', 'Simmons', 'Weaver', 'Thornton', 'Wong', 'Swanson', 'Browning', 'Francis', 'Moyer', 'Hahn', 'Pugh', 'Coleman', 'Willis', 'Walter']
        }
    };

    const locales = {
        gb: GB,
        global: GB,
        ca: GB,
        usa: GB
    };

    const Config = {
        seed: Date.now(),
        locale: 'gb'
    };
    const getLocale = locales[Config.locale];

    function float(options) {
        let float;
        if (options && options.min && options.max) {
            float = mulberry32() * (options.max - options.min) + options.min;
        }
        else {
            float = mulberry32();
        }
        Config.seed += 1;
        if (options && options.precision) {
            return toFixedNumber(float, options.precision);
        }
        else {
            return float;
        }
    }
    function int(options) {
        if (!options) {
            return Math.floor(mulberry32() * 100);
        }
        Config.seed += 1;
        // check if null to prevent nullish checks in case they pass a 0, -1 or 1
        if (options.min != null && options.max != null) {
            return Math.floor(mulberry32() * (options.max - options.min + 1) + options.min);
        }
        return Math.floor(mulberry32() * 100);
    }
    // export function rngProbDist() {
    // }
    // export function logDist() {
    // }
    function percent(options) {
        return float(options);
    }
    function percentString(options) {
        return `${int(options)}%`;
    }
    function bool() {
        return float() > 0.5;
    }
    const Number$1 = {
        float,
        int,
        bool,
        percent,
        percentString
    };
    /**
     * Internal Number Utils
     */
    /**
     *
     * @param value
     * @param digits
     * @param base
     * @returns { number }
     */
    function toFixedNumber(value, digits, base = 10) {
        const pow = Math.pow(base, digits);
        return Math.round(value * pow) / pow;
    }
    // function randn_bm() {
    // 	const u = 1 - mulberry32();
    // 	const v = mulberry32();
    // 	return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
    // }
    /**
     * @returns { number }
     */
    function mulberry32() {
        let t = Config.seed += 0x6D2B79F5;
        t = Math.imul(t ^ t >>> 15, t | 1);
        t ^= t + Math.imul(t ^ t >>> 7, t | 61);
        const result = ((t ^ t >>> 14) >>> 0) / 4294967296;
        return result;
    }

    function fromArray(array) {
        return array[int({ min: 0, max: array.length - 1 })];
    }
    const Array$1 = {
        fromArray
    };

    const capitalCharCodes = { min: 65, max: 90 };
    const lowerCaseCharCodes = { min: 97, max: 122 };
    const alphaNumerics = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    function fromFormat(format) {
        let result = '';
        for (const char of format) {
            // numberic (0-9)
            if (char === '9') {
                result += int({ min: 0, max: 9 });
                // upper case alpha (A-Z)
            }
            else if (char === 'A') {
                result += String.fromCharCode(int(capitalCharCodes));
            }
            // lower case alpha (a-z)
            else if (char === 'a') {
                result += String.fromCharCode(int(lowerCaseCharCodes));
            }
            else {
                result += char;
            }
        }
        return result;
    }
    function alphaN(length) {
        let result = '';
        const charLen = alphaNumerics.length - 1;
        for (let i = length; i > 0; i--) {
            result += alphaNumerics[int({ min: 0, max: charLen })];
        }
        return result;
    }
    const string = {
        alphaN,
        fromFormat
    };

    /**
     * @function postcode
     * @description Generate a random postcode
     *
     * @returns {string}
     */
    function postcode() {
        const format = fromArray(getLocale.zipcodeFormats);
        return fromFormat(format);
    }
    /**
     * @function city
     * @description Generate a random city name
     *
     * @returns {string}
     */
    function city() {
        return fromArray(getLocale.cities);
    }
    /**
     * @function county
     * @description Generate a random county
     *
     * @returns {string}
     */
    function county() {
        return fromArray(getLocale.counties);
    }
    /**
     * @function street
     * @description Generate a random street name
     *
     * @returns {string}
     */
    function street() {
        return `${fromArray(getLocale.streets)} ${fromArray(getLocale.streetSuffixes)}`;
    }
    /**
     * @function houseNameNumber
     * @description Generate a random house name or number
     *
     * @returns {(string | number)}
     */
    function houseNameNumber() {
        const format = fromArray(getLocale.houseNameFormats);
        if (format === 'N') {
            return int({ min: 1, max: 150 });
        }
        else {
            return `${fromArray(getLocale.houseNamePrefixes)} ${fromArray(getLocale.houseNameSuffixes)}`;
        }
    }
    /**
     * @function country
     * @description Generate a random country
     *
     * @returns {string}
     */
    function country() {
        return getLocale.name;
    }
    /**
     * @function address
     * @description Address generator
     *
     * @returns {IAddress}
     */
    function address() {
        return {
            country: getLocale.name,
            county: county(),
            city: city(),
            street: street(),
            houseNumber: houseNameNumber(),
            postcode: postcode()
        };
    }
    /**
     * @function addressString
     * @description Address described as a string
     *
     * @returns {string}
     */
    function addressString() {
        const addr = address();
        return `${addr.houseNumber} ${addr.street}, ${addr.county}, ${addr.city}, ${addr.country}, ${addr.postcode}`;
    }
    const Address = {
        postcode,
        city,
        county,
        country,
        street,
        houseNameNumber,
        address,
        addressString
    };

    /**
     * Generates a latitude and longitude object
     *
     * @returns {LatLong}
     */
    function latLong() {
        return {
            lat: lat(),
            long: long()
        };
    }
    /**
     * Generate a latitude
     *
     * @returns {number}
     */
    function lat() {
        return int({ min: -180, max: 180, precision: 9 });
    }
    /**
     * Generated a longitude
     *
     * @returns {number}
     */
    function long() {
        return int({ min: -180, max: 180, precision: 9 });
    }
    const Map$1 = {
        lat,
        long,
        latLong
    };

    const Geographic = {
        Address,
        Map: Map$1
    };

    function nickname() {
        return fromArray(getLocale.names.nicknames);
    }
    function fullName(options) {
        let gen;
        if (options && options.gender) {
            gen = options.gender;
        }
        else {
            gen = gender();
        }
        return {
            firstName: firstName({ gender: gen }),
            lastName: lastName(),
            middleNames: middleNames(),
            gender: gen,
            nickName: nickname()
        };
    }
    function firstName(options) {
        if (options && options.gender) {
            if (options.gender === 'Male') {
                return fromArray(getLocale.names.male);
            }
            else {
                return fromArray(getLocale.names.female);
            }
        }
        else {
            const male = bool();
            if (male) {
                return fromArray(getLocale.names.male);
            }
            else {
                return fromArray(getLocale.names.female);
            }
        }
    }
    function lastName() {
        return fromArray(getLocale.names.lastNames);
    }
    // todo there is a roughly 0.0004% chance of generating two middle names that are identicle.
    // Should look at removing duplicates - but don't want to bog the code down on something superfluous
    function middleNames() {
        const count = int({ min: 0, max: 2 });
        const middleNames = [];
        for (let i = count; i > 0; i--) {
            middleNames.push(fromArray(getLocale.names.middleNames));
        }
        return middleNames;
    }
    function gender() {
        const male = bool();
        if (male) {
            return 'Male';
        }
        else {
            return 'Female';
        }
    }
    // export function suffix() {
    // }
    // export function title() {
    // }
    const Person = {
        firstName,
        lastName,
        middleNames,
        nickname,
        fullName,
        gender
    };

    var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

    function validate$9(uuid) {
      return typeof uuid === 'string' && REGEX.test(uuid);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    const byteToHex = [];

    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).slice(1));
    }

    function unsafeStringify(arr, offset = 0) {
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    }

    function parse$i(uuid) {
      if (!validate$9(uuid)) {
        throw TypeError('Invalid UUID');
      }

      let v;
      const arr = new Uint8Array(16); // Parse ########-....-....-....-............

      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 0xff;
      arr[2] = v >>> 8 & 0xff;
      arr[3] = v & 0xff; // Parse ........-####-....-....-............

      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 0xff; // Parse ........-....-####-....-............

      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 0xff; // Parse ........-....-....-####-............

      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 0xff; // Parse ........-....-....-....-############
      // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
      arr[11] = v / 0x100000000 & 0xff;
      arr[12] = v >>> 24 & 0xff;
      arr[13] = v >>> 16 & 0xff;
      arr[14] = v >>> 8 & 0xff;
      arr[15] = v & 0xff;
      return arr;
    }

    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str)); // UTF8 escape

      const bytes = [];

      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }

      return bytes;
    }

    const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    const URL$1 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;

        if (typeof value === 'string') {
          value = stringToBytes(value);
        }

        if (typeof namespace === 'string') {
          namespace = parse$i(namespace);
        }

        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
          throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
        } // Compute hash of namespace and value, Per 4.3
        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
        // hashfunc([...namespace, ... value])`


        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 0x0f | version;
        bytes[8] = bytes[8] & 0x3f | 0x80;

        if (buf) {
          offset = offset || 0;

          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }

          return buf;
        }

        return unsafeStringify(bytes);
      } // Function#name is not settable on some platforms (#270)


      try {
        generateUUID.name = name; // eslint-disable-next-line no-empty
      } catch (err) {} // For CommonJS default export support


      generateUUID.DNS = DNS;
      generateUUID.URL = URL$1;
      return generateUUID;
    }

    // Adapted from Chris Veness' SHA1 code at
    // http://www.movable-type.co.uk/scripts/sha1.html
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;

        case 1:
          return x ^ y ^ z;

        case 2:
          return x & y ^ x & z ^ y & z;

        case 3:
          return x ^ y ^ z;
      }
    }

    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }

    function sha1(bytes) {
      const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
      const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

      if (typeof bytes === 'string') {
        const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

        bytes = [];

        for (let i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        // Convert Array-like to Array
        bytes = Array.prototype.slice.call(bytes);
      }

      bytes.push(0x80);
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);

      for (let i = 0; i < N; ++i) {
        const arr = new Uint32Array(16);

        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        }

        M[i] = arr;
      }

      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

      for (let i = 0; i < N; ++i) {
        const W = new Uint32Array(80);

        for (let t = 0; t < 16; ++t) {
          W[t] = M[i][t];
        }

        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }

        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];

        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }

        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }

      return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
    }

    const v5 = v35('v5', 0x50, sha1);
    var v5$1 = v5;

    function uuid() {
        return v5$1('uuid', '1b671a64-40d5-491e-99b0-da01ff1f3341');
    }
    var uuid$1 = {
        uuid
    };

    const Identification = {
        Person,
        uuid: uuid$1
    };

    function normalDist(min, max, skew) {
        let u = 0, v = 0;
        while (u === 0)
            u = mulberry32(); //Converting [0,1) to (0,1)
        while (v === 0)
            v = mulberry32();
        let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
        num = num / 10.0 + 0.5; // Translate to 0 -> 1
        if (num > 1 || num < 0) {
            num = normalDist(min, max, skew); // resample between 0 and 1 if out of range
        }
        else {
            num = Math.pow(num, skew);
            num *= max - min;
            num += min;
        }
        return num;
    }

    const Math$1 = {
        int,
        float,
        bool,
        percent,
        normalDist
    };

    const Util = {
        Array: Array$1,
        string
    };

    // https://www.iban.com/structure
    // https://www.investopedia.com/terms/i/iban.asp
    function IBAN() {
        return fromFormat(getLocale.bank.iban);
    }
    // https://treasuryxl.com/blog/what-are-bic-swift-codes-how-do-you-find-them-and-how-do-they-work/#:~:text=Let's%20get%20this%20BIC%20format,bank's%20head%20office%20is%20situated.
    // export function SWIFT() {
    // }
    // export function BIC() {
    // }
    function accountNumber() {
        return parseInt(fromFormat('99999999'));
    }
    function sortCode() {
        return parseInt(fromFormat('999999'));
    }
    function cardNumber() {
        return fromFormat('9999-9999-9999-9999');
    }
    // export function validFrom() {
    // }
    // export function validTo() {
    // }
    function cvv() {
        return parseInt(fromFormat('999'));
    }
    const Bank = {
        IBAN,
        accountNumber,
        sortCode,
        cardNumber,
        cvv
    };

    const Finance = {
        Bank
    };

    const Generators = {
        Finance,
        Geographic,
        Identification,
        Math: Math$1,
        Util
    };

    function Contingency(parameters, generator) {
        const result = generator.apply(parameters);
        return result;
    }

    function Probability(options) {
        return () => {
            return generate(options);
        };
    }
    function generate(options) {
        validateConditions(options.conditions);
        const condition = getConditionFromProbability(options.conditions);
        return getValue(condition.generator);
    }
    function validateConditions(conditions) {
        let allProbs = 0;
        for (const condition of conditions) {
            allProbs += condition.probability;
        }
        if (allProbs === 100) {
            return true;
        }
        else {
            throw new Error('Conditions are not valid. They do not equal 100.');
        }
    }
    function getConditionFromProbability(conditions) {
        const calculatedProb = float({ min: 0, max: 100 });
        let previousProb = 0;
        for (const condition of conditions) {
            if (calculatedProb >= previousProb && calculatedProb < previousProb + condition.probability) {
                return condition;
            }
            previousProb = calculatedProb;
        }
        throw new Error('Could not generate a conditional value.');
    }
    function getValue(generator) {
        if (generator instanceof Function) {
            return generator();
        }
        else {
            return generator;
        }
    }

    class Factory {
        constructor(obj) {
            this.dictionary = obj;
        }
        add(key, property) {
            this.dictionary[key] = property;
        }
        get(key) {
            return this.dictionary[key];
        }
        /**
         * @function build
         * @description Builds a new object from the factory schema. Require you to pass in all properties.
         * @param {T} properties
         * @returns {T} A complete
         */
        build(properties) {
            return properties;
        }
        /**
         * @function buildPartial
         * @description Like the build function, but all properties are optional so you can build the object as you go.
         * It is advised to use this in conjunction with the validate function.
         *
         * @param { RecursivePartial<T> } properties
         * @returns { RecursivePartial<T> } The new object from the factory schema, but with all keys as optional
         */
        buildPartial(properties) {
            return properties;
        }
        /**
         * @function validate
         * @description Takes an object that is meant to be the same as what's described above. However, due to the partial keyword, it is possible to have missed
         * some of the properties, so use this function to ensure the object fully meets the criteria of the schema.
         * @param object
         * @returns { boolean } True if the object is valid
         */
        validate(object) {
            //? could always build a fake version to be able to compare againt?
            return this.traverseValidate(this.dictionary, object);
        }
        traverseValidate(referenceObject, object) {
            for (const key in referenceObject) {
                const referenceItem = referenceObject[key];
                const item = object[key];
                //? Should we worry about function types here?
                if (typeof item === 'object') {
                    return this.traverseValidate(referenceItem, item);
                }
                else {
                    if (this.itemsAreSameType(referenceItem, item)) {
                        continue;
                    }
                    else {
                        throw new Error(`Could not validate object. Item ${key} can not be matched as ${typeof item} against ${typeof referenceItem}`);
                    }
                }
            }
            return true;
        }
        itemsAreSameType(referenceItem, item) {
            if (typeof referenceItem !== typeof item) {
                return false;
            }
            return true;
        }
        fake() {
            //? Should this be restricted by an envirnoment variable?
            return this.traverseObject(this.dictionary, {});
        }
        traverseObject(object, result) {
            for (const key in object) {
                const item = object[key];
                if (typeof item === 'function') {
                    const fn = item;
                    result[key] = fn();
                }
                else if (typeof item === 'object') {
                    if (item instanceof Factory) {
                        result[key] = item.fake();
                    }
                    else {
                        result[key] = this.traverseObject(item, {});
                    }
                }
                else {
                    result[key] = item;
                }
            }
            return result;
        }
    }

    const Core = {
        Contingency,
        Probability,
        Factory
    };

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
    				var args = [null];
    				args.push.apply(args, arguments);
    				var Ctor = Function.bind.apply(f, args);
    				return new Ctor();
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var fastifyExports = {};
    var fastify$1 = {
      get exports(){ return fastifyExports; },
      set exports(v){ fastifyExports = v; },
    };

    var bootExports = {};
    var boot = {
      get exports(){ return bootExports; },
      set exports(v){ bootExports = v; },
    };

    var queueExports = {};
    var queue = {
      get exports(){ return queueExports; },
      set exports(v){ queueExports = v; },
    };

    function reusify$1 (Constructor) {
      var head = new Constructor();
      var tail = head;

      function get () {
        var current = head;

        if (current.next) {
          head = current.next;
        } else {
          head = new Constructor();
          tail = head;
        }

        current.next = null;

        return current
      }

      function release (obj) {
        tail.next = obj;
        tail = obj;
      }

      return {
        get: get,
        release: release
      }
    }

    var reusify_1 = reusify$1;

    /* eslint-disable no-var */

    var reusify = reusify_1;

    function fastqueue (context, worker, concurrency) {
      if (typeof context === 'function') {
        concurrency = worker;
        worker = context;
        context = null;
      }

      if (concurrency < 1) {
        throw new Error('fastqueue concurrency must be greater than 1')
      }

      var cache = reusify(Task);
      var queueHead = null;
      var queueTail = null;
      var _running = 0;
      var errorHandler = null;

      var self = {
        push: push,
        drain: noop$9,
        saturated: noop$9,
        pause: pause,
        paused: false,
        concurrency: concurrency,
        running: running,
        resume: resume,
        idle: idle,
        length: length,
        getQueue: getQueue,
        unshift: unshift,
        empty: noop$9,
        kill: kill,
        killAndDrain: killAndDrain,
        error: error
      };

      return self

      function running () {
        return _running
      }

      function pause () {
        self.paused = true;
      }

      function length () {
        var current = queueHead;
        var counter = 0;

        while (current) {
          current = current.next;
          counter++;
        }

        return counter
      }

      function getQueue () {
        var current = queueHead;
        var tasks = [];

        while (current) {
          tasks.push(current.value);
          current = current.next;
        }

        return tasks
      }

      function resume () {
        if (!self.paused) return
        self.paused = false;
        for (var i = 0; i < self.concurrency; i++) {
          _running++;
          release();
        }
      }

      function idle () {
        return _running === 0 && self.length() === 0
      }

      function push (value, done) {
        var current = cache.get();

        current.context = context;
        current.release = release;
        current.value = value;
        current.callback = done || noop$9;
        current.errorHandler = errorHandler;

        if (_running === self.concurrency || self.paused) {
          if (queueTail) {
            queueTail.next = current;
            queueTail = current;
          } else {
            queueHead = current;
            queueTail = current;
            self.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }

      function unshift (value, done) {
        var current = cache.get();

        current.context = context;
        current.release = release;
        current.value = value;
        current.callback = done || noop$9;

        if (_running === self.concurrency || self.paused) {
          if (queueHead) {
            current.next = queueHead;
            queueHead = current;
          } else {
            queueHead = current;
            queueTail = current;
            self.saturated();
          }
        } else {
          _running++;
          worker.call(context, current.value, current.worked);
        }
      }

      function release (holder) {
        if (holder) {
          cache.release(holder);
        }
        var next = queueHead;
        if (next) {
          if (!self.paused) {
            if (queueTail === queueHead) {
              queueTail = null;
            }
            queueHead = next.next;
            next.next = null;
            worker.call(context, next.value, next.worked);
            if (queueTail === null) {
              self.empty();
            }
          } else {
            _running--;
          }
        } else if (--_running === 0) {
          self.drain();
        }
      }

      function kill () {
        queueHead = null;
        queueTail = null;
        self.drain = noop$9;
      }

      function killAndDrain () {
        queueHead = null;
        queueTail = null;
        self.drain();
        self.drain = noop$9;
      }

      function error (handler) {
        errorHandler = handler;
      }
    }

    function noop$9 () {}

    function Task () {
      this.value = null;
      this.callback = noop$9;
      this.next = null;
      this.release = noop$9;
      this.context = null;
      this.errorHandler = null;

      var self = this;

      this.worked = function worked (err, result) {
        var callback = self.callback;
        var errorHandler = self.errorHandler;
        var val = self.value;
        self.value = null;
        self.callback = noop$9;
        if (self.errorHandler) {
          errorHandler(err, val);
        }
        callback.call(self.context, err, result);
        self.release(self);
      };
    }

    function queueAsPromised (context, worker, concurrency) {
      if (typeof context === 'function') {
        concurrency = worker;
        worker = context;
        context = null;
      }

      function asyncWrapper (arg, cb) {
        worker.call(this, arg)
          .then(function (res) {
            cb(null, res);
          }, cb);
      }

      var queue = fastqueue(context, asyncWrapper, concurrency);

      var pushCb = queue.push;
      var unshiftCb = queue.unshift;

      queue.push = push;
      queue.unshift = unshift;
      queue.drained = drained;

      return queue

      function push (value) {
        var p = new Promise(function (resolve, reject) {
          pushCb(value, function (err, result) {
            if (err) {
              reject(err);
              return
            }
            resolve(result);
          });
        });

        // Let's fork the promise chain to
        // make the error bubble up to the user but
        // not lead to a unhandledRejection
        p.catch(noop$9);

        return p
      }

      function unshift (value) {
        var p = new Promise(function (resolve, reject) {
          unshiftCb(value, function (err, result) {
            if (err) {
              reject(err);
              return
            }
            resolve(result);
          });
        });

        // Let's fork the promise chain to
        // make the error bubble up to the user but
        // not lead to a unhandledRejection
        p.catch(noop$9);

        return p
      }

      function drained () {
        if (queue.idle()) {
          return new Promise(function (resolve) {
            resolve();
          })
        }

        var previousDrain = queue.drain;

        var p = new Promise(function (resolve) {
          queue.drain = function () {
            previousDrain();
            resolve();
          };
        });

        return p
      }
    }

    queue.exports = fastqueue;
    queueExports.promise = queueAsPromised;

    // Code inherited from fastify-error
    const { inherits: inherits$4, format: format$c } = require$$2;

    function createError$2 (code, message, Base = Error) {
      if (!code) throw new Error('Avvio error code must not be empty')
      if (!message) throw new Error('Avvio base error message must not be empty')

      function AvvioError (a, b, c) {
        if (!(this instanceof AvvioError)) {
          return new AvvioError(a, b, c)
        }

        Error.captureStackTrace(this, AvvioError);

        this.code = code;
        this.message = message;
        this.name = 'AvvioError';

        // more performant than spread (...) operator
        if (a && b && c) {
          this.message = format$c(message, a, b, c);
        } else if (a && b) {
          this.message = format$c(message, a, b);
        } else if (a) {
          this.message = format$c(message, a);
        } else {
          this.message = message;
        }
      }

      AvvioError.prototype[Symbol.toStringTag] = 'Error';
      AvvioError.prototype.toString = function () {
        return `${this.name} [${this.code}]: ${this.message}`
      };

      inherits$4(AvvioError, Base);

      return AvvioError
    }

    var errors$4 = {
      createError: createError$2,
      AVV_ERR_EXPOSE_ALREADY_DEFINED: createError$2(
        'AVV_ERR_EXPOSE_ALREADY_DEFINED',
        "'%s' () is already defined, specify an expose option"
      ),
      AVV_ERR_CALLBACK_NOT_FN: createError$2(
        'AVV_ERR_CALLBACK_NOT_FN',
        "Callback for '%s' hook is not a function. Received: '%s'"
      ),
      AVV_ERR_PLUGIN_NOT_VALID: createError$2(
        'AVV_ERR_PLUGIN_NOT_VALID',
        "Plugin must be a function or a promise. Received: '%s'"
      ),
      AVV_ERR_ROOT_PLG_BOOTED: createError$2(
        'AVV_ERR_PLUGIN_NOT_VALID',
        'Root plugin has already booted'
      ),
      AVV_ERR_PARENT_PLG_LOADED: createError$2(
        'AVV_ERR_PARENT_PLG_LOADED',
        "Impossible to load '%s' plugin because the parent '%s' was already loaded"
      ),
      AVV_ERR_READY_TIMEOUT: createError$2(
        'AVV_ERR_READY_TIMEOUT',
        "Plugin did not start in time: '%s'. You may have forgotten to call 'done' function or to resolve a Promise"
      )
    };

    var archy$1 = function archy (obj, prefix, opts) {
        if (prefix === undefined) prefix = '';
        if (!opts) opts = {};
        var chr = function (s) {
            var chars = {
                '│' : '|',
                '└' : '`',
                '├' : '+',
                '─' : '-',
                '┬' : '-'
            };
            return opts.unicode === false ? chars[s] : s;
        };
        
        if (typeof obj === 'string') obj = { label : obj };
        
        var nodes = obj.nodes || [];
        var lines = (obj.label || '').split('\n');
        var splitter = '\n' + prefix + (nodes.length ? chr('│') : ' ') + ' ';
        
        return prefix
            + lines.join(splitter) + '\n'
            + nodes.map(function (node, ix) {
                var last = ix === nodes.length - 1;
                var more = node.nodes && node.nodes.length;
                var prefix_ = prefix + (last ? ' ' : chr('│')) + ' ';
                
                return prefix
                    + (last ? chr('└') : chr('├')) + chr('─')
                    + (more ? chr('┬') : chr('─')) + ' '
                    + archy(node, prefix_, opts).slice(prefix.length + 2)
                ;
            }).join('')
        ;
    };

    const archy = archy$1;

    const kUntrackNode = Symbol('avvio.TimeTree.untrackNode');
    const kTrackNode = Symbol('avvio.TimeTree.trackNode');
    const kGetParent = Symbol('avvio.TimeTree.getParent');
    const kGetNode = Symbol('avvio.TimeTree.getNode');
    const kAddNode = Symbol('avvio.TimeTree.addNode');

    let TimeTree$1 = class TimeTree {
      constructor () {
        this.root = null;
        this.tableId = new Map();
        this.tableLabel = new Map();
      }

      [kTrackNode] (node) {
        this.tableId.set(node.id, node);
        if (this.tableLabel.has(node.label)) {
          this.tableLabel.get(node.label).push(node);
        } else {
          this.tableLabel.set(node.label, [node]);
        }
      }

      [kUntrackNode] (node) {
        this.tableId.delete(node.id);

        const labelNode = this.tableLabel.get(node.label);
        if (labelNode.id) {
          this.tableLabel.delete(node.label);
          return
        }
        labelNode.pop();

        if (labelNode.length === 0) {
          this.tableLabel.delete(node.label);
        }
      }

      [kGetParent] (parent) {
        if (parent === null) {
          return this.root
        }

        const parentNode = this.tableLabel.get(parent);
        if (parentNode.id) {
          return parentNode
        }
        return parentNode[parentNode.length - 1]
      }

      [kGetNode] (nodeId) {
        return this.tableId.get(nodeId)
      }

      [kAddNode] (parent, childName, start) {
        const isRoot = parent === null;
        if (isRoot) {
          this.root = {
            id: 'root',
            label: childName,
            start,
            nodes: []
          };
          this[kTrackNode](this.root);
          return this.root.id
        }

        const parentNode = this[kGetParent](parent);
        const nodeId = `${childName}-${Math.random()}`;
        const childNode = {
          id: nodeId,
          parent,
          start,
          label: childName,
          nodes: []
        };
        parentNode.nodes.push(childNode);
        this[kTrackNode](childNode);
        return nodeId
      }

      start (parent, childName, start = Date.now()) {
        return this[kAddNode](parent, childName, start)
      }

      stop (nodeId, stop = Date.now()) {
        const node = this[kGetNode](nodeId);
        if (node) {
          node.stop = stop;
          node.diff = (node.stop - node.start) || 0;
          this[kUntrackNode](node);
        }
      }

      toJSON () {
        return Object.assign({}, this.root)
      }

      prittyPrint () {
        const decorateText = (node) => {
          node.label = `${node.label} ${node.diff} ms`;
          if (node.nodes.length > 0) {
            node.nodes = node.nodes.map(_ => decorateText(_));
          }
          return node
        };
        const out = decorateText(this.toJSON());
        return archy(out)
      }
    };

    var timeTree = TimeTree$1;

    var pluginExports = {};
    var plugin = {
      get exports(){ return pluginExports; },
      set exports(v){ pluginExports = v; },
    };

    var srcExports = {};
    var src = {
      get exports(){ return srcExports; },
      set exports(v){ srcExports = v; },
    };

    var browserExports = {};
    var browser = {
      get exports(){ return browserExports; },
      set exports(v){ browserExports = v; },
    };

    /**
     * Helpers.
     */

    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    var ms$1 = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse$h(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse$h(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }

    var common;
    var hasRequiredCommon;

    function requireCommon () {
    	if (hasRequiredCommon) return common;
    	hasRequiredCommon = 1;
    	/**
    	 * This is the common logic for both the Node.js and web browser
    	 * implementations of `debug()`.
    	 */

    	function setup(env) {
    		createDebug.debug = createDebug;
    		createDebug.default = createDebug;
    		createDebug.coerce = coerce;
    		createDebug.disable = disable;
    		createDebug.enable = enable;
    		createDebug.enabled = enabled;
    		createDebug.humanize = ms$1;
    		createDebug.destroy = destroy;

    		Object.keys(env).forEach(key => {
    			createDebug[key] = env[key];
    		});

    		/**
    		* The currently active debug mode names, and names to skip.
    		*/

    		createDebug.names = [];
    		createDebug.skips = [];

    		/**
    		* Map of special "%n" handling functions, for the debug "format" argument.
    		*
    		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    		*/
    		createDebug.formatters = {};

    		/**
    		* Selects a color for a debug namespace
    		* @param {String} namespace The namespace string for the debug instance to be colored
    		* @return {Number|String} An ANSI color code for the given namespace
    		* @api private
    		*/
    		function selectColor(namespace) {
    			let hash = 0;

    			for (let i = 0; i < namespace.length; i++) {
    				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
    				hash |= 0; // Convert to 32bit integer
    			}

    			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    		}
    		createDebug.selectColor = selectColor;

    		/**
    		* Create a debugger with the given `namespace`.
    		*
    		* @param {String} namespace
    		* @return {Function}
    		* @api public
    		*/
    		function createDebug(namespace) {
    			let prevTime;
    			let enableOverride = null;
    			let namespacesCache;
    			let enabledCache;

    			function debug(...args) {
    				// Disabled?
    				if (!debug.enabled) {
    					return;
    				}

    				const self = debug;

    				// Set `diff` timestamp
    				const curr = Number(new Date());
    				const ms = curr - (prevTime || curr);
    				self.diff = ms;
    				self.prev = prevTime;
    				self.curr = curr;
    				prevTime = curr;

    				args[0] = createDebug.coerce(args[0]);

    				if (typeof args[0] !== 'string') {
    					// Anything else let's inspect with %O
    					args.unshift('%O');
    				}

    				// Apply any `formatters` transformations
    				let index = 0;
    				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
    					// If we encounter an escaped % then don't increase the array index
    					if (match === '%%') {
    						return '%';
    					}
    					index++;
    					const formatter = createDebug.formatters[format];
    					if (typeof formatter === 'function') {
    						const val = args[index];
    						match = formatter.call(self, val);

    						// Now we need to remove `args[index]` since it's inlined in the `format`
    						args.splice(index, 1);
    						index--;
    					}
    					return match;
    				});

    				// Apply env-specific formatting (colors, etc.)
    				createDebug.formatArgs.call(self, args);

    				const logFn = self.log || createDebug.log;
    				logFn.apply(self, args);
    			}

    			debug.namespace = namespace;
    			debug.useColors = createDebug.useColors();
    			debug.color = createDebug.selectColor(namespace);
    			debug.extend = extend;
    			debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    			Object.defineProperty(debug, 'enabled', {
    				enumerable: true,
    				configurable: false,
    				get: () => {
    					if (enableOverride !== null) {
    						return enableOverride;
    					}
    					if (namespacesCache !== createDebug.namespaces) {
    						namespacesCache = createDebug.namespaces;
    						enabledCache = createDebug.enabled(namespace);
    					}

    					return enabledCache;
    				},
    				set: v => {
    					enableOverride = v;
    				}
    			});

    			// Env-specific initialization logic for debug instances
    			if (typeof createDebug.init === 'function') {
    				createDebug.init(debug);
    			}

    			return debug;
    		}

    		function extend(namespace, delimiter) {
    			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    			newDebug.log = this.log;
    			return newDebug;
    		}

    		/**
    		* Enables a debug mode by namespaces. This can include modes
    		* separated by a colon and wildcards.
    		*
    		* @param {String} namespaces
    		* @api public
    		*/
    		function enable(namespaces) {
    			createDebug.save(namespaces);
    			createDebug.namespaces = namespaces;

    			createDebug.names = [];
    			createDebug.skips = [];

    			let i;
    			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    			const len = split.length;

    			for (i = 0; i < len; i++) {
    				if (!split[i]) {
    					// ignore empty strings
    					continue;
    				}

    				namespaces = split[i].replace(/\*/g, '.*?');

    				if (namespaces[0] === '-') {
    					createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
    				} else {
    					createDebug.names.push(new RegExp('^' + namespaces + '$'));
    				}
    			}
    		}

    		/**
    		* Disable debug output.
    		*
    		* @return {String} namespaces
    		* @api public
    		*/
    		function disable() {
    			const namespaces = [
    				...createDebug.names.map(toNamespace),
    				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
    			].join(',');
    			createDebug.enable('');
    			return namespaces;
    		}

    		/**
    		* Returns true if the given mode name is enabled, false otherwise.
    		*
    		* @param {String} name
    		* @return {Boolean}
    		* @api public
    		*/
    		function enabled(name) {
    			if (name[name.length - 1] === '*') {
    				return true;
    			}

    			let i;
    			let len;

    			for (i = 0, len = createDebug.skips.length; i < len; i++) {
    				if (createDebug.skips[i].test(name)) {
    					return false;
    				}
    			}

    			for (i = 0, len = createDebug.names.length; i < len; i++) {
    				if (createDebug.names[i].test(name)) {
    					return true;
    				}
    			}

    			return false;
    		}

    		/**
    		* Convert regexp to namespace
    		*
    		* @param {RegExp} regxep
    		* @return {String} namespace
    		* @api private
    		*/
    		function toNamespace(regexp) {
    			return regexp.toString()
    				.substring(2, regexp.toString().length - 2)
    				.replace(/\.\*\?$/, '*');
    		}

    		/**
    		* Coerce `val`.
    		*
    		* @param {Mixed} val
    		* @return {Mixed}
    		* @api private
    		*/
    		function coerce(val) {
    			if (val instanceof Error) {
    				return val.stack || val.message;
    			}
    			return val;
    		}

    		/**
    		* XXX DO NOT USE. This is a temporary stub function.
    		* XXX It WILL be removed in the next major release.
    		*/
    		function destroy() {
    			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    		}

    		createDebug.enable(createDebug.load());

    		return createDebug;
    	}

    	common = setup;
    	return common;
    }

    /* eslint-env browser */

    var hasRequiredBrowser;

    function requireBrowser () {
    	if (hasRequiredBrowser) return browserExports;
    	hasRequiredBrowser = 1;
    	(function (module, exports) {
    		/**
    		 * This is the web browser implementation of `debug()`.
    		 */

    		exports.formatArgs = formatArgs;
    		exports.save = save;
    		exports.load = load;
    		exports.useColors = useColors;
    		exports.storage = localstorage();
    		exports.destroy = (() => {
    			let warned = false;

    			return () => {
    				if (!warned) {
    					warned = true;
    					console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    				}
    			};
    		})();

    		/**
    		 * Colors.
    		 */

    		exports.colors = [
    			'#0000CC',
    			'#0000FF',
    			'#0033CC',
    			'#0033FF',
    			'#0066CC',
    			'#0066FF',
    			'#0099CC',
    			'#0099FF',
    			'#00CC00',
    			'#00CC33',
    			'#00CC66',
    			'#00CC99',
    			'#00CCCC',
    			'#00CCFF',
    			'#3300CC',
    			'#3300FF',
    			'#3333CC',
    			'#3333FF',
    			'#3366CC',
    			'#3366FF',
    			'#3399CC',
    			'#3399FF',
    			'#33CC00',
    			'#33CC33',
    			'#33CC66',
    			'#33CC99',
    			'#33CCCC',
    			'#33CCFF',
    			'#6600CC',
    			'#6600FF',
    			'#6633CC',
    			'#6633FF',
    			'#66CC00',
    			'#66CC33',
    			'#9900CC',
    			'#9900FF',
    			'#9933CC',
    			'#9933FF',
    			'#99CC00',
    			'#99CC33',
    			'#CC0000',
    			'#CC0033',
    			'#CC0066',
    			'#CC0099',
    			'#CC00CC',
    			'#CC00FF',
    			'#CC3300',
    			'#CC3333',
    			'#CC3366',
    			'#CC3399',
    			'#CC33CC',
    			'#CC33FF',
    			'#CC6600',
    			'#CC6633',
    			'#CC9900',
    			'#CC9933',
    			'#CCCC00',
    			'#CCCC33',
    			'#FF0000',
    			'#FF0033',
    			'#FF0066',
    			'#FF0099',
    			'#FF00CC',
    			'#FF00FF',
    			'#FF3300',
    			'#FF3333',
    			'#FF3366',
    			'#FF3399',
    			'#FF33CC',
    			'#FF33FF',
    			'#FF6600',
    			'#FF6633',
    			'#FF9900',
    			'#FF9933',
    			'#FFCC00',
    			'#FFCC33'
    		];

    		/**
    		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
    		 * and the Firebug extension (any Firefox version) are known
    		 * to support "%c" CSS customizations.
    		 *
    		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
    		 */

    		// eslint-disable-next-line complexity
    		function useColors() {
    			// NB: In an Electron preload script, document will be defined but not fully
    			// initialized. Since we know we're in Chrome, we'll just detect this case
    			// explicitly
    			if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    				return true;
    			}

    			// Internet Explorer and Edge do not support colors.
    			if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    				return false;
    			}

    			// Is webkit? http://stackoverflow.com/a/16459606/376773
    			// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    			return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    				// Is firebug? http://stackoverflow.com/a/398120/376773
    				(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    				// Is firefox >= v31?
    				// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    				// Double check webkit in userAgent just in case we are in a worker
    				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    		}

    		/**
    		 * Colorize log arguments if enabled.
    		 *
    		 * @api public
    		 */

    		function formatArgs(args) {
    			args[0] = (this.useColors ? '%c' : '') +
    				this.namespace +
    				(this.useColors ? ' %c' : ' ') +
    				args[0] +
    				(this.useColors ? '%c ' : ' ') +
    				'+' + module.exports.humanize(this.diff);

    			if (!this.useColors) {
    				return;
    			}

    			const c = 'color: ' + this.color;
    			args.splice(1, 0, c, 'color: inherit');

    			// The final "%c" is somewhat tricky, because there could be other
    			// arguments passed either before or after the %c, so we need to
    			// figure out the correct index to insert the CSS into
    			let index = 0;
    			let lastC = 0;
    			args[0].replace(/%[a-zA-Z%]/g, match => {
    				if (match === '%%') {
    					return;
    				}
    				index++;
    				if (match === '%c') {
    					// We only are interested in the *last* %c
    					// (the user may have provided their own)
    					lastC = index;
    				}
    			});

    			args.splice(lastC, 0, c);
    		}

    		/**
    		 * Invokes `console.debug()` when available.
    		 * No-op when `console.debug` is not a "function".
    		 * If `console.debug` is not available, falls back
    		 * to `console.log`.
    		 *
    		 * @api public
    		 */
    		exports.log = console.debug || console.log || (() => {});

    		/**
    		 * Save `namespaces`.
    		 *
    		 * @param {String} namespaces
    		 * @api private
    		 */
    		function save(namespaces) {
    			try {
    				if (namespaces) {
    					exports.storage.setItem('debug', namespaces);
    				} else {
    					exports.storage.removeItem('debug');
    				}
    			} catch (error) {
    				// Swallow
    				// XXX (@Qix-) should we be logging these?
    			}
    		}

    		/**
    		 * Load `namespaces`.
    		 *
    		 * @return {String} returns the previously persisted debug modes
    		 * @api private
    		 */
    		function load() {
    			let r;
    			try {
    				r = exports.storage.getItem('debug');
    			} catch (error) {
    				// Swallow
    				// XXX (@Qix-) should we be logging these?
    			}

    			// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    			if (!r && typeof process !== 'undefined' && 'env' in process) {
    				r = process.env.DEBUG;
    			}

    			return r;
    		}

    		/**
    		 * Localstorage attempts to return the localstorage.
    		 *
    		 * This is necessary because safari throws
    		 * when a user disables cookies/localstorage
    		 * and you attempt to access it.
    		 *
    		 * @return {LocalStorage}
    		 * @api private
    		 */

    		function localstorage() {
    			try {
    				// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    				// The Browser also has localStorage in the global context.
    				return localStorage;
    			} catch (error) {
    				// Swallow
    				// XXX (@Qix-) should we be logging these?
    			}
    		}

    		module.exports = requireCommon()(exports);

    		const {formatters} = module.exports;

    		/**
    		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
    		 */

    		formatters.j = function (v) {
    			try {
    				return JSON.stringify(v);
    			} catch (error) {
    				return '[UnexpectedJSONParseError]: ' + error.message;
    			}
    		};
    } (browser, browserExports));
    	return browserExports;
    }

    var nodeExports = {};
    var node = {
      get exports(){ return nodeExports; },
      set exports(v){ nodeExports = v; },
    };

    var hasFlag;
    var hasRequiredHasFlag;

    function requireHasFlag () {
    	if (hasRequiredHasFlag) return hasFlag;
    	hasRequiredHasFlag = 1;

    	hasFlag = (flag, argv = process.argv) => {
    		const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
    		const position = argv.indexOf(prefix + flag);
    		const terminatorPosition = argv.indexOf('--');
    		return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    	};
    	return hasFlag;
    }

    var supportsColor_1;
    var hasRequiredSupportsColor;

    function requireSupportsColor () {
    	if (hasRequiredSupportsColor) return supportsColor_1;
    	hasRequiredSupportsColor = 1;
    	const os = require$$0$1;
    	const tty = require$$1$1;
    	const hasFlag = requireHasFlag();

    	const {env} = process;

    	let forceColor;
    	if (hasFlag('no-color') ||
    		hasFlag('no-colors') ||
    		hasFlag('color=false') ||
    		hasFlag('color=never')) {
    		forceColor = 0;
    	} else if (hasFlag('color') ||
    		hasFlag('colors') ||
    		hasFlag('color=true') ||
    		hasFlag('color=always')) {
    		forceColor = 1;
    	}

    	if ('FORCE_COLOR' in env) {
    		if (env.FORCE_COLOR === 'true') {
    			forceColor = 1;
    		} else if (env.FORCE_COLOR === 'false') {
    			forceColor = 0;
    		} else {
    			forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    		}
    	}

    	function translateLevel(level) {
    		if (level === 0) {
    			return false;
    		}

    		return {
    			level,
    			hasBasic: true,
    			has256: level >= 2,
    			has16m: level >= 3
    		};
    	}

    	function supportsColor(haveStream, streamIsTTY) {
    		if (forceColor === 0) {
    			return 0;
    		}

    		if (hasFlag('color=16m') ||
    			hasFlag('color=full') ||
    			hasFlag('color=truecolor')) {
    			return 3;
    		}

    		if (hasFlag('color=256')) {
    			return 2;
    		}

    		if (haveStream && !streamIsTTY && forceColor === undefined) {
    			return 0;
    		}

    		const min = forceColor || 0;

    		if (env.TERM === 'dumb') {
    			return min;
    		}

    		if (process.platform === 'win32') {
    			// Windows 10 build 10586 is the first Windows release that supports 256 colors.
    			// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
    			const osRelease = os.release().split('.');
    			if (
    				Number(osRelease[0]) >= 10 &&
    				Number(osRelease[2]) >= 10586
    			) {
    				return Number(osRelease[2]) >= 14931 ? 3 : 2;
    			}

    			return 1;
    		}

    		if ('CI' in env) {
    			if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
    				return 1;
    			}

    			return min;
    		}

    		if ('TEAMCITY_VERSION' in env) {
    			return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    		}

    		if (env.COLORTERM === 'truecolor') {
    			return 3;
    		}

    		if ('TERM_PROGRAM' in env) {
    			const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    			switch (env.TERM_PROGRAM) {
    				case 'iTerm.app':
    					return version >= 3 ? 3 : 2;
    				case 'Apple_Terminal':
    					return 2;
    				// No default
    			}
    		}

    		if (/-256(color)?$/i.test(env.TERM)) {
    			return 2;
    		}

    		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    			return 1;
    		}

    		if ('COLORTERM' in env) {
    			return 1;
    		}

    		return min;
    	}

    	function getSupportLevel(stream) {
    		const level = supportsColor(stream, stream && stream.isTTY);
    		return translateLevel(level);
    	}

    	supportsColor_1 = {
    		supportsColor: getSupportLevel,
    		stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    		stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    	};
    	return supportsColor_1;
    }

    /**
     * Module dependencies.
     */

    var hasRequiredNode;

    function requireNode () {
    	if (hasRequiredNode) return nodeExports;
    	hasRequiredNode = 1;
    	(function (module, exports) {
    		const tty = require$$1$1;
    		const util = require$$2;

    		/**
    		 * This is the Node.js implementation of `debug()`.
    		 */

    		exports.init = init;
    		exports.log = log;
    		exports.formatArgs = formatArgs;
    		exports.save = save;
    		exports.load = load;
    		exports.useColors = useColors;
    		exports.destroy = util.deprecate(
    			() => {},
    			'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
    		);

    		/**
    		 * Colors.
    		 */

    		exports.colors = [6, 2, 3, 4, 5, 1];

    		try {
    			// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    			// eslint-disable-next-line import/no-extraneous-dependencies
    			const supportsColor = requireSupportsColor();

    			if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
    				exports.colors = [
    					20,
    					21,
    					26,
    					27,
    					32,
    					33,
    					38,
    					39,
    					40,
    					41,
    					42,
    					43,
    					44,
    					45,
    					56,
    					57,
    					62,
    					63,
    					68,
    					69,
    					74,
    					75,
    					76,
    					77,
    					78,
    					79,
    					80,
    					81,
    					92,
    					93,
    					98,
    					99,
    					112,
    					113,
    					128,
    					129,
    					134,
    					135,
    					148,
    					149,
    					160,
    					161,
    					162,
    					163,
    					164,
    					165,
    					166,
    					167,
    					168,
    					169,
    					170,
    					171,
    					172,
    					173,
    					178,
    					179,
    					184,
    					185,
    					196,
    					197,
    					198,
    					199,
    					200,
    					201,
    					202,
    					203,
    					204,
    					205,
    					206,
    					207,
    					208,
    					209,
    					214,
    					215,
    					220,
    					221
    				];
    			}
    		} catch (error) {
    			// Swallow - we only care if `supports-color` is available; it doesn't have to be.
    		}

    		/**
    		 * Build up the default `inspectOpts` object from the environment variables.
    		 *
    		 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
    		 */

    		exports.inspectOpts = Object.keys(process.env).filter(key => {
    			return /^debug_/i.test(key);
    		}).reduce((obj, key) => {
    			// Camel-case
    			const prop = key
    				.substring(6)
    				.toLowerCase()
    				.replace(/_([a-z])/g, (_, k) => {
    					return k.toUpperCase();
    				});

    			// Coerce string value into JS value
    			let val = process.env[key];
    			if (/^(yes|on|true|enabled)$/i.test(val)) {
    				val = true;
    			} else if (/^(no|off|false|disabled)$/i.test(val)) {
    				val = false;
    			} else if (val === 'null') {
    				val = null;
    			} else {
    				val = Number(val);
    			}

    			obj[prop] = val;
    			return obj;
    		}, {});

    		/**
    		 * Is stdout a TTY? Colored output is enabled when `true`.
    		 */

    		function useColors() {
    			return 'colors' in exports.inspectOpts ?
    				Boolean(exports.inspectOpts.colors) :
    				tty.isatty(process.stderr.fd);
    		}

    		/**
    		 * Adds ANSI color escape codes if enabled.
    		 *
    		 * @api public
    		 */

    		function formatArgs(args) {
    			const {namespace: name, useColors} = this;

    			if (useColors) {
    				const c = this.color;
    				const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
    				const prefix = `  ${colorCode};1m${name} \u001B[0m`;

    				args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    				args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    			} else {
    				args[0] = getDate() + name + ' ' + args[0];
    			}
    		}

    		function getDate() {
    			if (exports.inspectOpts.hideDate) {
    				return '';
    			}
    			return new Date().toISOString() + ' ';
    		}

    		/**
    		 * Invokes `util.format()` with the specified arguments and writes to stderr.
    		 */

    		function log(...args) {
    			return process.stderr.write(util.format(...args) + '\n');
    		}

    		/**
    		 * Save `namespaces`.
    		 *
    		 * @param {String} namespaces
    		 * @api private
    		 */
    		function save(namespaces) {
    			if (namespaces) {
    				process.env.DEBUG = namespaces;
    			} else {
    				// If you set a process.env field to null or undefined, it gets cast to the
    				// string 'null' or 'undefined'. Just delete instead.
    				delete process.env.DEBUG;
    			}
    		}

    		/**
    		 * Load `namespaces`.
    		 *
    		 * @return {String} returns the previously persisted debug modes
    		 * @api private
    		 */

    		function load() {
    			return process.env.DEBUG;
    		}

    		/**
    		 * Init logic for `debug` instances.
    		 *
    		 * Create a new `inspectOpts` object in case `useColors` is set
    		 * differently for a particular `debug` instance.
    		 */

    		function init(debug) {
    			debug.inspectOpts = {};

    			const keys = Object.keys(exports.inspectOpts);
    			for (let i = 0; i < keys.length; i++) {
    				debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    			}
    		}

    		module.exports = requireCommon()(exports);

    		const {formatters} = module.exports;

    		/**
    		 * Map %o to `util.inspect()`, all on a single line.
    		 */

    		formatters.o = function (v) {
    			this.inspectOpts.colors = this.useColors;
    			return util.inspect(v, this.inspectOpts)
    				.split('\n')
    				.map(str => str.trim())
    				.join(' ');
    		};

    		/**
    		 * Map %O to `util.inspect()`, allowing multiple lines if needed.
    		 */

    		formatters.O = function (v) {
    			this.inspectOpts.colors = this.useColors;
    			return util.inspect(v, this.inspectOpts);
    		};
    } (node, nodeExports));
    	return nodeExports;
    }

    /**
     * Detect Electron renderer / nwjs process, which is node, but we should
     * treat as a browser.
     */

    (function (module) {
    	if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
    		module.exports = requireBrowser();
    	} else {
    		module.exports = requireNode();
    	}
    } (src));

    const fastq$1 = queueExports;
    const EE$1 = require$$1$2.EventEmitter;
    const inherits$3 = require$$2.inherits;
    const debug$3 = srcExports('avvio');
    const { AVV_ERR_READY_TIMEOUT: AVV_ERR_READY_TIMEOUT$1 } = errors$4;

    // this symbol is assigned by fastify-plugin
    const kPluginMeta = Symbol.for('plugin-meta');

    function getName (func, optsOrFunc) {
      // use explicit function metadata if set
      if (func[kPluginMeta] && func[kPluginMeta].name) {
        return func[kPluginMeta].name
      }

      if (typeof optsOrFunc !== 'undefined' && typeof optsOrFunc !== 'function' && optsOrFunc.name) {
        return optsOrFunc.name
      }

      // use the function name if it exists
      if (func.name) {
        return func.name
      }

      // takes the first two lines of the function if nothing else works
      return func.toString().split('\n').slice(0, 2).map(s => s.trim()).join(' -- ')
    }

    function promise () {
      const obj = {};

      obj.promise = new Promise((resolve, reject) => {
        obj.resolve = resolve;
        obj.reject = reject;
      });

      return obj
    }

    function Plugin$1 (parent, func, optsOrFunc, isAfter, timeout) {
      this.started = false;
      this.func = func;
      this.opts = optsOrFunc;
      this.onFinish = null;
      this.parent = parent;
      this.timeout = timeout === undefined ? parent._timeout : timeout;
      this.name = getName(func, optsOrFunc);
      this.isAfter = isAfter;
      this.q = fastq$1(parent, loadPluginNextTick, 1);
      this.q.pause();
      this._error = null;
      this.loaded = false;
      this._promise = null;

      // always start the queue in the next tick
      // because we try to attach subsequent call to use()
      // to the right plugin. we need to defer them,
      // or they will end up at the top of _current
    }

    inherits$3(Plugin$1, EE$1);

    Plugin$1.prototype.exec = function (server, cb) {
      const func = this.func;
      let completed = false;
      const name = this.name;

      if (this.parent._error && !this.isAfter) {
        debug$3('skipping loading of plugin as parent errored and it is not an after', name);
        process.nextTick(cb);
        return
      }

      if (!this.isAfter) {
        // Skip override for after
        try {
          this.server = this.parent.override(server, func, this.opts);
        } catch (err) {
          debug$3('override errored', name);
          return cb(err)
        }
      } else {
        this.server = server;
      }

      this.opts = typeof this.opts === 'function' ? this.opts(this.server) : this.opts;

      debug$3('exec', name);

      let timer;

      const done = (err) => {
        if (completed) {
          debug$3('loading complete', name);
          return
        }

        this._error = err;

        if (err) {
          debug$3('exec errored', name);
        } else {
          debug$3('exec completed', name);
        }

        completed = true;

        if (timer) {
          clearTimeout(timer);
        }

        cb(err);
      };

      if (this.timeout > 0) {
        debug$3('setting up timeout', name, this.timeout);
        timer = setTimeout(function () {
          debug$3('timed out', name);
          timer = null;
          const err = new AVV_ERR_READY_TIMEOUT$1(name);
          err.fn = func;
          done(err);
        }, this.timeout);
      }

      this.started = true;
      this.emit('start', this.server ? this.server.name : null, this.name, Date.now());
      const promise = func(this.server, this.opts, done);

      if (promise && typeof promise.then === 'function') {
        debug$3('exec: resolving promise', name);

        promise.then(
          () => process.nextTick(done),
          (e) => process.nextTick(done, e));
      }
    };

    Plugin$1.prototype.loadedSoFar = function () {
      if (this.loaded) {
        return Promise.resolve()
      }

      const setup = () => {
        this.server.after((err, cb) => {
          this._error = err;
          this.q.pause();

          if (err) {
            debug$3('rejecting promise', this.name, err);
            this._promise.reject(err);
          } else {
            debug$3('resolving promise', this.name);
            this._promise.resolve();
          }
          this._promise = null;

          process.nextTick(cb, err);
        });
        this.q.resume();
      };

      let res;

      if (!this._promise) {
        this._promise = promise();
        res = this._promise.promise;

        if (!this.server) {
          this.on('start', setup);
        } else {
          setup();
        }
      } else {
        res = Promise.resolve();
      }

      return res
    };

    Plugin$1.prototype.enqueue = function (obj, cb) {
      debug$3('enqueue', this.name, obj.name);
      this.emit('enqueue', this.server ? this.server.name : null, this.name, Date.now());
      this.q.push(obj, cb);
    };

    Plugin$1.prototype.finish = function (err, cb) {
      debug$3('finish', this.name, err);
      const done = () => {
        if (this.loaded) {
          return
        }

        debug$3('loaded', this.name);
        this.emit('loaded', this.server ? this.server.name : null, this.name, Date.now());
        this.loaded = true;

        cb(err);
      };

      if (err) {
        if (this._promise) {
          this._promise.reject(err);
          this._promise = null;
        }
        done();
        return
      }

      const check = () => {
        debug$3('check', this.name, this.q.length(), this.q.running(), this._promise);
        if (this.q.length() === 0 && this.q.running() === 0) {
          if (this._promise) {
            const wrap = () => {
              debug$3('wrap');
              queueMicrotask(check);
            };
            this._promise.resolve();
            this._promise.promise.then(wrap, wrap);
            this._promise = null;
          } else {
            done();
          }
        } else {
          debug$3('delayed', this.name);
          // finish when the queue of nested plugins to load is empty
          this.q.drain = () => {
            debug$3('drain', this.name);
            this.q.drain = noop$8;

            // we defer the check, as a safety net for things
            // that might be scheduled in the loading callback
            queueMicrotask(check);
          };
        }
      };

      queueMicrotask(check);

      // we start loading the dependents plugins only once
      // the current level is finished
      this.q.resume();
    };

    // delays plugin loading until the next tick to ensure any bound `_after` callbacks have a chance
    // to run prior to executing the next plugin
    function loadPluginNextTick (toLoad, cb) {
      const parent = this;
      process.nextTick(loadPlugin.bind(parent), toLoad, cb);
    }

    // loads a plugin
    function loadPlugin (toLoad, cb) {
      if (typeof toLoad.func.then === 'function') {
        toLoad.func.then((fn) => {
          if (typeof fn.default === 'function') {
            fn = fn.default;
          }
          toLoad.func = fn;
          loadPlugin.call(this, toLoad, cb);
        }, cb);
        return
      }

      const last = this._current[0];

      // place the plugin at the top of _current
      this._current.unshift(toLoad);

      toLoad.exec((last && last.server) || this._server, (err) => {
        toLoad.finish(err, (err) => {
          this._current.shift();
          cb(err);
        });
      });
    }

    function noop$8 () {}

    plugin.exports = Plugin$1;
    pluginExports.loadPlugin = loadPlugin;

    const fastq = queueExports;
    const EE = require$$1$2.EventEmitter;
    const inherits$2 = require$$2.inherits;
    const {
      AVV_ERR_EXPOSE_ALREADY_DEFINED,
      AVV_ERR_CALLBACK_NOT_FN,
      AVV_ERR_PLUGIN_NOT_VALID,
      AVV_ERR_ROOT_PLG_BOOTED,
      AVV_ERR_READY_TIMEOUT
    } = errors$4;
    const TimeTree = timeTree;
    const Plugin = pluginExports;
    const debug$2 = srcExports('avvio');
    const kAvvio = Symbol('kAvvio');
    const kThenifyDoNotWrap = Symbol('kThenifyDoNotWrap');

    function wrap (server, opts, instance) {
      const expose = opts.expose || {};
      const useKey = expose.use || 'use';
      const afterKey = expose.after || 'after';
      const readyKey = expose.ready || 'ready';
      const onCloseKey = expose.onClose || 'onClose';
      const closeKey = expose.close || 'close';

      if (server[useKey]) {
        throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(useKey)
      }

      if (server[afterKey]) {
        throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(afterKey)
      }

      if (server[readyKey]) {
        throw new AVV_ERR_EXPOSE_ALREADY_DEFINED(readyKey)
      }

      server[useKey] = function (fn, opts) {
        instance.use(fn, opts);
        return this
      };

      Object.defineProperty(server, 'then', { get: thenify.bind(instance) });
      server[kAvvio] = true;

      server[afterKey] = function (func) {
        if (typeof func !== 'function') {
          return instance._loadRegistered()
        }
        instance.after(encapsulateThreeParam(func, this));
        return this
      };

      server[readyKey] = function (func) {
        if (func && typeof func !== 'function') {
          throw new AVV_ERR_CALLBACK_NOT_FN(readyKey, typeof func)
        }
        return instance.ready(func ? encapsulateThreeParam(func, this) : undefined)
      };

      server[onCloseKey] = function (func) {
        if (typeof func !== 'function') {
          throw new AVV_ERR_CALLBACK_NOT_FN(onCloseKey, typeof func)
        }
        instance.onClose(encapsulateTwoParam(func, this));
        return this
      };

      server[closeKey] = function (func) {
        if (func && typeof func !== 'function') {
          throw new AVV_ERR_CALLBACK_NOT_FN(closeKey, typeof func)
        }

        if (func) {
          instance.close(encapsulateThreeParam(func, this));
          return this
        }

        // this is a Promise
        return instance.close()
      };
    }

    function Boot (server, opts, done) {
      if (typeof server === 'function' && arguments.length === 1) {
        done = server;
        opts = {};
        server = null;
      }

      if (typeof opts === 'function') {
        done = opts;
        opts = {};
      }

      opts = opts || {};

      if (!(this instanceof Boot)) {
        const instance = new Boot(server, opts, done);

        if (server) {
          wrap(server, opts, instance);
        }

        return instance
      }

      if (opts.autostart !== false) {
        opts.autostart = true;
      }

      server = server || this;

      this._timeout = Number(opts.timeout) || 0;
      this._server = server;
      this._current = [];
      this._error = null;
      this._isOnCloseHandlerKey = Symbol('isOnCloseHandler');
      this._lastUsed = null;

      this.setMaxListeners(0);

      if (done) {
        this.once('start', done);
      }

      this.started = false;
      this.booted = false;
      this.pluginTree = new TimeTree();

      this._readyQ = fastq(this, callWithCbOrNextTick, 1);
      this._readyQ.pause();
      this._readyQ.drain = () => {
        this.emit('start');
        // nooping this, we want to emit start only once
        this._readyQ.drain = noop$7;
      };

      this._closeQ = fastq(this, closeWithCbOrNextTick, 1);
      this._closeQ.pause();
      this._closeQ.drain = () => {
        this.emit('close');
        // nooping this, we want to emit close only once
        this._closeQ.drain = noop$7;
      };

      this._doStart = null;
      this._root = new Plugin(this, root.bind(this), opts, false, 0);
      this._root.once('start', (serverName, funcName, time) => {
        const nodeId = this.pluginTree.start(null, funcName, time);
        this._root.once('loaded', (serverName, funcName, time) => {
          this.pluginTree.stop(nodeId, time);
        });
      });

      Plugin.loadPlugin.call(this, this._root, (err) => {
        debug$2('root plugin ready');
        try {
          this.emit('preReady');
          this._root = null;
        } catch (prereadyError) {
          err = err || this._error || prereadyError;
        }

        if (err) {
          this._error = err;
          if (this._readyQ.length() === 0) {
            throw err
          }
        } else {
          this.booted = true;
        }
        this._readyQ.resume();
      });
    }

    function root (s, opts, done) {
      this._doStart = done;
      if (opts.autostart) {
        this.start();
      }
    }

    inherits$2(Boot, EE);

    Boot.prototype.start = function () {
      this.started = true;

      // we need to wait any call to use() to happen
      process.nextTick(this._doStart);
      return this
    };

    // allows to override the instance of a server, given a plugin
    Boot.prototype.override = function (server, func, opts) {
      return server
    };

    function assertPlugin (plugin) {
      // Faux modules are modules built with TypeScript
      // or Babel that they export a .default property.
      if (plugin && typeof plugin === 'object' && typeof plugin.default === 'function') {
        plugin = plugin.default;
      }
      if (!(plugin && (typeof plugin === 'function' || typeof plugin.then === 'function'))) {
        throw new AVV_ERR_PLUGIN_NOT_VALID(typeof plugin)
      }
      return plugin
    }

    Boot.prototype[kAvvio] = true;

    // load a plugin
    Boot.prototype.use = function (plugin, opts) {
      this._lastUsed = this._addPlugin(plugin, opts, false);
      return this
    };

    Boot.prototype._loadRegistered = function () {
      const plugin = this._current[0];
      const weNeedToStart = !this.started && !this.booted;

      // if the root plugin is not loaded, let's resume that
      // so one can use after() befor calling ready
      if (weNeedToStart) {
        process.nextTick(() => this._root.q.resume());
      }

      if (!plugin) {
        return Promise.resolve()
      }

      return plugin.loadedSoFar()
    };

    Object.defineProperty(Boot.prototype, 'then', { get: thenify });

    Boot.prototype._addPlugin = function (plugin, opts, isAfter) {
      plugin = assertPlugin(plugin);
      opts = opts || {};

      if (this.booted) {
        throw new AVV_ERR_ROOT_PLG_BOOTED()
      }

      // we always add plugins to load at the current element
      const current = this._current[0];

      const obj = new Plugin(this, plugin, opts, isAfter);
      obj.once('start', (serverName, funcName, time) => {
        const nodeId = this.pluginTree.start(current.name, funcName, time);
        obj.once('loaded', (serverName, funcName, time) => {
          this.pluginTree.stop(nodeId, time);
        });
      });

      if (current.loaded) {
        throw new Error(obj.name, current.name)
      }

      // we add the plugin to be loaded at the end of the current queue
      current.enqueue(obj, (err) => {
        if (err) {
          this._error = err;
        }
      });

      return obj
    };

    Boot.prototype.after = function (func) {
      if (!func) {
        return this._loadRegistered()
      }

      this._addPlugin(_after.bind(this), {}, true);

      function _after (s, opts, done) {
        callWithCbOrNextTick.call(this, func, done);
      }

      return this
    };

    Boot.prototype.onClose = function (func) {
      // this is used to distinguish between onClose and close handlers
      // because they share the same queue but must be called with different signatures

      if (typeof func !== 'function') {
        throw new Error('not a function')
      }

      func[this._isOnCloseHandlerKey] = true;
      this._closeQ.unshift(func, callback.bind(this));

      function callback (err) {
        if (err) this._error = err;
      }

      return this
    };

    Boot.prototype.close = function (func) {
      let promise;

      if (func) {
        if (typeof func !== 'function') {
          throw new AVV_ERR_CALLBACK_NOT_FN('close', typeof func)
        }
      } else {
        promise = new Promise(function (resolve, reject) {
          func = function (err) {
            if (err) {
              return reject(err)
            }
            resolve();
          };
        });
      }

      this.ready(() => {
        this._error = null;
        this._closeQ.push(func);
        process.nextTick(this._closeQ.resume.bind(this._closeQ));
      });

      return promise
    };

    Boot.prototype.ready = function (func) {
      if (func) {
        if (typeof func !== 'function') {
          throw new AVV_ERR_CALLBACK_NOT_FN('ready', typeof func)
        }
        this._readyQ.push(func);
        queueMicrotask(this.start.bind(this));
        return
      }

      return new Promise((resolve, reject) => {
        this._readyQ.push(readyPromiseCB);
        this.start();

        /**
         * The `encapsulateThreeParam` let callback function
         * bind to the right server instance.
         * In promises we need to track the last server
         * instance loaded, the first one in the _current queue.
         */
        const relativeContext = this._current[0].server;

        function readyPromiseCB (err, context, done) {
          // the context is always binded to the root server
          if (err) {
            reject(err);
          } else {
            resolve(relativeContext);
          }
          process.nextTick(done);
        }
      })
    };

    Boot.prototype.prettyPrint = function () {
      return this.pluginTree.prittyPrint()
    };

    Boot.prototype.toJSON = function () {
      return this.pluginTree.toJSON()
    };

    function noop$7 () { }

    function thenify () {
      // If the instance is ready, then there is
      // nothing to await. This is true during
      // await server.ready() as ready() resolves
      // with the server, end we will end up here
      // because of automatic promise chaining.
      if (this.booted) {
        debug$2('thenify returning null because we are already booted');
        return
      }

      // Calling resolve(this._server) would fetch the then
      // property on the server, which will lead it here.
      // If we do not break the recursion, we will loop
      // forever.
      if (this[kThenifyDoNotWrap]) {
        this[kThenifyDoNotWrap] = false;
        return
      }

      debug$2('thenify');
      return (resolve, reject) => {
        const p = this._loadRegistered();
        return p.then(() => {
          this[kThenifyDoNotWrap] = true;
          return resolve(this._server)
        }, reject)
      }
    }

    function callWithCbOrNextTick (func, cb, context) {
      context = this._server;
      const err = this._error;
      let res;

      // with this the error will appear just in the next after/ready callback
      this._error = null;
      if (func.length === 0) {
        this._error = err;
        res = func();
        if (res && !res[kAvvio] && typeof res.then === 'function') {
          res.then(() => process.nextTick(cb), (e) => process.nextTick(cb, e));
        } else {
          process.nextTick(cb);
        }
      } else if (func.length === 1) {
        res = func(err);
        if (res && !res[kAvvio] && typeof res.then === 'function') {
          res.then(() => process.nextTick(cb), (e) => process.nextTick(cb, e));
        } else {
          process.nextTick(cb);
        }
      } else {
        if (this._timeout === 0) {
          if (func.length === 2) {
            func(err, cb);
          } else {
            func(err, context, cb);
          }
        } else {
          timeoutCall.call(this, func, err, context, cb);
        }
      }
    }

    function timeoutCall (func, rootErr, context, cb) {
      const name = func.name;
      debug$2('setting up ready timeout', name, this._timeout);
      let timer = setTimeout(() => {
        debug$2('timed out', name);
        timer = null;
        const toutErr = new AVV_ERR_READY_TIMEOUT(name);
        toutErr.fn = func;
        this._error = toutErr;
        cb(toutErr);
      }, this._timeout);

      if (func.length === 2) {
        func(rootErr, timeoutCb.bind(this));
      } else {
        func(rootErr, context, timeoutCb.bind(this));
      }

      function timeoutCb (err) {
        if (timer) {
          clearTimeout(timer);
          this._error = err;
          cb(this._error);
        }
      }
    }

    function closeWithCbOrNextTick (func, cb, context) {
      context = this._server;
      const isOnCloseHandler = func[this._isOnCloseHandlerKey];
      if (func.length === 0 || func.length === 1) {
        let promise;
        if (isOnCloseHandler) {
          promise = func(context);
        } else {
          promise = func(this._error);
        }
        if (promise && typeof promise.then === 'function') {
          debug$2('resolving close/onClose promise');
          promise.then(
            () => process.nextTick(cb),
            (e) => process.nextTick(cb, e));
        } else {
          process.nextTick(cb);
        }
      } else if (func.length === 2) {
        if (isOnCloseHandler) {
          func(context, cb);
        } else {
          func(this._error, cb);
        }
      } else {
        if (isOnCloseHandler) {
          func(context, cb);
        } else {
          func(this._error, context, cb);
        }
      }
    }

    function encapsulateTwoParam (func, that) {
      return _encapsulateTwoParam.bind(that)
      function _encapsulateTwoParam (context, cb) {
        let res;
        if (func.length === 0) {
          res = func();
          if (res && res.then) {
            res.then(function () {
              process.nextTick(cb);
            }, cb);
          } else {
            process.nextTick(cb);
          }
        } else if (func.length === 1) {
          res = func(this);

          if (res && res.then) {
            res.then(function () {
              process.nextTick(cb);
            }, cb);
          } else {
            process.nextTick(cb);
          }
        } else {
          func(this, cb);
        }
      }
    }

    function encapsulateThreeParam (func, that) {
      return _encapsulateThreeParam.bind(that)
      function _encapsulateThreeParam (err, cb) {
        let res;
        if (!func) {
          process.nextTick(cb);
        } else if (func.length === 0) {
          res = func();
          if (res && res.then) {
            res.then(function () {
              process.nextTick(cb, err);
            }, cb);
          } else {
            process.nextTick(cb, err);
          }
        } else if (func.length === 1) {
          res = func(err);
          if (res && res.then) {
            res.then(function () {
              process.nextTick(cb);
            }, cb);
          } else {
            process.nextTick(cb);
          }
        } else if (func.length === 2) {
          func(err, cb);
        } else {
          func(err, this, cb);
        }
      }
    }

    boot.exports = Boot;
    bootExports.express = function (app) {
      return Boot(app, {
        expose: {
          use: 'load'
        }
      })
    };

    const keys = {
      kAvvioBoot: Symbol('fastify.avvioBoot'),
      kChildren: Symbol('fastify.children'),
      kServerBindings: Symbol('fastify.serverBindings'),
      kBodyLimit: Symbol('fastify.bodyLimit'),
      kRoutePrefix: Symbol('fastify.routePrefix'),
      kLogLevel: Symbol('fastify.logLevel'),
      kLogSerializers: Symbol('fastify.logSerializers'),
      kHooks: Symbol('fastify.hooks'),
      kContentTypeParser: Symbol('fastify.contentTypeParser'),
      kState: Symbol('fastify.state'),
      kOptions: Symbol('fastify.options'),
      kDisableRequestLogging: Symbol('fastify.disableRequestLogging'),
      kPluginNameChain: Symbol('fastify.pluginNameChain'),
      kRouteContext: Symbol('fastify.context'),
      kPublicRouteContext: Symbol('fastify.routeOptions'),
      // Schema
      kSchemaController: Symbol('fastify.schemaController'),
      kSchemaHeaders: Symbol('headers-schema'),
      kSchemaParams: Symbol('params-schema'),
      kSchemaQuerystring: Symbol('querystring-schema'),
      kSchemaBody: Symbol('body-schema'),
      kSchemaResponse: Symbol('response-schema'),
      kSchemaErrorFormatter: Symbol('fastify.schemaErrorFormatter'),
      kSchemaVisited: Symbol('fastify.schemas.visited'),
      // Request
      kRequest: Symbol('fastify.Request'),
      kRequestValidateFns: Symbol('fastify.request.cache.validateFns'),
      kRequestPayloadStream: Symbol('fastify.RequestPayloadStream'),
      kRequestAcceptVersion: Symbol('fastify.RequestAcceptVersion'),
      // 404
      kFourOhFour: Symbol('fastify.404'),
      kCanSetNotFoundHandler: Symbol('fastify.canSetNotFoundHandler'),
      kFourOhFourLevelInstance: Symbol('fastify.404LogLevelInstance'),
      kFourOhFourContext: Symbol('fastify.404ContextKey'),
      kDefaultJsonParse: Symbol('fastify.defaultJSONParse'),
      // Reply
      kReply: Symbol('fastify.Reply'),
      kReplySerializer: Symbol('fastify.reply.serializer'),
      kReplyIsError: Symbol('fastify.reply.isError'),
      kReplyHeaders: Symbol('fastify.reply.headers'),
      kReplyTrailers: Symbol('fastify.reply.trailers'),
      kReplyHasStatusCode: Symbol('fastify.reply.hasStatusCode'),
      kReplyHijacked: Symbol('fastify.reply.hijacked'),
      kReplyStartTime: Symbol('fastify.reply.startTime'),
      kReplyNextErrorHandler: Symbol('fastify.reply.nextErrorHandler'),
      kReplyEndTime: Symbol('fastify.reply.endTime'),
      kReplyErrorHandlerCalled: Symbol('fastify.reply.errorHandlerCalled'),
      kReplyIsRunningOnErrorHook: Symbol('fastify.reply.isRunningOnErrorHook'),
      kReplySerializerDefault: Symbol('fastify.replySerializerDefault'),
      kReplySerializeWeakMap: Symbol('fastify.reply.cache.serializeFns'),
      // This symbol is only meant to be used for fastify tests and should not be used for any other purpose
      kTestInternals: Symbol('fastify.testInternals'),
      kErrorHandler: Symbol('fastify.errorHandler'),
      kHasBeenDecorated: Symbol('fastify.hasBeenDecorated'),
      kKeepAliveConnections: Symbol('fastify.keepAliveConnections'),
      kRouteByFastify: Symbol('fastify.routeByFastify')
    };

    var symbols$2 = keys;

    var server = {};

    var processWarningExports = {};
    var processWarning$1 = {
      get exports(){ return processWarningExports; },
      set exports(v){ processWarningExports = v; },
    };

    const { format: format$b } = require$$2;

    function processWarning () {
      const codes = {};
      const emitted = new Map();

      function create (name, code, message) {
        if (!name) throw new Error('Warning name must not be empty')
        if (!code) throw new Error('Warning code must not be empty')
        if (!message) throw new Error('Warning message must not be empty')

        code = code.toUpperCase();

        if (codes[code] !== undefined) {
          throw new Error(`The code '${code}' already exist`)
        }

        function buildWarnOpts (a, b, c) {
          // more performant than spread (...) operator
          let formatted;
          if (a && b && c) {
            formatted = format$b(message, a, b, c);
          } else if (a && b) {
            formatted = format$b(message, a, b);
          } else if (a) {
            formatted = format$b(message, a);
          } else {
            formatted = message;
          }

          return {
            code,
            name,
            message: formatted
          }
        }

        emitted.set(code, false);
        codes[code] = buildWarnOpts;

        return codes[code]
      }

      function emit (code, a, b, c) {
        if (emitted.get(code) === true) return
        if (codes[code] === undefined) throw new Error(`The code '${code}' does not exist`)
        emitted.set(code, true);

        const warning = codes[code](a, b, c);
        process.emitWarning(warning.message, warning.name, warning.code);
      }

      return {
        create,
        emit,
        emitted
      }
    }

    processWarning$1.exports = processWarning;
    processWarningExports.default = processWarning;
    processWarningExports.processWarning = processWarning;

    const warning$5 = processWarningExports();

    /**
     * Deprecation codes:
     *   - FSTDEP005
     */

    warning$5.create('FastifyDeprecation', 'FSTDEP005', 'You are accessing the deprecated "request.connection" property. Use "request.socket" instead.');

    warning$5.create('FastifyDeprecation', 'FSTDEP006', 'You are decorating Request/Reply with a reference type. This reference is shared amongst all requests. Use onRequest hook instead. Property: %s');

    warning$5.create('FastifyDeprecation', 'FSTDEP007', 'You are trying to set a HEAD route using "exposeHeadRoute" route flag when a sibling route is already set. See documentation for more info.');

    warning$5.create('FastifyDeprecation', 'FSTDEP008', 'You are using route constraints via the route { version: "..." } option, use { constraints: { version: "..." } } option instead.');

    warning$5.create('FastifyDeprecation', 'FSTDEP009', 'You are using a custom route versioning strategy via the server { versioning: "..." } option, use { constraints: { version: "..." } } option instead.');

    warning$5.create('FastifyDeprecation', 'FSTDEP010', 'Modifying the "reply.sent" property is deprecated. Use the "reply.hijack()" method instead.');

    warning$5.create('FastifyDeprecation', 'FSTDEP011', 'Variadic listen method is deprecated. Please use ".listen(optionsObject)" instead. The variadic signature will be removed in `fastify@5`.');

    warning$5.create('FastifyDeprecation', 'FSTDEP012', 'Request#context property access is deprecated. Please use "Request#routeConfig" or "Request#routeSchema" instead for accessing Route settings. The "Request#context" will be removed in `fastify@5`.');

    warning$5.create('FastifyDeprecation', 'FSTDEP013', 'Direct return of "trailers" function is deprecated. Please use "callback" or "async-await" for return value. The support of direct return will removed in `fastify@5`.');

    warning$5.create('FastifyDeprecation', 'FSTDEP014', 'You are trying to set/access the default route. This property is deprecated. Please, use setNotFoundHandler if you want to custom a 404 handler or the wildcard (*) to match all routes.');

    var warnings$1 = warning$5;

    var errorsExports = {};
    var errors$3 = {
      get exports(){ return errorsExports; },
      set exports(v){ errorsExports = v; },
    };

    var errorExports = {};
    var error$F = {
      get exports(){ return errorExports; },
      set exports(v){ errorExports = v; },
    };

    const { inherits: inherits$1, format: format$a } = require$$2;

    function createError$1 (code, message, statusCode = 500, Base = Error) {
      if (!code) throw new Error('Fastify error code must not be empty')
      if (!message) throw new Error('Fastify error message must not be empty')

      code = code.toUpperCase();

      function FastifyError (a, b, c) {
        if (!new.target) {
          return new FastifyError(...arguments)
        }
        Error.captureStackTrace(this, FastifyError);
        this.name = 'FastifyError';
        this.code = code;

        // more performant than spread (...) operator
        switch (arguments.length) {
          case 3:
            this.message = format$a(message, a, b, c);
            break
          case 2:
            this.message = format$a(message, a, b);
            break
          case 1:
            this.message = format$a(message, a);
            break
          case 0:
            this.message = message;
            break
          default:
            this.message = format$a(message, ...arguments);
        }

        this.statusCode = statusCode || undefined;
      }
      FastifyError.prototype[Symbol.toStringTag] = 'Error';

      FastifyError.prototype.toString = function () {
        return `${this.name} [${this.code}]: ${this.message}`
      };

      inherits$1(FastifyError, Base);

      return FastifyError
    }

    error$F.exports = createError$1;
    errorExports.default = createError$1;
    errorExports.createError = createError$1;

    const createError = errorExports;

    const codes = {
      /**
       * Basic
       */
      FST_ERR_NOT_FOUND: createError(
        'FST_ERR_NOT_FOUND',
        'Not Found',
        404
      ),

      /**
       * ContentTypeParser
      */
      FST_ERR_CTP_ALREADY_PRESENT: createError(
        'FST_ERR_CTP_ALREADY_PRESENT',
        "Content type parser '%s' already present."
      ),
      FST_ERR_CTP_INVALID_TYPE: createError(
        'FST_ERR_CTP_INVALID_TYPE',
        'The content type should be a string or a RegExp',
        500,
        TypeError
      ),
      FST_ERR_CTP_EMPTY_TYPE: createError(
        'FST_ERR_CTP_EMPTY_TYPE',
        'The content type cannot be an empty string',
        500,
        TypeError
      ),
      FST_ERR_CTP_INVALID_HANDLER: createError(
        'FST_ERR_CTP_INVALID_HANDLER',
        'The content type handler should be a function',
        500,
        TypeError
      ),
      FST_ERR_CTP_INVALID_PARSE_TYPE: createError(
        'FST_ERR_CTP_INVALID_PARSE_TYPE',
        "The body parser can only parse your data as 'string' or 'buffer', you asked '%s' which is not supported.",
        500,
        TypeError
      ),
      FST_ERR_CTP_BODY_TOO_LARGE: createError(
        'FST_ERR_CTP_BODY_TOO_LARGE',
        'Request body is too large',
        413,
        RangeError
      ),
      FST_ERR_CTP_INVALID_MEDIA_TYPE: createError(
        'FST_ERR_CTP_INVALID_MEDIA_TYPE',
        'Unsupported Media Type: %s',
        415
      ),
      FST_ERR_CTP_INVALID_CONTENT_LENGTH: createError(
        'FST_ERR_CTP_INVALID_CONTENT_LENGTH',
        'Request body size did not match Content-Length',
        400,
        RangeError
      ),
      FST_ERR_CTP_EMPTY_JSON_BODY: createError(
        'FST_ERR_CTP_EMPTY_JSON_BODY',
        "Body cannot be empty when content-type is set to 'application/json'",
        400
      ),

      /**
       * decorate
      */
      FST_ERR_DEC_ALREADY_PRESENT: createError(
        'FST_ERR_DEC_ALREADY_PRESENT',
        "The decorator '%s' has already been added!"
      ),
      FST_ERR_DEC_DEPENDENCY_INVALID_TYPE: createError(
        'FST_ERR_DEC_DEPENDENCY_INVALID_TYPE',
        "The dependencies of decorator '%s' must be of type Array."
      ),
      FST_ERR_DEC_MISSING_DEPENDENCY: createError(
        'FST_ERR_DEC_MISSING_DEPENDENCY',
        "The decorator is missing dependency '%s'."
      ),
      FST_ERR_DEC_AFTER_START: createError(
        'FST_ERR_DEC_AFTER_START',
        "The decorator '%s' has been added after start!"
      ),

      /**
       * hooks
      */
      FST_ERR_HOOK_INVALID_TYPE: createError(
        'FST_ERR_HOOK_INVALID_TYPE',
        'The hook name must be a string',
        500,
        TypeError
      ),
      FST_ERR_HOOK_INVALID_HANDLER: createError(
        'FST_ERR_HOOK_INVALID_HANDLER',
        '%s hook should be a function, instead got %s',
        500,
        TypeError
      ),
      FST_ERR_HOOK_INVALID_ASYNC_HANDLER: createError(
        'FST_ERR_HOOK_INVALID_ASYNC_HANDLER',
        'Async function has too many arguments. Async hooks should not use the \'done\' argument.',
        500,
        TypeError
      ),

      /**
       * Middlewares
       */
      FST_ERR_MISSING_MIDDLEWARE: createError(
        'FST_ERR_MISSING_MIDDLEWARE',
        'You must register a plugin for handling middlewares, visit fastify.io/docs/latest/Reference/Middleware/ for more info.',
        500
      ),

      FST_ERR_HOOK_TIMEOUT: createError(
        'FST_ERR_HOOK_TIMEOUT',
        "A callback for '%s' hook timed out. You may have forgotten to call 'done' function or to resolve a Promise"
      ),

      /**
       * logger
      */
      FST_ERR_LOG_INVALID_DESTINATION: createError(
        'FST_ERR_LOG_INVALID_DESTINATION',
        'Cannot specify both logger.stream and logger.file options'
      ),

      /**
       * reply
      */
      FST_ERR_REP_INVALID_PAYLOAD_TYPE: createError(
        'FST_ERR_REP_INVALID_PAYLOAD_TYPE',
        "Attempted to send payload of invalid type '%s'. Expected a string or Buffer.",
        500,
        TypeError
      ),
      FST_ERR_REP_ALREADY_SENT: createError(
        'FST_ERR_REP_ALREADY_SENT',
        'Reply was already sent.'
      ),
      FST_ERR_REP_SENT_VALUE: createError(
        'FST_ERR_REP_SENT_VALUE',
        'The only possible value for reply.sent is true.'
      ),
      FST_ERR_SEND_INSIDE_ONERR: createError(
        'FST_ERR_SEND_INSIDE_ONERR',
        'You cannot use `send` inside the `onError` hook'
      ),
      FST_ERR_SEND_UNDEFINED_ERR: createError(
        'FST_ERR_SEND_UNDEFINED_ERR',
        'Undefined error has occurred'
      ),
      FST_ERR_BAD_STATUS_CODE: createError(
        'FST_ERR_BAD_STATUS_CODE',
        'Called reply with an invalid status code: %s'
      ),
      FST_ERR_BAD_TRAILER_NAME: createError(
        'FST_ERR_BAD_TRAILER_NAME',
        'Called reply.trailer with an invalid header name: %s'
      ),
      FST_ERR_BAD_TRAILER_VALUE: createError(
        'FST_ERR_BAD_TRAILER_VALUE',
        "Called reply.trailer('%s', fn) with an invalid type: %s. Expected a function."
      ),
      FST_ERR_MISSING_SERIALIZATION_FN: createError(
        'FST_ERR_MISSING_SERIALIZATION_FN',
        'Missing serialization function. Key "%s"'
      ),
      FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN: createError(
        'FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN',
        'Missing serialization function. Key "%s:%s"'
      ),
      FST_ERR_REQ_INVALID_VALIDATION_INVOCATION: createError(
        'FST_ERR_REQ_INVALID_VALIDATION_INVOCATION',
        'Invalid validation invocation. Missing validation function for HTTP part "%s" nor schema provided.'
      ),

      /**
       * schemas
      */
      FST_ERR_SCH_MISSING_ID: createError(
        'FST_ERR_SCH_MISSING_ID',
        'Missing schema $id property'
      ),
      FST_ERR_SCH_ALREADY_PRESENT: createError(
        'FST_ERR_SCH_ALREADY_PRESENT',
        "Schema with id '%s' already declared!"
      ),
      FST_ERR_SCH_CONTENT_MISSING_SCHEMA: createError(
        'FST_ERR_SCH_CONTENT_MISSING_SCHEMA',
        "Schema is missing for the content type '%s'"
      ),
      FST_ERR_SCH_DUPLICATE: createError(
        'FST_ERR_SCH_DUPLICATE',
        "Schema with '%s' already present!"
      ),
      FST_ERR_SCH_VALIDATION_BUILD: createError(
        'FST_ERR_SCH_VALIDATION_BUILD',
        'Failed building the validation schema for %s: %s, due to error %s'
      ),
      FST_ERR_SCH_SERIALIZATION_BUILD: createError(
        'FST_ERR_SCH_SERIALIZATION_BUILD',
        'Failed building the serialization schema for %s: %s, due to error %s'
      ),

      /**
       * http2
       */
      FST_ERR_HTTP2_INVALID_VERSION: createError(
        'FST_ERR_HTTP2_INVALID_VERSION',
        'HTTP2 is available only from node >= 8.8.1'
      ),

      /**
       * initialConfig
       */
      FST_ERR_INIT_OPTS_INVALID: createError(
        'FST_ERR_INIT_OPTS_INVALID',
        "Invalid initialization options: '%s'"
      ),
      FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE: createError(
        'FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE',
        "Cannot set forceCloseConnections to 'idle' as your HTTP server does not support closeIdleConnections method"
      ),

      /**
       * router
       */
      FST_ERR_DUPLICATED_ROUTE: createError(
        'FST_ERR_DUPLICATED_ROUTE',
        "Method '%s' already declared for route '%s'"
      ),
      FST_ERR_BAD_URL: createError(
        'FST_ERR_BAD_URL',
        "'%s' is not a valid url component",
        400
      ),
      FST_ERR_ASYNC_CONSTRAINT: createError(
        'FST_ERR_ASYNC_CONSTRAINT',
        'Unexpected error from async constraint',
        500
      ),
      FST_ERR_DEFAULT_ROUTE_INVALID_TYPE: createError(
        'FST_ERR_DEFAULT_ROUTE_INVALID_TYPE',
        'The defaultRoute type should be a function',
        500,
        TypeError
      ),
      FST_ERR_INVALID_URL: createError(
        'FST_ERR_INVALID_URL',
        "URL must be a string. Received '%s'",
        400
      ),

      /**
       *  again listen when close server
       */
      FST_ERR_REOPENED_CLOSE_SERVER: createError(
        'FST_ERR_REOPENED_CLOSE_SERVER',
        'Fastify has already been closed and cannot be reopened'
      ),
      FST_ERR_REOPENED_SERVER: createError(
        'FST_ERR_REOPENED_SERVER',
        'Fastify is already listening'
      ),

      /**
       * plugin
       */
      FST_ERR_PLUGIN_VERSION_MISMATCH: createError(
        'FST_ERR_PLUGIN_VERSION_MISMATCH',
        "fastify-plugin: %s - expected '%s' fastify version, '%s' is installed"
      ),

      /**
       *  Avvio Errors
       */
      FST_ERR_PLUGIN_CALLBACK_NOT_FN: createError(
        'FST_ERR_PLUGIN_CALLBACK_NOT_FN',
        'fastify-plugin: %s'
      ),
      FST_ERR_PLUGIN_NOT_VALID: createError(
        'FST_ERR_PLUGIN_NOT_VALID',
        'fastify-plugin: %s'
      ),
      FST_ERR_ROOT_PLG_BOOTED: createError(
        'FST_ERR_ROOT_PLG_BOOTED',
        'fastify-plugin: %s'
      ),
      FST_ERR_PARENT_PLUGIN_BOOTED: createError(
        'FST_ERR_PARENT_PLUGIN_BOOTED',
        'fastify-plugin: %s'
      ),
      FST_ERR_PLUGIN_TIMEOUT: createError(
        'FST_ERR_PLUGIN_TIMEOUT',
        'fastify-plugin: %s'
      )
    };

    function appendStackTrace$2 (oldErr, newErr) {
      newErr.cause = oldErr;

      return newErr
    }

    errors$3.exports = codes;
    errorsExports.appendStackTrace = appendStackTrace$2;
    errorsExports.AVVIO_ERRORS_MAP = {
      AVV_ERR_CALLBACK_NOT_FN: codes.FST_ERR_PLUGIN_CALLBACK_NOT_FN,
      AVV_ERR_PLUGIN_NOT_VALID: codes.FST_ERR_PLUGIN_NOT_VALID,
      AVV_ERR_ROOT_PLG_BOOTED: codes.FST_ERR_ROOT_PLG_BOOTED,
      AVV_ERR_PARENT_PLG_LOADED: codes.FST_ERR_PARENT_PLUGIN_BOOTED,
      AVV_ERR_READY_TIMEOUT: codes.FST_ERR_PLUGIN_TIMEOUT
    };

    const http$2 = require$$0$2;
    const https$1 = require$$1$3;
    const dns = require$$2$1;

    const warnings = warnings$1;
    const { kState: kState$2, kOptions: kOptions$4, kServerBindings: kServerBindings$1 } = symbols$2;
    const { FST_ERR_HTTP2_INVALID_VERSION, FST_ERR_REOPENED_CLOSE_SERVER, FST_ERR_REOPENED_SERVER } = errorsExports;

    server.createServer = createServer$1;
    server.compileValidateHTTPVersion = compileValidateHTTPVersion$1;

    function createServer$1 (options, httpHandler) {
      const server = getServerInstance(options, httpHandler);

      return { server, listen }

      // `this` is the Fastify object
      function listen (listenOptions, ...args) {
        let cb = args.slice(-1).pop();
        // When the variadic signature deprecation is complete, the function
        // declaration should become:
        //   function listen (listenOptions = { port: 0, host: 'localhost' }, cb = undefined)
        // Upon doing so, the `normalizeListenArgs` function is no longer needed,
        // and all of this preamble to feed it correctly also no longer needed.
        const firstArgType = Object.prototype.toString.call(arguments[0]);
        if (arguments.length === 0) {
          listenOptions = normalizeListenArgs([]);
        } else if (arguments.length > 0 && (firstArgType !== '[object Object]' && firstArgType !== '[object Function]')) {
          warnings.emit('FSTDEP011');
          listenOptions = normalizeListenArgs(Array.from(arguments));
          cb = listenOptions.cb;
        } else if (args.length > 1) {
          // `.listen(obj, a, ..., n, callback )`
          warnings.emit('FSTDEP011');
          // Deal with `.listen(port, host, backlog, [cb])`
          const hostPath = listenOptions.path ? [listenOptions.path] : [listenOptions.port ?? 0, listenOptions.host ?? 'localhost'];
          Object.assign(listenOptions, normalizeListenArgs([...hostPath, ...args]));
        } else {
          listenOptions.cb = cb;
        }

        // If we have a path specified, don't default host to 'localhost' so we don't end up listening
        // on both path and host
        // See https://github.com/fastify/fastify/issues/4007
        let host;
        if (listenOptions.path == null) {
          host = listenOptions.host ?? 'localhost';
        } else {
          host = listenOptions.host;
        }
        if (Object.prototype.hasOwnProperty.call(listenOptions, 'host') === false) {
          listenOptions.host = host;
        }

        if (host === 'localhost') {
          listenOptions.cb = (err, address) => {
            if (err) {
              // the server did not start
              cb(err, address);
              return
            }

            multipleBindings.call(this, server, httpHandler, options, listenOptions, () => {
              this[kState$2].listening = true;
              cb(null, address);
            });
          };
        }

        // https://github.com/nodejs/node/issues/9390
        // If listening to 'localhost', listen to both 127.0.0.1 or ::1 if they are available.
        // If listening to 127.0.0.1, only listen to 127.0.0.1.
        // If listening to ::1, only listen to ::1.

        if (cb === undefined) {
          const listening = listenPromise.call(this, server, listenOptions);
          /* istanbul ignore else */
          if (host === 'localhost') {
            return listening.then(address => {
              return new Promise((resolve, reject) => {
                multipleBindings.call(this, server, httpHandler, options, listenOptions, () => {
                  this[kState$2].listening = true;
                  resolve(address);
                });
              })
            })
          }
          return listening
        }

        this.ready(listenCallback.call(this, server, listenOptions));
      }
    }

    function multipleBindings (mainServer, httpHandler, serverOpts, listenOptions, onListen) {
      // the main server is started, we need to start the secondary servers
      this[kState$2].listening = false;

      // let's check if we need to bind additional addresses
      dns.lookup(listenOptions.host, { all: true }, (dnsErr, addresses) => {
        if (dnsErr) {
          // not blocking the main server listening
          // this.log.warn('dns.lookup error:', dnsErr)
          onListen();
          return
        }

        let binding = 0;
        let binded = 0;
        const primaryAddress = mainServer.address();
        for (const adr of addresses) {
          if (adr.address !== primaryAddress.address) {
            binding++;
            const secondaryOpts = Object.assign({}, listenOptions, {
              host: adr.address,
              port: primaryAddress.port,
              cb: (_ignoreErr) => {
                binded++;

                if (!_ignoreErr) {
                  this[kServerBindings$1].push(secondaryServer);
                }

                if (binded === binding) {
                  // regardless of the error, we are done
                  onListen();
                }
              }
            });

            const secondaryServer = getServerInstance(serverOpts, httpHandler);
            const closeSecondary = () => { secondaryServer.close(() => {}); };
            secondaryServer.on('upgrade', mainServer.emit.bind(mainServer, 'upgrade'));
            mainServer.on('unref', closeSecondary);
            mainServer.on('close', closeSecondary);
            mainServer.on('error', closeSecondary);
            listenCallback.call(this, secondaryServer, secondaryOpts)();
          }
        }

        // no extra bindings are necessary
        if (binding === 0) {
          onListen();
          return
        }

        // in test files we are using unref so we need to propagate the unref event
        // to the secondary servers. It is valid only when the user is
        // listening on localhost
        const originUnref = mainServer.unref;
        /* istanbul ignore next */
        mainServer.unref = function () {
          originUnref.call(mainServer);
          mainServer.emit('unref');
        };
      });
    }

    function listenCallback (server, listenOptions) {
      const wrap = (err) => {
        server.removeListener('error', wrap);
        if (!err) {
          const address = logServerAddress.call(this, server);
          listenOptions.cb(null, address);
        } else {
          this[kState$2].listening = false;
          listenOptions.cb(err, null);
        }
      };

      return (err) => {
        if (err != null) return listenOptions.cb(err)

        if (this[kState$2].listening && this[kState$2].closing) {
          return listenOptions.cb(new FST_ERR_REOPENED_CLOSE_SERVER(), null)
        } else if (this[kState$2].listening) {
          return listenOptions.cb(new FST_ERR_REOPENED_SERVER(), null)
        }

        server.once('error', wrap);
        server.listen(listenOptions, wrap);

        this[kState$2].listening = true;
      }
    }

    function listenPromise (server, listenOptions) {
      if (this[kState$2].listening && this[kState$2].closing) {
        return Promise.reject(new FST_ERR_REOPENED_CLOSE_SERVER())
      } else if (this[kState$2].listening) {
        return Promise.reject(new FST_ERR_REOPENED_SERVER())
      }

      return this.ready().then(() => {
        let errEventHandler;
        const errEvent = new Promise((resolve, reject) => {
          errEventHandler = (err) => {
            this[kState$2].listening = false;
            reject(err);
          };
          server.once('error', errEventHandler);
        });
        const listen = new Promise((resolve, reject) => {
          server.listen(listenOptions, () => {
            server.removeListener('error', errEventHandler);
            resolve(logServerAddress.call(this, server));
          });
          // we set it afterwards because listen can throw
          this[kState$2].listening = true;
        });

        return Promise.race([
          errEvent, // e.g invalid port range error is always emitted before the server listening
          listen
        ])
      })
    }

    /**
     * Creates a function that, based upon initial configuration, will
     * verify that every incoming request conforms to allowed
     * HTTP versions for the Fastify instance, e.g. a Fastify HTTP/1.1
     * server will not serve HTTP/2 requests upon the result of the
     * verification function.
     *
     * @param {object} options fastify option
     * @param {function} [options.serverFactory] If present, the
     * validator function will skip all checks.
     * @param {boolean} [options.http2 = false] If true, the validator
     * function will allow HTTP/2 requests.
     * @param {object} [options.https = null] https server options
     * @param {boolean} [options.https.allowHTTP1] If true and use
     * with options.http2 the validator function will allow HTTP/1
     * request to http2 server.
     *
     * @returns {function} HTTP version validator function.
     */
    function compileValidateHTTPVersion$1 (options) {
      let bypass = false;
      // key-value map to store valid http version
      const map = new Map();
      if (options.serverFactory) {
        // When serverFactory is passed, we cannot identify how to check http version reliably
        // So, we should skip the http version check
        bypass = true;
      }
      if (options.http2) {
        // HTTP2 must serve HTTP/2.0
        map.set('2.0', true);
        if (options.https && options.https.allowHTTP1 === true) {
          // HTTP2 with HTTPS.allowHTTP1 allow fallback to HTTP/1.1 and HTTP/1.0
          map.set('1.1', true);
          map.set('1.0', true);
        }
      } else {
        // HTTP must server HTTP/1.1 and HTTP/1.0
        map.set('1.1', true);
        map.set('1.0', true);
      }
      // The compiled function here placed in one of the hottest path inside fastify
      // the implementation here must be as performant as possible
      return function validateHTTPVersion (httpVersion) {
        // `bypass` skip the check when custom server factory provided
        // `httpVersion in obj` check for the valid http version we should support
        return bypass || map.has(httpVersion)
      }
    }

    function getServerInstance (options, httpHandler) {
      let server = null;
      if (options.serverFactory) {
        server = options.serverFactory(httpHandler, options);
      } else if (options.http2) {
        if (options.https) {
          server = http2().createSecureServer(options.https, httpHandler);
        } else {
          server = http2().createServer(httpHandler);
        }
        server.on('session', sessionTimeout(options.http2SessionTimeout));
      } else {
        // this is http1
        if (options.https) {
          server = https$1.createServer(options.https, httpHandler);
        } else {
          server = http$2.createServer(httpHandler);
        }
        server.keepAliveTimeout = options.keepAliveTimeout;
        server.requestTimeout = options.requestTimeout;
        // we treat zero as null
        // and null is the default setting from nodejs
        // so we do not pass the option to server
        if (options.maxRequestsPerSocket > 0) {
          server.maxRequestsPerSocket = options.maxRequestsPerSocket;
        }
      }

      if (!options.serverFactory) {
        server.setTimeout(options.connectionTimeout);
      }
      return server
    }

    function normalizeListenArgs (args) {
      if (args.length === 0) {
        return { port: 0, host: 'localhost' }
      }

      const cb = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;
      const options = { cb };

      const firstArg = args[0];
      const argsLength = args.length;
      const lastArg = args[argsLength - 1];
      if (typeof firstArg === 'string' && isNaN(firstArg)) {
        /* Deal with listen (pipe[, backlog]) */
        options.path = firstArg;
        options.backlog = argsLength > 1 ? lastArg : undefined;
      } else {
        /* Deal with listen ([port[, host[, backlog]]]) */
        options.port = argsLength >= 1 && Number.isInteger(firstArg) ? firstArg : normalizePort(firstArg);
        // This will listen to what localhost is.
        // It can be 127.0.0.1 or ::1, depending on the operating system.
        // Fixes https://github.com/fastify/fastify/issues/1022.
        options.host = argsLength >= 2 && args[1] ? args[1] : 'localhost';
        options.backlog = argsLength >= 3 ? args[2] : undefined;
      }

      return options
    }

    function normalizePort (firstArg) {
      const port = Number(firstArg);
      return port >= 0 && !Number.isNaN(port) && Number.isInteger(port) ? port : 0
    }

    function logServerAddress (server) {
      let address = server.address();
      const isUnixSocket = typeof address === 'string';
      /* istanbul ignore next */
      if (!isUnixSocket) {
        if (address.address.indexOf(':') === -1) {
          address = address.address + ':' + address.port;
        } else {
          address = '[' + address.address + ']:' + address.port;
        }
      }
      /* istanbul ignore next */
      address = (isUnixSocket ? '' : ('http' + (this[kOptions$4].https ? 's' : '') + '://')) + address;

      this.log.info('Server listening at ' + address);
      return address
    }

    function http2 () {
      try {
        return require('http2')
      } catch (err) {
        throw new FST_ERR_HTTP2_INVALID_VERSION()
      }
    }

    function sessionTimeout (timeout) {
      return function (session) {
        session.setTimeout(timeout, close);
      }
    }

    function close () {
      this.close();
    }

    var replyExports = {};
    var reply = {
      get exports(){ return replyExports; },
      set exports(v){ replyExports = v; },
    };

    const applicationHooks = [
      'onRoute',
      'onRegister',
      'onReady',
      'onClose'
    ];
    const lifecycleHooks$2 = [
      'onTimeout',
      'onRequest',
      'preParsing',
      'preValidation',
      'preSerialization',
      'preHandler',
      'onSend',
      'onResponse',
      'onError'
    ];
    const supportedHooks$1 = lifecycleHooks$2.concat(applicationHooks);
    const {
      FST_ERR_HOOK_INVALID_TYPE,
      FST_ERR_HOOK_INVALID_HANDLER: FST_ERR_HOOK_INVALID_HANDLER$1,
      FST_ERR_SEND_UNDEFINED_ERR: FST_ERR_SEND_UNDEFINED_ERR$1,
      FST_ERR_HOOK_TIMEOUT,
      AVVIO_ERRORS_MAP: AVVIO_ERRORS_MAP$1,
      appendStackTrace: appendStackTrace$1
    } = errorsExports;

    const {
      kChildren: kChildren$2,
      kHooks: kHooks$4
    } = symbols$2;

    function Hooks$1 () {
      this.onRequest = [];
      this.preParsing = [];
      this.preValidation = [];
      this.preSerialization = [];
      this.preHandler = [];
      this.onResponse = [];
      this.onSend = [];
      this.onError = [];
      this.onRoute = [];
      this.onRegister = [];
      this.onReady = [];
      this.onTimeout = [];
    }

    Hooks$1.prototype.validate = function (hook, fn) {
      if (typeof hook !== 'string') throw new FST_ERR_HOOK_INVALID_TYPE()
      if (supportedHooks$1.indexOf(hook) === -1) {
        throw new Error(`${hook} hook not supported!`)
      }
      if (typeof fn !== 'function') throw new FST_ERR_HOOK_INVALID_HANDLER$1(hook, Object.prototype.toString.call(fn))
    };

    Hooks$1.prototype.add = function (hook, fn) {
      this.validate(hook, fn);
      this[hook].push(fn);
    };

    function buildHooks$1 (h) {
      const hooks = new Hooks$1();
      hooks.onRequest = h.onRequest.slice();
      hooks.preParsing = h.preParsing.slice();
      hooks.preValidation = h.preValidation.slice();
      hooks.preSerialization = h.preSerialization.slice();
      hooks.preHandler = h.preHandler.slice();
      hooks.onSend = h.onSend.slice();
      hooks.onResponse = h.onResponse.slice();
      hooks.onError = h.onError.slice();
      hooks.onRoute = h.onRoute.slice();
      hooks.onRegister = h.onRegister.slice();
      hooks.onTimeout = h.onTimeout.slice();
      hooks.onReady = [];
      return hooks
    }

    function hookRunnerApplication$1 (hookName, boot, server, cb) {
      const hooks = server[kHooks$4][hookName];
      let i = 0;
      let c = 0;

      next();

      function exit (err) {
        if (err) {
          if (err.code === 'AVV_ERR_READY_TIMEOUT') {
            err = appendStackTrace$1(err, new FST_ERR_HOOK_TIMEOUT(hookName));
          } else {
            err = AVVIO_ERRORS_MAP$1[err.code] != null
              ? appendStackTrace$1(err, new AVVIO_ERRORS_MAP$1[err.code](err.message))
              : err;
          }

          cb(err);
          return
        }
        cb();
      }

      function next (err) {
        if (err) {
          exit(err);
          return
        }

        if (i === hooks.length && c === server[kChildren$2].length) {
          if (i === 0 && c === 0) { // speed up start
            exit();
          } else {
            // This is the last function executed for every fastify instance
            boot(function manageTimeout (err, done) {
              // this callback is needed by fastify to provide an hook interface without the error
              // as first parameter and managing it on behalf the user
              exit(err);

              // this callback is needed by avvio to continue the loading of the next `register` plugins
              done(err);
            });
          }
          return
        }

        if (i === hooks.length && c < server[kChildren$2].length) {
          const child = server[kChildren$2][c++];
          hookRunnerApplication$1(hookName, boot, child, next);
          return
        }

        boot(wrap(hooks[i++], server));
        next();
      }

      function wrap (fn, server) {
        return function (err, done) {
          if (err) {
            done(err);
            return
          }

          if (fn.length === 1) {
            try {
              fn.call(server, done);
            } catch (error) {
              done(error);
            }
            return
          }

          const ret = fn.call(server);
          if (ret && typeof ret.then === 'function') {
            ret.then(done, done);
            return
          }

          done(err); // auto done
        }
      }
    }

    function hookRunner$2 (functions, runner, request, reply, cb) {
      let i = 0;

      function next (err) {
        if (err || i === functions.length) {
          cb(err, request, reply);
          return
        }

        let result;
        try {
          result = runner(functions[i++], request, reply, next);
        } catch (error) {
          next(error);
          return
        }
        if (result && typeof result.then === 'function') {
          result.then(handleResolve, handleReject);
        }
      }

      function handleResolve () {
        next();
      }

      function handleReject (err) {
        if (!err) {
          err = new FST_ERR_SEND_UNDEFINED_ERR$1();
        }

        cb(err, request, reply);
      }

      next();
    }

    function onSendHookRunner$1 (functions, request, reply, payload, cb) {
      let i = 0;

      function next (err, newPayload) {
        if (err) {
          cb(err, request, reply, payload);
          return
        }

        if (newPayload !== undefined) {
          payload = newPayload;
        }

        if (i === functions.length) {
          cb(null, request, reply, payload);
          return
        }

        let result;
        try {
          result = functions[i++](request, reply, payload, next);
        } catch (error) {
          next(error);
          return
        }
        if (result && typeof result.then === 'function') {
          result.then(handleResolve, handleReject);
        }
      }

      function handleResolve (newPayload) {
        next(null, newPayload);
      }

      function handleReject (err) {
        if (!err) {
          err = new FST_ERR_SEND_UNDEFINED_ERR$1();
        }

        cb(err, request, reply, payload);
      }

      next();
    }

    function hookIterator$2 (fn, request, reply, next) {
      if (reply.sent === true) return undefined
      return fn(request, reply, next)
    }

    var hooks = {
      Hooks: Hooks$1,
      buildHooks: buildHooks$1,
      hookRunner: hookRunner$2,
      onSendHookRunner: onSendHookRunner$1,
      hookIterator: hookIterator$2,
      hookRunnerApplication: hookRunnerApplication$1,
      lifecycleHooks: lifecycleHooks$2,
      supportedHooks: supportedHooks$1
    };

    var handleRequestExports = {};
    var handleRequest$1 = {
      get exports(){ return handleRequestExports; },
      set exports(v){ handleRequestExports = v; },
    };

    const {
      kSchemaHeaders: headersSchema,
      kSchemaParams: paramsSchema,
      kSchemaQuerystring: querystringSchema,
      kSchemaBody: bodySchema,
      kSchemaResponse: responseSchema
    } = symbols$2;
    const scChecker = /^[1-5]{1}[0-9]{2}$|^[1-5]xx$|^default$/;

    function compileSchemasForSerialization$1 (context, compile) {
      if (!context.schema || !context.schema.response) {
        return
      }
      const { method, url } = context.config || {};
      context[responseSchema] = Object.keys(context.schema.response)
        .reduce(function (acc, statusCode) {
          const schema = context.schema.response[statusCode];
          statusCode = statusCode.toLowerCase();
          if (!scChecker.exec(statusCode)) {
            throw new Error('response schemas should be nested under a valid status code, e.g { 2xx: { type: "object" } }')
          }

          if (schema.content) {
            const contentTypesSchemas = {};
            for (const mediaName of Object.keys(schema.content)) {
              const contentSchema = schema.content[mediaName].schema;
              contentTypesSchemas[mediaName] = compile({
                schema: contentSchema,
                url,
                method,
                httpStatus: statusCode,
                contentType: mediaName
              });
            }
            acc[statusCode] = contentTypesSchemas;
          } else {
            acc[statusCode] = compile({
              schema,
              url,
              method,
              httpStatus: statusCode
            });
          }

          return acc
        }, {});
    }

    function compileSchemasForValidation$1 (context, compile, isCustom) {
      const { schema } = context;
      if (!schema) {
        return
      }

      const { method, url } = context.config || {};

      const headers = schema.headers;
      // the or part is used for backward compatibility
      if (headers && (isCustom || Object.getPrototypeOf(headers) !== Object.prototype)) {
        // do not mess with schema when custom validator applied, e.g. Joi, Typebox
        context[headersSchema] = compile({ schema: headers, method, url, httpPart: 'headers' });
      } else if (headers) {
        // The header keys are case insensitive
        //  https://tools.ietf.org/html/rfc2616#section-4.2
        const headersSchemaLowerCase = {};
        Object.keys(headers).forEach(k => { headersSchemaLowerCase[k] = headers[k]; });
        if (headersSchemaLowerCase.required instanceof Array) {
          headersSchemaLowerCase.required = headersSchemaLowerCase.required.map(h => h.toLowerCase());
        }
        if (headers.properties) {
          headersSchemaLowerCase.properties = {};
          Object.keys(headers.properties).forEach(k => {
            headersSchemaLowerCase.properties[k.toLowerCase()] = headers.properties[k];
          });
        }
        context[headersSchema] = compile({ schema: headersSchemaLowerCase, method, url, httpPart: 'headers' });
      }

      if (schema.body) {
        context[bodySchema] = compile({ schema: schema.body, method, url, httpPart: 'body' });
      }

      if (schema.querystring) {
        context[querystringSchema] = compile({ schema: schema.querystring, method, url, httpPart: 'querystring' });
      }

      if (schema.params) {
        context[paramsSchema] = compile({ schema: schema.params, method, url, httpPart: 'params' });
      }
    }

    function validateParam (validatorFunction, request, paramName) {
      const isUndefined = request[paramName] === undefined;
      const ret = validatorFunction && validatorFunction(isUndefined ? null : request[paramName]);
      if (ret === false) return validatorFunction.errors
      if (ret && ret.error) return ret.error
      if (ret && ret.value) request[paramName] = ret.value;
      return false
    }

    function validate$8 (context, request) {
      const params = validateParam(context[paramsSchema], request, 'params');

      if (params) {
        return wrapValidationError(params, 'params', context.schemaErrorFormatter)
      }
      const body = validateParam(context[bodySchema], request, 'body');
      if (body) {
        return wrapValidationError(body, 'body', context.schemaErrorFormatter)
      }
      const query = validateParam(context[querystringSchema], request, 'query');
      if (query) {
        return wrapValidationError(query, 'querystring', context.schemaErrorFormatter)
      }
      const headers = validateParam(context[headersSchema], request, 'headers');
      if (headers) {
        return wrapValidationError(headers, 'headers', context.schemaErrorFormatter)
      }
      return null
    }

    function wrapValidationError (result, dataVar, schemaErrorFormatter) {
      if (result instanceof Error) {
        result.statusCode = result.statusCode || 400;
        result.validationContext = result.validationContext || dataVar;
        return result
      }

      const error = schemaErrorFormatter(result, dataVar);
      error.statusCode = error.statusCode || 400;
      error.validation = result;
      error.validationContext = dataVar;
      return error
    }

    var validation$5 = {
      symbols: { bodySchema, querystringSchema, responseSchema, paramsSchema, headersSchema },
      compileSchemasForValidation: compileSchemasForValidation$1,
      compileSchemasForSerialization: compileSchemasForSerialization$1,
      validate: validate$8
    };

    const {
      kReplyIsError: kReplyIsError$2,
      kReplyHijacked: kReplyHijacked$1
    } = symbols$2;

    function wrapThenable$1 (thenable, reply) {
      thenable.then(function (payload) {
        if (reply[kReplyHijacked$1] === true) {
          return
        }

        // this is for async functions that are using reply.send directly
        //
        // since wrap-thenable will be called when using reply.send directly
        // without actual return. the response can be sent already or
        // the request may be terminated during the reply. in this situation,
        // it require an extra checking of request.aborted to see whether
        // the request is killed by client.
        if (payload !== undefined || (reply.sent === false && reply.raw.headersSent === false && reply.request.raw.aborted === false)) {
          // we use a try-catch internally to avoid adding a catch to another
          // promise, increase promise perf by 10%
          try {
            reply.send(payload);
          } catch (err) {
            reply[kReplyIsError$2] = true;
            reply.send(err);
          }
        }
      }, function (err) {
        if (reply.sent === true) {
          reply.log.error({ err }, 'Promise errored, but reply.sent = true was set');
          return
        }

        reply[kReplyIsError$2] = true;

        // try-catch allow to re-throw error in error handler for async handler
        try {
          reply.send(err);
        } catch (err) {
          reply.send(err);
        }
      });
    }

    var wrapThenable_1 = wrapThenable$1;

    (function (module) {

    	const { validate: validateSchema } = validation$5;
    	const { hookRunner, hookIterator } = hooks;
    	const wrapThenable = wrapThenable_1;
    	const {
    	  kReplyIsError,
    	  kRouteContext
    	} = symbols$2;

    	function handleRequest (err, request, reply) {
    	  if (reply.sent === true) return
    	  if (err != null) {
    	    reply[kReplyIsError] = true;
    	    reply.send(err);
    	    return
    	  }

    	  const method = request.raw.method;
    	  const headers = request.headers;
    	  const context = request[kRouteContext];

    	  if (method === 'GET' || method === 'HEAD') {
    	    handler(request, reply);
    	    return
    	  }

    	  const contentType = headers['content-type'];

    	  if (method === 'POST' || method === 'PUT' || method === 'PATCH' || method === 'TRACE' || method === 'SEARCH') {
    	    if (contentType === undefined) {
    	      if (
    	        headers['transfer-encoding'] === undefined &&
    	        (headers['content-length'] === '0' || headers['content-length'] === undefined)
    	      ) { // Request has no body to parse
    	        handler(request, reply);
    	      } else {
    	        context.contentTypeParser.run('', handler, request, reply);
    	      }
    	    } else {
    	      context.contentTypeParser.run(contentType, handler, request, reply);
    	    }
    	    return
    	  }

    	  if (method === 'OPTIONS' || method === 'DELETE') {
    	    if (
    	      contentType !== undefined &&
    	      (
    	        headers['transfer-encoding'] !== undefined ||
    	        headers['content-length'] !== undefined
    	      )
    	    ) {
    	      context.contentTypeParser.run(contentType, handler, request, reply);
    	    } else {
    	      handler(request, reply);
    	    }
    	    return
    	  }

    	  // Return 404 instead of 405 see https://github.com/fastify/fastify/pull/862 for discussion
    	  handler(request, reply);
    	}

    	function handler (request, reply) {
    	  try {
    	    if (request[kRouteContext].preValidation !== null) {
    	      hookRunner(
    	        request[kRouteContext].preValidation,
    	        hookIterator,
    	        request,
    	        reply,
    	        preValidationCallback
    	      );
    	    } else {
    	      preValidationCallback(null, request, reply);
    	    }
    	  } catch (err) {
    	    preValidationCallback(err, request, reply);
    	  }
    	}

    	function preValidationCallback (err, request, reply) {
    	  if (reply.sent === true) return

    	  if (err != null) {
    	    reply[kReplyIsError] = true;
    	    reply.send(err);
    	    return
    	  }

    	  const result = validateSchema(reply[kRouteContext], request);
    	  if (result) {
    	    if (reply[kRouteContext].attachValidation === false) {
    	      reply.send(result);
    	      return
    	    }

    	    reply.request.validationError = result;
    	  }

    	  // preHandler hook
    	  if (request[kRouteContext].preHandler !== null) {
    	    hookRunner(
    	      request[kRouteContext].preHandler,
    	      hookIterator,
    	      request,
    	      reply,
    	      preHandlerCallback
    	    );
    	  } else {
    	    preHandlerCallback(null, request, reply);
    	  }
    	}

    	function preHandlerCallback (err, request, reply) {
    	  if (reply.sent) return

    	  if (err != null) {
    	    reply[kReplyIsError] = true;
    	    reply.send(err);
    	    return
    	  }

    	  let result;

    	  try {
    	    result = request[kRouteContext].handler(request, reply);
    	  } catch (err) {
    	    reply[kReplyIsError] = true;
    	    reply.send(err);
    	    return
    	  }

    	  if (result !== undefined) {
    	    if (result !== null && typeof result.then === 'function') {
    	      wrapThenable(result, reply);
    	    } else {
    	      reply.send(result);
    	    }
    	  }
    	}

    	module.exports = handleRequest;
    	module.exports[Symbol.for('internals')] = { handler, preHandlerCallback };
    } (handleRequest$1));

    var abstractLoggingExports = {};
    var abstractLogging = {
      get exports(){ return abstractLoggingExports; },
      set exports(v){ abstractLoggingExports = v; },
    };

    (function (module) {

    	function noop () { }

    	const proto = {
    	  fatal: noop,
    	  error: noop,
    	  warn: noop,
    	  info: noop,
    	  debug: noop,
    	  trace: noop
    	};

    	Object.defineProperty(module, 'exports', {
    	  get () {
    	    return Object.create(proto)
    	  }
    	});
    } (abstractLogging));

    var pinoExports = {};
    var pino$2 = {
      get exports(){ return pinoExports; },
      set exports(v){ pinoExports = v; },
    };

    // **************************************************************
    // * Code initially copied/adapted from "pony-cause" npm module *
    // * Please upstream improvements there                         *
    // **************************************************************

    const isErrorLike$1 = (err) => {
      return err && typeof err.message === 'string'
    };

    /**
     * @param {Error|{ cause?: unknown|(()=>err)}} err
     * @returns {Error|Object|undefined}
     */
    const getErrorCause = (err) => {
      if (!err) return

      /** @type {unknown} */
      // @ts-ignore
      const cause = err.cause;

      // VError / NError style causes
      if (typeof cause === 'function') {
        // @ts-ignore
        const causeResult = err.cause();

        return isErrorLike$1(causeResult)
          ? causeResult
          : undefined
      } else {
        return isErrorLike$1(cause)
          ? cause
          : undefined
      }
    };

    /**
     * Internal method that keeps a track of which error we have already added, to avoid circular recursion
     *
     * @private
     * @param {Error} err
     * @param {Set<Error>} seen
     * @returns {string}
     */
    const _stackWithCauses = (err, seen) => {
      if (!isErrorLike$1(err)) return ''

      const stack = err.stack || '';

      // Ensure we don't go circular or crazily deep
      if (seen.has(err)) {
        return stack + '\ncauses have become circular...'
      }

      const cause = getErrorCause(err);

      if (cause) {
        seen.add(err);
        return (stack + '\ncaused by: ' + _stackWithCauses(cause, seen))
      } else {
        return stack
      }
    };

    /**
     * @param {Error} err
     * @returns {string}
     */
    const stackWithCauses$1 = (err) => _stackWithCauses(err, new Set());

    /**
     * Internal method that keeps a track of which error we have already added, to avoid circular recursion
     *
     * @private
     * @param {Error} err
     * @param {Set<Error>} seen
     * @param {boolean} [skip]
     * @returns {string}
     */
    const _messageWithCauses = (err, seen, skip) => {
      if (!isErrorLike$1(err)) return ''

      const message = skip ? '' : (err.message || '');

      // Ensure we don't go circular or crazily deep
      if (seen.has(err)) {
        return message + ': ...'
      }

      const cause = getErrorCause(err);

      if (cause) {
        seen.add(err);

        // @ts-ignore
        const skipIfVErrorStyleCause = typeof err.cause === 'function';

        return (message +
          (skipIfVErrorStyleCause ? '' : ': ') +
          _messageWithCauses(cause, seen, skipIfVErrorStyleCause))
      } else {
        return message
      }
    };

    /**
     * @param {Error} err
     * @returns {string}
     */
    const messageWithCauses$1 = (err) => _messageWithCauses(err, new Set());

    var errHelpers = {
      isErrorLike: isErrorLike$1,
      getErrorCause,
      stackWithCauses: stackWithCauses$1,
      messageWithCauses: messageWithCauses$1
    };

    var err = errSerializer$1;

    const { messageWithCauses, stackWithCauses, isErrorLike } = errHelpers;

    const { toString: toString$2 } = Object.prototype;
    const seen = Symbol('circular-ref-tag');
    const rawSymbol$2 = Symbol('pino-raw-err-ref');
    const pinoErrProto = Object.create({}, {
      type: {
        enumerable: true,
        writable: true,
        value: undefined
      },
      message: {
        enumerable: true,
        writable: true,
        value: undefined
      },
      stack: {
        enumerable: true,
        writable: true,
        value: undefined
      },
      aggregateErrors: {
        enumerable: true,
        writable: true,
        value: undefined
      },
      raw: {
        enumerable: false,
        get: function () {
          return this[rawSymbol$2]
        },
        set: function (val) {
          this[rawSymbol$2] = val;
        }
      }
    });
    Object.defineProperty(pinoErrProto, rawSymbol$2, {
      writable: true,
      value: {}
    });

    function errSerializer$1 (err) {
      if (!isErrorLike(err)) {
        return err
      }

      err[seen] = undefined; // tag to prevent re-looking at this
      const _err = Object.create(pinoErrProto);
      _err.type = toString$2.call(err.constructor) === '[object Function]'
        ? err.constructor.name
        : err.name;
      _err.message = messageWithCauses(err);
      _err.stack = stackWithCauses(err);

      if (Array.isArray(err.errors)) {
        _err.aggregateErrors = err.errors.map(err => errSerializer$1(err));
      }

      for (const key in err) {
        if (_err[key] === undefined) {
          const val = err[key];
          if (isErrorLike(val)) {
            // We append cause messages and stacks to _err, therefore skipping causes here
            if (key !== 'cause' && !Object.prototype.hasOwnProperty.call(val, seen)) {
              _err[key] = errSerializer$1(val);
            }
          } else {
            _err[key] = val;
          }
        }
      }

      delete err[seen]; // clean up tag in case err is serialized again later
      _err.raw = err;
      return _err
    }

    var req = {
      mapHttpRequest: mapHttpRequest$1,
      reqSerializer
    };

    const rawSymbol$1 = Symbol('pino-raw-req-ref');
    const pinoReqProto = Object.create({}, {
      id: {
        enumerable: true,
        writable: true,
        value: ''
      },
      method: {
        enumerable: true,
        writable: true,
        value: ''
      },
      url: {
        enumerable: true,
        writable: true,
        value: ''
      },
      query: {
        enumerable: true,
        writable: true,
        value: ''
      },
      params: {
        enumerable: true,
        writable: true,
        value: ''
      },
      headers: {
        enumerable: true,
        writable: true,
        value: {}
      },
      remoteAddress: {
        enumerable: true,
        writable: true,
        value: ''
      },
      remotePort: {
        enumerable: true,
        writable: true,
        value: ''
      },
      raw: {
        enumerable: false,
        get: function () {
          return this[rawSymbol$1]
        },
        set: function (val) {
          this[rawSymbol$1] = val;
        }
      }
    });
    Object.defineProperty(pinoReqProto, rawSymbol$1, {
      writable: true,
      value: {}
    });

    function reqSerializer (req) {
      // req.info is for hapi compat.
      const connection = req.info || req.socket;
      const _req = Object.create(pinoReqProto);
      _req.id = (typeof req.id === 'function' ? req.id() : (req.id || (req.info ? req.info.id : undefined)));
      _req.method = req.method;
      // req.originalUrl is for expressjs compat.
      if (req.originalUrl) {
        _req.url = req.originalUrl;
      } else {
        const path = req.path;
        // path for safe hapi compat.
        _req.url = typeof path === 'string' ? path : (req.url ? req.url.path || req.url : undefined);
      }

      if (req.query) {
        _req.query = req.query;
      }

      if (req.params) {
        _req.params = req.params;
      }

      _req.headers = req.headers;
      _req.remoteAddress = connection && connection.remoteAddress;
      _req.remotePort = connection && connection.remotePort;
      // req.raw is  for hapi compat/equivalence
      _req.raw = req.raw || req;
      return _req
    }

    function mapHttpRequest$1 (req) {
      return {
        req: reqSerializer(req)
      }
    }

    var res = {
      mapHttpResponse: mapHttpResponse$1,
      resSerializer
    };

    const rawSymbol = Symbol('pino-raw-res-ref');
    const pinoResProto = Object.create({}, {
      statusCode: {
        enumerable: true,
        writable: true,
        value: 0
      },
      headers: {
        enumerable: true,
        writable: true,
        value: ''
      },
      raw: {
        enumerable: false,
        get: function () {
          return this[rawSymbol]
        },
        set: function (val) {
          this[rawSymbol] = val;
        }
      }
    });
    Object.defineProperty(pinoResProto, rawSymbol, {
      writable: true,
      value: {}
    });

    function resSerializer (res) {
      const _res = Object.create(pinoResProto);
      _res.statusCode = res.headersSent ? res.statusCode : null;
      _res.headers = res.getHeaders ? res.getHeaders() : res._headers;
      _res.raw = res;
      return _res
    }

    function mapHttpResponse$1 (res) {
      return {
        res: resSerializer(res)
      }
    }

    const errSerializer = err;
    const reqSerializers = req;
    const resSerializers = res;

    var pinoStdSerializers = {
      err: errSerializer,
      mapHttpRequest: reqSerializers.mapHttpRequest,
      mapHttpResponse: resSerializers.mapHttpResponse,
      req: reqSerializers.reqSerializer,
      res: resSerializers.resSerializer,

      wrapErrorSerializer: function wrapErrorSerializer (customSerializer) {
        if (customSerializer === errSerializer) return customSerializer
        return function wrapErrSerializer (err) {
          return customSerializer(errSerializer(err))
        }
      },

      wrapRequestSerializer: function wrapRequestSerializer (customSerializer) {
        if (customSerializer === reqSerializers.reqSerializer) return customSerializer
        return function wrappedReqSerializer (req) {
          return customSerializer(reqSerializers.reqSerializer(req))
        }
      },

      wrapResponseSerializer: function wrapResponseSerializer (customSerializer) {
        if (customSerializer === resSerializers.resSerializer) return customSerializer
        return function wrappedResSerializer (res) {
          return customSerializer(resSerializers.resSerializer(res))
        }
      }
    };

    function noOpPrepareStackTrace (_, stack) {
      return stack
    }

    var caller$1 = function getCallers () {
      const originalPrepare = Error.prepareStackTrace;
      Error.prepareStackTrace = noOpPrepareStackTrace;
      const stack = new Error().stack;
      Error.prepareStackTrace = originalPrepare;

      if (!Array.isArray(stack)) {
        return undefined
      }

      const entries = stack.slice(2);

      const fileNames = [];

      for (const entry of entries) {
        if (!entry) {
          continue
        }

        fileNames.push(entry.getFileName());
      }

      return fileNames
    };

    const { createContext, runInContext } = require$$0$3;

    var validator_1 = validator$3;

    function validator$3 (opts = {}) {
      const {
        ERR_PATHS_MUST_BE_STRINGS = () => 'fast-redact - Paths must be (non-empty) strings',
        ERR_INVALID_PATH = (s) => `fast-redact – Invalid path (${s})`
      } = opts;

      return function validate ({ paths }) {
        paths.forEach((s) => {
          if (typeof s !== 'string') {
            throw Error(ERR_PATHS_MUST_BE_STRINGS())
          }
          try {
            if (/〇/.test(s)) throw Error()
            const proxy = new Proxy({}, { get: () => proxy, set: () => { throw Error() } });
            const expr = (s[0] === '[' ? '' : '.') + s.replace(/^\*/, '〇').replace(/\.\*/g, '.〇').replace(/\[\*\]/g, '[〇]');
            if (/\n|\r|;/.test(expr)) throw Error()
            if (/\/\*/.test(expr)) throw Error()
            runInContext(`
          (function () {
            'use strict'
            o${expr}
            if ([o${expr}].length !== 1) throw Error()
          })()
        `, createContext({ o: proxy, 〇: null }), {
              codeGeneration: { strings: false, wasm: false }
            });
          } catch (e) {
            throw Error(ERR_INVALID_PATH(s))
          }
        });
      }
    }

    var rx$4 = /[^.[\]]+|\[((?:.)*?)\]/g;

    const rx$3 = rx$4;

    var parse_1$2 = parse$g;

    function parse$g ({ paths }) {
      const wildcards = [];
      var wcLen = 0;
      const secret = paths.reduce(function (o, strPath, ix) {
        var path = strPath.match(rx$3).map((p) => p.replace(/'|"|`/g, ''));
        const leadingBracket = strPath[0] === '[';
        path = path.map((p) => {
          if (p[0] === '[') return p.substr(1, p.length - 2)
          else return p
        });
        const star = path.indexOf('*');
        if (star > -1) {
          const before = path.slice(0, star);
          const beforeStr = before.join('.');
          const after = path.slice(star + 1, path.length);
          const nested = after.length > 0;
          wcLen++;
          wildcards.push({
            before,
            beforeStr,
            after,
            nested
          });
        } else {
          o[strPath] = {
            path: path,
            val: undefined,
            precensored: false,
            circle: '',
            escPath: JSON.stringify(strPath),
            leadingBracket: leadingBracket
          };
        }
        return o
      }, {});

      return { wildcards, wcLen, secret }
    }

    const rx$2 = rx$4;

    var redactor_1 = redactor$1;

    function redactor$1 ({ secret, serialize, wcLen, strict, isCensorFct, censorFctTakesPath }, state) {
      /* eslint-disable-next-line */
      const redact = Function('o', `
    if (typeof o !== 'object' || o == null) {
      ${strictImpl(strict, serialize)}
    }
    const { censor, secret } = this
    ${redactTmpl(secret, isCensorFct, censorFctTakesPath)}
    this.compileRestore()
    ${dynamicRedactTmpl(wcLen > 0, isCensorFct, censorFctTakesPath)}
    ${resultTmpl(serialize)}
  `).bind(state);

      if (serialize === false) {
        redact.restore = (o) => state.restore(o);
      }

      return redact
    }

    function redactTmpl (secret, isCensorFct, censorFctTakesPath) {
      return Object.keys(secret).map((path) => {
        const { escPath, leadingBracket, path: arrPath } = secret[path];
        const skip = leadingBracket ? 1 : 0;
        const delim = leadingBracket ? '' : '.';
        const hops = [];
        var match;
        while ((match = rx$2.exec(path)) !== null) {
          const [ , ix ] = match;
          const { index, input } = match;
          if (index > skip) hops.push(input.substring(0, index - (ix ? 0 : 1)));
        }
        var existence = hops.map((p) => `o${delim}${p}`).join(' && ');
        if (existence.length === 0) existence += `o${delim}${path} != null`;
        else existence += ` && o${delim}${path} != null`;

        const circularDetection = `
      switch (true) {
        ${hops.reverse().map((p) => `
          case o${delim}${p} === censor:
            secret[${escPath}].circle = ${JSON.stringify(p)}
            break
        `).join('\n')}
      }
    `;

        const censorArgs = censorFctTakesPath
          ? `val, ${JSON.stringify(arrPath)}`
          : `val`;

        return `
      if (${existence}) {
        const val = o${delim}${path}
        if (val === censor) {
          secret[${escPath}].precensored = true
        } else {
          secret[${escPath}].val = val
          o${delim}${path} = ${isCensorFct ? `censor(${censorArgs})` : 'censor'}
          ${circularDetection}
        }
      }
    `
      }).join('\n')
    }

    function dynamicRedactTmpl (hasWildcards, isCensorFct, censorFctTakesPath) {
      return hasWildcards === true ? `
    {
      const { wildcards, wcLen, groupRedact, nestedRedact } = this
      for (var i = 0; i < wcLen; i++) {
        const { before, beforeStr, after, nested } = wildcards[i]
        if (nested === true) {
          secret[beforeStr] = secret[beforeStr] || []
          nestedRedact(secret[beforeStr], o, before, after, censor, ${isCensorFct}, ${censorFctTakesPath})
        } else secret[beforeStr] = groupRedact(o, before, censor, ${isCensorFct}, ${censorFctTakesPath})
      }
    }
  ` : ''
    }

    function resultTmpl (serialize) {
      return serialize === false ? `return o` : `
    var s = this.serialize(o)
    this.restore(o)
    return s
  `
    }

    function strictImpl (strict, serialize) {
      return strict === true
        ? `throw Error('fast-redact: primitives cannot be redacted')`
        : serialize === false ? `return o` : `return this.serialize(o)`
    }

    var modifiers = {
      groupRedact: groupRedact$1,
      groupRestore: groupRestore$1,
      nestedRedact: nestedRedact$1,
      nestedRestore: nestedRestore$1
    };

    function groupRestore$1 ({ keys, values, target }) {
      if (target == null) return
      const length = keys.length;
      for (var i = 0; i < length; i++) {
        const k = keys[i];
        target[k] = values[i];
      }
    }

    function groupRedact$1 (o, path, censor, isCensorFct, censorFctTakesPath) {
      const target = get(o, path);
      if (target == null) return { keys: null, values: null, target: null, flat: true }
      const keys = Object.keys(target);
      const keysLength = keys.length;
      const pathLength = path.length;
      const pathWithKey = censorFctTakesPath ? [...path] : undefined;
      const values = new Array(keysLength);

      for (var i = 0; i < keysLength; i++) {
        const key = keys[i];
        values[i] = target[key];

        if (censorFctTakesPath) {
          pathWithKey[pathLength] = key;
          target[key] = censor(target[key], pathWithKey);
        } else if (isCensorFct) {
          target[key] = censor(target[key]);
        } else {
          target[key] = censor;
        }
      }
      return { keys, values, target, flat: true }
    }

    function nestedRestore$1 (arr) {
      const length = arr.length;
      for (var i = 0; i < length; i++) {
        const { key, target, value } = arr[i];
        if (has(target, key)) {
          target[key] = value;
        }
        /* istanbul ignore else */
        if (typeof target === 'object') {
          const targetKeys = Object.keys(target);
          for (var j = 0; j < targetKeys.length; j++) {
            const tKey = targetKeys[j];
            const subTarget = target[tKey];
            if (has(subTarget, key)) {
              subTarget[key] = value;
            }
          }
        }
      }
    }

    function nestedRedact$1 (store, o, path, ns, censor, isCensorFct, censorFctTakesPath) {
      const target = get(o, path);
      if (target == null) return
      const keys = Object.keys(target);
      const keysLength = keys.length;
      for (var i = 0; i < keysLength; i++) {
        const key = keys[i];
        const { value, parent, exists } =
          specialSet(target, key, path, ns, censor, isCensorFct, censorFctTakesPath);

        if (exists === true && parent !== null) {
          store.push({ key: ns[ns.length - 1], target: parent, value });
        }
      }
      return store
    }

    function has (obj, prop) {
      return obj !== undefined && obj !== null
        ? ('hasOwn' in Object ? Object.hasOwn(obj, prop) : Object.prototype.hasOwnProperty.call(obj, prop))
        : false
    }

    function specialSet (o, k, path, afterPath, censor, isCensorFct, censorFctTakesPath) {
      const afterPathLen = afterPath.length;
      const lastPathIndex = afterPathLen - 1;
      const originalKey = k;
      var i = -1;
      var n;
      var nv;
      var ov;
      var oov = null;
      var exists = true;
      var wc = null;
      ov = n = o[k];
      if (typeof n !== 'object') return { value: null, parent: null, exists }
      while (n != null && ++i < afterPathLen) {
        k = afterPath[i];
        oov = ov;
        if (k !== '*' && !wc && !(typeof n === 'object' && k in n)) {
          exists = false;
          break
        }
        if (k === '*') {
          wc = k;
          if (i !== lastPathIndex) {
            continue
          }
        }
        if (wc) {
          const wcKeys = Object.keys(n);
          for (var j = 0; j < wcKeys.length; j++) {
            const wck = wcKeys[j];
            const wcov = n[wck];
            const kIsWc = k === '*';
            if (kIsWc || (typeof wcov === 'object' && wcov !== null && k in wcov)) {
              if (kIsWc) {
                ov = wcov;
              } else {
                ov = wcov[k];
              }
              nv = (i !== lastPathIndex)
                ? ov
                : (isCensorFct
                  ? (censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov))
                  : censor);
              if (kIsWc) {
                n[wck] = nv;
              } else {
                if (wcov[k] === nv) {
                  exists = false;
                } else {
                  wcov[k] = (nv === undefined && censor !== undefined) || (has(wcov, k) && nv === ov) ? wcov[k] : nv;
                }
              }
            }
          }
          wc = null;
        } else {
          ov = n[k];
          nv = (i !== lastPathIndex)
            ? ov
            : (isCensorFct
              ? (censorFctTakesPath ? censor(ov, [...path, originalKey, ...afterPath]) : censor(ov))
              : censor);
          n[k] = (has(n, k) && nv === ov) || (nv === undefined && censor !== undefined) ? n[k] : nv;
          n = n[k];
        }
        if (typeof n !== 'object') break
        // prevent circular structure, see https://github.com/pinojs/pino/issues/1513
        if (ov === oov) {
          exists = false;
        }
      }
      return { value: ov, parent: oov, exists }
    }

    function get (o, p) {
      var i = -1;
      var l = p.length;
      var n = o;
      while (n != null && ++i < l) {
        n = n[p[i]];
      }
      return n
    }

    const { groupRestore, nestedRestore } = modifiers;

    var restorer_1 = restorer$1;

    function restorer$1 ({ secret, wcLen }) {
      return function compileRestore () {
        if (this.restore) return
        const paths = Object.keys(secret);
        const resetters = resetTmpl(secret, paths);
        const hasWildcards = wcLen > 0;
        const state = hasWildcards ? { secret, groupRestore, nestedRestore } : { secret };
        /* eslint-disable-next-line */
        this.restore = Function(
          'o',
          restoreTmpl(resetters, paths, hasWildcards)
        ).bind(state);
      }
    }

    /**
     * Mutates the original object to be censored by restoring its original values
     * prior to censoring.
     *
     * @param {object} secret Compiled object describing which target fields should
     * be censored and the field states.
     * @param {string[]} paths The list of paths to censor as provided at
     * initialization time.
     *
     * @returns {string} String of JavaScript to be used by `Function()`. The
     * string compiles to the function that does the work in the description.
     */
    function resetTmpl (secret, paths) {
      return paths.map((path) => {
        const { circle, escPath, leadingBracket } = secret[path];
        const delim = leadingBracket ? '' : '.';
        const reset = circle
          ? `o.${circle} = secret[${escPath}].val`
          : `o${delim}${path} = secret[${escPath}].val`;
        const clear = `secret[${escPath}].val = undefined`;
        return `
      if (secret[${escPath}].val !== undefined) {
        try { ${reset} } catch (e) {}
        ${clear}
      }
    `
      }).join('')
    }

    /**
     * Creates the body of the restore function
     *
     * Restoration of the redacted object happens
     * backwards, in reverse order of redactions,
     * so that repeated redactions on the same object
     * property can be eventually rolled back to the
     * original value.
     *
     * This way dynamic redactions are restored first,
     * starting from the last one working backwards and
     * followed by the static ones.
     *
     * @returns {string} the body of the restore function
     */
    function restoreTmpl (resetters, paths, hasWildcards) {
      const dynamicReset = hasWildcards === true ? `
    const keys = Object.keys(secret)
    const len = keys.length
    for (var i = len - 1; i >= ${paths.length}; i--) {
      const k = keys[i]
      const o = secret[k]
      if (o.flat === true) this.groupRestore(o)
      else this.nestedRestore(o)
      secret[k] = null
    }
  ` : '';

      return `
    const secret = this.secret
    ${dynamicReset}
    ${resetters}
    return o
  `
    }

    var state_1 = state$1;

    function state$1 (o) {
      const {
        secret,
        censor,
        compileRestore,
        serialize,
        groupRedact,
        nestedRedact,
        wildcards,
        wcLen
      } = o;
      const builder = [{ secret, censor, compileRestore }];
      if (serialize !== false) builder.push({ serialize });
      if (wcLen > 0) builder.push({ groupRedact, nestedRedact, wildcards, wcLen });
      return Object.assign(...builder)
    }

    const validator$2 = validator_1;
    const parse$f = parse_1$2;
    const redactor = redactor_1;
    const restorer = restorer_1;
    const { groupRedact, nestedRedact } = modifiers;
    const state = state_1;
    const rx$1 = rx$4;
    const validate$7 = validator$2();
    const noop$6 = (o) => o;
    noop$6.restore = noop$6;

    const DEFAULT_CENSOR = '[REDACTED]';
    fastRedact$1.rx = rx$1;
    fastRedact$1.validator = validator$2;

    var fastRedact_1 = fastRedact$1;

    function fastRedact$1 (opts = {}) {
      const paths = Array.from(new Set(opts.paths || []));
      const serialize = 'serialize' in opts ? (
        opts.serialize === false ? opts.serialize
          : (typeof opts.serialize === 'function' ? opts.serialize : JSON.stringify)
      ) : JSON.stringify;
      const remove = opts.remove;
      if (remove === true && serialize !== JSON.stringify) {
        throw Error('fast-redact – remove option may only be set when serializer is JSON.stringify')
      }
      const censor = remove === true
        ? undefined
        : 'censor' in opts ? opts.censor : DEFAULT_CENSOR;

      const isCensorFct = typeof censor === 'function';
      const censorFctTakesPath = isCensorFct && censor.length > 1;

      if (paths.length === 0) return serialize || noop$6

      validate$7({ paths, serialize, censor });

      const { wildcards, wcLen, secret } = parse$f({ paths, censor });

      const compileRestore = restorer({ secret, wcLen });
      const strict = 'strict' in opts ? opts.strict : true;

      return redactor({ secret, wcLen, serialize, strict, isCensorFct, censorFctTakesPath }, state({
        secret,
        censor,
        compileRestore,
        serialize,
        groupRedact,
        nestedRedact,
        wildcards,
        wcLen
      }))
    }

    const setLevelSym$2 = Symbol('pino.setLevel');
    const getLevelSym$1 = Symbol('pino.getLevel');
    const levelValSym$2 = Symbol('pino.levelVal');
    const useLevelLabelsSym = Symbol('pino.useLevelLabels');
    const useOnlyCustomLevelsSym$3 = Symbol('pino.useOnlyCustomLevels');
    const mixinSym$2 = Symbol('pino.mixin');

    const lsCacheSym$3 = Symbol('pino.lsCache');
    const chindingsSym$3 = Symbol('pino.chindings');

    const asJsonSym$1 = Symbol('pino.asJson');
    const writeSym$2 = Symbol('pino.write');
    const redactFmtSym$3 = Symbol('pino.redactFmt');

    const timeSym$2 = Symbol('pino.time');
    const timeSliceIndexSym$2 = Symbol('pino.timeSliceIndex');
    const streamSym$3 = Symbol('pino.stream');
    const stringifySym$3 = Symbol('pino.stringify');
    const stringifySafeSym$2 = Symbol('pino.stringifySafe');
    const stringifiersSym$3 = Symbol('pino.stringifiers');
    const endSym$2 = Symbol('pino.end');
    const formatOptsSym$3 = Symbol('pino.formatOpts');
    const messageKeySym$2 = Symbol('pino.messageKey');
    const errorKeySym$3 = Symbol('pino.errorKey');
    const nestedKeySym$2 = Symbol('pino.nestedKey');
    const nestedKeyStrSym$2 = Symbol('pino.nestedKeyStr');
    const mixinMergeStrategySym$2 = Symbol('pino.mixinMergeStrategy');

    const wildcardFirstSym$2 = Symbol('pino.wildcardFirst');

    // public symbols, no need to use the same pino
    // version for these
    const serializersSym$4 = Symbol.for('pino.serializers');
    const formattersSym$4 = Symbol.for('pino.formatters');
    const hooksSym$2 = Symbol.for('pino.hooks');
    const needsMetadataGsym$1 = Symbol.for('pino.metadata');

    var symbols$1 = {
      setLevelSym: setLevelSym$2,
      getLevelSym: getLevelSym$1,
      levelValSym: levelValSym$2,
      useLevelLabelsSym,
      mixinSym: mixinSym$2,
      lsCacheSym: lsCacheSym$3,
      chindingsSym: chindingsSym$3,
      asJsonSym: asJsonSym$1,
      writeSym: writeSym$2,
      serializersSym: serializersSym$4,
      redactFmtSym: redactFmtSym$3,
      timeSym: timeSym$2,
      timeSliceIndexSym: timeSliceIndexSym$2,
      streamSym: streamSym$3,
      stringifySym: stringifySym$3,
      stringifySafeSym: stringifySafeSym$2,
      stringifiersSym: stringifiersSym$3,
      endSym: endSym$2,
      formatOptsSym: formatOptsSym$3,
      messageKeySym: messageKeySym$2,
      errorKeySym: errorKeySym$3,
      nestedKeySym: nestedKeySym$2,
      wildcardFirstSym: wildcardFirstSym$2,
      needsMetadataGsym: needsMetadataGsym$1,
      useOnlyCustomLevelsSym: useOnlyCustomLevelsSym$3,
      formattersSym: formattersSym$4,
      hooksSym: hooksSym$2,
      nestedKeyStrSym: nestedKeyStrSym$2,
      mixinMergeStrategySym: mixinMergeStrategySym$2
    };

    const fastRedact = fastRedact_1;
    const { redactFmtSym: redactFmtSym$2, wildcardFirstSym: wildcardFirstSym$1 } = symbols$1;
    const { rx, validator: validator$1 } = fastRedact;

    const validate$6 = validator$1({
      ERR_PATHS_MUST_BE_STRINGS: () => 'pino – redacted paths must be strings',
      ERR_INVALID_PATH: (s) => `pino – redact paths array contains an invalid path (${s})`
    });

    const CENSOR = '[Redacted]';
    const strict = false; // TODO should this be configurable?

    function redaction$2 (opts, serialize) {
      const { paths, censor } = handle(opts);

      const shape = paths.reduce((o, str) => {
        rx.lastIndex = 0;
        const first = rx.exec(str);
        const next = rx.exec(str);

        // ns is the top-level path segment, brackets + quoting removed.
        let ns = first[1] !== undefined
          ? first[1].replace(/^(?:"|'|`)(.*)(?:"|'|`)$/, '$1')
          : first[0];

        if (ns === '*') {
          ns = wildcardFirstSym$1;
        }

        // top level key:
        if (next === null) {
          o[ns] = null;
          return o
        }

        // path with at least two segments:
        // if ns is already redacted at the top level, ignore lower level redactions
        if (o[ns] === null) {
          return o
        }

        const { index } = next;
        const nextPath = `${str.substr(index, str.length - 1)}`;

        o[ns] = o[ns] || [];

        // shape is a mix of paths beginning with literal values and wildcard
        // paths [ "a.b.c", "*.b.z" ] should reduce to a shape of
        // { "a": [ "b.c", "b.z" ], *: [ "b.z" ] }
        // note: "b.z" is in both "a" and * arrays because "a" matches the wildcard.
        // (* entry has wildcardFirstSym as key)
        if (ns !== wildcardFirstSym$1 && o[ns].length === 0) {
          // first time ns's get all '*' redactions so far
          o[ns].push(...(o[wildcardFirstSym$1] || []));
        }

        if (ns === wildcardFirstSym$1) {
          // new * path gets added to all previously registered literal ns's.
          Object.keys(o).forEach(function (k) {
            if (o[k]) {
              o[k].push(nextPath);
            }
          });
        }

        o[ns].push(nextPath);
        return o
      }, {});

      // the redactor assigned to the format symbol key
      // provides top level redaction for instances where
      // an object is interpolated into the msg string
      const result = {
        [redactFmtSym$2]: fastRedact({ paths, censor, serialize, strict })
      };

      const topCensor = (...args) => {
        return typeof censor === 'function' ? serialize(censor(...args)) : serialize(censor)
      };

      return [...Object.keys(shape), ...Object.getOwnPropertySymbols(shape)].reduce((o, k) => {
        // top level key:
        if (shape[k] === null) {
          o[k] = (value) => topCensor(value, [k]);
        } else {
          const wrappedCensor = typeof censor === 'function'
            ? (value, path) => {
                return censor(value, [k, ...path])
              }
            : censor;
          o[k] = fastRedact({
            paths: shape[k],
            censor: wrappedCensor,
            serialize,
            strict
          });
        }
        return o
      }, result)
    }

    function handle (opts) {
      if (Array.isArray(opts)) {
        opts = { paths: opts, censor: CENSOR };
        validate$6(opts);
        return opts
      }
      let { paths, censor = CENSOR, remove } = opts;
      if (Array.isArray(paths) === false) { throw Error('pino – redact must contain an array of strings') }
      if (remove === true) censor = undefined;
      validate$6({ paths, censor });

      return { paths, censor }
    }

    var redaction_1 = redaction$2;

    const nullTime$1 = () => '';

    const epochTime$1 = () => `,"time":${Date.now()}`;

    const unixTime = () => `,"time":${Math.round(Date.now() / 1000.0)}`;

    const isoTime = () => `,"time":"${new Date(Date.now()).toISOString()}"`; // using Date.now() for testability

    var time$1 = { nullTime: nullTime$1, epochTime: epochTime$1, unixTime, isoTime };

    function tryStringify (o) {
      try { return JSON.stringify(o) } catch(e) { return '"[Circular]"' }
    }

    var quickFormatUnescaped = format$9;

    function format$9(f, args, opts) {
      var ss = (opts && opts.stringify) || tryStringify;
      var offset = 1;
      if (typeof f === 'object' && f !== null) {
        var len = args.length + offset;
        if (len === 1) return f
        var objects = new Array(len);
        objects[0] = ss(f);
        for (var index = 1; index < len; index++) {
          objects[index] = ss(args[index]);
        }
        return objects.join(' ')
      }
      if (typeof f !== 'string') {
        return f
      }
      var argLen = args.length;
      if (argLen === 0) return f
      var str = '';
      var a = 1 - offset;
      var lastPos = -1;
      var flen = (f && f.length) || 0;
      for (var i = 0; i < flen;) {
        if (f.charCodeAt(i) === 37 && i + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f.charCodeAt(i + 1)) {
            case 100: // 'd'
            case 102: // 'f'
              if (a >= argLen)
                break
              if (args[a] == null)  break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += Number(args[a]);
              lastPos = i + 2;
              i++;
              break
            case 105: // 'i'
              if (a >= argLen)
                break
              if (args[a] == null)  break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += Math.floor(Number(args[a]));
              lastPos = i + 2;
              i++;
              break
            case 79: // 'O'
            case 111: // 'o'
            case 106: // 'j'
              if (a >= argLen)
                break
              if (args[a] === undefined) break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              var type = typeof args[a];
              if (type === 'string') {
                str += '\'' + args[a] + '\'';
                lastPos = i + 2;
                i++;
                break
              }
              if (type === 'function') {
                str += args[a].name || '<anonymous>';
                lastPos = i + 2;
                i++;
                break
              }
              str += ss(args[a]);
              lastPos = i + 2;
              i++;
              break
            case 115: // 's'
              if (a >= argLen)
                break
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += String(args[a]);
              lastPos = i + 2;
              i++;
              break
            case 37: // '%'
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += '%';
              lastPos = i + 2;
              i++;
              a--;
              break
          }
          ++a;
        }
        ++i;
      }
      if (lastPos === -1)
        return f
      else if (lastPos < flen) {
        str += f.slice(lastPos);
      }

      return str
    }

    var atomicSleepExports = {};
    var atomicSleep = {
      get exports(){ return atomicSleepExports; },
      set exports(v){ atomicSleepExports = v; },
    };

    var hasRequiredAtomicSleep;

    function requireAtomicSleep () {
    	if (hasRequiredAtomicSleep) return atomicSleepExports;
    	hasRequiredAtomicSleep = 1;

    	/* global SharedArrayBuffer, Atomics */

    	if (typeof SharedArrayBuffer !== 'undefined' && typeof Atomics !== 'undefined') {
    	  const nil = new Int32Array(new SharedArrayBuffer(4));

    	  function sleep (ms) {
    	    // also filters out NaN, non-number types, including empty strings, but allows bigints
    	    const valid = ms > 0 && ms < Infinity; 
    	    if (valid === false) {
    	      if (typeof ms !== 'number' && typeof ms !== 'bigint') {
    	        throw TypeError('sleep: ms must be a number')
    	      }
    	      throw RangeError('sleep: ms must be a number that is greater than 0 but less than Infinity')
    	    }

    	    Atomics.wait(nil, 0, 0, Number(ms));
    	  }
    	  atomicSleep.exports = sleep;
    	} else {

    	  function sleep (ms) {
    	    // also filters out NaN, non-number types, including empty strings, but allows bigints
    	    const valid = ms > 0 && ms < Infinity; 
    	    if (valid === false) {
    	      if (typeof ms !== 'number' && typeof ms !== 'bigint') {
    	        throw TypeError('sleep: ms must be a number')
    	      }
    	      throw RangeError('sleep: ms must be a number that is greater than 0 but less than Infinity')
    	    }
    	  }

    	  atomicSleep.exports = sleep;

    	}
    	return atomicSleepExports;
    }

    const fs = require$$0$4;
    const EventEmitter$1 = require$$1$2;
    const inherits = require$$2.inherits;
    const path = require$$3$3;
    const sleep = requireAtomicSleep();

    const BUSY_WRITE_TIMEOUT = 100;

    // 16 KB. Don't write more than docker buffer size.
    // https://github.com/moby/moby/blob/513ec73831269947d38a644c278ce3cac36783b2/daemon/logger/copier.go#L13
    const MAX_WRITE = 16 * 1024;

    function openFile (file, sonic) {
      sonic._opening = true;
      sonic._writing = true;
      sonic._asyncDrainScheduled = false;

      // NOTE: 'error' and 'ready' events emitted below only relevant when sonic.sync===false
      // for sync mode, there is no way to add a listener that will receive these

      function fileOpened (err, fd) {
        if (err) {
          sonic._reopening = false;
          sonic._writing = false;
          sonic._opening = false;

          if (sonic.sync) {
            process.nextTick(() => {
              if (sonic.listenerCount('error') > 0) {
                sonic.emit('error', err);
              }
            });
          } else {
            sonic.emit('error', err);
          }
          return
        }

        sonic.fd = fd;
        sonic.file = file;
        sonic._reopening = false;
        sonic._opening = false;
        sonic._writing = false;

        if (sonic.sync) {
          process.nextTick(() => sonic.emit('ready'));
        } else {
          sonic.emit('ready');
        }

        if (sonic._reopening) {
          return
        }

        // start
        if (!sonic._writing && sonic._len > sonic.minLength && !sonic.destroyed) {
          actualWrite(sonic);
        }
      }

      const flags = sonic.append ? 'a' : 'w';
      const mode = sonic.mode;

      if (sonic.sync) {
        try {
          if (sonic.mkdir) fs.mkdirSync(path.dirname(file), { recursive: true });
          const fd = fs.openSync(file, flags, mode);
          fileOpened(null, fd);
        } catch (err) {
          fileOpened(err);
          throw err
        }
      } else if (sonic.mkdir) {
        fs.mkdir(path.dirname(file), { recursive: true }, (err) => {
          if (err) return fileOpened(err)
          fs.open(file, flags, mode, fileOpened);
        });
      } else {
        fs.open(file, flags, mode, fileOpened);
      }
    }

    function SonicBoom$1 (opts) {
      if (!(this instanceof SonicBoom$1)) {
        return new SonicBoom$1(opts)
      }

      let { fd, dest, minLength, maxLength, maxWrite, sync, append = true, mode, mkdir, retryEAGAIN, fsync } = opts || {};

      fd = fd || dest;

      this._bufs = [];
      this._len = 0;
      this.fd = -1;
      this._writing = false;
      this._writingBuf = '';
      this._ending = false;
      this._reopening = false;
      this._asyncDrainScheduled = false;
      this._hwm = Math.max(minLength || 0, 16387);
      this.file = null;
      this.destroyed = false;
      this.minLength = minLength || 0;
      this.maxLength = maxLength || 0;
      this.maxWrite = maxWrite || MAX_WRITE;
      this.sync = sync || false;
      this._fsync = fsync || false;
      this.append = append || false;
      this.mode = mode;
      this.retryEAGAIN = retryEAGAIN || (() => true);
      this.mkdir = mkdir || false;

      if (typeof fd === 'number') {
        this.fd = fd;
        process.nextTick(() => this.emit('ready'));
      } else if (typeof fd === 'string') {
        openFile(fd, this);
      } else {
        throw new Error('SonicBoom supports only file descriptors and files')
      }
      if (this.minLength >= this.maxWrite) {
        throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`)
      }

      this.release = (err, n) => {
        if (err) {
          if (err.code === 'EAGAIN' && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {
            if (this.sync) {
              // This error code should not happen in sync mode, because it is
              // not using the underlining operating system asynchronous functions.
              // However it happens, and so we handle it.
              // Ref: https://github.com/pinojs/pino/issues/783
              try {
                sleep(BUSY_WRITE_TIMEOUT);
                this.release(undefined, 0);
              } catch (err) {
                this.release(err);
              }
            } else {
              // Let's give the destination some time to process the chunk.
              setTimeout(() => {
                fs.write(this.fd, this._writingBuf, 'utf8', this.release);
              }, BUSY_WRITE_TIMEOUT);
            }
          } else {
            this._writing = false;

            this.emit('error', err);
          }
          return
        }

        this.emit('write', n);

        this._len -= n;
        // In case of multi-byte characters, the length of the written buffer
        // may be different from the length of the string. Let's make sure
        // we do not have an accumulated string with a negative length.
        // This also mean that ._len is not precise, but it's not a problem as some
        // writes might be triggered earlier than ._minLength.
        if (this._len < 0) {
          this._len = 0;
        }

        // TODO if we have a multi-byte character in the buffer, we need to
        // n might not be the same as this._writingBuf.length, so we might loose
        // characters here. The solution to this problem is to use a Buffer for _writingBuf.
        this._writingBuf = this._writingBuf.slice(n);

        if (this._writingBuf.length) {
          if (!this.sync) {
            fs.write(this.fd, this._writingBuf, 'utf8', this.release);
            return
          }

          try {
            do {
              const n = fs.writeSync(this.fd, this._writingBuf, 'utf8');
              this._len -= n;
              this._writingBuf = this._writingBuf.slice(n);
            } while (this._writingBuf)
          } catch (err) {
            this.release(err);
            return
          }
        }

        if (this._fsync) {
          fs.fsyncSync(this.fd);
        }

        const len = this._len;
        if (this._reopening) {
          this._writing = false;
          this._reopening = false;
          this.reopen();
        } else if (len > this.minLength) {
          actualWrite(this);
        } else if (this._ending) {
          if (len > 0) {
            actualWrite(this);
          } else {
            this._writing = false;
            actualClose(this);
          }
        } else {
          this._writing = false;
          if (this.sync) {
            if (!this._asyncDrainScheduled) {
              this._asyncDrainScheduled = true;
              process.nextTick(emitDrain, this);
            }
          } else {
            this.emit('drain');
          }
        }
      };

      this.on('newListener', function (name) {
        if (name === 'drain') {
          this._asyncDrainScheduled = false;
        }
      });
    }

    function emitDrain (sonic) {
      const hasListeners = sonic.listenerCount('drain') > 0;
      if (!hasListeners) return
      sonic._asyncDrainScheduled = false;
      sonic.emit('drain');
    }

    inherits(SonicBoom$1, EventEmitter$1);

    SonicBoom$1.prototype.write = function (data) {
      if (this.destroyed) {
        throw new Error('SonicBoom destroyed')
      }

      const len = this._len + data.length;
      const bufs = this._bufs;

      if (this.maxLength && len > this.maxLength) {
        this.emit('drop', data);
        return this._len < this._hwm
      }

      if (
        bufs.length === 0 ||
        bufs[bufs.length - 1].length + data.length > this.maxWrite
      ) {
        bufs.push('' + data);
      } else {
        bufs[bufs.length - 1] += data;
      }

      this._len = len;

      if (!this._writing && this._len >= this.minLength) {
        actualWrite(this);
      }

      return this._len < this._hwm
    };

    SonicBoom$1.prototype.flush = function () {
      if (this.destroyed) {
        throw new Error('SonicBoom destroyed')
      }

      if (this._writing || this.minLength <= 0) {
        return
      }

      if (this._bufs.length === 0) {
        this._bufs.push('');
      }

      actualWrite(this);
    };

    SonicBoom$1.prototype.reopen = function (file) {
      if (this.destroyed) {
        throw new Error('SonicBoom destroyed')
      }

      if (this._opening) {
        this.once('ready', () => {
          this.reopen(file);
        });
        return
      }

      if (this._ending) {
        return
      }

      if (!this.file) {
        throw new Error('Unable to reopen a file descriptor, you must pass a file to SonicBoom')
      }

      this._reopening = true;

      if (this._writing) {
        return
      }

      const fd = this.fd;
      this.once('ready', () => {
        if (fd !== this.fd) {
          fs.close(fd, (err) => {
            if (err) {
              return this.emit('error', err)
            }
          });
        }
      });

      openFile(file || this.file, this);
    };

    SonicBoom$1.prototype.end = function () {
      if (this.destroyed) {
        throw new Error('SonicBoom destroyed')
      }

      if (this._opening) {
        this.once('ready', () => {
          this.end();
        });
        return
      }

      if (this._ending) {
        return
      }

      this._ending = true;

      if (this._writing) {
        return
      }

      if (this._len > 0 && this.fd >= 0) {
        actualWrite(this);
      } else {
        actualClose(this);
      }
    };

    SonicBoom$1.prototype.flushSync = function () {
      if (this.destroyed) {
        throw new Error('SonicBoom destroyed')
      }

      if (this.fd < 0) {
        throw new Error('sonic boom is not ready yet')
      }

      if (!this._writing && this._writingBuf.length > 0) {
        this._bufs.unshift(this._writingBuf);
        this._writingBuf = '';
      }

      let buf = '';
      while (this._bufs.length || buf.length) {
        if (buf.length <= 0) {
          buf = this._bufs[0];
        }
        try {
          const n = fs.writeSync(this.fd, buf, 'utf8');
          buf = buf.slice(n);
          this._len = Math.max(this._len - n, 0);
          if (buf.length <= 0) {
            this._bufs.shift();
          }
        } catch (err) {
          if (err.code !== 'EAGAIN' || !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
            throw err
          }

          sleep(BUSY_WRITE_TIMEOUT);
        }
      }
    };

    SonicBoom$1.prototype.destroy = function () {
      if (this.destroyed) {
        return
      }
      actualClose(this);
    };

    function actualWrite (sonic) {
      const release = sonic.release;
      sonic._writing = true;
      sonic._writingBuf = sonic._writingBuf || sonic._bufs.shift() || '';

      if (sonic.sync) {
        try {
          const written = fs.writeSync(sonic.fd, sonic._writingBuf, 'utf8');
          release(null, written);
        } catch (err) {
          release(err);
        }
      } else {
        fs.write(sonic.fd, sonic._writingBuf, 'utf8', release);
      }
    }

    function actualClose (sonic) {
      if (sonic.fd === -1) {
        sonic.once('ready', actualClose.bind(null, sonic));
        return
      }

      sonic.destroyed = true;
      sonic._bufs = [];

      if (sonic.fd !== 1 && sonic.fd !== 2) {
        fs.close(sonic.fd, done);
      } else {
        setImmediate(done);
      }

      function done (err) {
        if (err) {
          sonic.emit('error', err);
          return
        }

        if (sonic._ending && !sonic._writing) {
          sonic.emit('finish');
        }
        sonic.emit('close');
      }
    }

    /**
     * These export configurations enable JS and TS developers
     * to consumer SonicBoom in whatever way best suits their needs.
     * Some examples of supported import syntax includes:
     * - `const SonicBoom = require('SonicBoom')`
     * - `const { SonicBoom } = require('SonicBoom')`
     * - `import * as SonicBoom from 'SonicBoom'`
     * - `import { SonicBoom } from 'SonicBoom'`
     * - `import SonicBoom from 'SonicBoom'`
     */
    SonicBoom$1.SonicBoom = SonicBoom$1;
    SonicBoom$1.default = SonicBoom$1;
    var sonicBoom = SonicBoom$1;

    const refs = {
      exit: [],
      beforeExit: []
    };
    const functions = {
      exit: onExit$1,
      beforeExit: onBeforeExit
    };
    const registry = new FinalizationRegistry(clear);

    function install (event) {
      if (refs[event].length > 0) {
        return
      }

      process.on(event, functions[event]);
    }

    function uninstall (event) {
      if (refs[event].length > 0) {
        return
      }
      process.removeListener(event, functions[event]);
    }

    function onExit$1 () {
      callRefs('exit');
    }

    function onBeforeExit () {
      callRefs('beforeExit');
    }

    function callRefs (event) {
      for (const ref of refs[event]) {
        const obj = ref.deref();
        const fn = ref.fn;

        // This should always happen, however GC is
        // undeterministic so it might not happen.
        /* istanbul ignore else */
        if (obj !== undefined) {
          fn(obj, event);
        }
      }
    }

    function clear (ref) {
      for (const event of ['exit', 'beforeExit']) {
        const index = refs[event].indexOf(ref);
        refs[event].splice(index, index + 1);
        uninstall(event);
      }
    }

    function _register (event, obj, fn) {
      if (obj === undefined) {
        throw new Error('the object can\'t be undefined')
      }
      install(event);
      const ref = new WeakRef(obj);
      ref.fn = fn;

      registry.register(obj, ref);
      refs[event].push(ref);
    }

    function register (obj, fn) {
      _register('exit', obj, fn);
    }

    function registerBeforeExit (obj, fn) {
      _register('beforeExit', obj, fn);
    }

    function unregister (obj) {
      registry.unregister(obj);
      for (const event of ['exit', 'beforeExit']) {
        refs[event] = refs[event].filter((ref) => {
          const _obj = ref.deref();
          return _obj && _obj !== obj
        });
        uninstall(event);
      }
    }

    var onExitLeakFree = {
      register,
      registerBeforeExit,
      unregister
    };

    var name = "thread-stream";
    var version$2 = "2.2.0";
    var description$3 = "A streaming way to send data to a Node.js Worker Thread";
    var main$1 = "index.js";
    var types$9 = "index.d.ts";
    var dependencies$3 = {
    	"real-require": "^0.2.0"
    };
    var devDependencies = {
    	"@types/node": "^18.0.0",
    	"@types/tap": "^15.0.0",
    	desm: "^1.3.0",
    	fastbench: "^1.0.1",
    	husky: "^8.0.1",
    	"sonic-boom": "^3.0.0",
    	standard: "^17.0.0",
    	tap: "^16.2.0",
    	"ts-node": "^10.8.0",
    	typescript: "^4.7.2",
    	"why-is-node-running": "^2.2.2"
    };
    var scripts = {
    	test: "standard && npm run transpile && tap test/*.test.*js && tap --ts test/*.test.*ts",
    	"test:ci": "standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts",
    	"test:ci:js": "tap --no-check-coverage --coverage-report=lcovonly \"test/**/*.test.*js\"",
    	"test:ci:ts": "tap --ts --no-check-coverage --coverage-report=lcovonly \"test/**/*.test.*ts\"",
    	"test:yarn": "npm run transpile && tap \"test/**/*.test.js\" --no-check-coverage",
    	transpile: "sh ./test/ts/transpile.sh",
    	prepare: "husky install"
    };
    var standard = {
    	ignore: [
    		"test/ts/**/*"
    	]
    };
    var repository = {
    	type: "git",
    	url: "git+https://github.com/mcollina/thread-stream.git"
    };
    var keywords = [
    	"worker",
    	"thread",
    	"threads",
    	"stream"
    ];
    var author = "Matteo Collina <hello@matteocollina.com>";
    var license = "MIT";
    var bugs = {
    	url: "https://github.com/mcollina/thread-stream/issues"
    };
    var homepage = "https://github.com/mcollina/thread-stream#readme";
    var require$$0 = {
    	name: name,
    	version: version$2,
    	description: description$3,
    	main: main$1,
    	types: types$9,
    	dependencies: dependencies$3,
    	devDependencies: devDependencies,
    	scripts: scripts,
    	standard: standard,
    	repository: repository,
    	keywords: keywords,
    	author: author,
    	license: license,
    	bugs: bugs,
    	homepage: homepage
    };

    var wait_1;
    var hasRequiredWait;

    function requireWait () {
    	if (hasRequiredWait) return wait_1;
    	hasRequiredWait = 1;

    	const MAX_TIMEOUT = 1000;

    	function wait (state, index, expected, timeout, done) {
    	  const max = Date.now() + timeout;
    	  let current = Atomics.load(state, index);
    	  if (current === expected) {
    	    done(null, 'ok');
    	    return
    	  }
    	  let prior = current;
    	  const check = (backoff) => {
    	    if (Date.now() > max) {
    	      done(null, 'timed-out');
    	    } else {
    	      setTimeout(() => {
    	        prior = current;
    	        current = Atomics.load(state, index);
    	        if (current === prior) {
    	          check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
    	        } else {
    	          if (current === expected) done(null, 'ok');
    	          else done(null, 'not-equal');
    	        }
    	      }, backoff);
    	    }
    	  };
    	  check(1);
    	}

    	// let waitDiffCount = 0
    	function waitDiff (state, index, expected, timeout, done) {
    	  // const id = waitDiffCount++
    	  // process._rawDebug(`>>> waitDiff ${id}`)
    	  const max = Date.now() + timeout;
    	  let current = Atomics.load(state, index);
    	  if (current !== expected) {
    	    done(null, 'ok');
    	    return
    	  }
    	  const check = (backoff) => {
    	    // process._rawDebug(`${id} ${index} current ${current} expected ${expected}`)
    	    // process._rawDebug('' + backoff)
    	    if (Date.now() > max) {
    	      done(null, 'timed-out');
    	    } else {
    	      setTimeout(() => {
    	        current = Atomics.load(state, index);
    	        if (current !== expected) {
    	          done(null, 'ok');
    	        } else {
    	          check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
    	        }
    	      }, backoff);
    	    }
    	  };
    	  check(1);
    	}

    	wait_1 = { wait, waitDiff };
    	return wait_1;
    }

    var indexes;
    var hasRequiredIndexes;

    function requireIndexes () {
    	if (hasRequiredIndexes) return indexes;
    	hasRequiredIndexes = 1;

    	const WRITE_INDEX = 4;
    	const READ_INDEX = 8;

    	indexes = {
    	  WRITE_INDEX,
    	  READ_INDEX
    	};
    	return indexes;
    }

    var threadStream;
    var hasRequiredThreadStream;

    function requireThreadStream () {
    	if (hasRequiredThreadStream) return threadStream;
    	hasRequiredThreadStream = 1;

    	const { version } = require$$0;
    	const { EventEmitter } = require$$1$2;
    	const { Worker } = require$$2$2;
    	const { join } = require$$3$3;
    	const { pathToFileURL } = require$$0$6;
    	const { wait } = requireWait();
    	const {
    	  WRITE_INDEX,
    	  READ_INDEX
    	} = requireIndexes();
    	const buffer = require$$0$5;
    	const assert = require$$0$7;

    	const kImpl = Symbol('kImpl');

    	// V8 limit for string size
    	const MAX_STRING = buffer.constants.MAX_STRING_LENGTH;

    	class FakeWeakRef {
    	  constructor (value) {
    	    this._value = value;
    	  }

    	  deref () {
    	    return this._value
    	  }
    	}

    	const FinalizationRegistry = commonjsGlobal.FinalizationRegistry || class FakeFinalizationRegistry {
    	  register () {}

    	  unregister () {}
    	};

    	const WeakRef = commonjsGlobal.WeakRef || FakeWeakRef;

    	const registry = new FinalizationRegistry((worker) => {
    	  if (worker.exited) {
    	    return
    	  }
    	  worker.terminate();
    	});

    	function createWorker (stream, opts) {
    	  const { filename, workerData } = opts;

    	  const bundlerOverrides = '__bundlerPathsOverrides' in globalThis ? globalThis.__bundlerPathsOverrides : {};
    	  const toExecute = bundlerOverrides['thread-stream-worker'] || join(__dirname, 'lib', 'worker.js');

    	  const worker = new Worker(toExecute, {
    	    ...opts.workerOpts,
    	    workerData: {
    	      filename: filename.indexOf('file://') === 0
    	        ? filename
    	        : pathToFileURL(filename).href,
    	      dataBuf: stream[kImpl].dataBuf,
    	      stateBuf: stream[kImpl].stateBuf,
    	      workerData: {
    	        $context: {
    	          threadStreamVersion: version
    	        },
    	        ...workerData
    	      }
    	    }
    	  });

    	  // We keep a strong reference for now,
    	  // we need to start writing first
    	  worker.stream = new FakeWeakRef(stream);

    	  worker.on('message', onWorkerMessage);
    	  worker.on('exit', onWorkerExit);
    	  registry.register(stream, worker);

    	  return worker
    	}

    	function drain (stream) {
    	  assert(!stream[kImpl].sync);
    	  if (stream[kImpl].needDrain) {
    	    stream[kImpl].needDrain = false;
    	    stream.emit('drain');
    	  }
    	}

    	function nextFlush (stream) {
    	  const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    	  let leftover = stream[kImpl].data.length - writeIndex;

    	  if (leftover > 0) {
    	    if (stream[kImpl].buf.length === 0) {
    	      stream[kImpl].flushing = false;

    	      if (stream[kImpl].ending) {
    	        end(stream);
    	      } else if (stream[kImpl].needDrain) {
    	        process.nextTick(drain, stream);
    	      }

    	      return
    	    }

    	    let toWrite = stream[kImpl].buf.slice(0, leftover);
    	    let toWriteBytes = Buffer.byteLength(toWrite);
    	    if (toWriteBytes <= leftover) {
    	      stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
    	      // process._rawDebug('writing ' + toWrite.length)
    	      write(stream, toWrite, nextFlush.bind(null, stream));
    	    } else {
    	      // multi-byte utf-8
    	      stream.flush(() => {
    	        // err is already handled in flush()
    	        if (stream.destroyed) {
    	          return
    	        }

    	        Atomics.store(stream[kImpl].state, READ_INDEX, 0);
    	        Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);

    	        // Find a toWrite length that fits the buffer
    	        // it must exists as the buffer is at least 4 bytes length
    	        // and the max utf-8 length for a char is 4 bytes.
    	        while (toWriteBytes > stream[kImpl].data.length) {
    	          leftover = leftover / 2;
    	          toWrite = stream[kImpl].buf.slice(0, leftover);
    	          toWriteBytes = Buffer.byteLength(toWrite);
    	        }
    	        stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
    	        write(stream, toWrite, nextFlush.bind(null, stream));
    	      });
    	    }
    	  } else if (leftover === 0) {
    	    if (writeIndex === 0 && stream[kImpl].buf.length === 0) {
    	      // we had a flushSync in the meanwhile
    	      return
    	    }
    	    stream.flush(() => {
    	      Atomics.store(stream[kImpl].state, READ_INDEX, 0);
    	      Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
    	      nextFlush(stream);
    	    });
    	  } else {
    	    // This should never happen
    	    destroy(stream, new Error('overwritten'));
    	  }
    	}

    	function onWorkerMessage (msg) {
    	  const stream = this.stream.deref();
    	  if (stream === undefined) {
    	    this.exited = true;
    	    // Terminate the worker.
    	    this.terminate();
    	    return
    	  }

    	  switch (msg.code) {
    	    case 'READY':
    	      // Replace the FakeWeakRef with a
    	      // proper one.
    	      this.stream = new WeakRef(stream);

    	      stream.flush(() => {
    	        stream[kImpl].ready = true;
    	        stream.emit('ready');
    	      });
    	      break
    	    case 'ERROR':
    	      destroy(stream, msg.err);
    	      break
    	    case 'EVENT':
    	      if (Array.isArray(msg.args)) {
    	        stream.emit(msg.name, ...msg.args);
    	      } else {
    	        stream.emit(msg.name, msg.args);
    	      }
    	      break
    	    default:
    	      destroy(stream, new Error('this should not happen: ' + msg.code));
    	  }
    	}

    	function onWorkerExit (code) {
    	  const stream = this.stream.deref();
    	  if (stream === undefined) {
    	    // Nothing to do, the worker already exit
    	    return
    	  }
    	  registry.unregister(stream);
    	  stream.worker.exited = true;
    	  stream.worker.off('exit', onWorkerExit);
    	  destroy(stream, code !== 0 ? new Error('the worker thread exited') : null);
    	}

    	class ThreadStream extends EventEmitter {
    	  constructor (opts = {}) {
    	    super();

    	    if (opts.bufferSize < 4) {
    	      throw new Error('bufferSize must at least fit a 4-byte utf-8 char')
    	    }

    	    this[kImpl] = {};
    	    this[kImpl].stateBuf = new SharedArrayBuffer(128);
    	    this[kImpl].state = new Int32Array(this[kImpl].stateBuf);
    	    this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);
    	    this[kImpl].data = Buffer.from(this[kImpl].dataBuf);
    	    this[kImpl].sync = opts.sync || false;
    	    this[kImpl].ending = false;
    	    this[kImpl].ended = false;
    	    this[kImpl].needDrain = false;
    	    this[kImpl].destroyed = false;
    	    this[kImpl].flushing = false;
    	    this[kImpl].ready = false;
    	    this[kImpl].finished = false;
    	    this[kImpl].errored = null;
    	    this[kImpl].closed = false;
    	    this[kImpl].buf = '';

    	    // TODO (fix): Make private?
    	    this.worker = createWorker(this, opts); // TODO (fix): make private
    	  }

    	  write (data) {
    	    if (this[kImpl].destroyed) {
    	      error(this, new Error('the worker has exited'));
    	      return false
    	    }

    	    if (this[kImpl].ending) {
    	      error(this, new Error('the worker is ending'));
    	      return false
    	    }

    	    if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {
    	      try {
    	        writeSync(this);
    	        this[kImpl].flushing = true;
    	      } catch (err) {
    	        destroy(this, err);
    	        return false
    	      }
    	    }

    	    this[kImpl].buf += data;

    	    if (this[kImpl].sync) {
    	      try {
    	        writeSync(this);
    	        return true
    	      } catch (err) {
    	        destroy(this, err);
    	        return false
    	      }
    	    }

    	    if (!this[kImpl].flushing) {
    	      this[kImpl].flushing = true;
    	      setImmediate(nextFlush, this);
    	    }

    	    this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;
    	    return !this[kImpl].needDrain
    	  }

    	  end () {
    	    if (this[kImpl].destroyed) {
    	      return
    	    }

    	    this[kImpl].ending = true;
    	    end(this);
    	  }

    	  flush (cb) {
    	    if (this[kImpl].destroyed) {
    	      if (typeof cb === 'function') {
    	        process.nextTick(cb, new Error('the worker has exited'));
    	      }
    	      return
    	    }

    	    // TODO write all .buf
    	    const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);
    	    // process._rawDebug(`(flush) readIndex (${Atomics.load(this.state, READ_INDEX)}) writeIndex (${Atomics.load(this.state, WRITE_INDEX)})`)
    	    wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res) => {
    	      if (err) {
    	        destroy(this, err);
    	        process.nextTick(cb, err);
    	        return
    	      }
    	      if (res === 'not-equal') {
    	        // TODO handle deadlock
    	        this.flush(cb);
    	        return
    	      }
    	      process.nextTick(cb);
    	    });
    	  }

    	  flushSync () {
    	    if (this[kImpl].destroyed) {
    	      return
    	    }

    	    writeSync(this);
    	    flushSync(this);
    	  }

    	  unref () {
    	    this.worker.unref();
    	  }

    	  ref () {
    	    this.worker.ref();
    	  }

    	  get ready () {
    	    return this[kImpl].ready
    	  }

    	  get destroyed () {
    	    return this[kImpl].destroyed
    	  }

    	  get closed () {
    	    return this[kImpl].closed
    	  }

    	  get writable () {
    	    return !this[kImpl].destroyed && !this[kImpl].ending
    	  }

    	  get writableEnded () {
    	    return this[kImpl].ending
    	  }

    	  get writableFinished () {
    	    return this[kImpl].finished
    	  }

    	  get writableNeedDrain () {
    	    return this[kImpl].needDrain
    	  }

    	  get writableObjectMode () {
    	    return false
    	  }

    	  get writableErrored () {
    	    return this[kImpl].errored
    	  }
    	}

    	function error (stream, err) {
    	  setImmediate(() => {
    	    stream.emit('error', err);
    	  });
    	}

    	function destroy (stream, err) {
    	  if (stream[kImpl].destroyed) {
    	    return
    	  }
    	  stream[kImpl].destroyed = true;

    	  if (err) {
    	    stream[kImpl].errored = err;
    	    error(stream, err);
    	  }

    	  if (!stream.worker.exited) {
    	    stream.worker.terminate()
    	      .catch(() => {})
    	      .then(() => {
    	        stream[kImpl].closed = true;
    	        stream.emit('close');
    	      });
    	  } else {
    	    setImmediate(() => {
    	      stream[kImpl].closed = true;
    	      stream.emit('close');
    	    });
    	  }
    	}

    	function write (stream, data, cb) {
    	  // data is smaller than the shared buffer length
    	  const current = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    	  const length = Buffer.byteLength(data);
    	  stream[kImpl].data.write(data, current);
    	  Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length);
    	  Atomics.notify(stream[kImpl].state, WRITE_INDEX);
    	  cb();
    	  return true
    	}

    	function end (stream) {
    	  if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {
    	    return
    	  }
    	  stream[kImpl].ended = true;

    	  try {
    	    stream.flushSync();

    	    let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);

    	    // process._rawDebug('writing index')
    	    Atomics.store(stream[kImpl].state, WRITE_INDEX, -1);
    	    // process._rawDebug(`(end) readIndex (${Atomics.load(stream.state, READ_INDEX)}) writeIndex (${Atomics.load(stream.state, WRITE_INDEX)})`)
    	    Atomics.notify(stream[kImpl].state, WRITE_INDEX);

    	    // Wait for the process to complete
    	    let spins = 0;
    	    while (readIndex !== -1) {
    	      // process._rawDebug(`read = ${read}`)
    	      Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);
    	      readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);

    	      if (readIndex === -2) {
    	        destroy(stream, new Error('end() failed'));
    	        return
    	      }

    	      if (++spins === 10) {
    	        destroy(stream, new Error('end() took too long (10s)'));
    	        return
    	      }
    	    }

    	    process.nextTick(() => {
    	      stream[kImpl].finished = true;
    	      stream.emit('finish');
    	    });
    	  } catch (err) {
    	    destroy(stream, err);
    	  }
    	  // process._rawDebug('end finished...')
    	}

    	function writeSync (stream) {
    	  const cb = () => {
    	    if (stream[kImpl].ending) {
    	      end(stream);
    	    } else if (stream[kImpl].needDrain) {
    	      process.nextTick(drain, stream);
    	    }
    	  };
    	  stream[kImpl].flushing = false;

    	  while (stream[kImpl].buf.length !== 0) {
    	    const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
    	    let leftover = stream[kImpl].data.length - writeIndex;
    	    if (leftover === 0) {
    	      flushSync(stream);
    	      Atomics.store(stream[kImpl].state, READ_INDEX, 0);
    	      Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
    	      continue
    	    } else if (leftover < 0) {
    	      // stream should never happen
    	      throw new Error('overwritten')
    	    }

    	    let toWrite = stream[kImpl].buf.slice(0, leftover);
    	    let toWriteBytes = Buffer.byteLength(toWrite);
    	    if (toWriteBytes <= leftover) {
    	      stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
    	      // process._rawDebug('writing ' + toWrite.length)
    	      write(stream, toWrite, cb);
    	    } else {
    	      // multi-byte utf-8
    	      flushSync(stream);
    	      Atomics.store(stream[kImpl].state, READ_INDEX, 0);
    	      Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);

    	      // Find a toWrite length that fits the buffer
    	      // it must exists as the buffer is at least 4 bytes length
    	      // and the max utf-8 length for a char is 4 bytes.
    	      while (toWriteBytes > stream[kImpl].buf.length) {
    	        leftover = leftover / 2;
    	        toWrite = stream[kImpl].buf.slice(0, leftover);
    	        toWriteBytes = Buffer.byteLength(toWrite);
    	      }
    	      stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
    	      write(stream, toWrite, cb);
    	    }
    	  }
    	}

    	function flushSync (stream) {
    	  if (stream[kImpl].flushing) {
    	    throw new Error('unable to flush while flushing')
    	  }

    	  // process._rawDebug('flushSync started')

    	  const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);

    	  let spins = 0;

    	  // TODO handle deadlock
    	  while (true) {
    	    const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);

    	    if (readIndex === -2) {
    	      throw Error('_flushSync failed')
    	    }

    	    // process._rawDebug(`(flushSync) readIndex (${readIndex}) writeIndex (${writeIndex})`)
    	    if (readIndex !== writeIndex) {
    	      // TODO stream timeouts for some reason.
    	      Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1000);
    	    } else {
    	      break
    	    }

    	    if (++spins === 10) {
    	      throw new Error('_flushSync took too long (10s)')
    	    }
    	  }
    	  // process._rawDebug('flushSync finished')
    	}

    	threadStream = ThreadStream;
    	return threadStream;
    }

    var transport_1;
    var hasRequiredTransport;

    function requireTransport () {
    	if (hasRequiredTransport) return transport_1;
    	hasRequiredTransport = 1;

    	const { createRequire } = require$$0$8;
    	const getCallers = caller$1;
    	const { join, isAbsolute } = require$$3$3;
    	const sleep = requireAtomicSleep();
    	const onExit = onExitLeakFree;
    	const ThreadStream = requireThreadStream();

    	function setupOnExit (stream) {
    	  // This is leak free, it does not leave event handlers
    	  onExit.register(stream, autoEnd);
    	  onExit.registerBeforeExit(stream, flush);

    	  stream.on('close', function () {
    	    onExit.unregister(stream);
    	  });
    	}

    	function buildStream (filename, workerData, workerOpts) {
    	  const stream = new ThreadStream({
    	    filename,
    	    workerData,
    	    workerOpts
    	  });

    	  stream.on('ready', onReady);
    	  stream.on('close', function () {
    	    process.removeListener('exit', onExit);
    	  });

    	  process.on('exit', onExit);

    	  function onReady () {
    	    process.removeListener('exit', onExit);
    	    stream.unref();

    	    if (workerOpts.autoEnd !== false) {
    	      setupOnExit(stream);
    	    }
    	  }

    	  function onExit () {
    	    /* istanbul ignore next */
    	    if (stream.closed) {
    	      return
    	    }
    	    stream.flushSync();
    	    // Apparently there is a very sporadic race condition
    	    // that in certain OS would prevent the messages to be flushed
    	    // because the thread might not have been created still.
    	    // Unfortunately we need to sleep(100) in this case.
    	    sleep(100);
    	    stream.end();
    	  }

    	  return stream
    	}

    	function autoEnd (stream) {
    	  stream.ref();
    	  stream.flushSync();
    	  stream.end();
    	  stream.once('close', function () {
    	    stream.unref();
    	  });
    	}

    	function flush (stream) {
    	  stream.flushSync();
    	}

    	function transport (fullOptions) {
    	  const { pipeline, targets, levels, options = {}, worker = {}, caller = getCallers() } = fullOptions;

    	  // Backwards compatibility
    	  const callers = typeof caller === 'string' ? [caller] : caller;

    	  // This will be eventually modified by bundlers
    	  const bundlerOverrides = '__bundlerPathsOverrides' in globalThis ? globalThis.__bundlerPathsOverrides : {};

    	  let target = fullOptions.target;

    	  if (target && targets) {
    	    throw new Error('only one of target or targets can be specified')
    	  }

    	  if (targets) {
    	    target = bundlerOverrides['pino-worker'] || join(__dirname, 'worker.js');
    	    options.targets = targets.map((dest) => {
    	      return {
    	        ...dest,
    	        target: fixTarget(dest.target)
    	      }
    	    });
    	  } else if (pipeline) {
    	    target = bundlerOverrides['pino-pipeline-worker'] || join(__dirname, 'worker-pipeline.js');
    	    options.targets = pipeline.map((dest) => {
    	      return {
    	        ...dest,
    	        target: fixTarget(dest.target)
    	      }
    	    });
    	  }

    	  if (levels) {
    	    options.levels = levels;
    	  }

    	  return buildStream(fixTarget(target), options, worker)

    	  function fixTarget (origin) {
    	    origin = bundlerOverrides[origin] || origin;

    	    if (isAbsolute(origin) || origin.indexOf('file://') === 0) {
    	      return origin
    	    }

    	    if (origin === 'pino/file') {
    	      return join(__dirname, '..', 'file.js')
    	    }

    	    let fixTarget;

    	    for (const filePath of callers) {
    	      try {
    	        fixTarget = createRequire(filePath).resolve(origin);
    	        break
    	      } catch (err) {
    	        // Silent catch
    	        continue
    	      }
    	    }

    	    if (!fixTarget) {
    	      throw new Error(`unable to determine transport target for "${origin}"`)
    	    }

    	    return fixTarget
    	  }
    	}

    	transport_1 = transport;
    	return transport_1;
    }

    /* eslint no-prototype-builtins: 0 */

    const format$8 = quickFormatUnescaped;
    const { mapHttpRequest, mapHttpResponse } = pinoStdSerializers;
    const SonicBoom = sonicBoom;
    const onExit = onExitLeakFree;
    const {
      lsCacheSym: lsCacheSym$2,
      chindingsSym: chindingsSym$2,
      writeSym: writeSym$1,
      serializersSym: serializersSym$3,
      formatOptsSym: formatOptsSym$2,
      endSym: endSym$1,
      stringifiersSym: stringifiersSym$2,
      stringifySym: stringifySym$2,
      stringifySafeSym: stringifySafeSym$1,
      wildcardFirstSym,
      nestedKeySym: nestedKeySym$1,
      formattersSym: formattersSym$3,
      messageKeySym: messageKeySym$1,
      errorKeySym: errorKeySym$2,
      nestedKeyStrSym: nestedKeyStrSym$1
    } = symbols$1;
    const { isMainThread } = require$$2$2;
    const transport = requireTransport();

    function noop$5 () {}

    function genLog$1 (level, hook) {
      if (!hook) return LOG

      return function hookWrappedLog (...args) {
        hook.call(this, args, LOG, level);
      }

      function LOG (o, ...n) {
        if (typeof o === 'object') {
          let msg = o;
          if (o !== null) {
            if (o.method && o.headers && o.socket) {
              o = mapHttpRequest(o);
            } else if (typeof o.setHeader === 'function') {
              o = mapHttpResponse(o);
            }
          }
          let formatParams;
          if (msg === null && n.length === 0) {
            formatParams = [null];
          } else {
            msg = n.shift();
            formatParams = n;
          }
          this[writeSym$1](o, format$8(msg, formatParams, this[formatOptsSym$2]), level);
        } else {
          this[writeSym$1](null, format$8(o === undefined ? n.shift() : o, n, this[formatOptsSym$2]), level);
        }
      }
    }

    // magically escape strings for json
    // relying on their charCodeAt
    // everything below 32 needs JSON.stringify()
    // 34 and 92 happens all the time, so we
    // have a fast case for them
    function asString (str) {
      let result = '';
      let last = 0;
      let found = false;
      let point = 255;
      const l = str.length;
      if (l > 100) {
        return JSON.stringify(str)
      }
      for (var i = 0; i < l && point >= 32; i++) {
        point = str.charCodeAt(i);
        if (point === 34 || point === 92) {
          result += str.slice(last, i) + '\\';
          last = i;
          found = true;
        }
      }
      if (!found) {
        result = str;
      } else {
        result += str.slice(last);
      }
      return point < 32 ? JSON.stringify(str) : '"' + result + '"'
    }

    function asJson$1 (obj, msg, num, time) {
      const stringify = this[stringifySym$2];
      const stringifySafe = this[stringifySafeSym$1];
      const stringifiers = this[stringifiersSym$2];
      const end = this[endSym$1];
      const chindings = this[chindingsSym$2];
      const serializers = this[serializersSym$3];
      const formatters = this[formattersSym$3];
      const messageKey = this[messageKeySym$1];
      const errorKey = this[errorKeySym$2];
      let data = this[lsCacheSym$2][num] + time;

      // we need the child bindings added to the output first so instance logged
      // objects can take precedence when JSON.parse-ing the resulting log line
      data = data + chindings;

      let value;
      if (formatters.log) {
        obj = formatters.log(obj);
      }
      const wildcardStringifier = stringifiers[wildcardFirstSym];
      let propStr = '';
      for (const key in obj) {
        value = obj[key];
        if (Object.prototype.hasOwnProperty.call(obj, key) && value !== undefined) {
          if (serializers[key]) {
            value = serializers[key](value);
          } else if (key === errorKey && serializers.err) {
            value = serializers.err(value);
          }

          const stringifier = stringifiers[key] || wildcardStringifier;

          switch (typeof value) {
            case 'undefined':
            case 'function':
              continue
            case 'number':
              /* eslint no-fallthrough: "off" */
              if (Number.isFinite(value) === false) {
                value = null;
              }
            // this case explicitly falls through to the next one
            case 'boolean':
              if (stringifier) value = stringifier(value);
              break
            case 'string':
              value = (stringifier || asString)(value);
              break
            default:
              value = (stringifier || stringify)(value, stringifySafe);
          }
          if (value === undefined) continue
          propStr += ',"' + key + '":' + value;
        }
      }

      let msgStr = '';
      if (msg !== undefined) {
        value = serializers[messageKey] ? serializers[messageKey](msg) : msg;
        const stringifier = stringifiers[messageKey] || wildcardStringifier;

        switch (typeof value) {
          case 'function':
            break
          case 'number':
            /* eslint no-fallthrough: "off" */
            if (Number.isFinite(value) === false) {
              value = null;
            }
          // this case explicitly falls through to the next one
          case 'boolean':
            if (stringifier) value = stringifier(value);
            msgStr = ',"' + messageKey + '":' + value;
            break
          case 'string':
            value = (stringifier || asString)(value);
            msgStr = ',"' + messageKey + '":' + value;
            break
          default:
            value = (stringifier || stringify)(value, stringifySafe);
            msgStr = ',"' + messageKey + '":' + value;
        }
      }

      if (this[nestedKeySym$1] && propStr) {
        // place all the obj properties under the specified key
        // the nested key is already formatted from the constructor
        return data + this[nestedKeyStrSym$1] + propStr.slice(1) + '}' + msgStr + end
      } else {
        return data + propStr + msgStr + end
      }
    }

    function asChindings$2 (instance, bindings) {
      let value;
      let data = instance[chindingsSym$2];
      const stringify = instance[stringifySym$2];
      const stringifySafe = instance[stringifySafeSym$1];
      const stringifiers = instance[stringifiersSym$2];
      const wildcardStringifier = stringifiers[wildcardFirstSym];
      const serializers = instance[serializersSym$3];
      const formatter = instance[formattersSym$3].bindings;
      bindings = formatter(bindings);

      for (const key in bindings) {
        value = bindings[key];
        const valid = key !== 'level' &&
          key !== 'serializers' &&
          key !== 'formatters' &&
          key !== 'customLevels' &&
          bindings.hasOwnProperty(key) &&
          value !== undefined;
        if (valid === true) {
          value = serializers[key] ? serializers[key](value) : value;
          value = (stringifiers[key] || wildcardStringifier || stringify)(value, stringifySafe);
          if (value === undefined) continue
          data += ',"' + key + '":' + value;
        }
      }
      return data
    }

    function hasBeenTampered (stream) {
      return stream.write !== stream.constructor.prototype.write
    }

    function buildSafeSonicBoom$1 (opts) {
      const stream = new SonicBoom(opts);
      stream.on('error', filterBrokenPipe);
      // if we are sync: false, we must flush on exit
      if (!opts.sync && isMainThread) {
        onExit.register(stream, autoEnd);

        stream.on('close', function () {
          onExit.unregister(stream);
        });
      }
      return stream

      function filterBrokenPipe (err) {
        // Impossible to replicate across all operating systems
        /* istanbul ignore next */
        if (err.code === 'EPIPE') {
          // If we get EPIPE, we should stop logging here
          // however we have no control to the consumer of
          // SonicBoom, so we just overwrite the write method
          stream.write = noop$5;
          stream.end = noop$5;
          stream.flushSync = noop$5;
          stream.destroy = noop$5;
          return
        }
        stream.removeListener('error', filterBrokenPipe);
        stream.emit('error', err);
      }
    }

    function autoEnd (stream, eventName) {
      // This check is needed only on some platforms
      /* istanbul ignore next */
      if (stream.destroyed) {
        return
      }

      if (eventName === 'beforeExit') {
        // We still have an event loop, let's use it
        stream.flush();
        stream.on('drain', function () {
          stream.end();
        });
      } else {
        // For some reason istanbul is not detecting this, but it's there
        /* istanbul ignore next */
        // We do not have an event loop, so flush synchronously
        stream.flushSync();
      }
    }

    function createArgsNormalizer$1 (defaultOptions) {
      return function normalizeArgs (instance, caller, opts = {}, stream) {
        // support stream as a string
        if (typeof opts === 'string') {
          stream = buildSafeSonicBoom$1({ dest: opts });
          opts = {};
        } else if (typeof stream === 'string') {
          if (opts && opts.transport) {
            throw Error('only one of option.transport or stream can be specified')
          }
          stream = buildSafeSonicBoom$1({ dest: stream });
        } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {
          stream = opts;
          opts = {};
        } else if (opts.transport) {
          if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {
            throw Error('option.transport do not allow stream, please pass to option directly. e.g. pino(transport)')
          }
          if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === 'function') {
            throw Error('option.transport.targets do not allow custom level formatters')
          }

          let customLevels;
          if (opts.customLevels) {
            customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);
          }
          stream = transport({ caller, ...opts.transport, levels: customLevels });
        }
        opts = Object.assign({}, defaultOptions, opts);
        opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers);
        opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters);

        if (opts.prettyPrint) {
          throw new Error('prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)')
        }

        const { enabled, onChild } = opts;
        if (enabled === false) opts.level = 'silent';
        if (!onChild) opts.onChild = noop$5;
        if (!stream) {
          if (!hasBeenTampered(process.stdout)) {
            // If process.stdout.fd is undefined, it means that we are running
            // in a worker thread. Let's assume we are logging to file descriptor 1.
            stream = buildSafeSonicBoom$1({ fd: process.stdout.fd || 1 });
          } else {
            stream = process.stdout;
          }
        }
        return { opts, stream }
      }
    }

    function stringify$4 (obj, stringifySafeFn) {
      try {
        return JSON.stringify(obj)
      } catch (_) {
        try {
          const stringify = stringifySafeFn || this[stringifySafeSym$1];
          return stringify(obj)
        } catch (_) {
          return '"[unable to serialize, circular reference is too complex to analyze]"'
        }
      }
    }

    function buildFormatters$2 (level, bindings, log) {
      return {
        level,
        bindings,
        log
      }
    }

    /**
     * Convert a string integer file descriptor to a proper native integer
     * file descriptor.
     *
     * @param {string} destination The file descriptor string to attempt to convert.
     *
     * @returns {Number}
     */
    function normalizeDestFileDescriptor$1 (destination) {
      const fd = Number(destination);
      if (typeof destination === 'string' && Number.isFinite(fd)) {
        return fd
      }
      // destination could be undefined if we are in a worker
      if (destination === undefined) {
        // This is stdout in UNIX systems
        return 1
      }
      return destination
    }

    var tools = {
      noop: noop$5,
      buildSafeSonicBoom: buildSafeSonicBoom$1,
      asChindings: asChindings$2,
      asJson: asJson$1,
      genLog: genLog$1,
      createArgsNormalizer: createArgsNormalizer$1,
      stringify: stringify$4,
      buildFormatters: buildFormatters$2,
      normalizeDestFileDescriptor: normalizeDestFileDescriptor$1
    };

    /* eslint no-prototype-builtins: 0 */
    const {
      lsCacheSym: lsCacheSym$1,
      levelValSym: levelValSym$1,
      useOnlyCustomLevelsSym: useOnlyCustomLevelsSym$2,
      streamSym: streamSym$2,
      formattersSym: formattersSym$2,
      hooksSym: hooksSym$1
    } = symbols$1;
    const { noop: noop$4, genLog } = tools;

    const levels$1 = {
      trace: 10,
      debug: 20,
      info: 30,
      warn: 40,
      error: 50,
      fatal: 60
    };
    const levelMethods = {
      fatal: (hook) => {
        const logFatal = genLog(levels$1.fatal, hook);
        return function (...args) {
          const stream = this[streamSym$2];
          logFatal.call(this, ...args);
          if (typeof stream.flushSync === 'function') {
            try {
              stream.flushSync();
            } catch (e) {
              // https://github.com/pinojs/pino/pull/740#discussion_r346788313
            }
          }
        }
      },
      error: (hook) => genLog(levels$1.error, hook),
      warn: (hook) => genLog(levels$1.warn, hook),
      info: (hook) => genLog(levels$1.info, hook),
      debug: (hook) => genLog(levels$1.debug, hook),
      trace: (hook) => genLog(levels$1.trace, hook)
    };

    const nums = Object.keys(levels$1).reduce((o, k) => {
      o[levels$1[k]] = k;
      return o
    }, {});

    const initialLsCache$1 = Object.keys(nums).reduce((o, k) => {
      o[k] = '{"level":' + Number(k);
      return o
    }, {});

    function genLsCache$2 (instance) {
      const formatter = instance[formattersSym$2].level;
      const { labels } = instance.levels;
      const cache = {};
      for (const label in labels) {
        const level = formatter(labels[label], Number(label));
        cache[label] = JSON.stringify(level).slice(0, -1);
      }
      instance[lsCacheSym$1] = cache;
      return instance
    }

    function isStandardLevel (level, useOnlyCustomLevels) {
      if (useOnlyCustomLevels) {
        return false
      }

      switch (level) {
        case 'fatal':
        case 'error':
        case 'warn':
        case 'info':
        case 'debug':
        case 'trace':
          return true
        default:
          return false
      }
    }

    function setLevel$1 (level) {
      const { labels, values } = this.levels;
      if (typeof level === 'number') {
        if (labels[level] === undefined) throw Error('unknown level value' + level)
        level = labels[level];
      }
      if (values[level] === undefined) throw Error('unknown level ' + level)
      const preLevelVal = this[levelValSym$1];
      const levelVal = this[levelValSym$1] = values[level];
      const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym$2];
      const hook = this[hooksSym$1].logMethod;

      for (const key in values) {
        if (levelVal > values[key]) {
          this[key] = noop$4;
          continue
        }
        this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);
      }

      this.emit(
        'level-change',
        level,
        levelVal,
        labels[preLevelVal],
        preLevelVal,
        this
      );
    }

    function getLevel$1 (level) {
      const { levels, levelVal } = this;
      // protection against potential loss of Pino scope from serializers (edge case with circular refs - https://github.com/pinojs/pino/issues/833)
      return (levels && levels.labels) ? levels.labels[levelVal] : ''
    }

    function isLevelEnabled$1 (logLevel) {
      const { values } = this.levels;
      const logLevelVal = values[logLevel];
      return logLevelVal !== undefined && (logLevelVal >= this[levelValSym$1])
    }

    function mappings$2 (customLevels = null, useOnlyCustomLevels = false) {
      const customNums = customLevels
        /* eslint-disable */
        ? Object.keys(customLevels).reduce((o, k) => {
            o[customLevels[k]] = k;
            return o
          }, {})
        : null;
        /* eslint-enable */

      const labels = Object.assign(
        Object.create(Object.prototype, { Infinity: { value: 'silent' } }),
        useOnlyCustomLevels ? null : nums,
        customNums
      );
      const values = Object.assign(
        Object.create(Object.prototype, { silent: { value: Infinity } }),
        useOnlyCustomLevels ? null : levels$1,
        customLevels
      );
      return { labels, values }
    }

    function assertDefaultLevelFound$1 (defaultLevel, customLevels, useOnlyCustomLevels) {
      if (typeof defaultLevel === 'number') {
        const values = [].concat(
          Object.keys(customLevels || {}).map(key => customLevels[key]),
          useOnlyCustomLevels ? [] : Object.keys(nums).map(level => +level),
          Infinity
        );
        if (!values.includes(defaultLevel)) {
          throw Error(`default level:${defaultLevel} must be included in custom levels`)
        }
        return
      }

      const labels = Object.assign(
        Object.create(Object.prototype, { silent: { value: Infinity } }),
        useOnlyCustomLevels ? null : levels$1,
        customLevels
      );
      if (!(defaultLevel in labels)) {
        throw Error(`default level:${defaultLevel} must be included in custom levels`)
      }
    }

    function assertNoLevelCollisions$1 (levels, customLevels) {
      const { labels, values } = levels;
      for (const k in customLevels) {
        if (k in values) {
          throw Error('levels cannot be overridden')
        }
        if (customLevels[k] in labels) {
          throw Error('pre-existing level values cannot be used for new levels')
        }
      }
    }

    var levels_1 = {
      initialLsCache: initialLsCache$1,
      genLsCache: genLsCache$2,
      levelMethods,
      getLevel: getLevel$1,
      setLevel: setLevel$1,
      isLevelEnabled: isLevelEnabled$1,
      mappings: mappings$2,
      levels: levels$1,
      assertNoLevelCollisions: assertNoLevelCollisions$1,
      assertDefaultLevelFound: assertDefaultLevelFound$1
    };

    var meta = { version: '8.8.0' };

    /* eslint no-prototype-builtins: 0 */

    const { EventEmitter } = require$$1$2;
    const {
      lsCacheSym,
      levelValSym,
      setLevelSym: setLevelSym$1,
      getLevelSym,
      chindingsSym: chindingsSym$1,
      parsedChindingsSym,
      mixinSym: mixinSym$1,
      asJsonSym,
      writeSym,
      mixinMergeStrategySym: mixinMergeStrategySym$1,
      timeSym: timeSym$1,
      timeSliceIndexSym: timeSliceIndexSym$1,
      streamSym: streamSym$1,
      serializersSym: serializersSym$2,
      formattersSym: formattersSym$1,
      errorKeySym: errorKeySym$1,
      useOnlyCustomLevelsSym: useOnlyCustomLevelsSym$1,
      needsMetadataGsym,
      redactFmtSym: redactFmtSym$1,
      stringifySym: stringifySym$1,
      formatOptsSym: formatOptsSym$1,
      stringifiersSym: stringifiersSym$1
    } = symbols$1;
    const {
      getLevel,
      setLevel,
      isLevelEnabled,
      mappings: mappings$1,
      initialLsCache,
      genLsCache: genLsCache$1,
      assertNoLevelCollisions
    } = levels_1;
    const {
      asChindings: asChindings$1,
      asJson,
      buildFormatters: buildFormatters$1,
      stringify: stringify$3
    } = tools;
    const {
      version: version$1
    } = meta;
    const redaction$1 = redaction_1;

    // note: use of class is satirical
    // https://github.com/pinojs/pino/pull/433#pullrequestreview-127703127
    const constructor = class Pino {};
    const prototype = {
      constructor,
      child,
      bindings,
      setBindings,
      flush,
      isLevelEnabled,
      version: version$1,
      get level () { return this[getLevelSym]() },
      set level (lvl) { this[setLevelSym$1](lvl); },
      get levelVal () { return this[levelValSym] },
      set levelVal (n) { throw Error('levelVal is read-only') },
      [lsCacheSym]: initialLsCache,
      [writeSym]: write,
      [asJsonSym]: asJson,
      [getLevelSym]: getLevel,
      [setLevelSym$1]: setLevel
    };

    Object.setPrototypeOf(prototype, EventEmitter.prototype);

    // exporting and consuming the prototype object using factory pattern fixes scoping issues with getters when serializing
    var proto$1 = function () {
      return Object.create(prototype)
    };

    const resetChildingsFormatter = bindings => bindings;
    function child (bindings, options) {
      if (!bindings) {
        throw Error('missing bindings for child Pino')
      }
      options = options || {}; // default options to empty object
      const serializers = this[serializersSym$2];
      const formatters = this[formattersSym$1];
      const instance = Object.create(this);

      if (options.hasOwnProperty('serializers') === true) {
        instance[serializersSym$2] = Object.create(null);

        for (const k in serializers) {
          instance[serializersSym$2][k] = serializers[k];
        }
        const parentSymbols = Object.getOwnPropertySymbols(serializers);
        /* eslint no-var: off */
        for (var i = 0; i < parentSymbols.length; i++) {
          const ks = parentSymbols[i];
          instance[serializersSym$2][ks] = serializers[ks];
        }

        for (const bk in options.serializers) {
          instance[serializersSym$2][bk] = options.serializers[bk];
        }
        const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers);
        for (var bi = 0; bi < bindingsSymbols.length; bi++) {
          const bks = bindingsSymbols[bi];
          instance[serializersSym$2][bks] = options.serializers[bks];
        }
      } else instance[serializersSym$2] = serializers;
      if (options.hasOwnProperty('formatters')) {
        const { level, bindings: chindings, log } = options.formatters;
        instance[formattersSym$1] = buildFormatters$1(
          level || formatters.level,
          chindings || resetChildingsFormatter,
          log || formatters.log
        );
      } else {
        instance[formattersSym$1] = buildFormatters$1(
          formatters.level,
          resetChildingsFormatter,
          formatters.log
        );
      }
      if (options.hasOwnProperty('customLevels') === true) {
        assertNoLevelCollisions(this.levels, options.customLevels);
        instance.levels = mappings$1(options.customLevels, instance[useOnlyCustomLevelsSym$1]);
        genLsCache$1(instance);
      }

      // redact must place before asChindings and only replace if exist
      if ((typeof options.redact === 'object' && options.redact !== null) || Array.isArray(options.redact)) {
        instance.redact = options.redact; // replace redact directly
        const stringifiers = redaction$1(instance.redact, stringify$3);
        const formatOpts = { stringify: stringifiers[redactFmtSym$1] };
        instance[stringifySym$1] = stringify$3;
        instance[stringifiersSym$1] = stringifiers;
        instance[formatOptsSym$1] = formatOpts;
      }

      instance[chindingsSym$1] = asChindings$1(instance, bindings);
      const childLevel = options.level || this.level;
      instance[setLevelSym$1](childLevel);
      this.onChild(instance);
      return instance
    }

    function bindings () {
      const chindings = this[chindingsSym$1];
      const chindingsJson = `{${chindings.substr(1)}}`; // at least contains ,"pid":7068,"hostname":"myMac"
      const bindingsFromJson = JSON.parse(chindingsJson);
      delete bindingsFromJson.pid;
      delete bindingsFromJson.hostname;
      return bindingsFromJson
    }

    function setBindings (newBindings) {
      const chindings = asChindings$1(this, newBindings);
      this[chindingsSym$1] = chindings;
      delete this[parsedChindingsSym];
    }

    /**
     * Default strategy for creating `mergeObject` from arguments and the result from `mixin()`.
     * Fields from `mergeObject` have higher priority in this strategy.
     *
     * @param {Object} mergeObject The object a user has supplied to the logging function.
     * @param {Object} mixinObject The result of the `mixin` method.
     * @return {Object}
     */
    function defaultMixinMergeStrategy (mergeObject, mixinObject) {
      return Object.assign(mixinObject, mergeObject)
    }

    function write (_obj, msg, num) {
      const t = this[timeSym$1]();
      const mixin = this[mixinSym$1];
      const errorKey = this[errorKeySym$1];
      const mixinMergeStrategy = this[mixinMergeStrategySym$1] || defaultMixinMergeStrategy;
      let obj;

      if (_obj === undefined || _obj === null) {
        obj = {};
      } else if (_obj instanceof Error) {
        obj = { [errorKey]: _obj };
        if (msg === undefined) {
          msg = _obj.message;
        }
      } else {
        obj = _obj;
        if (msg === undefined && _obj[errorKey]) {
          msg = _obj[errorKey].message;
        }
      }

      if (mixin) {
        obj = mixinMergeStrategy(obj, mixin(obj, num));
      }

      const s = this[asJsonSym](obj, msg, num, t);

      const stream = this[streamSym$1];
      if (stream[needsMetadataGsym] === true) {
        stream.lastLevel = num;
        stream.lastObj = obj;
        stream.lastMsg = msg;
        stream.lastTime = t.slice(this[timeSliceIndexSym$1]);
        stream.lastLogger = this; // for child loggers
      }
      stream.write(s);
    }

    function noop$3 () {}

    function flush () {
      const stream = this[streamSym$1];
      if ('flush' in stream) stream.flush(noop$3);
    }

    var safeStableStringifyExports = {};
    var safeStableStringify = {
      get exports(){ return safeStableStringifyExports; },
      set exports(v){ safeStableStringifyExports = v; },
    };

    (function (module, exports) {

    	const { hasOwnProperty } = Object.prototype;

    	const stringify = configure();

    	// @ts-expect-error
    	stringify.configure = configure;
    	// @ts-expect-error
    	stringify.stringify = stringify;

    	// @ts-expect-error
    	stringify.default = stringify;

    	// @ts-expect-error used for named export
    	exports.stringify = stringify;
    	// @ts-expect-error used for named export
    	exports.configure = configure;

    	module.exports = stringify;

    	// eslint-disable-next-line no-control-regex
    	const strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
    	const strEscapeSequencesReplacer = new RegExp(strEscapeSequencesRegExp, 'g');

    	// Escaped special characters. Use empty strings to fill up unused entries.
    	const meta = [
    	  '\\u0000', '\\u0001', '\\u0002', '\\u0003', '\\u0004',
    	  '\\u0005', '\\u0006', '\\u0007', '\\b', '\\t',
    	  '\\n', '\\u000b', '\\f', '\\r', '\\u000e',
    	  '\\u000f', '\\u0010', '\\u0011', '\\u0012', '\\u0013',
    	  '\\u0014', '\\u0015', '\\u0016', '\\u0017', '\\u0018',
    	  '\\u0019', '\\u001a', '\\u001b', '\\u001c', '\\u001d',
    	  '\\u001e', '\\u001f', '', '', '\\"',
    	  '', '', '', '', '', '', '', '', '', '',
    	  '', '', '', '', '', '', '', '', '', '',
    	  '', '', '', '', '', '', '', '', '', '',
    	  '', '', '', '', '', '', '', '', '', '',
    	  '', '', '', '', '', '', '', '', '', '',
    	  '', '', '', '', '', '', '', '\\\\'
    	];

    	function escapeFn (str) {
    	  if (str.length === 2) {
    	    const charCode = str.charCodeAt(1);
    	    return `${str[0]}\\u${charCode.toString(16)}`
    	  }
    	  const charCode = str.charCodeAt(0);
    	  return meta.length > charCode
    	    ? meta[charCode]
    	    : `\\u${charCode.toString(16)}`
    	}

    	// Escape C0 control characters, double quotes, the backslash and every code
    	// unit with a numeric value in the inclusive range 0xD800 to 0xDFFF.
    	function strEscape (str) {
    	  // Some magic numbers that worked out fine while benchmarking with v8 8.0
    	  if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {
    	    return str
    	  }
    	  if (str.length > 100) {
    	    return str.replace(strEscapeSequencesReplacer, escapeFn)
    	  }
    	  let result = '';
    	  let last = 0;
    	  for (let i = 0; i < str.length; i++) {
    	    const point = str.charCodeAt(i);
    	    if (point === 34 || point === 92 || point < 32) {
    	      result += `${str.slice(last, i)}${meta[point]}`;
    	      last = i + 1;
    	    } else if (point >= 0xd800 && point <= 0xdfff) {
    	      if (point <= 0xdbff && i + 1 < str.length) {
    	        const nextPoint = str.charCodeAt(i + 1);
    	        if (nextPoint >= 0xdc00 && nextPoint <= 0xdfff) {
    	          i++;
    	          continue
    	        }
    	      }
    	      result += `${str.slice(last, i)}\\u${point.toString(16)}`;
    	      last = i + 1;
    	    }
    	  }
    	  result += str.slice(last);
    	  return result
    	}

    	function insertSort (array) {
    	  // Insertion sort is very efficient for small input sizes but it has a bad
    	  // worst case complexity. Thus, use native array sort for bigger values.
    	  if (array.length > 2e2) {
    	    return array.sort()
    	  }
    	  for (let i = 1; i < array.length; i++) {
    	    const currentValue = array[i];
    	    let position = i;
    	    while (position !== 0 && array[position - 1] > currentValue) {
    	      array[position] = array[position - 1];
    	      position--;
    	    }
    	    array[position] = currentValue;
    	  }
    	  return array
    	}

    	const typedArrayPrototypeGetSymbolToStringTag =
    	  Object.getOwnPropertyDescriptor(
    	    Object.getPrototypeOf(
    	      Object.getPrototypeOf(
    	        new Int8Array()
    	      )
    	    ),
    	    Symbol.toStringTag
    	  ).get;

    	function isTypedArrayWithEntries (value) {
    	  return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0
    	}

    	function stringifyTypedArray (array, separator, maximumBreadth) {
    	  if (array.length < maximumBreadth) {
    	    maximumBreadth = array.length;
    	  }
    	  const whitespace = separator === ',' ? '' : ' ';
    	  let res = `"0":${whitespace}${array[0]}`;
    	  for (let i = 1; i < maximumBreadth; i++) {
    	    res += `${separator}"${i}":${whitespace}${array[i]}`;
    	  }
    	  return res
    	}

    	function getCircularValueOption (options) {
    	  if (hasOwnProperty.call(options, 'circularValue')) {
    	    const circularValue = options.circularValue;
    	    if (typeof circularValue === 'string') {
    	      return `"${circularValue}"`
    	    }
    	    if (circularValue == null) {
    	      return circularValue
    	    }
    	    if (circularValue === Error || circularValue === TypeError) {
    	      return {
    	        toString () {
    	          throw new TypeError('Converting circular structure to JSON')
    	        }
    	      }
    	    }
    	    throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined')
    	  }
    	  return '"[Circular]"'
    	}

    	function getBooleanOption (options, key) {
    	  let value;
    	  if (hasOwnProperty.call(options, key)) {
    	    value = options[key];
    	    if (typeof value !== 'boolean') {
    	      throw new TypeError(`The "${key}" argument must be of type boolean`)
    	    }
    	  }
    	  return value === undefined ? true : value
    	}

    	function getPositiveIntegerOption (options, key) {
    	  let value;
    	  if (hasOwnProperty.call(options, key)) {
    	    value = options[key];
    	    if (typeof value !== 'number') {
    	      throw new TypeError(`The "${key}" argument must be of type number`)
    	    }
    	    if (!Number.isInteger(value)) {
    	      throw new TypeError(`The "${key}" argument must be an integer`)
    	    }
    	    if (value < 1) {
    	      throw new RangeError(`The "${key}" argument must be >= 1`)
    	    }
    	  }
    	  return value === undefined ? Infinity : value
    	}

    	function getItemCount (number) {
    	  if (number === 1) {
    	    return '1 item'
    	  }
    	  return `${number} items`
    	}

    	function getUniqueReplacerSet (replacerArray) {
    	  const replacerSet = new Set();
    	  for (const value of replacerArray) {
    	    if (typeof value === 'string' || typeof value === 'number') {
    	      replacerSet.add(String(value));
    	    }
    	  }
    	  return replacerSet
    	}

    	function getStrictOption (options) {
    	  if (hasOwnProperty.call(options, 'strict')) {
    	    const value = options.strict;
    	    if (typeof value !== 'boolean') {
    	      throw new TypeError('The "strict" argument must be of type boolean')
    	    }
    	    if (value) {
    	      return (value) => {
    	        let message = `Object can not safely be stringified. Received type ${typeof value}`;
    	        if (typeof value !== 'function') message += ` (${value.toString()})`;
    	        throw new Error(message)
    	      }
    	    }
    	  }
    	}

    	function configure (options) {
    	  options = { ...options };
    	  const fail = getStrictOption(options);
    	  if (fail) {
    	    if (options.bigint === undefined) {
    	      options.bigint = false;
    	    }
    	    if (!('circularValue' in options)) {
    	      options.circularValue = Error;
    	    }
    	  }
    	  const circularValue = getCircularValueOption(options);
    	  const bigint = getBooleanOption(options, 'bigint');
    	  const deterministic = getBooleanOption(options, 'deterministic');
    	  const maximumDepth = getPositiveIntegerOption(options, 'maximumDepth');
    	  const maximumBreadth = getPositiveIntegerOption(options, 'maximumBreadth');

    	  function stringifyFnReplacer (key, parent, stack, replacer, spacer, indentation) {
    	    let value = parent[key];

    	    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {
    	      value = value.toJSON(key);
    	    }
    	    value = replacer.call(parent, key, value);

    	    switch (typeof value) {
    	      case 'string':
    	        return `"${strEscape(value)}"`
    	      case 'object': {
    	        if (value === null) {
    	          return 'null'
    	        }
    	        if (stack.indexOf(value) !== -1) {
    	          return circularValue
    	        }

    	        let res = '';
    	        let join = ',';
    	        const originalIndentation = indentation;

    	        if (Array.isArray(value)) {
    	          if (value.length === 0) {
    	            return '[]'
    	          }
    	          if (maximumDepth < stack.length + 1) {
    	            return '"[Array]"'
    	          }
    	          stack.push(value);
    	          if (spacer !== '') {
    	            indentation += spacer;
    	            res += `\n${indentation}`;
    	            join = `,\n${indentation}`;
    	          }
    	          const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
    	          let i = 0;
    	          for (; i < maximumValuesToStringify - 1; i++) {
    	            const tmp = stringifyFnReplacer(i, value, stack, replacer, spacer, indentation);
    	            res += tmp !== undefined ? tmp : 'null';
    	            res += join;
    	          }
    	          const tmp = stringifyFnReplacer(i, value, stack, replacer, spacer, indentation);
    	          res += tmp !== undefined ? tmp : 'null';
    	          if (value.length - 1 > maximumBreadth) {
    	            const removedKeys = value.length - maximumBreadth - 1;
    	            res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
    	          }
    	          if (spacer !== '') {
    	            res += `\n${originalIndentation}`;
    	          }
    	          stack.pop();
    	          return `[${res}]`
    	        }

    	        let keys = Object.keys(value);
    	        const keyLength = keys.length;
    	        if (keyLength === 0) {
    	          return '{}'
    	        }
    	        if (maximumDepth < stack.length + 1) {
    	          return '"[Object]"'
    	        }
    	        let whitespace = '';
    	        let separator = '';
    	        if (spacer !== '') {
    	          indentation += spacer;
    	          join = `,\n${indentation}`;
    	          whitespace = ' ';
    	        }
    	        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
    	        if (isTypedArrayWithEntries(value)) {
    	          res += stringifyTypedArray(value, join, maximumBreadth);
    	          keys = keys.slice(value.length);
    	          maximumPropertiesToStringify -= value.length;
    	          separator = join;
    	        }
    	        if (deterministic) {
    	          keys = insertSort(keys);
    	        }
    	        stack.push(value);
    	        for (let i = 0; i < maximumPropertiesToStringify; i++) {
    	          const key = keys[i];
    	          const tmp = stringifyFnReplacer(key, value, stack, replacer, spacer, indentation);
    	          if (tmp !== undefined) {
    	            res += `${separator}"${strEscape(key)}":${whitespace}${tmp}`;
    	            separator = join;
    	          }
    	        }
    	        if (keyLength > maximumBreadth) {
    	          const removedKeys = keyLength - maximumBreadth;
    	          res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
    	          separator = join;
    	        }
    	        if (spacer !== '' && separator.length > 1) {
    	          res = `\n${indentation}${res}\n${originalIndentation}`;
    	        }
    	        stack.pop();
    	        return `{${res}}`
    	      }
    	      case 'number':
    	        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'
    	      case 'boolean':
    	        return value === true ? 'true' : 'false'
    	      case 'undefined':
    	        return undefined
    	      case 'bigint':
    	        if (bigint) {
    	          return String(value)
    	        }
    	        // fallthrough
    	      default:
    	        return fail ? fail(value) : undefined
    	    }
    	  }

    	  function stringifyArrayReplacer (key, value, stack, replacer, spacer, indentation) {
    	    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {
    	      value = value.toJSON(key);
    	    }

    	    switch (typeof value) {
    	      case 'string':
    	        return `"${strEscape(value)}"`
    	      case 'object': {
    	        if (value === null) {
    	          return 'null'
    	        }
    	        if (stack.indexOf(value) !== -1) {
    	          return circularValue
    	        }

    	        const originalIndentation = indentation;
    	        let res = '';
    	        let join = ',';

    	        if (Array.isArray(value)) {
    	          if (value.length === 0) {
    	            return '[]'
    	          }
    	          if (maximumDepth < stack.length + 1) {
    	            return '"[Array]"'
    	          }
    	          stack.push(value);
    	          if (spacer !== '') {
    	            indentation += spacer;
    	            res += `\n${indentation}`;
    	            join = `,\n${indentation}`;
    	          }
    	          const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
    	          let i = 0;
    	          for (; i < maximumValuesToStringify - 1; i++) {
    	            const tmp = stringifyArrayReplacer(i, value[i], stack, replacer, spacer, indentation);
    	            res += tmp !== undefined ? tmp : 'null';
    	            res += join;
    	          }
    	          const tmp = stringifyArrayReplacer(i, value[i], stack, replacer, spacer, indentation);
    	          res += tmp !== undefined ? tmp : 'null';
    	          if (value.length - 1 > maximumBreadth) {
    	            const removedKeys = value.length - maximumBreadth - 1;
    	            res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
    	          }
    	          if (spacer !== '') {
    	            res += `\n${originalIndentation}`;
    	          }
    	          stack.pop();
    	          return `[${res}]`
    	        }
    	        stack.push(value);
    	        let whitespace = '';
    	        if (spacer !== '') {
    	          indentation += spacer;
    	          join = `,\n${indentation}`;
    	          whitespace = ' ';
    	        }
    	        let separator = '';
    	        for (const key of replacer) {
    	          const tmp = stringifyArrayReplacer(key, value[key], stack, replacer, spacer, indentation);
    	          if (tmp !== undefined) {
    	            res += `${separator}"${strEscape(key)}":${whitespace}${tmp}`;
    	            separator = join;
    	          }
    	        }
    	        if (spacer !== '' && separator.length > 1) {
    	          res = `\n${indentation}${res}\n${originalIndentation}`;
    	        }
    	        stack.pop();
    	        return `{${res}}`
    	      }
    	      case 'number':
    	        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'
    	      case 'boolean':
    	        return value === true ? 'true' : 'false'
    	      case 'undefined':
    	        return undefined
    	      case 'bigint':
    	        if (bigint) {
    	          return String(value)
    	        }
    	        // fallthrough
    	      default:
    	        return fail ? fail(value) : undefined
    	    }
    	  }

    	  function stringifyIndent (key, value, stack, spacer, indentation) {
    	    switch (typeof value) {
    	      case 'string':
    	        return `"${strEscape(value)}"`
    	      case 'object': {
    	        if (value === null) {
    	          return 'null'
    	        }
    	        if (typeof value.toJSON === 'function') {
    	          value = value.toJSON(key);
    	          // Prevent calling `toJSON` again.
    	          if (typeof value !== 'object') {
    	            return stringifyIndent(key, value, stack, spacer, indentation)
    	          }
    	          if (value === null) {
    	            return 'null'
    	          }
    	        }
    	        if (stack.indexOf(value) !== -1) {
    	          return circularValue
    	        }
    	        const originalIndentation = indentation;

    	        if (Array.isArray(value)) {
    	          if (value.length === 0) {
    	            return '[]'
    	          }
    	          if (maximumDepth < stack.length + 1) {
    	            return '"[Array]"'
    	          }
    	          stack.push(value);
    	          indentation += spacer;
    	          let res = `\n${indentation}`;
    	          const join = `,\n${indentation}`;
    	          const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
    	          let i = 0;
    	          for (; i < maximumValuesToStringify - 1; i++) {
    	            const tmp = stringifyIndent(i, value[i], stack, spacer, indentation);
    	            res += tmp !== undefined ? tmp : 'null';
    	            res += join;
    	          }
    	          const tmp = stringifyIndent(i, value[i], stack, spacer, indentation);
    	          res += tmp !== undefined ? tmp : 'null';
    	          if (value.length - 1 > maximumBreadth) {
    	            const removedKeys = value.length - maximumBreadth - 1;
    	            res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
    	          }
    	          res += `\n${originalIndentation}`;
    	          stack.pop();
    	          return `[${res}]`
    	        }

    	        let keys = Object.keys(value);
    	        const keyLength = keys.length;
    	        if (keyLength === 0) {
    	          return '{}'
    	        }
    	        if (maximumDepth < stack.length + 1) {
    	          return '"[Object]"'
    	        }
    	        indentation += spacer;
    	        const join = `,\n${indentation}`;
    	        let res = '';
    	        let separator = '';
    	        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
    	        if (isTypedArrayWithEntries(value)) {
    	          res += stringifyTypedArray(value, join, maximumBreadth);
    	          keys = keys.slice(value.length);
    	          maximumPropertiesToStringify -= value.length;
    	          separator = join;
    	        }
    	        if (deterministic) {
    	          keys = insertSort(keys);
    	        }
    	        stack.push(value);
    	        for (let i = 0; i < maximumPropertiesToStringify; i++) {
    	          const key = keys[i];
    	          const tmp = stringifyIndent(key, value[key], stack, spacer, indentation);
    	          if (tmp !== undefined) {
    	            res += `${separator}"${strEscape(key)}": ${tmp}`;
    	            separator = join;
    	          }
    	        }
    	        if (keyLength > maximumBreadth) {
    	          const removedKeys = keyLength - maximumBreadth;
    	          res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
    	          separator = join;
    	        }
    	        if (separator !== '') {
    	          res = `\n${indentation}${res}\n${originalIndentation}`;
    	        }
    	        stack.pop();
    	        return `{${res}}`
    	      }
    	      case 'number':
    	        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'
    	      case 'boolean':
    	        return value === true ? 'true' : 'false'
    	      case 'undefined':
    	        return undefined
    	      case 'bigint':
    	        if (bigint) {
    	          return String(value)
    	        }
    	        // fallthrough
    	      default:
    	        return fail ? fail(value) : undefined
    	    }
    	  }

    	  function stringifySimple (key, value, stack) {
    	    switch (typeof value) {
    	      case 'string':
    	        return `"${strEscape(value)}"`
    	      case 'object': {
    	        if (value === null) {
    	          return 'null'
    	        }
    	        if (typeof value.toJSON === 'function') {
    	          value = value.toJSON(key);
    	          // Prevent calling `toJSON` again
    	          if (typeof value !== 'object') {
    	            return stringifySimple(key, value, stack)
    	          }
    	          if (value === null) {
    	            return 'null'
    	          }
    	        }
    	        if (stack.indexOf(value) !== -1) {
    	          return circularValue
    	        }

    	        let res = '';

    	        if (Array.isArray(value)) {
    	          if (value.length === 0) {
    	            return '[]'
    	          }
    	          if (maximumDepth < stack.length + 1) {
    	            return '"[Array]"'
    	          }
    	          stack.push(value);
    	          const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
    	          let i = 0;
    	          for (; i < maximumValuesToStringify - 1; i++) {
    	            const tmp = stringifySimple(i, value[i], stack);
    	            res += tmp !== undefined ? tmp : 'null';
    	            res += ',';
    	          }
    	          const tmp = stringifySimple(i, value[i], stack);
    	          res += tmp !== undefined ? tmp : 'null';
    	          if (value.length - 1 > maximumBreadth) {
    	            const removedKeys = value.length - maximumBreadth - 1;
    	            res += `,"... ${getItemCount(removedKeys)} not stringified"`;
    	          }
    	          stack.pop();
    	          return `[${res}]`
    	        }

    	        let keys = Object.keys(value);
    	        const keyLength = keys.length;
    	        if (keyLength === 0) {
    	          return '{}'
    	        }
    	        if (maximumDepth < stack.length + 1) {
    	          return '"[Object]"'
    	        }
    	        let separator = '';
    	        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
    	        if (isTypedArrayWithEntries(value)) {
    	          res += stringifyTypedArray(value, ',', maximumBreadth);
    	          keys = keys.slice(value.length);
    	          maximumPropertiesToStringify -= value.length;
    	          separator = ',';
    	        }
    	        if (deterministic) {
    	          keys = insertSort(keys);
    	        }
    	        stack.push(value);
    	        for (let i = 0; i < maximumPropertiesToStringify; i++) {
    	          const key = keys[i];
    	          const tmp = stringifySimple(key, value[key], stack);
    	          if (tmp !== undefined) {
    	            res += `${separator}"${strEscape(key)}":${tmp}`;
    	            separator = ',';
    	          }
    	        }
    	        if (keyLength > maximumBreadth) {
    	          const removedKeys = keyLength - maximumBreadth;
    	          res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
    	        }
    	        stack.pop();
    	        return `{${res}}`
    	      }
    	      case 'number':
    	        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'
    	      case 'boolean':
    	        return value === true ? 'true' : 'false'
    	      case 'undefined':
    	        return undefined
    	      case 'bigint':
    	        if (bigint) {
    	          return String(value)
    	        }
    	        // fallthrough
    	      default:
    	        return fail ? fail(value) : undefined
    	    }
    	  }

    	  function stringify (value, replacer, space) {
    	    if (arguments.length > 1) {
    	      let spacer = '';
    	      if (typeof space === 'number') {
    	        spacer = ' '.repeat(Math.min(space, 10));
    	      } else if (typeof space === 'string') {
    	        spacer = space.slice(0, 10);
    	      }
    	      if (replacer != null) {
    	        if (typeof replacer === 'function') {
    	          return stringifyFnReplacer('', { '': value }, [], replacer, spacer, '')
    	        }
    	        if (Array.isArray(replacer)) {
    	          return stringifyArrayReplacer('', value, [], getUniqueReplacerSet(replacer), spacer, '')
    	        }
    	      }
    	      if (spacer.length !== 0) {
    	        return stringifyIndent('', value, [], spacer, '')
    	      }
    	    }
    	    return stringifySimple('', value, [])
    	  }

    	  return stringify
    	}
    } (safeStableStringify, safeStableStringifyExports));

    var multistream_1;
    var hasRequiredMultistream;

    function requireMultistream () {
    	if (hasRequiredMultistream) return multistream_1;
    	hasRequiredMultistream = 1;

    	const metadata = Symbol.for('pino.metadata');
    	const { levels } = levels_1;

    	const defaultLevels = Object.create(levels);
    	defaultLevels.silent = Infinity;

    	const DEFAULT_INFO_LEVEL = levels.info;

    	function multistream (streamsArray, opts) {
    	  let counter = 0;
    	  streamsArray = streamsArray || [];
    	  opts = opts || { dedupe: false };

    	  let levels = defaultLevels;
    	  if (opts.levels && typeof opts.levels === 'object') {
    	    levels = opts.levels;
    	  }

    	  const res = {
    	    write,
    	    add,
    	    flushSync,
    	    end,
    	    minLevel: 0,
    	    streams: [],
    	    clone,
    	    [metadata]: true
    	  };

    	  if (Array.isArray(streamsArray)) {
    	    streamsArray.forEach(add, res);
    	  } else {
    	    add.call(res, streamsArray);
    	  }

    	  // clean this object up
    	  // or it will stay allocated forever
    	  // as it is closed on the following closures
    	  streamsArray = null;

    	  return res

    	  // we can exit early because the streams are ordered by level
    	  function write (data) {
    	    let dest;
    	    const level = this.lastLevel;
    	    const { streams } = this;
    	    // for handling situation when several streams has the same level
    	    let recordedLevel = 0;
    	    let stream;

    	    // if dedupe set to true we send logs to the stream with the highest level
    	    // therefore, we have to change sorting order
    	    for (let i = initLoopVar(streams.length, opts.dedupe); checkLoopVar(i, streams.length, opts.dedupe); i = adjustLoopVar(i, opts.dedupe)) {
    	      dest = streams[i];
    	      if (dest.level <= level) {
    	        if (recordedLevel !== 0 && recordedLevel !== dest.level) {
    	          break
    	        }
    	        stream = dest.stream;
    	        if (stream[metadata]) {
    	          const { lastTime, lastMsg, lastObj, lastLogger } = this;
    	          stream.lastLevel = level;
    	          stream.lastTime = lastTime;
    	          stream.lastMsg = lastMsg;
    	          stream.lastObj = lastObj;
    	          stream.lastLogger = lastLogger;
    	        }
    	        stream.write(data);
    	        if (opts.dedupe) {
    	          recordedLevel = dest.level;
    	        }
    	      } else if (!opts.dedupe) {
    	        break
    	      }
    	    }
    	  }

    	  function flushSync () {
    	    for (const { stream } of this.streams) {
    	      if (typeof stream.flushSync === 'function') {
    	        stream.flushSync();
    	      }
    	    }
    	  }

    	  function add (dest) {
    	    if (!dest) {
    	      return res
    	    }

    	    // Check that dest implements either StreamEntry or DestinationStream
    	    const isStream = typeof dest.write === 'function' || dest.stream;
    	    const stream_ = dest.write ? dest : dest.stream;
    	    // This is necessary to provide a meaningful error message, otherwise it throws somewhere inside write()
    	    if (!isStream) {
    	      throw Error('stream object needs to implement either StreamEntry or DestinationStream interface')
    	    }

    	    const { streams } = this;

    	    let level;
    	    if (typeof dest.levelVal === 'number') {
    	      level = dest.levelVal;
    	    } else if (typeof dest.level === 'string') {
    	      level = levels[dest.level];
    	    } else if (typeof dest.level === 'number') {
    	      level = dest.level;
    	    } else {
    	      level = DEFAULT_INFO_LEVEL;
    	    }

    	    const dest_ = {
    	      stream: stream_,
    	      level,
    	      levelVal: undefined,
    	      id: counter++
    	    };

    	    streams.unshift(dest_);
    	    streams.sort(compareByLevel);

    	    this.minLevel = streams[0].level;

    	    return res
    	  }

    	  function end () {
    	    for (const { stream } of this.streams) {
    	      if (typeof stream.flushSync === 'function') {
    	        stream.flushSync();
    	      }
    	      stream.end();
    	    }
    	  }

    	  function clone (level) {
    	    const streams = new Array(this.streams.length);

    	    for (let i = 0; i < streams.length; i++) {
    	      streams[i] = {
    	        level,
    	        stream: this.streams[i].stream
    	      };
    	    }

    	    return {
    	      write,
    	      add,
    	      minLevel: level,
    	      streams,
    	      clone,
    	      flushSync,
    	      [metadata]: true
    	    }
    	  }
    	}

    	function compareByLevel (a, b) {
    	  return a.level - b.level
    	}

    	function initLoopVar (length, dedupe) {
    	  return dedupe ? length - 1 : 0
    	}

    	function adjustLoopVar (i, dedupe) {
    	  return dedupe ? i - 1 : i + 1
    	}

    	function checkLoopVar (i, length, dedupe) {
    	  return dedupe ? i >= 0 : i < length
    	}

    	multistream_1 = multistream;
    	return multistream_1;
    }

    /* eslint no-prototype-builtins: 0 */
    const os = require$$0$1;
    const stdSerializers = pinoStdSerializers;
    const caller = caller$1;
    const redaction = redaction_1;
    const time = time$1;
    const proto = proto$1;
    const symbols = symbols$1;
    const { configure } = safeStableStringifyExports;
    const { assertDefaultLevelFound, mappings, genLsCache, levels } = levels_1;
    const {
      createArgsNormalizer,
      asChindings,
      buildSafeSonicBoom,
      buildFormatters,
      stringify: stringify$2,
      normalizeDestFileDescriptor,
      noop: noop$2
    } = tools;
    const { version } = meta;
    const {
      chindingsSym,
      redactFmtSym,
      serializersSym: serializersSym$1,
      timeSym,
      timeSliceIndexSym,
      streamSym,
      stringifySym,
      stringifySafeSym,
      stringifiersSym,
      setLevelSym,
      endSym,
      formatOptsSym,
      messageKeySym,
      errorKeySym,
      nestedKeySym,
      mixinSym,
      useOnlyCustomLevelsSym,
      formattersSym,
      hooksSym,
      nestedKeyStrSym,
      mixinMergeStrategySym
    } = symbols;
    const { epochTime, nullTime } = time;
    const { pid } = process;
    const hostname = os.hostname();
    const defaultErrorSerializer = stdSerializers.err;
    const defaultOptions = {
      level: 'info',
      levels,
      messageKey: 'msg',
      errorKey: 'err',
      nestedKey: null,
      enabled: true,
      base: { pid, hostname },
      serializers: Object.assign(Object.create(null), {
        err: defaultErrorSerializer
      }),
      formatters: Object.assign(Object.create(null), {
        bindings (bindings) {
          return bindings
        },
        level (label, number) {
          return { level: number }
        }
      }),
      hooks: {
        logMethod: undefined
      },
      timestamp: epochTime,
      name: undefined,
      redact: null,
      customLevels: null,
      useOnlyCustomLevels: false,
      depthLimit: 5,
      edgeLimit: 100
    };

    const normalize$1 = createArgsNormalizer(defaultOptions);

    const serializers$1 = Object.assign(Object.create(null), stdSerializers);

    function pino$1 (...args) {
      const instance = {};
      const { opts, stream } = normalize$1(instance, caller(), ...args);
      const {
        redact,
        crlf,
        serializers,
        timestamp,
        messageKey,
        errorKey,
        nestedKey,
        base,
        name,
        level,
        customLevels,
        mixin,
        mixinMergeStrategy,
        useOnlyCustomLevels,
        formatters,
        hooks,
        depthLimit,
        edgeLimit,
        onChild
      } = opts;

      const stringifySafe = configure({
        maximumDepth: depthLimit,
        maximumBreadth: edgeLimit
      });

      const allFormatters = buildFormatters(
        formatters.level,
        formatters.bindings,
        formatters.log
      );

      const stringifyFn = stringify$2.bind({
        [stringifySafeSym]: stringifySafe
      });
      const stringifiers = redact ? redaction(redact, stringifyFn) : {};
      const formatOpts = redact
        ? { stringify: stringifiers[redactFmtSym] }
        : { stringify: stringifyFn };
      const end = '}' + (crlf ? '\r\n' : '\n');
      const coreChindings = asChindings.bind(null, {
        [chindingsSym]: '',
        [serializersSym$1]: serializers,
        [stringifiersSym]: stringifiers,
        [stringifySym]: stringify$2,
        [stringifySafeSym]: stringifySafe,
        [formattersSym]: allFormatters
      });

      let chindings = '';
      if (base !== null) {
        if (name === undefined) {
          chindings = coreChindings(base);
        } else {
          chindings = coreChindings(Object.assign({}, base, { name }));
        }
      }

      const time = (timestamp instanceof Function)
        ? timestamp
        : (timestamp ? epochTime : nullTime);
      const timeSliceIndex = time().indexOf(':') + 1;

      if (useOnlyCustomLevels && !customLevels) throw Error('customLevels is required if useOnlyCustomLevels is set true')
      if (mixin && typeof mixin !== 'function') throw Error(`Unknown mixin type "${typeof mixin}" - expected "function"`)

      assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);
      const levels = mappings(customLevels, useOnlyCustomLevels);

      Object.assign(instance, {
        levels,
        [useOnlyCustomLevelsSym]: useOnlyCustomLevels,
        [streamSym]: stream,
        [timeSym]: time,
        [timeSliceIndexSym]: timeSliceIndex,
        [stringifySym]: stringify$2,
        [stringifySafeSym]: stringifySafe,
        [stringifiersSym]: stringifiers,
        [endSym]: end,
        [formatOptsSym]: formatOpts,
        [messageKeySym]: messageKey,
        [errorKeySym]: errorKey,
        [nestedKeySym]: nestedKey,
        // protect against injection
        [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : '',
        [serializersSym$1]: serializers,
        [mixinSym]: mixin,
        [mixinMergeStrategySym]: mixinMergeStrategy,
        [chindingsSym]: chindings,
        [formattersSym]: allFormatters,
        [hooksSym]: hooks,
        silent: noop$2,
        onChild
      });

      Object.setPrototypeOf(instance, proto());

      genLsCache(instance);

      instance[setLevelSym](level);

      return instance
    }

    pino$2.exports = pino$1;

    pinoExports.destination = (dest = process.stdout.fd) => {
      if (typeof dest === 'object') {
        dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);
        return buildSafeSonicBoom(dest)
      } else {
        return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 })
      }
    };

    pinoExports.transport = requireTransport();
    pinoExports.multistream = requireMultistream();

    pinoExports.levels = mappings();
    pinoExports.stdSerializers = serializers$1;
    pinoExports.stdTimeFunctions = Object.assign({}, time);
    pinoExports.symbols = symbols;
    pinoExports.version = version;

    // Enables default and name export with TypeScript and Babel
    pinoExports.default = pino$1;
    pinoExports.pino = pino$1;

    /**
     * Code imported from `pino-http`
     * Repo: https://github.com/pinojs/pino-http
     * License: MIT (https://raw.githubusercontent.com/pinojs/pino-http/master/LICENSE)
     */

    const nullLogger = abstractLoggingExports;
    const pino = pinoExports;
    const { serializersSym } = pino.symbols;
    const { FST_ERR_LOG_INVALID_DESTINATION } = errorsExports;

    function createPinoLogger (opts, stream) {
      stream = stream || opts.stream;
      delete opts.stream;

      if (stream && opts.file) {
        throw new FST_ERR_LOG_INVALID_DESTINATION()
      } else if (opts.file) {
        // we do not have stream
        stream = pino.destination(opts.file);
        delete opts.file;
      }

      const prevLogger = opts.logger;
      const prevGenReqId = opts.genReqId;
      let logger = null;

      if (prevLogger) {
        opts.logger = undefined;
        opts.genReqId = undefined;
        // we need to tap into pino internals because in v5 it supports
        // adding serializers in child loggers
        if (prevLogger[serializersSym]) {
          opts.serializers = Object.assign({}, opts.serializers, prevLogger[serializersSym]);
        }
        logger = prevLogger.child({}, opts);
        opts.logger = prevLogger;
        opts.genReqId = prevGenReqId;
      } else {
        logger = pino(opts, stream);
      }

      return logger
    }

    const serializers = {
      req: function asReqValue (req) {
        return {
          method: req.method,
          url: req.url,
          version: req.headers && req.headers['accept-version'],
          hostname: req.hostname,
          remoteAddress: req.ip,
          remotePort: req.socket ? req.socket.remotePort : undefined
        }
      },
      err: pino.stdSerializers.err,
      res: function asResValue (reply) {
        return {
          statusCode: reply.statusCode
        }
      }
    };

    function now$1 () {
      const ts = process.hrtime();
      return (ts[0] * 1e3) + (ts[1] / 1e6)
    }

    function createLogger$1 (options) {
      if (isValidLogger(options.logger)) {
        const logger = createPinoLogger({
          logger: options.logger,
          serializers: Object.assign({}, serializers, options.logger.serializers)
        });
        return { logger, hasLogger: true }
      } else if (!options.logger) {
        const logger = nullLogger;
        logger.child = () => logger;
        return { logger, hasLogger: false }
      } else {
        const localLoggerOptions = {};
        if (Object.prototype.toString.call(options.logger) === '[object Object]') {
          Reflect.ownKeys(options.logger).forEach(prop => {
            Object.defineProperty(localLoggerOptions, prop, {
              value: options.logger[prop],
              writable: true,
              enumerable: true,
              configurable: true
            });
          });
        }
        localLoggerOptions.level = localLoggerOptions.level || 'info';
        localLoggerOptions.serializers = Object.assign({}, serializers, localLoggerOptions.serializers);
        options.logger = localLoggerOptions;
        const logger = createPinoLogger(options.logger);
        return { logger, hasLogger: true }
      }
    }

    function isValidLogger (logger) {
      if (!logger) {
        return false
      }

      let result = true;
      const methods = ['info', 'error', 'debug', 'fatal', 'warn', 'trace', 'child'];
      for (let i = 0; i < methods.length; i += 1) {
        if (!logger[methods[i]] || typeof logger[methods[i]] !== 'function') {
          result = false;
          break
        }
      }
      return result
    }

    var logger = {
      createLogger: createLogger$1,
      serializers,
      now: now$1
    };

    var rfdc_1 = rfdc;

    function copyBuffer (cur) {
      if (cur instanceof Buffer) {
        return Buffer.from(cur)
      }

      return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length)
    }

    function rfdc (opts) {
      opts = opts || {};

      if (opts.circles) return rfdcCircles(opts)
      return opts.proto ? cloneProto : clone

      function cloneArray (a, fn) {
        var keys = Object.keys(a);
        var a2 = new Array(keys.length);
        for (var i = 0; i < keys.length; i++) {
          var k = keys[i];
          var cur = a[k];
          if (typeof cur !== 'object' || cur === null) {
            a2[k] = cur;
          } else if (cur instanceof Date) {
            a2[k] = new Date(cur);
          } else if (ArrayBuffer.isView(cur)) {
            a2[k] = copyBuffer(cur);
          } else {
            a2[k] = fn(cur);
          }
        }
        return a2
      }

      function clone (o) {
        if (typeof o !== 'object' || o === null) return o
        if (o instanceof Date) return new Date(o)
        if (Array.isArray(o)) return cloneArray(o, clone)
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))
        var o2 = {};
        for (var k in o) {
          if (Object.hasOwnProperty.call(o, k) === false) continue
          var cur = o[k];
          if (typeof cur !== 'object' || cur === null) {
            o2[k] = cur;
          } else if (cur instanceof Date) {
            o2[k] = new Date(cur);
          } else if (cur instanceof Map) {
            o2[k] = new Map(cloneArray(Array.from(cur), clone));
          } else if (cur instanceof Set) {
            o2[k] = new Set(cloneArray(Array.from(cur), clone));
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            o2[k] = clone(cur);
          }
        }
        return o2
      }

      function cloneProto (o) {
        if (typeof o !== 'object' || o === null) return o
        if (o instanceof Date) return new Date(o)
        if (Array.isArray(o)) return cloneArray(o, cloneProto)
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))
        var o2 = {};
        for (var k in o) {
          var cur = o[k];
          if (typeof cur !== 'object' || cur === null) {
            o2[k] = cur;
          } else if (cur instanceof Date) {
            o2[k] = new Date(cur);
          } else if (cur instanceof Map) {
            o2[k] = new Map(cloneArray(Array.from(cur), cloneProto));
          } else if (cur instanceof Set) {
            o2[k] = new Set(cloneArray(Array.from(cur), cloneProto));
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            o2[k] = cloneProto(cur);
          }
        }
        return o2
      }
    }

    function rfdcCircles (opts) {
      var refs = [];
      var refsNew = [];

      return opts.proto ? cloneProto : clone

      function cloneArray (a, fn) {
        var keys = Object.keys(a);
        var a2 = new Array(keys.length);
        for (var i = 0; i < keys.length; i++) {
          var k = keys[i];
          var cur = a[k];
          if (typeof cur !== 'object' || cur === null) {
            a2[k] = cur;
          } else if (cur instanceof Date) {
            a2[k] = new Date(cur);
          } else if (ArrayBuffer.isView(cur)) {
            a2[k] = copyBuffer(cur);
          } else {
            var index = refs.indexOf(cur);
            if (index !== -1) {
              a2[k] = refsNew[index];
            } else {
              a2[k] = fn(cur);
            }
          }
        }
        return a2
      }

      function clone (o) {
        if (typeof o !== 'object' || o === null) return o
        if (o instanceof Date) return new Date(o)
        if (Array.isArray(o)) return cloneArray(o, clone)
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))
        var o2 = {};
        refs.push(o);
        refsNew.push(o2);
        for (var k in o) {
          if (Object.hasOwnProperty.call(o, k) === false) continue
          var cur = o[k];
          if (typeof cur !== 'object' || cur === null) {
            o2[k] = cur;
          } else if (cur instanceof Date) {
            o2[k] = new Date(cur);
          } else if (cur instanceof Map) {
            o2[k] = new Map(cloneArray(Array.from(cur), clone));
          } else if (cur instanceof Set) {
            o2[k] = new Set(cloneArray(Array.from(cur), clone));
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            var i = refs.indexOf(cur);
            if (i !== -1) {
              o2[k] = refsNew[i];
            } else {
              o2[k] = clone(cur);
            }
          }
        }
        refs.pop();
        refsNew.pop();
        return o2
      }

      function cloneProto (o) {
        if (typeof o !== 'object' || o === null) return o
        if (o instanceof Date) return new Date(o)
        if (Array.isArray(o)) return cloneArray(o, cloneProto)
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))
        var o2 = {};
        refs.push(o);
        refsNew.push(o2);
        for (var k in o) {
          var cur = o[k];
          if (typeof cur !== 'object' || cur === null) {
            o2[k] = cur;
          } else if (cur instanceof Date) {
            o2[k] = new Date(cur);
          } else if (cur instanceof Map) {
            o2[k] = new Map(cloneArray(Array.from(cur), cloneProto));
          } else if (cur instanceof Set) {
            o2[k] = new Set(cloneArray(Array.from(cur), cloneProto));
          } else if (ArrayBuffer.isView(cur)) {
            o2[k] = copyBuffer(cur);
          } else {
            var i = refs.indexOf(cur);
            if (i !== -1) {
              o2[k] = refsNew[i];
            } else {
              o2[k] = cloneProto(cur);
            }
          }
        }
        refs.pop();
        refsNew.pop();
        return o2
      }
    }

    const fastClone = rfdc_1({ circles: false, proto: true });
    const { kSchemaVisited, kSchemaResponse: kSchemaResponse$1 } = symbols$2;
    const kFluentSchema = Symbol.for('fluent-schema-object');

    const {
      FST_ERR_SCH_MISSING_ID,
      FST_ERR_SCH_ALREADY_PRESENT,
      FST_ERR_SCH_DUPLICATE,
      FST_ERR_SCH_CONTENT_MISSING_SCHEMA
    } = errorsExports;

    const SCHEMAS_SOURCE = ['params', 'body', 'querystring', 'query', 'headers'];

    function Schemas (initStore) {
      this.store = initStore || {};
    }

    Schemas.prototype.add = function (inputSchema) {
      const schema = fastClone((inputSchema.isFluentSchema || inputSchema.isFluentJSONSchema || inputSchema[kFluentSchema])
        ? inputSchema.valueOf()
        : inputSchema
      );

      // devs can add schemas without $id, but with $def instead
      const id = schema.$id;
      if (!id) {
        throw new FST_ERR_SCH_MISSING_ID()
      }

      if (this.store[id]) {
        throw new FST_ERR_SCH_ALREADY_PRESENT(id)
      }

      this.store[id] = schema;
    };

    Schemas.prototype.getSchemas = function () {
      return Object.assign({}, this.store)
    };

    Schemas.prototype.getSchema = function (schemaId) {
      return this.store[schemaId]
    };

    function normalizeSchema$1 (routeSchemas, serverOptions) {
      if (routeSchemas[kSchemaVisited]) {
        return routeSchemas
      }

      // alias query to querystring schema
      if (routeSchemas.query) {
        // check if our schema has both querystring and query
        if (routeSchemas.querystring) {
          throw new FST_ERR_SCH_DUPLICATE('querystring')
        }
        routeSchemas.querystring = routeSchemas.query;
      }

      generateFluentSchema(routeSchemas);

      // let's check if our schemas have a custom prototype
      for (const key of ['headers', 'querystring', 'params', 'body']) {
        if (typeof routeSchemas[key] === 'object' && Object.getPrototypeOf(routeSchemas[key]) !== Object.prototype) {
          routeSchemas[kSchemaVisited] = true;
          return routeSchemas
        }
      }

      if (routeSchemas.body) {
        routeSchemas.body = getSchemaAnyway(routeSchemas.body, serverOptions.jsonShorthand);
      }

      if (routeSchemas.headers) {
        routeSchemas.headers = getSchemaAnyway(routeSchemas.headers, serverOptions.jsonShorthand);
      }

      if (routeSchemas.querystring) {
        routeSchemas.querystring = getSchemaAnyway(routeSchemas.querystring, serverOptions.jsonShorthand);
      }

      if (routeSchemas.params) {
        routeSchemas.params = getSchemaAnyway(routeSchemas.params, serverOptions.jsonShorthand);
      }

      if (routeSchemas.response) {
        const httpCodes = Object.keys(routeSchemas.response);
        for (const code of httpCodes) {
          const contentProperty = routeSchemas.response[code].content;

          let hasContentMultipleContentTypes = false;
          if (contentProperty) {
            const keys = Object.keys(contentProperty);
            for (let i = 0; i < keys.length; i++) {
              const mediaName = keys[i];
              if (!contentProperty[mediaName].schema) {
                if (keys.length === 1) { break }
                throw new FST_ERR_SCH_CONTENT_MISSING_SCHEMA(mediaName)
              }
              routeSchemas.response[code].content[mediaName].schema = getSchemaAnyway(contentProperty[mediaName].schema, serverOptions.jsonShorthand);
              if (i === keys.length - 1) {
                hasContentMultipleContentTypes = true;
              }
            }
          }

          if (!hasContentMultipleContentTypes) {
            routeSchemas.response[code] = getSchemaAnyway(routeSchemas.response[code], serverOptions.jsonShorthand);
          }
        }
      }

      routeSchemas[kSchemaVisited] = true;
      return routeSchemas
    }

    function generateFluentSchema (schema) {
      for (const key of SCHEMAS_SOURCE) {
        if (schema[key] && (schema[key].isFluentSchema || schema[key][kFluentSchema])) {
          schema[key] = schema[key].valueOf();
        }
      }

      if (schema.response) {
        const httpCodes = Object.keys(schema.response);
        for (const code of httpCodes) {
          if (schema.response[code].isFluentSchema || schema.response[code][kFluentSchema]) {
            schema.response[code] = schema.response[code].valueOf();
          }
        }
      }
    }

    function getSchemaAnyway (schema, jsonShorthand) {
      if (!jsonShorthand || schema.$ref || schema.oneOf || schema.allOf || schema.anyOf || schema.$merge || schema.$patch) return schema
      if (!schema.type && !schema.properties) {
        return {
          type: 'object',
          properties: schema
        }
      }
      return schema
    }

    /**
     * Search for the right JSON schema compiled function in the request context
     * setup by the route configuration `schema.response`.
     * It will look for the exact match (eg 200) or generic (eg 2xx)
     *
     * @param {object} context the request context
     * @param {number} statusCode the http status code
     * @param {string} contentType the reply content type
     * @returns {function|boolean} the right JSON Schema function to serialize
     * the reply or false if it is not set
     */
    function getSchemaSerializer$2 (context, statusCode, contentType) {
      const responseSchemaDef = context[kSchemaResponse$1];
      if (!responseSchemaDef) {
        return false
      }
      if (responseSchemaDef[statusCode]) {
        if (responseSchemaDef[statusCode].constructor === Object) {
          const mediaName = contentType.split(';')[0];
          if (responseSchemaDef[statusCode][mediaName]) {
            return responseSchemaDef[statusCode][mediaName]
          }

          return false
        }
        return responseSchemaDef[statusCode]
      }
      const fallbackStatusCode = (statusCode + '')[0] + 'xx';
      if (responseSchemaDef[fallbackStatusCode]) {
        if (responseSchemaDef[fallbackStatusCode].constructor === Object) {
          const mediaName = contentType.split(';')[0];
          if (responseSchemaDef[fallbackStatusCode][mediaName]) {
            return responseSchemaDef[fallbackStatusCode][mediaName]
          }

          return false
        }

        return responseSchemaDef[fallbackStatusCode]
      }
      if (responseSchemaDef.default) {
        if (responseSchemaDef.default.constructor === Object) {
          const mediaName = contentType.split(';')[0];
          if (responseSchemaDef.default[mediaName]) {
            return responseSchemaDef.default[mediaName]
          }

          return false
        }

        return responseSchemaDef.default
      }
      return false
    }

    var schemas = {
      buildSchemas (initStore) { return new Schemas(initStore) },
      getSchemaSerializer: getSchemaSerializer$2,
      normalizeSchema: normalizeSchema$1
    };

    // eslint-disable-next-line
    const STR_ESCAPE$1 = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;

    let Serializer$1 = class Serializer {
      constructor (options = {}) {
        switch (options.rounding) {
          case 'floor':
            this.parseInteger = Math.floor;
            break
          case 'ceil':
            this.parseInteger = Math.ceil;
            break
          case 'round':
            this.parseInteger = Math.round;
            break
          default:
            this.parseInteger = Math.trunc;
            break
        }
      }

      asInteger (i) {
        if (typeof i === 'bigint') {
          return i.toString()
        } else if (Number.isInteger(i)) {
          return '' + i
        } else {
          /* eslint no-undef: "off" */
          const integer = this.parseInteger(i);
          if (Number.isNaN(integer) || !Number.isFinite(integer)) {
            throw new Error(`The value "${i}" cannot be converted to an integer.`)
          } else {
            return '' + integer
          }
        }
      }

      asNumber (i) {
        const num = Number(i);
        if (Number.isNaN(num)) {
          throw new Error(`The value "${i}" cannot be converted to a number.`)
        } else if (!Number.isFinite(num)) {
          return null
        } else {
          return '' + num
        }
      }

      asBoolean (bool) {
        return bool && 'true' || 'false' // eslint-disable-line
      }

      asDateTime (date) {
        if (date === null) return '""'
        if (date instanceof Date) {
          return '"' + date.toISOString() + '"'
        }
        if (typeof date === 'string') {
          return '"' + date + '"'
        }
        throw new Error(`The value "${date}" cannot be converted to a date-time.`)
      }

      asDate (date) {
        if (date === null) return '""'
        if (date instanceof Date) {
          return '"' + new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 10) + '"'
        }
        if (typeof date === 'string') {
          return '"' + date + '"'
        }
        throw new Error(`The value "${date}" cannot be converted to a date.`)
      }

      asTime (date) {
        if (date === null) return '""'
        if (date instanceof Date) {
          return '"' + new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(11, 19) + '"'
        }
        if (typeof date === 'string') {
          return '"' + date + '"'
        }
        throw new Error(`The value "${date}" cannot be converted to a time.`)
      }

      asString (str) {
        const quotes = '"';
        if (str instanceof Date) {
          return quotes + str.toISOString() + quotes
        } else if (str === null) {
          return quotes + quotes
        } else if (str instanceof RegExp) {
          str = str.source;
        } else if (typeof str !== 'string') {
          str = str.toString();
        }

        // Fast escape chars check
        if (!STR_ESCAPE$1.test(str)) {
          return quotes + str + quotes
        }

        if (str.length < 42) {
          return this.asStringSmall(str)
        } else {
          return JSON.stringify(str)
        }
      }

      // magically escape strings for json
      // relying on their charCodeAt
      // everything below 32 needs JSON.stringify()
      // every string that contain surrogate needs JSON.stringify()
      // 34 and 92 happens all the time, so we
      // have a fast case for them
      asStringSmall (str) {
        const l = str.length;
        let result = '';
        let last = 0;
        let found = false;
        let surrogateFound = false;
        let point = 255;
        // eslint-disable-next-line
        for (var i = 0; i < l && point >= 32; i++) {
          point = str.charCodeAt(i);
          if (point >= 0xD800 && point <= 0xDFFF) {
            // The current character is a surrogate.
            surrogateFound = true;
          }
          if (point === 34 || point === 92) {
            result += str.slice(last, i) + '\\';
            last = i;
            found = true;
          }
        }

        if (!found) {
          result = str;
        } else {
          result += str.slice(last);
        }
        return ((point < 32) || (surrogateFound === true)) ? JSON.stringify(str) : '"' + result + '"'
      }
    };

      

      const serializer$1 = new Serializer$1({"mode":"standalone"});
      

      
        function main (input) {
          let json = '';
          json += anonymous0(input);
          return json
        }
        
        function anonymous0 (input) {
          // #
      
          var obj = (input && typeof input.toJSON === 'function')
        ? input.toJSON()
        : input;
      
          var json = '{';
          var addComma = false;
      
          if (obj["statusCode"] !== undefined) {
            
      if (addComma) {
        json += ',';
      } else {
        addComma = true;
      }

            json += "\"statusCode\"" + ':';
          json += serializer$1.asNumber(obj["statusCode"]);
          }
        
          if (obj["code"] !== undefined) {
            
      if (addComma) {
        json += ',';
      } else {
        addComma = true;
      }

            json += "\"code\"" + ':';
          json += serializer$1.asString(obj["code"]);
          }
        
          if (obj["error"] !== undefined) {
            
      if (addComma) {
        json += ',';
      } else {
        addComma = true;
      }

            json += "\"error\"" + ':';
          json += serializer$1.asString(obj["error"]);
          }
        
          if (obj["message"] !== undefined) {
            
      if (addComma) {
        json += ',';
      } else {
        addComma = true;
      }

            json += "\"message\"" + ':';
          json += serializer$1.asString(obj["message"]);
          }
        
          json += '}';
          return json
        }
      
        
      

      var errorSerializer = main;

    const statusCodes = require$$0$2.STATUS_CODES;
    const wrapThenable = wrapThenable_1;
    const {
      kReplyHeaders: kReplyHeaders$1,
      kReplyNextErrorHandler: kReplyNextErrorHandler$1,
      kReplyIsRunningOnErrorHook: kReplyIsRunningOnErrorHook$1,
      kReplyHasStatusCode: kReplyHasStatusCode$1,
      kRouteContext: kRouteContext$3
    } = symbols$2;

    const {
      FST_ERR_REP_INVALID_PAYLOAD_TYPE: FST_ERR_REP_INVALID_PAYLOAD_TYPE$1
    } = errorsExports;

    const { getSchemaSerializer: getSchemaSerializer$1 } = schemas;

    const serializeError = errorSerializer;

    const rootErrorHandler = {
      func: defaultErrorHandler,
      toJSON () {
        return this.func.name.toString() + '()'
      }
    };

    function handleError$2 (reply, error, cb) {
      reply[kReplyIsRunningOnErrorHook$1] = false;

      const context = reply[kRouteContext$3];
      if (reply[kReplyNextErrorHandler$1] === false) {
        fallbackErrorHandler(error, reply, function (reply, payload) {
          try {
            reply.raw.writeHead(reply.raw.statusCode, reply[kReplyHeaders$1]);
          } catch (error) {
            reply.log.warn(
              { req: reply.request, res: reply, err: error },
              error && error.message
            );
            reply.raw.writeHead(reply.raw.statusCode);
          }
          reply.raw.end(payload);
        });
        return
      }
      const errorHandler = reply[kReplyNextErrorHandler$1] || context.errorHandler;

      // In case the error handler throws, we set the next errorHandler so we can error again
      reply[kReplyNextErrorHandler$1] = Object.getPrototypeOf(errorHandler);

      // we need to remove content-type to allow content-type guessing for serialization
      delete reply[kReplyHeaders$1]['content-type'];
      delete reply[kReplyHeaders$1]['content-length'];

      const func = errorHandler.func;

      if (!func) {
        reply[kReplyNextErrorHandler$1] = false;
        fallbackErrorHandler(error, reply, cb);
        return
      }

      const result = func(error, reply.request, reply);
      if (result !== undefined) {
        if (result !== null && typeof result.then === 'function') {
          wrapThenable(result, reply);
        } else {
          reply.send(result);
        }
      }
    }

    function defaultErrorHandler (error, request, reply) {
      setErrorHeaders(error, reply);
      if (!reply[kReplyHasStatusCode$1] || reply.statusCode === 200) {
        const statusCode = error.statusCode || error.status;
        reply.code(statusCode >= 400 ? statusCode : 500);
      }
      if (reply.statusCode < 500) {
        reply.log.info(
          { res: reply, err: error },
          error && error.message
        );
      } else {
        reply.log.error(
          { req: request, res: reply, err: error },
          error && error.message
        );
      }
      reply.send(error);
    }

    function fallbackErrorHandler (error, reply, cb) {
      const res = reply.raw;
      const statusCode = reply.statusCode;
      let payload;
      try {
        const serializerFn = getSchemaSerializer$1(reply[kRouteContext$3], statusCode);
        payload = (serializerFn === false)
          ? serializeError({
            error: statusCodes[statusCode + ''],
            code: error.code,
            message: error.message,
            statusCode
          })
          : serializerFn(Object.create(error, {
            error: { value: statusCodes[statusCode + ''] },
            message: { value: error.message },
            statusCode: { value: statusCode }
          }));
      } catch (err) {
        // error is always FST_ERR_SCH_SERIALIZATION_BUILD because this is called from route/compileSchemasForSerialization
        reply.log.error({ err, statusCode: res.statusCode }, 'The serializer for the given status code failed');
        reply.code(500);
        payload = serializeError({
          error: statusCodes['500'],
          message: err.message,
          statusCode: 500
        });
      }

      if (typeof payload !== 'string' && !Buffer.isBuffer(payload)) {
        payload = serializeError(new FST_ERR_REP_INVALID_PAYLOAD_TYPE$1(typeof payload));
      }

      reply[kReplyHeaders$1]['content-type'] = 'application/json; charset=utf-8';
      reply[kReplyHeaders$1]['content-length'] = '' + Buffer.byteLength(payload);

      cb(reply, payload);
    }

    function buildErrorHandler$3 (parent = rootErrorHandler, func) {
      if (!func) {
        return parent
      }

      const errorHandler = Object.create(parent);
      errorHandler.func = func;
      return errorHandler
    }

    function setErrorHeaders (error, reply) {
      const res = reply.raw;
      let statusCode = res.statusCode;
      statusCode = (statusCode >= 400) ? statusCode : 500;
      // treat undefined and null as same
      if (error != null) {
        if (error.headers !== undefined) {
          reply.headers(error.headers);
        }
        if (error.status >= 400) {
          statusCode = error.status;
        } else if (error.statusCode >= 400) {
          statusCode = error.statusCode;
        }
      }
      res.statusCode = statusCode;
    }

    var errorHandler = {
      buildErrorHandler: buildErrorHandler$3,
      handleError: handleError$2
    };

    const eos = require$$0$9.finished;

    const {
      kFourOhFourContext: kFourOhFourContext$3,
      kReplyErrorHandlerCalled,
      kReplyHijacked,
      kReplyStartTime,
      kReplyEndTime,
      kReplySerializer,
      kReplySerializerDefault: kReplySerializerDefault$3,
      kReplyIsError: kReplyIsError$1,
      kReplyHeaders,
      kReplyTrailers,
      kReplyHasStatusCode,
      kReplyIsRunningOnErrorHook,
      kReplyNextErrorHandler,
      kDisableRequestLogging: kDisableRequestLogging$1,
      kSchemaResponse,
      kReplySerializeWeakMap: kReplySerializeWeakMap$1,
      kSchemaController: kSchemaController$4,
      kOptions: kOptions$3,
      kRouteContext: kRouteContext$2
    } = symbols$2;
    const { hookRunner: hookRunner$1, hookIterator: hookIterator$1, onSendHookRunner } = hooks;

    const internals = handleRequestExports[Symbol.for('internals')];
    const loggerUtils = logger;
    const now = loggerUtils.now;
    const { handleError: handleError$1 } = errorHandler;
    const { getSchemaSerializer } = schemas;

    const CONTENT_TYPE = {
      JSON: 'application/json; charset=utf-8',
      PLAIN: 'text/plain; charset=utf-8',
      OCTET: 'application/octet-stream'
    };
    const {
      FST_ERR_REP_INVALID_PAYLOAD_TYPE,
      FST_ERR_REP_ALREADY_SENT,
      FST_ERR_REP_SENT_VALUE,
      FST_ERR_SEND_INSIDE_ONERR,
      FST_ERR_BAD_STATUS_CODE,
      FST_ERR_BAD_TRAILER_NAME,
      FST_ERR_BAD_TRAILER_VALUE,
      FST_ERR_MISSING_SERIALIZATION_FN,
      FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN
    } = errorsExports;
    const warning$4 = warnings$1;

    function Reply$3 (res, request, log) {
      this.raw = res;
      this[kReplySerializer] = null;
      this[kReplyErrorHandlerCalled] = false;
      this[kReplyIsError$1] = false;
      this[kReplyIsRunningOnErrorHook] = false;
      this.request = request;
      this[kReplyHeaders] = {};
      this[kReplyTrailers] = null;
      this[kReplyHasStatusCode] = false;
      this[kReplyStartTime] = undefined;
      this.log = log;
    }
    Reply$3.props = [];

    Object.defineProperties(Reply$3.prototype, {
      [kRouteContext$2]: {
        get () {
          return this.request[kRouteContext$2]
        }
      },
      // TODO: remove once v5 is done
      // Is temporary to avoid constant conflicts between `next` and `main`
      context: {
        get () {
          return this.request[kRouteContext$2]
        }
      },
      server: {
        get () {
          return this.request[kRouteContext$2].server
        }
      },
      sent: {
        enumerable: true,
        get () {
          // We are checking whether reply was hijacked or the response has ended.
          return (this[kReplyHijacked] || this.raw.writableEnded) === true
        },
        set (value) {
          warning$4.emit('FSTDEP010');

          if (value !== true) {
            throw new FST_ERR_REP_SENT_VALUE()
          }

          // We throw only if sent was overwritten from Fastify
          if (this.sent && this[kReplyHijacked]) {
            throw new FST_ERR_REP_ALREADY_SENT()
          }

          this[kReplyHijacked] = true;
        }
      },
      statusCode: {
        get () {
          return this.raw.statusCode
        },
        set (value) {
          this.code(value);
        }
      }
    });

    Reply$3.prototype.hijack = function () {
      this[kReplyHijacked] = true;
      return this
    };

    Reply$3.prototype.send = function (payload) {
      if (this[kReplyIsRunningOnErrorHook] === true) {
        throw new FST_ERR_SEND_INSIDE_ONERR()
      }

      if (this.sent) {
        this.log.warn({ err: new FST_ERR_REP_ALREADY_SENT() }, 'Reply already sent');
        return this
      }

      if (payload instanceof Error || this[kReplyIsError$1] === true) {
        this[kReplyIsError$1] = false;
        onErrorHook(this, payload, onSendHook);
        return this
      }

      if (payload === undefined) {
        onSendHook(this, payload);
        return this
      }

      const contentType = this.getHeader('content-type');
      const hasContentType = contentType !== undefined;

      if (payload !== null) {
        if (typeof payload.pipe === 'function') {
          onSendHook(this, payload);
          return this
        }

        if (Buffer.isBuffer(payload)) {
          if (hasContentType === false) {
            this[kReplyHeaders]['content-type'] = CONTENT_TYPE.OCTET;
          }
          onSendHook(this, payload);
          return this
        }

        if (hasContentType === false && typeof payload === 'string') {
          this[kReplyHeaders]['content-type'] = CONTENT_TYPE.PLAIN;
          onSendHook(this, payload);
          return this
        }
      }

      if (this[kReplySerializer] !== null) {
        if (typeof payload !== 'string') {
          preserializeHook(this, payload);
          return this
        } else {
          payload = this[kReplySerializer](payload);
        }

      // The indexOf below also matches custom json mimetypes such as 'application/hal+json' or 'application/ld+json'
      } else if (hasContentType === false || contentType.indexOf('json') > -1) {
        if (hasContentType === false) {
          this[kReplyHeaders]['content-type'] = CONTENT_TYPE.JSON;
        } else {
          // If user doesn't set charset, we will set charset to utf-8
          if (contentType.indexOf('charset') === -1) {
            const customContentType = contentType.trim();
            if (customContentType.endsWith(';')) {
              // custom content-type is ended with ';'
              this[kReplyHeaders]['content-type'] = `${customContentType} charset=utf-8`;
            } else {
              this[kReplyHeaders]['content-type'] = `${customContentType}; charset=utf-8`;
            }
          }
        }
        if (typeof payload !== 'string') {
          preserializeHook(this, payload);
          return this
        }
      }

      onSendHook(this, payload);

      return this
    };

    Reply$3.prototype.getHeader = function (key) {
      key = key.toLowerCase();
      const res = this.raw;
      let value = this[kReplyHeaders][key];
      if (value === undefined && res.hasHeader(key)) {
        value = res.getHeader(key);
      }
      return value
    };

    Reply$3.prototype.getHeaders = function () {
      return {
        ...this.raw.getHeaders(),
        ...this[kReplyHeaders]
      }
    };

    Reply$3.prototype.hasHeader = function (key) {
      key = key.toLowerCase();

      return this[kReplyHeaders][key] !== undefined || this.raw.hasHeader(key)
    };

    Reply$3.prototype.removeHeader = function (key) {
      // Node.js does not like headers with keys set to undefined,
      // so we have to delete the key.
      delete this[kReplyHeaders][key.toLowerCase()];
      return this
    };

    Reply$3.prototype.header = function (key, value = '') {
      key = key.toLowerCase();

      if (this[kReplyHeaders][key] && key === 'set-cookie') {
        // https://tools.ietf.org/html/rfc7230#section-3.2.2
        if (typeof this[kReplyHeaders][key] === 'string') {
          this[kReplyHeaders][key] = [this[kReplyHeaders][key]];
        }

        if (Array.isArray(value)) {
          this[kReplyHeaders][key].push(...value);
        } else {
          this[kReplyHeaders][key].push(value);
        }
      } else {
        this[kReplyHeaders][key] = value;
      }

      return this
    };

    Reply$3.prototype.headers = function (headers) {
      const keys = Object.keys(headers);
      /* eslint-disable no-var */
      for (var i = 0; i !== keys.length; ++i) {
        const key = keys[i];
        this.header(key, headers[key]);
      }

      return this
    };

    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Trailer#directives
    // https://httpwg.org/specs/rfc7230.html#chunked.trailer.part
    const INVALID_TRAILERS = new Set([
      'transfer-encoding',
      'content-length',
      'host',
      'cache-control',
      'max-forwards',
      'te',
      'authorization',
      'set-cookie',
      'content-encoding',
      'content-type',
      'content-range',
      'trailer'
    ]);

    Reply$3.prototype.trailer = function (key, fn) {
      key = key.toLowerCase();
      if (INVALID_TRAILERS.has(key)) {
        throw new FST_ERR_BAD_TRAILER_NAME(key)
      }
      if (typeof fn !== 'function') {
        throw new FST_ERR_BAD_TRAILER_VALUE(key, typeof fn)
      }
      if (this[kReplyTrailers] === null) this[kReplyTrailers] = {};
      this[kReplyTrailers][key] = fn;
      return this
    };

    Reply$3.prototype.hasTrailer = function (key) {
      return this[kReplyTrailers]?.[key.toLowerCase()] !== undefined
    };

    Reply$3.prototype.removeTrailer = function (key) {
      if (this[kReplyTrailers] === null) return this
      this[kReplyTrailers][key.toLowerCase()] = undefined;
      return this
    };

    Reply$3.prototype.code = function (code) {
      const intValue = Number(code);
      if (isNaN(intValue) || intValue < 100 || intValue > 599) {
        throw new FST_ERR_BAD_STATUS_CODE(code || String(code))
      }

      this.raw.statusCode = intValue;
      this[kReplyHasStatusCode] = true;
      return this
    };

    Reply$3.prototype.status = Reply$3.prototype.code;

    Reply$3.prototype.getSerializationFunction = function (schemaOrStatus, contentType) {
      let serialize;

      if (typeof schemaOrStatus === 'string' || typeof schemaOrStatus === 'number') {
        if (typeof contentType === 'string') {
          serialize = this[kRouteContext$2][kSchemaResponse]?.[schemaOrStatus]?.[contentType];
        } else {
          serialize = this[kRouteContext$2][kSchemaResponse]?.[schemaOrStatus];
        }
      } else if (typeof schemaOrStatus === 'object') {
        serialize = this[kRouteContext$2][kReplySerializeWeakMap$1]?.get(schemaOrStatus);
      }

      return serialize
    };

    Reply$3.prototype.compileSerializationSchema = function (schema, httpStatus = null, contentType = null) {
      const { request } = this;
      const { method, url } = request;

      // Check if serialize function already compiled
      if (this[kRouteContext$2][kReplySerializeWeakMap$1]?.has(schema)) {
        return this[kRouteContext$2][kReplySerializeWeakMap$1].get(schema)
      }

      const serializerCompiler = this[kRouteContext$2].serializerCompiler ||
       this.server[kSchemaController$4].serializerCompiler ||
      (
        // We compile the schemas if no custom serializerCompiler is provided
        // nor set
        this.server[kSchemaController$4].setupSerializer(this.server[kOptions$3]) ||
        this.server[kSchemaController$4].serializerCompiler
      );

      const serializeFn = serializerCompiler({
        schema,
        method,
        url,
        httpStatus,
        contentType
      });

      // We create a WeakMap to compile the schema only once
      // Its done leazily to avoid add overhead by creating the WeakMap
      // if it is not used
      // TODO: Explore a central cache for all the schemas shared across
      // encapsulated contexts
      if (this[kRouteContext$2][kReplySerializeWeakMap$1] == null) {
        this[kRouteContext$2][kReplySerializeWeakMap$1] = new WeakMap();
      }

      this[kRouteContext$2][kReplySerializeWeakMap$1].set(schema, serializeFn);

      return serializeFn
    };

    Reply$3.prototype.serializeInput = function (input, schema, httpStatus, contentType) {
      const possibleContentType = httpStatus;
      let serialize;
      httpStatus = typeof schema === 'string' || typeof schema === 'number'
        ? schema
        : httpStatus;

      contentType = httpStatus && possibleContentType !== httpStatus
        ? possibleContentType
        : contentType;

      if (httpStatus != null) {
        if (contentType != null) {
          serialize = this[kRouteContext$2][kSchemaResponse]?.[httpStatus]?.[contentType];
        } else {
          serialize = this[kRouteContext$2][kSchemaResponse]?.[httpStatus];
        }

        if (serialize == null) {
          if (contentType) throw new FST_ERR_MISSING_CONTENTTYPE_SERIALIZATION_FN(httpStatus, contentType)
          throw new FST_ERR_MISSING_SERIALIZATION_FN(httpStatus)
        }
      } else {
        // Check if serialize function already compiled
        if (this[kRouteContext$2][kReplySerializeWeakMap$1]?.has(schema)) {
          serialize = this[kRouteContext$2][kReplySerializeWeakMap$1].get(schema);
        } else {
          serialize = this.compileSerializationSchema(schema, httpStatus, contentType);
        }
      }

      return serialize(input)
    };

    Reply$3.prototype.serialize = function (payload) {
      if (this[kReplySerializer] !== null) {
        return this[kReplySerializer](payload)
      } else {
        if (this[kRouteContext$2] && this[kRouteContext$2][kReplySerializerDefault$3]) {
          return this[kRouteContext$2][kReplySerializerDefault$3](payload, this.raw.statusCode)
        } else {
          return serialize$2(this[kRouteContext$2], payload, this.raw.statusCode)
        }
      }
    };

    Reply$3.prototype.serializer = function (fn) {
      this[kReplySerializer] = fn;
      return this
    };

    Reply$3.prototype.type = function (type) {
      this[kReplyHeaders]['content-type'] = type;
      return this
    };

    Reply$3.prototype.redirect = function (code, url) {
      if (typeof code === 'string') {
        url = code;
        code = this[kReplyHasStatusCode] ? this.raw.statusCode : 302;
      }

      return this.header('location', url).code(code).send()
    };

    Reply$3.prototype.callNotFound = function () {
      notFound(this);
      return this
    };

    Reply$3.prototype.getResponseTime = function () {
      let responseTime = 0;

      if (this[kReplyStartTime] !== undefined) {
        responseTime = (this[kReplyEndTime] || now()) - this[kReplyStartTime];
      }

      return responseTime
    };

    // Make reply a thenable, so it could be used with async/await.
    // See
    // - https://github.com/fastify/fastify/issues/1864 for the discussions
    // - https://promisesaplus.com/ for the definition of thenable
    // - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then for the signature
    Reply$3.prototype.then = function (fulfilled, rejected) {
      if (this.sent) {
        fulfilled();
        return
      }

      eos(this.raw, (err) => {
        // We must not treat ERR_STREAM_PREMATURE_CLOSE as
        // an error because it is created by eos, not by the stream.
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          if (rejected) {
            rejected(err);
          } else {
            this.log && this.log.warn('unhandled rejection on reply.then');
          }
        } else {
          fulfilled();
        }
      });
    };

    function preserializeHook (reply, payload) {
      if (reply[kRouteContext$2].preSerialization !== null) {
        onSendHookRunner(
          reply[kRouteContext$2].preSerialization,
          reply.request,
          reply,
          payload,
          preserializeHookEnd
        );
      } else {
        preserializeHookEnd(null, reply.request, reply, payload);
      }
    }

    function preserializeHookEnd (err, request, reply, payload) {
      if (err != null) {
        onErrorHook(reply, err);
        return
      }

      try {
        if (reply[kReplySerializer] !== null) {
          payload = reply[kReplySerializer](payload);
        } else if (reply[kRouteContext$2] && reply[kRouteContext$2][kReplySerializerDefault$3]) {
          payload = reply[kRouteContext$2][kReplySerializerDefault$3](payload, reply.raw.statusCode);
        } else {
          payload = serialize$2(reply[kRouteContext$2], payload, reply.raw.statusCode, reply[kReplyHeaders]['content-type']);
        }
      } catch (e) {
        wrapSeralizationError(e, reply);
        onErrorHook(reply, e);
        return
      }

      onSendHook(reply, payload);
    }

    function wrapSeralizationError (error, reply) {
      error.serialization = reply[kRouteContext$2].config;
    }

    function onSendHook (reply, payload) {
      if (reply[kRouteContext$2].onSend !== null) {
        onSendHookRunner(
          reply[kRouteContext$2].onSend,
          reply.request,
          reply,
          payload,
          wrapOnSendEnd
        );
      } else {
        onSendEnd(reply, payload);
      }
    }

    function wrapOnSendEnd (err, request, reply, payload) {
      if (err != null) {
        onErrorHook(reply, err);
      } else {
        onSendEnd(reply, payload);
      }
    }

    function onSendEnd (reply, payload) {
      const res = reply.raw;
      const req = reply.request;
      const statusCode = res.statusCode;

      // we check if we need to update the trailers header and set it
      if (reply[kReplyTrailers] !== null) {
        const trailerHeaders = Object.keys(reply[kReplyTrailers]);
        let header = '';
        for (const trailerName of trailerHeaders) {
          if (typeof reply[kReplyTrailers][trailerName] !== 'function') continue
          header += ' ';
          header += trailerName;
        }
        // it must be chunked for trailer to work
        reply.header('Transfer-Encoding', 'chunked');
        reply.header('Trailer', header.trim());
      }

      if (payload === undefined || payload === null) {
        // according to https://tools.ietf.org/html/rfc7230#section-3.3.2
        // we cannot send a content-length for 304 and 204, and all status code
        // < 200
        // A sender MUST NOT send a Content-Length header field in any message
        // that contains a Transfer-Encoding header field.
        // For HEAD we don't overwrite the `content-length`
        if (statusCode >= 200 && statusCode !== 204 && statusCode !== 304 && req.method !== 'HEAD' && reply[kReplyTrailers] === null) {
          reply[kReplyHeaders]['content-length'] = '0';
        }

        res.writeHead(statusCode, reply[kReplyHeaders]);
        sendTrailer(payload, res, reply);
        return
      }

      if (typeof payload.pipe === 'function') {
        sendStream(payload, res, reply);
        return
      }

      if (typeof payload !== 'string' && !Buffer.isBuffer(payload)) {
        throw new FST_ERR_REP_INVALID_PAYLOAD_TYPE(typeof payload)
      }

      if (reply[kReplyTrailers] === null) {
        const contentLength = reply[kReplyHeaders]['content-length'];
        if (!contentLength ||
            (req.raw.method !== 'HEAD' &&
             Number(contentLength) !== Buffer.byteLength(payload)
            )
        ) {
          reply[kReplyHeaders]['content-length'] = '' + Buffer.byteLength(payload);
        }
      }

      res.writeHead(statusCode, reply[kReplyHeaders]);
      // write payload first
      res.write(payload);
      // then send trailers
      sendTrailer(payload, res, reply);
    }

    function logStreamError (logger, err, res) {
      if (err.code === 'ERR_STREAM_PREMATURE_CLOSE') {
        if (!logger[kDisableRequestLogging$1]) {
          logger.info({ res }, 'stream closed prematurely');
        }
      } else {
        logger.warn({ err }, 'response terminated with an error with headers already sent');
      }
    }

    function sendStream (payload, res, reply) {
      let sourceOpen = true;
      let errorLogged = false;

      // set trailer when stream ended
      sendStreamTrailer(payload, res, reply);

      eos(payload, { readable: true, writable: false }, function (err) {
        sourceOpen = false;
        if (err != null) {
          if (res.headersSent || reply.request.raw.aborted === true) {
            if (!errorLogged) {
              errorLogged = true;
              logStreamError(reply.log, err, res);
            }
            res.destroy();
          } else {
            onErrorHook(reply, err);
          }
        }
        // there is nothing to do if there is not an error
      });

      eos(res, function (err) {
        if (sourceOpen) {
          if (err != null && res.headersSent && !errorLogged) {
            errorLogged = true;
            logStreamError(reply.log, err, res);
          }
          if (typeof payload.destroy === 'function') {
            payload.destroy();
          } else if (typeof payload.close === 'function') {
            payload.close(noop$1);
          } else if (typeof payload.abort === 'function') {
            payload.abort();
          } else {
            reply.log.warn('stream payload does not end properly');
          }
        }
      });

      // streams will error asynchronously, and we want to handle that error
      // appropriately, e.g. a 404 for a missing file. So we cannot use
      // writeHead, and we need to resort to setHeader, which will trigger
      // a writeHead when there is data to send.
      if (!res.headersSent) {
        for (const key in reply[kReplyHeaders]) {
          res.setHeader(key, reply[kReplyHeaders][key]);
        }
      } else {
        reply.log.warn('response will send, but you shouldn\'t use res.writeHead in stream mode');
      }
      payload.pipe(res);
    }

    function sendTrailer (payload, res, reply) {
      if (reply[kReplyTrailers] === null) {
        // when no trailer, we close the stream
        res.end(null, null, null); // avoid ArgumentsAdaptorTrampoline from V8
        return
      }
      const trailerHeaders = Object.keys(reply[kReplyTrailers]);
      const trailers = {};
      let handled = 0;
      let skipped = true;
      function send () {
        // add trailers when all handler handled
        /* istanbul ignore else */
        if (handled === 0) {
          res.addTrailers(trailers);
          // we need to properly close the stream
          // after trailers sent
          res.end(null, null, null); // avoid ArgumentsAdaptorTrampoline from V8
        }
      }

      for (const trailerName of trailerHeaders) {
        if (typeof reply[kReplyTrailers][trailerName] !== 'function') continue
        skipped = false;
        handled--;

        function cb (err, value) {
          // TODO: we may protect multiple callback calls
          //       or mixing async-await with callback
          handled++;

          // we can safely ignore error for trailer
          // since it does affect the client
          // we log in here only for debug usage
          if (err) reply.log.debug(err);
          else trailers[trailerName] = value;

          // we push the check to the end of event
          // loop, so the registration continue to
          // process.
          process.nextTick(send);
        }

        const result = reply[kReplyTrailers][trailerName](reply, payload, cb);
        if (typeof result === 'object' && typeof result.then === 'function') {
          result.then((v) => cb(null, v), cb);
        } else if (result !== null && result !== undefined) {
          // TODO: should be removed in fastify@5
          warning$4.emit('FSTDEP013');
          cb(null, result);
        }
      }

      // when all trailers are skipped
      // we need to close the stream
      if (skipped) res.end(null, null, null); // avoid ArgumentsAdaptorTrampoline from V8
    }

    function sendStreamTrailer (payload, res, reply) {
      if (reply[kReplyTrailers] === null) return
      payload.on('end', () => sendTrailer(null, res, reply));
    }

    function onErrorHook (reply, error, cb) {
      if (reply[kRouteContext$2].onError !== null && !reply[kReplyNextErrorHandler]) {
        reply[kReplyIsRunningOnErrorHook] = true;
        onSendHookRunner(
          reply[kRouteContext$2].onError,
          reply.request,
          reply,
          error,
          () => handleError$1(reply, error, cb)
        );
      } else {
        handleError$1(reply, error, cb);
      }
    }

    function setupResponseListeners (reply) {
      reply[kReplyStartTime] = now();

      const onResFinished = err => {
        reply[kReplyEndTime] = now();
        reply.raw.removeListener('finish', onResFinished);
        reply.raw.removeListener('error', onResFinished);

        const ctx = reply[kRouteContext$2];

        if (ctx && ctx.onResponse !== null) {
          hookRunner$1(
            ctx.onResponse,
            onResponseIterator,
            reply.request,
            reply,
            onResponseCallback
          );
        } else {
          onResponseCallback(err, reply.request, reply);
        }
      };

      reply.raw.on('finish', onResFinished);
      reply.raw.on('error', onResFinished);
    }

    function onResponseIterator (fn, request, reply, next) {
      return fn(request, reply, next)
    }

    function onResponseCallback (err, request, reply) {
      if (reply.log[kDisableRequestLogging$1]) {
        return
      }

      const responseTime = reply.getResponseTime();

      if (err != null) {
        reply.log.error({
          res: reply,
          err,
          responseTime
        }, 'request errored');
        return
      }

      reply.log.info({
        res: reply,
        responseTime
      }, 'request completed');
    }

    function buildReply (R) {
      const props = [...R.props];

      function _Reply (res, request, log) {
        this.raw = res;
        this[kReplyIsError$1] = false;
        this[kReplyErrorHandlerCalled] = false;
        this[kReplyHijacked] = false;
        this[kReplySerializer] = null;
        this.request = request;
        this[kReplyHeaders] = {};
        this[kReplyTrailers] = null;
        this[kReplyStartTime] = undefined;
        this[kReplyEndTime] = undefined;
        this.log = log;

        // eslint-disable-next-line no-var
        var prop;
        // eslint-disable-next-line no-var
        for (var i = 0; i < props.length; i++) {
          prop = props[i];
          this[prop.key] = prop.value;
        }
      }
      Object.setPrototypeOf(_Reply.prototype, R.prototype);
      Object.setPrototypeOf(_Reply, R);
      _Reply.parent = R;
      _Reply.props = props;
      return _Reply
    }

    function notFound (reply) {
      if (reply[kRouteContext$2][kFourOhFourContext$3] === null) {
        reply.log.warn('Trying to send a NotFound error inside a 404 handler. Sending basic 404 response.');
        reply.code(404).send('404 Not Found');
        return
      }

      reply.request[kRouteContext$2] = reply[kRouteContext$2][kFourOhFourContext$3];

      // preHandler hook
      if (reply[kRouteContext$2].preHandler !== null) {
        hookRunner$1(
          reply[kRouteContext$2].preHandler,
          hookIterator$1,
          reply.request,
          reply,
          internals.preHandlerCallback
        );
      } else {
        internals.preHandlerCallback(null, reply.request, reply);
      }
    }

    /**
     * This function runs when a payload that is not a string|buffer|stream or null
     * should be serialized to be streamed to the response.
     * This is the default serializer that can be customized by the user using the replySerializer
     *
     * @param {object} context the request context
     * @param {object} data the JSON payload to serialize
     * @param {number} statusCode the http status code
     * @param {string} contentType the reply content type
     * @returns {string} the serialized payload
     */
    function serialize$2 (context, data, statusCode, contentType) {
      const fnSerialize = getSchemaSerializer(context, statusCode, contentType);
      if (fnSerialize) {
        return fnSerialize(data)
      }
      return JSON.stringify(data)
    }

    function noop$1 () { }

    reply.exports = Reply$3;
    replyExports.buildReply = buildReply;
    replyExports.setupResponseListeners = setupResponseListeners;

    var requestExports$1 = {};
    var request$1 = {
      get exports(){ return requestExports$1; },
      set exports(v){ requestExports$1 = v; },
    };

    var proxyAddrExports = {};
    var proxyAddr$1 = {
      get exports(){ return proxyAddrExports; },
      set exports(v){ proxyAddrExports = v; },
    };

    /*!
     * forwarded
     * Copyright(c) 2014-2017 Douglas Christopher Wilson
     * MIT Licensed
     */

    /**
     * Module exports.
     * @public
     */

    var forwarded_1 = forwarded$1;

    /**
     * Get all addresses in the request, using the `X-Forwarded-For` header.
     *
     * @param {object} req
     * @return {array}
     * @public
     */

    function forwarded$1 (req) {
      if (!req) {
        throw new TypeError('argument req is required')
      }

      // simple header parsing
      var proxyAddrs = parse$e(req.headers['x-forwarded-for'] || '');
      var socketAddr = getSocketAddr(req);
      var addrs = [socketAddr].concat(proxyAddrs);

      // return all addresses
      return addrs
    }

    /**
     * Get the socket address for a request.
     *
     * @param {object} req
     * @return {string}
     * @private
     */

    function getSocketAddr (req) {
      return req.socket
        ? req.socket.remoteAddress
        : req.connection.remoteAddress
    }

    /**
     * Parse the X-Forwarded-For header.
     *
     * @param {string} header
     * @private
     */

    function parse$e (header) {
      var end = header.length;
      var list = [];
      var start = header.length;

      // gather addresses, backwards
      for (var i = header.length - 1; i >= 0; i--) {
        switch (header.charCodeAt(i)) {
          case 0x20: /*   */
            if (start === end) {
              start = end = i;
            }
            break
          case 0x2c: /* , */
            if (start !== end) {
              list.push(header.substring(start, end));
            }
            start = end = i;
            break
          default:
            start = i;
            break
        }
      }

      // final address
      if (start !== end) {
        list.push(header.substring(start, end));
      }

      return list
    }

    var ipaddrExports = {};
    var ipaddr$1 = {
      get exports(){ return ipaddrExports; },
      set exports(v){ ipaddrExports = v; },
    };

    (function (module) {
    	(function() {
    	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;

    	  ipaddr = {};

    	  root = this;

    	  if ((module !== null) && module.exports) {
    	    module.exports = ipaddr;
    	  } else {
    	    root['ipaddr'] = ipaddr;
    	  }

    	  matchCIDR = function(first, second, partSize, cidrBits) {
    	    var part, shift;
    	    if (first.length !== second.length) {
    	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
    	    }
    	    part = 0;
    	    while (cidrBits > 0) {
    	      shift = partSize - cidrBits;
    	      if (shift < 0) {
    	        shift = 0;
    	      }
    	      if (first[part] >> shift !== second[part] >> shift) {
    	        return false;
    	      }
    	      cidrBits -= partSize;
    	      part += 1;
    	    }
    	    return true;
    	  };

    	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
    	    var k, len, rangeName, rangeSubnets, subnet;
    	    if (defaultName == null) {
    	      defaultName = 'unicast';
    	    }
    	    for (rangeName in rangeList) {
    	      rangeSubnets = rangeList[rangeName];
    	      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
    	        rangeSubnets = [rangeSubnets];
    	      }
    	      for (k = 0, len = rangeSubnets.length; k < len; k++) {
    	        subnet = rangeSubnets[k];
    	        if (address.kind() === subnet[0].kind()) {
    	          if (address.match.apply(address, subnet)) {
    	            return rangeName;
    	          }
    	        }
    	      }
    	    }
    	    return defaultName;
    	  };

    	  ipaddr.IPv4 = (function() {
    	    function IPv4(octets) {
    	      var k, len, octet;
    	      if (octets.length !== 4) {
    	        throw new Error("ipaddr: ipv4 octet count should be 4");
    	      }
    	      for (k = 0, len = octets.length; k < len; k++) {
    	        octet = octets[k];
    	        if (!((0 <= octet && octet <= 255))) {
    	          throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
    	        }
    	      }
    	      this.octets = octets;
    	    }

    	    IPv4.prototype.kind = function() {
    	      return 'ipv4';
    	    };

    	    IPv4.prototype.toString = function() {
    	      return this.octets.join(".");
    	    };

    	    IPv4.prototype.toNormalizedString = function() {
    	      return this.toString();
    	    };

    	    IPv4.prototype.toByteArray = function() {
    	      return this.octets.slice(0);
    	    };

    	    IPv4.prototype.match = function(other, cidrRange) {
    	      var ref;
    	      if (cidrRange === void 0) {
    	        ref = other, other = ref[0], cidrRange = ref[1];
    	      }
    	      if (other.kind() !== 'ipv4') {
    	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
    	      }
    	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
    	    };

    	    IPv4.prototype.SpecialRanges = {
    	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
    	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
    	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
    	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
    	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
    	      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
    	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
    	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
    	    };

    	    IPv4.prototype.range = function() {
    	      return ipaddr.subnetMatch(this, this.SpecialRanges);
    	    };

    	    IPv4.prototype.toIPv4MappedAddress = function() {
    	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
    	    };

    	    IPv4.prototype.prefixLengthFromSubnetMask = function() {
    	      var cidr, i, k, octet, stop, zeros, zerotable;
    	      zerotable = {
    	        0: 8,
    	        128: 7,
    	        192: 6,
    	        224: 5,
    	        240: 4,
    	        248: 3,
    	        252: 2,
    	        254: 1,
    	        255: 0
    	      };
    	      cidr = 0;
    	      stop = false;
    	      for (i = k = 3; k >= 0; i = k += -1) {
    	        octet = this.octets[i];
    	        if (octet in zerotable) {
    	          zeros = zerotable[octet];
    	          if (stop && zeros !== 0) {
    	            return null;
    	          }
    	          if (zeros !== 8) {
    	            stop = true;
    	          }
    	          cidr += zeros;
    	        } else {
    	          return null;
    	        }
    	      }
    	      return 32 - cidr;
    	    };

    	    return IPv4;

    	  })();

    	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

    	  ipv4Regexes = {
    	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
    	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
    	  };

    	  ipaddr.IPv4.parser = function(string) {
    	    var match, parseIntAuto, part, shift, value;
    	    parseIntAuto = function(string) {
    	      if (string[0] === "0" && string[1] !== "x") {
    	        return parseInt(string, 8);
    	      } else {
    	        return parseInt(string);
    	      }
    	    };
    	    if (match = string.match(ipv4Regexes.fourOctet)) {
    	      return (function() {
    	        var k, len, ref, results;
    	        ref = match.slice(1, 6);
    	        results = [];
    	        for (k = 0, len = ref.length; k < len; k++) {
    	          part = ref[k];
    	          results.push(parseIntAuto(part));
    	        }
    	        return results;
    	      })();
    	    } else if (match = string.match(ipv4Regexes.longValue)) {
    	      value = parseIntAuto(match[1]);
    	      if (value > 0xffffffff || value < 0) {
    	        throw new Error("ipaddr: address outside defined range");
    	      }
    	      return ((function() {
    	        var k, results;
    	        results = [];
    	        for (shift = k = 0; k <= 24; shift = k += 8) {
    	          results.push((value >> shift) & 0xff);
    	        }
    	        return results;
    	      })()).reverse();
    	    } else {
    	      return null;
    	    }
    	  };

    	  ipaddr.IPv6 = (function() {
    	    function IPv6(parts, zoneId) {
    	      var i, k, l, len, part, ref;
    	      if (parts.length === 16) {
    	        this.parts = [];
    	        for (i = k = 0; k <= 14; i = k += 2) {
    	          this.parts.push((parts[i] << 8) | parts[i + 1]);
    	        }
    	      } else if (parts.length === 8) {
    	        this.parts = parts;
    	      } else {
    	        throw new Error("ipaddr: ipv6 part count should be 8 or 16");
    	      }
    	      ref = this.parts;
    	      for (l = 0, len = ref.length; l < len; l++) {
    	        part = ref[l];
    	        if (!((0 <= part && part <= 0xffff))) {
    	          throw new Error("ipaddr: ipv6 part should fit in 16 bits");
    	        }
    	      }
    	      if (zoneId) {
    	        this.zoneId = zoneId;
    	      }
    	    }

    	    IPv6.prototype.kind = function() {
    	      return 'ipv6';
    	    };

    	    IPv6.prototype.toString = function() {
    	      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
    	    };

    	    IPv6.prototype.toRFC5952String = function() {
    	      var bestMatchIndex, bestMatchLength, match, regex, string;
    	      regex = /((^|:)(0(:|$)){2,})/g;
    	      string = this.toNormalizedString();
    	      bestMatchIndex = 0;
    	      bestMatchLength = -1;
    	      while ((match = regex.exec(string))) {
    	        if (match[0].length > bestMatchLength) {
    	          bestMatchIndex = match.index;
    	          bestMatchLength = match[0].length;
    	        }
    	      }
    	      if (bestMatchLength < 0) {
    	        return string;
    	      }
    	      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);
    	    };

    	    IPv6.prototype.toByteArray = function() {
    	      var bytes, k, len, part, ref;
    	      bytes = [];
    	      ref = this.parts;
    	      for (k = 0, len = ref.length; k < len; k++) {
    	        part = ref[k];
    	        bytes.push(part >> 8);
    	        bytes.push(part & 0xff);
    	      }
    	      return bytes;
    	    };

    	    IPv6.prototype.toNormalizedString = function() {
    	      var addr, part, suffix;
    	      addr = ((function() {
    	        var k, len, ref, results;
    	        ref = this.parts;
    	        results = [];
    	        for (k = 0, len = ref.length; k < len; k++) {
    	          part = ref[k];
    	          results.push(part.toString(16));
    	        }
    	        return results;
    	      }).call(this)).join(":");
    	      suffix = '';
    	      if (this.zoneId) {
    	        suffix = '%' + this.zoneId;
    	      }
    	      return addr + suffix;
    	    };

    	    IPv6.prototype.toFixedLengthString = function() {
    	      var addr, part, suffix;
    	      addr = ((function() {
    	        var k, len, ref, results;
    	        ref = this.parts;
    	        results = [];
    	        for (k = 0, len = ref.length; k < len; k++) {
    	          part = ref[k];
    	          results.push(part.toString(16).padStart(4, '0'));
    	        }
    	        return results;
    	      }).call(this)).join(":");
    	      suffix = '';
    	      if (this.zoneId) {
    	        suffix = '%' + this.zoneId;
    	      }
    	      return addr + suffix;
    	    };

    	    IPv6.prototype.match = function(other, cidrRange) {
    	      var ref;
    	      if (cidrRange === void 0) {
    	        ref = other, other = ref[0], cidrRange = ref[1];
    	      }
    	      if (other.kind() !== 'ipv6') {
    	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
    	      }
    	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
    	    };

    	    IPv6.prototype.SpecialRanges = {
    	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
    	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
    	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
    	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
    	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
    	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
    	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
    	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
    	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
    	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
    	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
    	    };

    	    IPv6.prototype.range = function() {
    	      return ipaddr.subnetMatch(this, this.SpecialRanges);
    	    };

    	    IPv6.prototype.isIPv4MappedAddress = function() {
    	      return this.range() === 'ipv4Mapped';
    	    };

    	    IPv6.prototype.toIPv4Address = function() {
    	      var high, low, ref;
    	      if (!this.isIPv4MappedAddress()) {
    	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
    	      }
    	      ref = this.parts.slice(-2), high = ref[0], low = ref[1];
    	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
    	    };

    	    IPv6.prototype.prefixLengthFromSubnetMask = function() {
    	      var cidr, i, k, part, stop, zeros, zerotable;
    	      zerotable = {
    	        0: 16,
    	        32768: 15,
    	        49152: 14,
    	        57344: 13,
    	        61440: 12,
    	        63488: 11,
    	        64512: 10,
    	        65024: 9,
    	        65280: 8,
    	        65408: 7,
    	        65472: 6,
    	        65504: 5,
    	        65520: 4,
    	        65528: 3,
    	        65532: 2,
    	        65534: 1,
    	        65535: 0
    	      };
    	      cidr = 0;
    	      stop = false;
    	      for (i = k = 7; k >= 0; i = k += -1) {
    	        part = this.parts[i];
    	        if (part in zerotable) {
    	          zeros = zerotable[part];
    	          if (stop && zeros !== 0) {
    	            return null;
    	          }
    	          if (zeros !== 16) {
    	            stop = true;
    	          }
    	          cidr += zeros;
    	        } else {
    	          return null;
    	        }
    	      }
    	      return 128 - cidr;
    	    };

    	    return IPv6;

    	  })();

    	  ipv6Part = "(?:[0-9a-f]+::?)+";

    	  zoneIndex = "%[0-9a-z]{1,}";

    	  ipv6Regexes = {
    	    zoneIndex: new RegExp(zoneIndex, 'i'),
    	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", 'i'),
    	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), 'i')
    	  };

    	  expandIPv6 = function(string, parts) {
    	    var colonCount, lastColon, part, replacement, replacementCount, zoneId;
    	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
    	      return null;
    	    }
    	    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];
    	    if (zoneId) {
    	      zoneId = zoneId.substring(1);
    	      string = string.replace(/%.+$/, '');
    	    }
    	    colonCount = 0;
    	    lastColon = -1;
    	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
    	      colonCount++;
    	    }
    	    if (string.substr(0, 2) === '::') {
    	      colonCount--;
    	    }
    	    if (string.substr(-2, 2) === '::') {
    	      colonCount--;
    	    }
    	    if (colonCount > parts) {
    	      return null;
    	    }
    	    replacementCount = parts - colonCount;
    	    replacement = ':';
    	    while (replacementCount--) {
    	      replacement += '0:';
    	    }
    	    string = string.replace('::', replacement);
    	    if (string[0] === ':') {
    	      string = string.slice(1);
    	    }
    	    if (string[string.length - 1] === ':') {
    	      string = string.slice(0, -1);
    	    }
    	    parts = (function() {
    	      var k, len, ref, results;
    	      ref = string.split(":");
    	      results = [];
    	      for (k = 0, len = ref.length; k < len; k++) {
    	        part = ref[k];
    	        results.push(parseInt(part, 16));
    	      }
    	      return results;
    	    })();
    	    return {
    	      parts: parts,
    	      zoneId: zoneId
    	    };
    	  };

    	  ipaddr.IPv6.parser = function(string) {
    	    var addr, k, len, match, octet, octets, zoneId;
    	    if (ipv6Regexes['native'].test(string)) {
    	      return expandIPv6(string, 8);
    	    } else if (match = string.match(ipv6Regexes['transitional'])) {
    	      zoneId = match[6] || '';
    	      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
    	      if (addr.parts) {
    	        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
    	        for (k = 0, len = octets.length; k < len; k++) {
    	          octet = octets[k];
    	          if (!((0 <= octet && octet <= 255))) {
    	            return null;
    	          }
    	        }
    	        addr.parts.push(octets[0] << 8 | octets[1]);
    	        addr.parts.push(octets[2] << 8 | octets[3]);
    	        return {
    	          parts: addr.parts,
    	          zoneId: addr.zoneId
    	        };
    	      }
    	    }
    	    return null;
    	  };

    	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
    	    return this.parser(string) !== null;
    	  };

    	  ipaddr.IPv4.isValid = function(string) {
    	    try {
    	      new this(this.parser(string));
    	      return true;
    	    } catch (error1) {
    	      return false;
    	    }
    	  };

    	  ipaddr.IPv4.isValidFourPartDecimal = function(string) {
    	    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
    	      return true;
    	    } else {
    	      return false;
    	    }
    	  };

    	  ipaddr.IPv6.isValid = function(string) {
    	    var addr;
    	    if (typeof string === "string" && string.indexOf(":") === -1) {
    	      return false;
    	    }
    	    try {
    	      addr = this.parser(string);
    	      new this(addr.parts, addr.zoneId);
    	      return true;
    	    } catch (error1) {
    	      return false;
    	    }
    	  };

    	  ipaddr.IPv4.parse = function(string) {
    	    var parts;
    	    parts = this.parser(string);
    	    if (parts === null) {
    	      throw new Error("ipaddr: string is not formatted like ip address");
    	    }
    	    return new this(parts);
    	  };

    	  ipaddr.IPv6.parse = function(string) {
    	    var addr;
    	    addr = this.parser(string);
    	    if (addr.parts === null) {
    	      throw new Error("ipaddr: string is not formatted like ip address");
    	    }
    	    return new this(addr.parts, addr.zoneId);
    	  };

    	  ipaddr.IPv4.parseCIDR = function(string) {
    	    var maskLength, match, parsed;
    	    if (match = string.match(/^(.+)\/(\d+)$/)) {
    	      maskLength = parseInt(match[2]);
    	      if (maskLength >= 0 && maskLength <= 32) {
    	        parsed = [this.parse(match[1]), maskLength];
    	        Object.defineProperty(parsed, 'toString', {
    	          value: function() {
    	            return this.join('/');
    	          }
    	        });
    	        return parsed;
    	      }
    	    }
    	    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    	  };

    	  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
    	    var filledOctetCount, j, octets;
    	    prefix = parseInt(prefix);
    	    if (prefix < 0 || prefix > 32) {
    	      throw new Error('ipaddr: invalid IPv4 prefix length');
    	    }
    	    octets = [0, 0, 0, 0];
    	    j = 0;
    	    filledOctetCount = Math.floor(prefix / 8);
    	    while (j < filledOctetCount) {
    	      octets[j] = 255;
    	      j++;
    	    }
    	    if (filledOctetCount < 4) {
    	      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
    	    }
    	    return new this(octets);
    	  };

    	  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
    	    var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
    	    try {
    	      cidr = this.parseCIDR(string);
    	      ipInterfaceOctets = cidr[0].toByteArray();
    	      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
    	      octets = [];
    	      i = 0;
    	      while (i < 4) {
    	        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
    	        i++;
    	      }
    	      return new this(octets);
    	    } catch (error1) {
    	      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
    	    }
    	  };

    	  ipaddr.IPv4.networkAddressFromCIDR = function(string) {
    	    var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;
    	    try {
    	      cidr = this.parseCIDR(string);
    	      ipInterfaceOctets = cidr[0].toByteArray();
    	      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
    	      octets = [];
    	      i = 0;
    	      while (i < 4) {
    	        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
    	        i++;
    	      }
    	      return new this(octets);
    	    } catch (error1) {
    	      throw new Error('ipaddr: the address does not have IPv4 CIDR format');
    	    }
    	  };

    	  ipaddr.IPv6.parseCIDR = function(string) {
    	    var maskLength, match, parsed;
    	    if (match = string.match(/^(.+)\/(\d+)$/)) {
    	      maskLength = parseInt(match[2]);
    	      if (maskLength >= 0 && maskLength <= 128) {
    	        parsed = [this.parse(match[1]), maskLength];
    	        Object.defineProperty(parsed, 'toString', {
    	          value: function() {
    	            return this.join('/');
    	          }
    	        });
    	        return parsed;
    	      }
    	    }
    	    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    	  };

    	  ipaddr.isValid = function(string) {
    	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    	  };

    	  ipaddr.parse = function(string) {
    	    if (ipaddr.IPv6.isValid(string)) {
    	      return ipaddr.IPv6.parse(string);
    	    } else if (ipaddr.IPv4.isValid(string)) {
    	      return ipaddr.IPv4.parse(string);
    	    } else {
    	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
    	    }
    	  };

    	  ipaddr.parseCIDR = function(string) {
    	    try {
    	      return ipaddr.IPv6.parseCIDR(string);
    	    } catch (error1) {
    	      try {
    	        return ipaddr.IPv4.parseCIDR(string);
    	      } catch (error1) {
    	        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
    	      }
    	    }
    	  };

    	  ipaddr.fromByteArray = function(bytes) {
    	    var length;
    	    length = bytes.length;
    	    if (length === 4) {
    	      return new ipaddr.IPv4(bytes);
    	    } else if (length === 16) {
    	      return new ipaddr.IPv6(bytes);
    	    } else {
    	      throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
    	    }
    	  };

    	  ipaddr.process = function(string) {
    	    var addr;
    	    addr = this.parse(string);
    	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
    	      return addr.toIPv4Address();
    	    } else {
    	      return addr;
    	    }
    	  };

    	}).call(commonjsGlobal);
    } (ipaddr$1));

    /*!
     * proxy-addr
     * Copyright(c) 2014-2016 Douglas Christopher Wilson
     * MIT Licensed
     */

    /**
     * Module exports.
     * @public
     */

    proxyAddr$1.exports = proxyaddr;
    proxyAddrExports.all = alladdrs;
    proxyAddrExports.compile = compile$3;

    /**
     * Module dependencies.
     * @private
     */

    var forwarded = forwarded_1;
    var ipaddr = ipaddrExports;

    /**
     * Variables.
     * @private
     */

    var DIGIT_REGEXP = /^[0-9]+$/;
    var isip = ipaddr.isValid;
    var parseip = ipaddr.parse;

    /**
     * Pre-defined IP ranges.
     * @private
     */

    var IP_RANGES = {
      linklocal: ['169.254.0.0/16', 'fe80::/10'],
      loopback: ['127.0.0.1/8', '::1/128'],
      uniquelocal: ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7']
    };

    /**
     * Get all addresses in the request, optionally stopping
     * at the first untrusted.
     *
     * @param {Object} request
     * @param {Function|Array|String} [trust]
     * @public
     */

    function alladdrs (req, trust) {
      // get addresses
      var addrs = forwarded(req);

      if (!trust) {
        // Return all addresses
        return addrs
      }

      if (typeof trust !== 'function') {
        trust = compile$3(trust);
      }

      for (var i = 0; i < addrs.length - 1; i++) {
        if (trust(addrs[i], i)) continue

        addrs.length = i + 1;
      }

      return addrs
    }

    /**
     * Compile argument into trust function.
     *
     * @param {Array|String} val
     * @private
     */

    function compile$3 (val) {
      if (!val) {
        throw new TypeError('argument is required')
      }

      var trust;

      if (typeof val === 'string') {
        trust = [val];
      } else if (Array.isArray(val)) {
        trust = val.slice();
      } else {
        throw new TypeError('unsupported trust argument')
      }

      for (var i = 0; i < trust.length; i++) {
        val = trust[i];

        if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
          continue
        }

        // Splice in pre-defined range
        val = IP_RANGES[val];
        trust.splice.apply(trust, [i, 1].concat(val));
        i += val.length - 1;
      }

      return compileTrust(compileRangeSubnets(trust))
    }

    /**
     * Compile `arr` elements into range subnets.
     *
     * @param {Array} arr
     * @private
     */

    function compileRangeSubnets (arr) {
      var rangeSubnets = new Array(arr.length);

      for (var i = 0; i < arr.length; i++) {
        rangeSubnets[i] = parseipNotation(arr[i]);
      }

      return rangeSubnets
    }

    /**
     * Compile range subnet array into trust function.
     *
     * @param {Array} rangeSubnets
     * @private
     */

    function compileTrust (rangeSubnets) {
      // Return optimized function based on length
      var len = rangeSubnets.length;
      return len === 0
        ? trustNone
        : len === 1
          ? trustSingle(rangeSubnets[0])
          : trustMulti(rangeSubnets)
    }

    /**
     * Parse IP notation string into range subnet.
     *
     * @param {String} note
     * @private
     */

    function parseipNotation (note) {
      var pos = note.lastIndexOf('/');
      var str = pos !== -1
        ? note.substring(0, pos)
        : note;

      if (!isip(str)) {
        throw new TypeError('invalid IP address: ' + str)
      }

      var ip = parseip(str);

      if (pos === -1 && ip.kind() === 'ipv6' && ip.isIPv4MappedAddress()) {
        // Store as IPv4
        ip = ip.toIPv4Address();
      }

      var max = ip.kind() === 'ipv6'
        ? 128
        : 32;

      var range = pos !== -1
        ? note.substring(pos + 1, note.length)
        : null;

      if (range === null) {
        range = max;
      } else if (DIGIT_REGEXP.test(range)) {
        range = parseInt(range, 10);
      } else if (ip.kind() === 'ipv4' && isip(range)) {
        range = parseNetmask(range);
      } else {
        range = null;
      }

      if (range <= 0 || range > max) {
        throw new TypeError('invalid range on address: ' + note)
      }

      return [ip, range]
    }

    /**
     * Parse netmask string into CIDR range.
     *
     * @param {String} netmask
     * @private
     */

    function parseNetmask (netmask) {
      var ip = parseip(netmask);
      var kind = ip.kind();

      return kind === 'ipv4'
        ? ip.prefixLengthFromSubnetMask()
        : null
    }

    /**
     * Determine address of proxied request.
     *
     * @param {Object} request
     * @param {Function|Array|String} trust
     * @public
     */

    function proxyaddr (req, trust) {
      if (!req) {
        throw new TypeError('req argument is required')
      }

      if (!trust) {
        throw new TypeError('trust argument is required')
      }

      var addrs = alladdrs(req, trust);
      var addr = addrs[addrs.length - 1];

      return addr
    }

    /**
     * Static trust function to trust nothing.
     *
     * @private
     */

    function trustNone () {
      return false
    }

    /**
     * Compile trust function for multiple subnets.
     *
     * @param {Array} subnets
     * @private
     */

    function trustMulti (subnets) {
      return function trust (addr) {
        if (!isip(addr)) return false

        var ip = parseip(addr);
        var ipconv;
        var kind = ip.kind();

        for (var i = 0; i < subnets.length; i++) {
          var subnet = subnets[i];
          var subnetip = subnet[0];
          var subnetkind = subnetip.kind();
          var subnetrange = subnet[1];
          var trusted = ip;

          if (kind !== subnetkind) {
            if (subnetkind === 'ipv4' && !ip.isIPv4MappedAddress()) {
              // Incompatible IP addresses
              continue
            }

            if (!ipconv) {
              // Convert IP to match subnet IP kind
              ipconv = subnetkind === 'ipv4'
                ? ip.toIPv4Address()
                : ip.toIPv4MappedAddress();
            }

            trusted = ipconv;
          }

          if (trusted.match(subnetip, subnetrange)) {
            return true
          }
        }

        return false
      }
    }

    /**
     * Compile trust function for single subnet.
     *
     * @param {Object} subnet
     * @private
     */

    function trustSingle (subnet) {
      var subnetip = subnet[0];
      var subnetkind = subnetip.kind();
      var subnetisipv4 = subnetkind === 'ipv4';
      var subnetrange = subnet[1];

      return function trust (addr) {
        if (!isip(addr)) return false

        var ip = parseip(addr);
        var kind = ip.kind();

        if (kind !== subnetkind) {
          if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
            // Incompatible IP addresses
            return false
          }

          // Convert IP to match subnet IP kind
          ip = subnetisipv4
            ? ip.toIPv4Address()
            : ip.toIPv4MappedAddress();
        }

        return ip.match(subnetip, subnetrange)
      }
    }

    var reExports = {};
    var re$3 = {
      get exports(){ return reExports; },
      set exports(v){ reExports = v; },
    };

    // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.
    const SEMVER_SPEC_VERSION = '2.0.0';

    const MAX_LENGTH$2 = 256;
    const MAX_SAFE_INTEGER$1 = Number.MAX_SAFE_INTEGER ||
    /* istanbul ignore next */ 9007199254740991;

    // Max safe segment length for coercion.
    const MAX_SAFE_COMPONENT_LENGTH = 16;

    var constants$1 = {
      SEMVER_SPEC_VERSION,
      MAX_LENGTH: MAX_LENGTH$2,
      MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1,
      MAX_SAFE_COMPONENT_LENGTH,
    };

    const debug$1 = (
      typeof process === 'object' &&
      process.env &&
      process.env.NODE_DEBUG &&
      /\bsemver\b/i.test(process.env.NODE_DEBUG)
    ) ? (...args) => console.error('SEMVER', ...args)
      : () => {};

    var debug_1 = debug$1;

    (function (module, exports) {
    	const { MAX_SAFE_COMPONENT_LENGTH } = constants$1;
    	const debug = debug_1;
    	exports = module.exports = {};

    	// The actual regexps go on exports.re
    	const re = exports.re = [];
    	const src = exports.src = [];
    	const t = exports.t = {};
    	let R = 0;

    	const createToken = (name, value, isGlobal) => {
    	  const index = R++;
    	  debug(name, index, value);
    	  t[name] = index;
    	  src[index] = value;
    	  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
    	};

    	// The following Regular Expressions can be used for tokenizing,
    	// validating, and parsing SemVer version strings.

    	// ## Numeric Identifier
    	// A single `0`, or a non-zero digit followed by zero or more digits.

    	createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
    	createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+');

    	// ## Non-numeric Identifier
    	// Zero or more digits, followed by a letter or hyphen, and then zero or
    	// more letters, digits, or hyphens.

    	createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*');

    	// ## Main Version
    	// Three dot-separated numeric identifiers.

    	createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
    	                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
    	                   `(${src[t.NUMERICIDENTIFIER]})`);

    	createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
    	                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
    	                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`);

    	// ## Pre-release Version Identifier
    	// A numeric identifier, or a non-numeric identifier.

    	createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
	}|${src[t.NONNUMERICIDENTIFIER]})`);

    	createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
	}|${src[t.NONNUMERICIDENTIFIER]})`);

    	// ## Pre-release Version
    	// Hyphen, followed by one or more dot-separated pre-release version
    	// identifiers.

    	createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
	}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);

    	createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
	}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);

    	// ## Build Metadata Identifier
    	// Any combination of digits, letters, or hyphens.

    	createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+');

    	// ## Build Metadata
    	// Plus sign, followed by one or more period-separated build metadata
    	// identifiers.

    	createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
	}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);

    	// ## Full Version String
    	// A main version, followed optionally by a pre-release version and
    	// build metadata.

    	// Note that the only major, minor, patch, and pre-release sections of
    	// the version string are capturing groups.  The build metadata is not a
    	// capturing group, because it should not ever be used in version
    	// comparison.

    	createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
	}${src[t.PRERELEASE]}?${
	  src[t.BUILD]}?`);

    	createToken('FULL', `^${src[t.FULLPLAIN]}$`);

    	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    	// common in the npm registry.
    	createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
	}${src[t.PRERELEASELOOSE]}?${
	  src[t.BUILD]}?`);

    	createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);

    	createToken('GTLT', '((?:<|>)?=?)');

    	// Something like "2.*" or "1.2.x".
    	// Note that "x.x" is a valid xRange identifer, meaning "any version"
    	// Only the first item is strictly required.
    	createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    	createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);

    	createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
    	                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
    	                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
    	                   `(?:${src[t.PRERELEASE]})?${
	                     src[t.BUILD]}?` +
    	                   `)?)?`);

    	createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
    	                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
    	                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
    	                        `(?:${src[t.PRERELEASELOOSE]})?${
	                          src[t.BUILD]}?` +
    	                        `)?)?`);

    	createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    	createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);

    	// Coercion.
    	// Extract anything that could conceivably be a part of a valid semver
    	createToken('COERCE', `${'(^|[^\\d])' +
	              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
    	              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
    	              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
    	              `(?:$|[^\\d])`);
    	createToken('COERCERTL', src[t.COERCE], true);

    	// Tilde ranges.
    	// Meaning is "reasonably at or greater than"
    	createToken('LONETILDE', '(?:~>?)');

    	createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    	exports.tildeTrimReplace = '$1~';

    	createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    	createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);

    	// Caret ranges.
    	// Meaning is "at least and backwards compatible with"
    	createToken('LONECARET', '(?:\\^)');

    	createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
    	exports.caretTrimReplace = '$1^';

    	createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    	createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);

    	// A simple gt/lt/eq thing, or just "" to indicate "any version"
    	createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    	createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);

    	// An expression to strip any whitespace between the gtlt and the thing
    	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
    	createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
	}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    	exports.comparatorTrimReplace = '$1$2$3';

    	// Something like `1.2.3 - 1.2.4`
    	// Note that these all use the loose form, because they'll be
    	// checked against either the strict or loose comparator form
    	// later.
    	createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
    	                   `\\s+-\\s+` +
    	                   `(${src[t.XRANGEPLAIN]})` +
    	                   `\\s*$`);

    	createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
    	                        `\\s+-\\s+` +
    	                        `(${src[t.XRANGEPLAINLOOSE]})` +
    	                        `\\s*$`);

    	// Star ranges basically just allow anything at all.
    	createToken('STAR', '(<|>)?=?\\s*\\*');
    	// >=0.0.0 is like a star
    	createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
    	createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$');
    } (re$3, reExports));

    // parse out just the options we care about so we always get a consistent
    // obj with keys in a consistent order.
    const opts = ['includePrerelease', 'loose', 'rtl'];
    const parseOptions$2 = options =>
      !options ? {}
      : typeof options !== 'object' ? { loose: true }
      : opts.filter(k => options[k]).reduce((o, k) => {
        o[k] = true;
        return o
      }, {});
    var parseOptions_1 = parseOptions$2;

    const numeric = /^[0-9]+$/;
    const compareIdentifiers$1 = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);

      if (anum && bnum) {
        a = +a;
        b = +b;
      }

      return a === b ? 0
        : (anum && !bnum) ? -1
        : (bnum && !anum) ? 1
        : a < b ? -1
        : 1
    };

    const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);

    var identifiers$1 = {
      compareIdentifiers: compareIdentifiers$1,
      rcompareIdentifiers,
    };

    const debug = debug_1;
    const { MAX_LENGTH: MAX_LENGTH$1, MAX_SAFE_INTEGER } = constants$1;
    const { re: re$2, t: t$2 } = reExports;

    const parseOptions$1 = parseOptions_1;
    const { compareIdentifiers } = identifiers$1;
    let SemVer$d = class SemVer {
      constructor (version, options) {
        options = parseOptions$1(options);

        if (version instanceof SemVer) {
          if (version.loose === !!options.loose &&
              version.includePrerelease === !!options.includePrerelease) {
            return version
          } else {
            version = version.version;
          }
        } else if (typeof version !== 'string') {
          throw new TypeError(`Invalid Version: ${version}`)
        }

        if (version.length > MAX_LENGTH$1) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH$1} characters`
          )
        }

        debug('SemVer', version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;

        const m = version.trim().match(options.loose ? re$2[t$2.LOOSE] : re$2[t$2.FULL]);

        if (!m) {
          throw new TypeError(`Invalid Version: ${version}`)
        }

        this.raw = version;

        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];

        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError('Invalid major version')
        }

        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError('Invalid minor version')
        }

        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError('Invalid patch version')
        }

        // numberify any prerelease numeric ids
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split('.').map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num
              }
            }
            return id
          });
        }

        this.build = m[5] ? m[5].split('.') : [];
        this.format();
      }

      format () {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join('.')}`;
        }
        return this.version
      }

      toString () {
        return this.version
      }

      compare (other) {
        debug('SemVer.compare', this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === 'string' && other === this.version) {
            return 0
          }
          other = new SemVer(other, this.options);
        }

        if (other.version === this.version) {
          return 0
        }

        return this.compareMain(other) || this.comparePre(other)
      }

      compareMain (other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }

        return (
          compareIdentifiers(this.major, other.major) ||
          compareIdentifiers(this.minor, other.minor) ||
          compareIdentifiers(this.patch, other.patch)
        )
      }

      comparePre (other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }

        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) {
          return -1
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0
        }

        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug('prerelease compare', i, a, b);
          if (a === undefined && b === undefined) {
            return 0
          } else if (b === undefined) {
            return 1
          } else if (a === undefined) {
            return -1
          } else if (a === b) {
            continue
          } else {
            return compareIdentifiers(a, b)
          }
        } while (++i)
      }

      compareBuild (other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }

        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug('prerelease compare', i, a, b);
          if (a === undefined && b === undefined) {
            return 0
          } else if (b === undefined) {
            return 1
          } else if (a === undefined) {
            return -1
          } else if (a === b) {
            continue
          } else {
            return compareIdentifiers(a, b)
          }
        } while (++i)
      }

      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc (release, identifier) {
        switch (release) {
          case 'premajor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc('pre', identifier);
            break
          case 'preminor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc('pre', identifier);
            break
          case 'prepatch':
            // If this is already a prerelease, it will bump to the next version
            // drop any prereleases that might already exist, since they are not
            // relevant at this point.
            this.prerelease.length = 0;
            this.inc('patch', identifier);
            this.inc('pre', identifier);
            break
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case 'prerelease':
            if (this.prerelease.length === 0) {
              this.inc('patch', identifier);
            }
            this.inc('pre', identifier);
            break

          case 'major':
            // If this is a pre-major version, bump up to the same major version.
            // Otherwise increment major.
            // 1.0.0-5 bumps to 1.0.0
            // 1.1.0 bumps to 2.0.0
            if (
              this.minor !== 0 ||
              this.patch !== 0 ||
              this.prerelease.length === 0
            ) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break
          case 'minor':
            // If this is a pre-minor version, bump up to the same minor version.
            // Otherwise increment minor.
            // 1.2.0-5 bumps to 1.2.0
            // 1.2.1 bumps to 1.3.0
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break
          case 'patch':
            // If this is not a pre-release version, it will increment the patch.
            // If it is a pre-release it will bump up to the same patch version.
            // 1.2.0-5 patches to 1.2.0
            // 1.2.0 patches to 1.2.1
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case 'pre':
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === 'number') {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                // didn't increment anything
                this.prerelease.push(0);
              }
            }
            if (identifier) {
              // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
              // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier, 0];
                }
              } else {
                this.prerelease = [identifier, 0];
              }
            }
            break

          default:
            throw new Error(`invalid increment argument: ${release}`)
        }
        this.format();
        this.raw = this.version;
        return this
      }
    };

    var semver$5 = SemVer$d;

    const { MAX_LENGTH } = constants$1;
    const { re: re$1, t: t$1 } = reExports;
    const SemVer$c = semver$5;

    const parseOptions = parseOptions_1;
    const parse$d = (version, options) => {
      options = parseOptions(options);

      if (version instanceof SemVer$c) {
        return version
      }

      if (typeof version !== 'string') {
        return null
      }

      if (version.length > MAX_LENGTH) {
        return null
      }

      const r = options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL];
      if (!r.test(version)) {
        return null
      }

      try {
        return new SemVer$c(version, options)
      } catch (er) {
        return null
      }
    };

    var parse_1$1 = parse$d;

    const parse$c = parse_1$1;
    const valid$2 = (version, options) => {
      const v = parse$c(version, options);
      return v ? v.version : null
    };
    var valid_1 = valid$2;

    const parse$b = parse_1$1;
    const clean$1 = (version, options) => {
      const s = parse$b(version.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null
    };
    var clean_1 = clean$1;

    const SemVer$b = semver$5;

    const inc$1 = (version, release, options, identifier) => {
      if (typeof (options) === 'string') {
        identifier = options;
        options = undefined;
      }

      try {
        return new SemVer$b(
          version instanceof SemVer$b ? version.version : version,
          options
        ).inc(release, identifier).version
      } catch (er) {
        return null
      }
    };
    var inc_1 = inc$1;

    const SemVer$a = semver$5;
    const compare$b = (a, b, loose) =>
      new SemVer$a(a, loose).compare(new SemVer$a(b, loose));

    var compare_1 = compare$b;

    const compare$a = compare_1;
    const eq$3 = (a, b, loose) => compare$a(a, b, loose) === 0;
    var eq_1 = eq$3;

    const parse$a = parse_1$1;
    const eq$2 = eq_1;

    const diff$1 = (version1, version2) => {
      if (eq$2(version1, version2)) {
        return null
      } else {
        const v1 = parse$a(version1);
        const v2 = parse$a(version2);
        const hasPre = v1.prerelease.length || v2.prerelease.length;
        const prefix = hasPre ? 'pre' : '';
        const defaultResult = hasPre ? 'prerelease' : '';
        for (const key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key
            }
          }
        }
        return defaultResult // may be undefined
      }
    };
    var diff_1 = diff$1;

    const SemVer$9 = semver$5;
    const major$1 = (a, loose) => new SemVer$9(a, loose).major;
    var major_1 = major$1;

    const SemVer$8 = semver$5;
    const minor$1 = (a, loose) => new SemVer$8(a, loose).minor;
    var minor_1 = minor$1;

    const SemVer$7 = semver$5;
    const patch$1 = (a, loose) => new SemVer$7(a, loose).patch;
    var patch_1 = patch$1;

    const parse$9 = parse_1$1;
    const prerelease$1 = (version, options) => {
      const parsed = parse$9(version, options);
      return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
    };
    var prerelease_1 = prerelease$1;

    const compare$9 = compare_1;
    const rcompare$1 = (a, b, loose) => compare$9(b, a, loose);
    var rcompare_1 = rcompare$1;

    const compare$8 = compare_1;
    const compareLoose$1 = (a, b) => compare$8(a, b, true);
    var compareLoose_1 = compareLoose$1;

    const SemVer$6 = semver$5;
    const compareBuild$3 = (a, b, loose) => {
      const versionA = new SemVer$6(a, loose);
      const versionB = new SemVer$6(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB)
    };
    var compareBuild_1 = compareBuild$3;

    const compareBuild$2 = compareBuild_1;
    const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));
    var sort_1 = sort$1;

    const compareBuild$1 = compareBuild_1;
    const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));
    var rsort_1 = rsort$1;

    const compare$7 = compare_1;
    const gt$4 = (a, b, loose) => compare$7(a, b, loose) > 0;
    var gt_1 = gt$4;

    const compare$6 = compare_1;
    const lt$3 = (a, b, loose) => compare$6(a, b, loose) < 0;
    var lt_1 = lt$3;

    const compare$5 = compare_1;
    const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;
    var neq_1 = neq$2;

    const compare$4 = compare_1;
    const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;
    var gte_1 = gte$3;

    const compare$3 = compare_1;
    const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;
    var lte_1 = lte$3;

    const eq$1 = eq_1;
    const neq$1 = neq_1;
    const gt$3 = gt_1;
    const gte$2 = gte_1;
    const lt$2 = lt_1;
    const lte$2 = lte_1;

    const cmp$1 = (a, op, b, loose) => {
      switch (op) {
        case '===':
          if (typeof a === 'object') {
            a = a.version;
          }
          if (typeof b === 'object') {
            b = b.version;
          }
          return a === b

        case '!==':
          if (typeof a === 'object') {
            a = a.version;
          }
          if (typeof b === 'object') {
            b = b.version;
          }
          return a !== b

        case '':
        case '=':
        case '==':
          return eq$1(a, b, loose)

        case '!=':
          return neq$1(a, b, loose)

        case '>':
          return gt$3(a, b, loose)

        case '>=':
          return gte$2(a, b, loose)

        case '<':
          return lt$2(a, b, loose)

        case '<=':
          return lte$2(a, b, loose)

        default:
          throw new TypeError(`Invalid operator: ${op}`)
      }
    };
    var cmp_1 = cmp$1;

    const SemVer$5 = semver$5;
    const parse$8 = parse_1$1;
    const { re, t } = reExports;

    const coerce$1 = (version, options) => {
      if (version instanceof SemVer$5) {
        return version
      }

      if (typeof version === 'number') {
        version = String(version);
      }

      if (typeof version !== 'string') {
        return null
      }

      options = options || {};

      let match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        let next;
        while ((next = re[t.COERCERTL].exec(version)) &&
            (!match || match.index + match[0].length !== version.length)
        ) {
          if (!match ||
                next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        re[t.COERCERTL].lastIndex = -1;
      }

      if (match === null) {
        return null
      }

      return parse$8(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)
    };
    var coerce_1 = coerce$1;

    var iterator;
    var hasRequiredIterator;

    function requireIterator () {
    	if (hasRequiredIterator) return iterator;
    	hasRequiredIterator = 1;
    	iterator = function (Yallist) {
    	  Yallist.prototype[Symbol.iterator] = function* () {
    	    for (let walker = this.head; walker; walker = walker.next) {
    	      yield walker.value;
    	    }
    	  };
    	};
    	return iterator;
    }

    var yallist;
    var hasRequiredYallist;

    function requireYallist () {
    	if (hasRequiredYallist) return yallist;
    	hasRequiredYallist = 1;
    	yallist = Yallist;

    	Yallist.Node = Node;
    	Yallist.create = Yallist;

    	function Yallist (list) {
    	  var self = this;
    	  if (!(self instanceof Yallist)) {
    	    self = new Yallist();
    	  }

    	  self.tail = null;
    	  self.head = null;
    	  self.length = 0;

    	  if (list && typeof list.forEach === 'function') {
    	    list.forEach(function (item) {
    	      self.push(item);
    	    });
    	  } else if (arguments.length > 0) {
    	    for (var i = 0, l = arguments.length; i < l; i++) {
    	      self.push(arguments[i]);
    	    }
    	  }

    	  return self
    	}

    	Yallist.prototype.removeNode = function (node) {
    	  if (node.list !== this) {
    	    throw new Error('removing node which does not belong to this list')
    	  }

    	  var next = node.next;
    	  var prev = node.prev;

    	  if (next) {
    	    next.prev = prev;
    	  }

    	  if (prev) {
    	    prev.next = next;
    	  }

    	  if (node === this.head) {
    	    this.head = next;
    	  }
    	  if (node === this.tail) {
    	    this.tail = prev;
    	  }

    	  node.list.length--;
    	  node.next = null;
    	  node.prev = null;
    	  node.list = null;

    	  return next
    	};

    	Yallist.prototype.unshiftNode = function (node) {
    	  if (node === this.head) {
    	    return
    	  }

    	  if (node.list) {
    	    node.list.removeNode(node);
    	  }

    	  var head = this.head;
    	  node.list = this;
    	  node.next = head;
    	  if (head) {
    	    head.prev = node;
    	  }

    	  this.head = node;
    	  if (!this.tail) {
    	    this.tail = node;
    	  }
    	  this.length++;
    	};

    	Yallist.prototype.pushNode = function (node) {
    	  if (node === this.tail) {
    	    return
    	  }

    	  if (node.list) {
    	    node.list.removeNode(node);
    	  }

    	  var tail = this.tail;
    	  node.list = this;
    	  node.prev = tail;
    	  if (tail) {
    	    tail.next = node;
    	  }

    	  this.tail = node;
    	  if (!this.head) {
    	    this.head = node;
    	  }
    	  this.length++;
    	};

    	Yallist.prototype.push = function () {
    	  for (var i = 0, l = arguments.length; i < l; i++) {
    	    push(this, arguments[i]);
    	  }
    	  return this.length
    	};

    	Yallist.prototype.unshift = function () {
    	  for (var i = 0, l = arguments.length; i < l; i++) {
    	    unshift(this, arguments[i]);
    	  }
    	  return this.length
    	};

    	Yallist.prototype.pop = function () {
    	  if (!this.tail) {
    	    return undefined
    	  }

    	  var res = this.tail.value;
    	  this.tail = this.tail.prev;
    	  if (this.tail) {
    	    this.tail.next = null;
    	  } else {
    	    this.head = null;
    	  }
    	  this.length--;
    	  return res
    	};

    	Yallist.prototype.shift = function () {
    	  if (!this.head) {
    	    return undefined
    	  }

    	  var res = this.head.value;
    	  this.head = this.head.next;
    	  if (this.head) {
    	    this.head.prev = null;
    	  } else {
    	    this.tail = null;
    	  }
    	  this.length--;
    	  return res
    	};

    	Yallist.prototype.forEach = function (fn, thisp) {
    	  thisp = thisp || this;
    	  for (var walker = this.head, i = 0; walker !== null; i++) {
    	    fn.call(thisp, walker.value, i, this);
    	    walker = walker.next;
    	  }
    	};

    	Yallist.prototype.forEachReverse = function (fn, thisp) {
    	  thisp = thisp || this;
    	  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    	    fn.call(thisp, walker.value, i, this);
    	    walker = walker.prev;
    	  }
    	};

    	Yallist.prototype.get = function (n) {
    	  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    	    // abort out of the list early if we hit a cycle
    	    walker = walker.next;
    	  }
    	  if (i === n && walker !== null) {
    	    return walker.value
    	  }
    	};

    	Yallist.prototype.getReverse = function (n) {
    	  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    	    // abort out of the list early if we hit a cycle
    	    walker = walker.prev;
    	  }
    	  if (i === n && walker !== null) {
    	    return walker.value
    	  }
    	};

    	Yallist.prototype.map = function (fn, thisp) {
    	  thisp = thisp || this;
    	  var res = new Yallist();
    	  for (var walker = this.head; walker !== null;) {
    	    res.push(fn.call(thisp, walker.value, this));
    	    walker = walker.next;
    	  }
    	  return res
    	};

    	Yallist.prototype.mapReverse = function (fn, thisp) {
    	  thisp = thisp || this;
    	  var res = new Yallist();
    	  for (var walker = this.tail; walker !== null;) {
    	    res.push(fn.call(thisp, walker.value, this));
    	    walker = walker.prev;
    	  }
    	  return res
    	};

    	Yallist.prototype.reduce = function (fn, initial) {
    	  var acc;
    	  var walker = this.head;
    	  if (arguments.length > 1) {
    	    acc = initial;
    	  } else if (this.head) {
    	    walker = this.head.next;
    	    acc = this.head.value;
    	  } else {
    	    throw new TypeError('Reduce of empty list with no initial value')
    	  }

    	  for (var i = 0; walker !== null; i++) {
    	    acc = fn(acc, walker.value, i);
    	    walker = walker.next;
    	  }

    	  return acc
    	};

    	Yallist.prototype.reduceReverse = function (fn, initial) {
    	  var acc;
    	  var walker = this.tail;
    	  if (arguments.length > 1) {
    	    acc = initial;
    	  } else if (this.tail) {
    	    walker = this.tail.prev;
    	    acc = this.tail.value;
    	  } else {
    	    throw new TypeError('Reduce of empty list with no initial value')
    	  }

    	  for (var i = this.length - 1; walker !== null; i--) {
    	    acc = fn(acc, walker.value, i);
    	    walker = walker.prev;
    	  }

    	  return acc
    	};

    	Yallist.prototype.toArray = function () {
    	  var arr = new Array(this.length);
    	  for (var i = 0, walker = this.head; walker !== null; i++) {
    	    arr[i] = walker.value;
    	    walker = walker.next;
    	  }
    	  return arr
    	};

    	Yallist.prototype.toArrayReverse = function () {
    	  var arr = new Array(this.length);
    	  for (var i = 0, walker = this.tail; walker !== null; i++) {
    	    arr[i] = walker.value;
    	    walker = walker.prev;
    	  }
    	  return arr
    	};

    	Yallist.prototype.slice = function (from, to) {
    	  to = to || this.length;
    	  if (to < 0) {
    	    to += this.length;
    	  }
    	  from = from || 0;
    	  if (from < 0) {
    	    from += this.length;
    	  }
    	  var ret = new Yallist();
    	  if (to < from || to < 0) {
    	    return ret
    	  }
    	  if (from < 0) {
    	    from = 0;
    	  }
    	  if (to > this.length) {
    	    to = this.length;
    	  }
    	  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    	    walker = walker.next;
    	  }
    	  for (; walker !== null && i < to; i++, walker = walker.next) {
    	    ret.push(walker.value);
    	  }
    	  return ret
    	};

    	Yallist.prototype.sliceReverse = function (from, to) {
    	  to = to || this.length;
    	  if (to < 0) {
    	    to += this.length;
    	  }
    	  from = from || 0;
    	  if (from < 0) {
    	    from += this.length;
    	  }
    	  var ret = new Yallist();
    	  if (to < from || to < 0) {
    	    return ret
    	  }
    	  if (from < 0) {
    	    from = 0;
    	  }
    	  if (to > this.length) {
    	    to = this.length;
    	  }
    	  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    	    walker = walker.prev;
    	  }
    	  for (; walker !== null && i > from; i--, walker = walker.prev) {
    	    ret.push(walker.value);
    	  }
    	  return ret
    	};

    	Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
    	  if (start > this.length) {
    	    start = this.length - 1;
    	  }
    	  if (start < 0) {
    	    start = this.length + start;
    	  }

    	  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    	    walker = walker.next;
    	  }

    	  var ret = [];
    	  for (var i = 0; walker && i < deleteCount; i++) {
    	    ret.push(walker.value);
    	    walker = this.removeNode(walker);
    	  }
    	  if (walker === null) {
    	    walker = this.tail;
    	  }

    	  if (walker !== this.head && walker !== this.tail) {
    	    walker = walker.prev;
    	  }

    	  for (var i = 0; i < nodes.length; i++) {
    	    walker = insert(this, walker, nodes[i]);
    	  }
    	  return ret;
    	};

    	Yallist.prototype.reverse = function () {
    	  var head = this.head;
    	  var tail = this.tail;
    	  for (var walker = head; walker !== null; walker = walker.prev) {
    	    var p = walker.prev;
    	    walker.prev = walker.next;
    	    walker.next = p;
    	  }
    	  this.head = tail;
    	  this.tail = head;
    	  return this
    	};

    	function insert (self, node, value) {
    	  var inserted = node === self.head ?
    	    new Node(value, null, node, self) :
    	    new Node(value, node, node.next, self);

    	  if (inserted.next === null) {
    	    self.tail = inserted;
    	  }
    	  if (inserted.prev === null) {
    	    self.head = inserted;
    	  }

    	  self.length++;

    	  return inserted
    	}

    	function push (self, item) {
    	  self.tail = new Node(item, self.tail, null, self);
    	  if (!self.head) {
    	    self.head = self.tail;
    	  }
    	  self.length++;
    	}

    	function unshift (self, item) {
    	  self.head = new Node(item, null, self.head, self);
    	  if (!self.tail) {
    	    self.tail = self.head;
    	  }
    	  self.length++;
    	}

    	function Node (value, prev, next, list) {
    	  if (!(this instanceof Node)) {
    	    return new Node(value, prev, next, list)
    	  }

    	  this.list = list;
    	  this.value = value;

    	  if (prev) {
    	    prev.next = this;
    	    this.prev = prev;
    	  } else {
    	    this.prev = null;
    	  }

    	  if (next) {
    	    next.prev = this;
    	    this.next = next;
    	  } else {
    	    this.next = null;
    	  }
    	}

    	try {
    	  // add if support for Symbol.iterator is present
    	  requireIterator()(Yallist);
    	} catch (er) {}
    	return yallist;
    }

    var lruCache;
    var hasRequiredLruCache;

    function requireLruCache () {
    	if (hasRequiredLruCache) return lruCache;
    	hasRequiredLruCache = 1;

    	// A linked list to keep track of recently-used-ness
    	const Yallist = requireYallist();

    	const MAX = Symbol('max');
    	const LENGTH = Symbol('length');
    	const LENGTH_CALCULATOR = Symbol('lengthCalculator');
    	const ALLOW_STALE = Symbol('allowStale');
    	const MAX_AGE = Symbol('maxAge');
    	const DISPOSE = Symbol('dispose');
    	const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
    	const LRU_LIST = Symbol('lruList');
    	const CACHE = Symbol('cache');
    	const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

    	const naiveLength = () => 1;

    	// lruList is a yallist where the head is the youngest
    	// item, and the tail is the oldest.  the list contains the Hit
    	// objects as the entries.
    	// Each Hit object has a reference to its Yallist.Node.  This
    	// never changes.
    	//
    	// cache is a Map (or PseudoMap) that matches the keys to
    	// the Yallist.Node object.
    	class LRUCache {
    	  constructor (options) {
    	    if (typeof options === 'number')
    	      options = { max: options };

    	    if (!options)
    	      options = {};

    	    if (options.max && (typeof options.max !== 'number' || options.max < 0))
    	      throw new TypeError('max must be a non-negative number')
    	    // Kind of weird to have a default max of Infinity, but oh well.
    	    this[MAX] = options.max || Infinity;

    	    const lc = options.length || naiveLength;
    	    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
    	    this[ALLOW_STALE] = options.stale || false;
    	    if (options.maxAge && typeof options.maxAge !== 'number')
    	      throw new TypeError('maxAge must be a number')
    	    this[MAX_AGE] = options.maxAge || 0;
    	    this[DISPOSE] = options.dispose;
    	    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
    	    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
    	    this.reset();
    	  }

    	  // resize the cache when the max changes.
    	  set max (mL) {
    	    if (typeof mL !== 'number' || mL < 0)
    	      throw new TypeError('max must be a non-negative number')

    	    this[MAX] = mL || Infinity;
    	    trim(this);
    	  }
    	  get max () {
    	    return this[MAX]
    	  }

    	  set allowStale (allowStale) {
    	    this[ALLOW_STALE] = !!allowStale;
    	  }
    	  get allowStale () {
    	    return this[ALLOW_STALE]
    	  }

    	  set maxAge (mA) {
    	    if (typeof mA !== 'number')
    	      throw new TypeError('maxAge must be a non-negative number')

    	    this[MAX_AGE] = mA;
    	    trim(this);
    	  }
    	  get maxAge () {
    	    return this[MAX_AGE]
    	  }

    	  // resize the cache when the lengthCalculator changes.
    	  set lengthCalculator (lC) {
    	    if (typeof lC !== 'function')
    	      lC = naiveLength;

    	    if (lC !== this[LENGTH_CALCULATOR]) {
    	      this[LENGTH_CALCULATOR] = lC;
    	      this[LENGTH] = 0;
    	      this[LRU_LIST].forEach(hit => {
    	        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
    	        this[LENGTH] += hit.length;
    	      });
    	    }
    	    trim(this);
    	  }
    	  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

    	  get length () { return this[LENGTH] }
    	  get itemCount () { return this[LRU_LIST].length }

    	  rforEach (fn, thisp) {
    	    thisp = thisp || this;
    	    for (let walker = this[LRU_LIST].tail; walker !== null;) {
    	      const prev = walker.prev;
    	      forEachStep(this, fn, walker, thisp);
    	      walker = prev;
    	    }
    	  }

    	  forEach (fn, thisp) {
    	    thisp = thisp || this;
    	    for (let walker = this[LRU_LIST].head; walker !== null;) {
    	      const next = walker.next;
    	      forEachStep(this, fn, walker, thisp);
    	      walker = next;
    	    }
    	  }

    	  keys () {
    	    return this[LRU_LIST].toArray().map(k => k.key)
    	  }

    	  values () {
    	    return this[LRU_LIST].toArray().map(k => k.value)
    	  }

    	  reset () {
    	    if (this[DISPOSE] &&
    	        this[LRU_LIST] &&
    	        this[LRU_LIST].length) {
    	      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
    	    }

    	    this[CACHE] = new Map(); // hash of items by key
    	    this[LRU_LIST] = new Yallist(); // list of items in order of use recency
    	    this[LENGTH] = 0; // length of items in the list
    	  }

    	  dump () {
    	    return this[LRU_LIST].map(hit =>
    	      isStale(this, hit) ? false : {
    	        k: hit.key,
    	        v: hit.value,
    	        e: hit.now + (hit.maxAge || 0)
    	      }).toArray().filter(h => h)
    	  }

    	  dumpLru () {
    	    return this[LRU_LIST]
    	  }

    	  set (key, value, maxAge) {
    	    maxAge = maxAge || this[MAX_AGE];

    	    if (maxAge && typeof maxAge !== 'number')
    	      throw new TypeError('maxAge must be a number')

    	    const now = maxAge ? Date.now() : 0;
    	    const len = this[LENGTH_CALCULATOR](value, key);

    	    if (this[CACHE].has(key)) {
    	      if (len > this[MAX]) {
    	        del(this, this[CACHE].get(key));
    	        return false
    	      }

    	      const node = this[CACHE].get(key);
    	      const item = node.value;

    	      // dispose of the old one before overwriting
    	      // split out into 2 ifs for better coverage tracking
    	      if (this[DISPOSE]) {
    	        if (!this[NO_DISPOSE_ON_SET])
    	          this[DISPOSE](key, item.value);
    	      }

    	      item.now = now;
    	      item.maxAge = maxAge;
    	      item.value = value;
    	      this[LENGTH] += len - item.length;
    	      item.length = len;
    	      this.get(key);
    	      trim(this);
    	      return true
    	    }

    	    const hit = new Entry(key, value, len, now, maxAge);

    	    // oversized objects fall out of cache automatically.
    	    if (hit.length > this[MAX]) {
    	      if (this[DISPOSE])
    	        this[DISPOSE](key, value);

    	      return false
    	    }

    	    this[LENGTH] += hit.length;
    	    this[LRU_LIST].unshift(hit);
    	    this[CACHE].set(key, this[LRU_LIST].head);
    	    trim(this);
    	    return true
    	  }

    	  has (key) {
    	    if (!this[CACHE].has(key)) return false
    	    const hit = this[CACHE].get(key).value;
    	    return !isStale(this, hit)
    	  }

    	  get (key) {
    	    return get(this, key, true)
    	  }

    	  peek (key) {
    	    return get(this, key, false)
    	  }

    	  pop () {
    	    const node = this[LRU_LIST].tail;
    	    if (!node)
    	      return null

    	    del(this, node);
    	    return node.value
    	  }

    	  del (key) {
    	    del(this, this[CACHE].get(key));
    	  }

    	  load (arr) {
    	    // reset the cache
    	    this.reset();

    	    const now = Date.now();
    	    // A previous serialized cache has the most recent items first
    	    for (let l = arr.length - 1; l >= 0; l--) {
    	      const hit = arr[l];
    	      const expiresAt = hit.e || 0;
    	      if (expiresAt === 0)
    	        // the item was created without expiration in a non aged cache
    	        this.set(hit.k, hit.v);
    	      else {
    	        const maxAge = expiresAt - now;
    	        // dont add already expired items
    	        if (maxAge > 0) {
    	          this.set(hit.k, hit.v, maxAge);
    	        }
    	      }
    	    }
    	  }

    	  prune () {
    	    this[CACHE].forEach((value, key) => get(this, key, false));
    	  }
    	}

    	const get = (self, key, doUse) => {
    	  const node = self[CACHE].get(key);
    	  if (node) {
    	    const hit = node.value;
    	    if (isStale(self, hit)) {
    	      del(self, node);
    	      if (!self[ALLOW_STALE])
    	        return undefined
    	    } else {
    	      if (doUse) {
    	        if (self[UPDATE_AGE_ON_GET])
    	          node.value.now = Date.now();
    	        self[LRU_LIST].unshiftNode(node);
    	      }
    	    }
    	    return hit.value
    	  }
    	};

    	const isStale = (self, hit) => {
    	  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    	    return false

    	  const diff = Date.now() - hit.now;
    	  return hit.maxAge ? diff > hit.maxAge
    	    : self[MAX_AGE] && (diff > self[MAX_AGE])
    	};

    	const trim = self => {
    	  if (self[LENGTH] > self[MAX]) {
    	    for (let walker = self[LRU_LIST].tail;
    	      self[LENGTH] > self[MAX] && walker !== null;) {
    	      // We know that we're about to delete this one, and also
    	      // what the next least recently used key will be, so just
    	      // go ahead and set it now.
    	      const prev = walker.prev;
    	      del(self, walker);
    	      walker = prev;
    	    }
    	  }
    	};

    	const del = (self, node) => {
    	  if (node) {
    	    const hit = node.value;
    	    if (self[DISPOSE])
    	      self[DISPOSE](hit.key, hit.value);

    	    self[LENGTH] -= hit.length;
    	    self[CACHE].delete(hit.key);
    	    self[LRU_LIST].removeNode(node);
    	  }
    	};

    	class Entry {
    	  constructor (key, value, length, now, maxAge) {
    	    this.key = key;
    	    this.value = value;
    	    this.length = length;
    	    this.now = now;
    	    this.maxAge = maxAge || 0;
    	  }
    	}

    	const forEachStep = (self, fn, node, thisp) => {
    	  let hit = node.value;
    	  if (isStale(self, hit)) {
    	    del(self, node);
    	    if (!self[ALLOW_STALE])
    	      hit = undefined;
    	  }
    	  if (hit)
    	    fn.call(thisp, hit.value, hit.key, self);
    	};

    	lruCache = LRUCache;
    	return lruCache;
    }

    var range;
    var hasRequiredRange;

    function requireRange () {
    	if (hasRequiredRange) return range;
    	hasRequiredRange = 1;
    	// hoisted class for cyclic dependency
    	class Range {
    	  constructor (range, options) {
    	    options = parseOptions(options);

    	    if (range instanceof Range) {
    	      if (
    	        range.loose === !!options.loose &&
    	        range.includePrerelease === !!options.includePrerelease
    	      ) {
    	        return range
    	      } else {
    	        return new Range(range.raw, options)
    	      }
    	    }

    	    if (range instanceof Comparator) {
    	      // just put it in the set and return
    	      this.raw = range.value;
    	      this.set = [[range]];
    	      this.format();
    	      return this
    	    }

    	    this.options = options;
    	    this.loose = !!options.loose;
    	    this.includePrerelease = !!options.includePrerelease;

    	    // First, split based on boolean or ||
    	    this.raw = range;
    	    this.set = range
    	      .split('||')
    	      // map the range to a 2d array of comparators
    	      .map(r => this.parseRange(r.trim()))
    	      // throw out any comparator lists that are empty
    	      // this generally means that it was not a valid range, which is allowed
    	      // in loose mode, but will still throw if the WHOLE range is invalid.
    	      .filter(c => c.length);

    	    if (!this.set.length) {
    	      throw new TypeError(`Invalid SemVer Range: ${range}`)
    	    }

    	    // if we have any that are not the null set, throw out null sets.
    	    if (this.set.length > 1) {
    	      // keep the first one, in case they're all null sets
    	      const first = this.set[0];
    	      this.set = this.set.filter(c => !isNullSet(c[0]));
    	      if (this.set.length === 0) {
    	        this.set = [first];
    	      } else if (this.set.length > 1) {
    	        // if we have any that are *, then the range is just *
    	        for (const c of this.set) {
    	          if (c.length === 1 && isAny(c[0])) {
    	            this.set = [c];
    	            break
    	          }
    	        }
    	      }
    	    }

    	    this.format();
    	  }

    	  format () {
    	    this.range = this.set
    	      .map((comps) => {
    	        return comps.join(' ').trim()
    	      })
    	      .join('||')
    	      .trim();
    	    return this.range
    	  }

    	  toString () {
    	    return this.range
    	  }

    	  parseRange (range) {
    	    range = range.trim();

    	    // memoize range parsing for performance.
    	    // this is a very hot path, and fully deterministic.
    	    const memoOpts = Object.keys(this.options).join(',');
    	    const memoKey = `parseRange:${memoOpts}:${range}`;
    	    const cached = cache.get(memoKey);
    	    if (cached) {
    	      return cached
    	    }

    	    const loose = this.options.loose;
    	    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    	    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
    	    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
    	    debug('hyphen replace', range);
    	    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    	    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
    	    debug('comparator trim', range);

    	    // `~ 1.2.3` => `~1.2.3`
    	    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);

    	    // `^ 1.2.3` => `^1.2.3`
    	    range = range.replace(re[t.CARETTRIM], caretTrimReplace);

    	    // normalize spaces
    	    range = range.split(/\s+/).join(' ');

    	    // At this point, the range is completely trimmed and
    	    // ready to be split into comparators.

    	    let rangeList = range
    	      .split(' ')
    	      .map(comp => parseComparator(comp, this.options))
    	      .join(' ')
    	      .split(/\s+/)
    	      // >=0.0.0 is equivalent to *
    	      .map(comp => replaceGTE0(comp, this.options));

    	    if (loose) {
    	      // in loose mode, throw out any that are not valid comparators
    	      rangeList = rangeList.filter(comp => {
    	        debug('loose invalid filter', comp, this.options);
    	        return !!comp.match(re[t.COMPARATORLOOSE])
    	      });
    	    }
    	    debug('range list', rangeList);

    	    // if any comparators are the null set, then replace with JUST null set
    	    // if more than one comparator, remove any * comparators
    	    // also, don't include the same comparator more than once
    	    const rangeMap = new Map();
    	    const comparators = rangeList.map(comp => new Comparator(comp, this.options));
    	    for (const comp of comparators) {
    	      if (isNullSet(comp)) {
    	        return [comp]
    	      }
    	      rangeMap.set(comp.value, comp);
    	    }
    	    if (rangeMap.size > 1 && rangeMap.has('')) {
    	      rangeMap.delete('');
    	    }

    	    const result = [...rangeMap.values()];
    	    cache.set(memoKey, result);
    	    return result
    	  }

    	  intersects (range, options) {
    	    if (!(range instanceof Range)) {
    	      throw new TypeError('a Range is required')
    	    }

    	    return this.set.some((thisComparators) => {
    	      return (
    	        isSatisfiable(thisComparators, options) &&
    	        range.set.some((rangeComparators) => {
    	          return (
    	            isSatisfiable(rangeComparators, options) &&
    	            thisComparators.every((thisComparator) => {
    	              return rangeComparators.every((rangeComparator) => {
    	                return thisComparator.intersects(rangeComparator, options)
    	              })
    	            })
    	          )
    	        })
    	      )
    	    })
    	  }

    	  // if ANY of the sets match ALL of its comparators, then pass
    	  test (version) {
    	    if (!version) {
    	      return false
    	    }

    	    if (typeof version === 'string') {
    	      try {
    	        version = new SemVer(version, this.options);
    	      } catch (er) {
    	        return false
    	      }
    	    }

    	    for (let i = 0; i < this.set.length; i++) {
    	      if (testSet(this.set[i], version, this.options)) {
    	        return true
    	      }
    	    }
    	    return false
    	  }
    	}
    	range = Range;

    	const LRU = requireLruCache();
    	const cache = new LRU({ max: 1000 });

    	const parseOptions = parseOptions_1;
    	const Comparator = requireComparator();
    	const debug = debug_1;
    	const SemVer = semver$5;
    	const {
    	  re,
    	  t,
    	  comparatorTrimReplace,
    	  tildeTrimReplace,
    	  caretTrimReplace,
    	} = reExports;

    	const isNullSet = c => c.value === '<0.0.0-0';
    	const isAny = c => c.value === '';

    	// take a set of comparators and determine whether there
    	// exists a version which can satisfy it
    	const isSatisfiable = (comparators, options) => {
    	  let result = true;
    	  const remainingComparators = comparators.slice();
    	  let testComparator = remainingComparators.pop();

    	  while (result && remainingComparators.length) {
    	    result = remainingComparators.every((otherComparator) => {
    	      return testComparator.intersects(otherComparator, options)
    	    });

    	    testComparator = remainingComparators.pop();
    	  }

    	  return result
    	};

    	// comprised of xranges, tildes, stars, and gtlt's at this point.
    	// already replaced the hyphen ranges
    	// turn into a set of JUST comparators.
    	const parseComparator = (comp, options) => {
    	  debug('comp', comp, options);
    	  comp = replaceCarets(comp, options);
    	  debug('caret', comp);
    	  comp = replaceTildes(comp, options);
    	  debug('tildes', comp);
    	  comp = replaceXRanges(comp, options);
    	  debug('xrange', comp);
    	  comp = replaceStars(comp, options);
    	  debug('stars', comp);
    	  return comp
    	};

    	const isX = id => !id || id.toLowerCase() === 'x' || id === '*';

    	// ~, ~> --> * (any, kinda silly)
    	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
    	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
    	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
    	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
    	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
    	// ~0.0.1 --> >=0.0.1 <0.1.0-0
    	const replaceTildes = (comp, options) =>
    	  comp.trim().split(/\s+/).map((c) => {
    	    return replaceTilde(c, options)
    	  }).join(' ');

    	const replaceTilde = (comp, options) => {
    	  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    	  return comp.replace(r, (_, M, m, p, pr) => {
    	    debug('tilde', comp, _, M, m, p, pr);
    	    let ret;

    	    if (isX(M)) {
    	      ret = '';
    	    } else if (isX(m)) {
    	      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
    	    } else if (isX(p)) {
    	      // ~1.2 == >=1.2.0 <1.3.0-0
    	      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
    	    } else if (pr) {
    	      debug('replaceTilde pr', pr);
    	      ret = `>=${M}.${m}.${p}-${pr
	      } <${M}.${+m + 1}.0-0`;
    	    } else {
    	      // ~1.2.3 == >=1.2.3 <1.3.0-0
    	      ret = `>=${M}.${m}.${p
	      } <${M}.${+m + 1}.0-0`;
    	    }

    	    debug('tilde return', ret);
    	    return ret
    	  })
    	};

    	// ^ --> * (any, kinda silly)
    	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
    	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
    	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
    	// ^1.2.3 --> >=1.2.3 <2.0.0-0
    	// ^1.2.0 --> >=1.2.0 <2.0.0-0
    	// ^0.0.1 --> >=0.0.1 <0.0.2-0
    	// ^0.1.0 --> >=0.1.0 <0.2.0-0
    	const replaceCarets = (comp, options) =>
    	  comp.trim().split(/\s+/).map((c) => {
    	    return replaceCaret(c, options)
    	  }).join(' ');

    	const replaceCaret = (comp, options) => {
    	  debug('caret', comp, options);
    	  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    	  const z = options.includePrerelease ? '-0' : '';
    	  return comp.replace(r, (_, M, m, p, pr) => {
    	    debug('caret', comp, _, M, m, p, pr);
    	    let ret;

    	    if (isX(M)) {
    	      ret = '';
    	    } else if (isX(m)) {
    	      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
    	    } else if (isX(p)) {
    	      if (M === '0') {
    	        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
    	      } else {
    	        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
    	      }
    	    } else if (pr) {
    	      debug('replaceCaret pr', pr);
    	      if (M === '0') {
    	        if (m === '0') {
    	          ret = `>=${M}.${m}.${p}-${pr
	          } <${M}.${m}.${+p + 1}-0`;
    	        } else {
    	          ret = `>=${M}.${m}.${p}-${pr
	          } <${M}.${+m + 1}.0-0`;
    	        }
    	      } else {
    	        ret = `>=${M}.${m}.${p}-${pr
	        } <${+M + 1}.0.0-0`;
    	      }
    	    } else {
    	      debug('no pr');
    	      if (M === '0') {
    	        if (m === '0') {
    	          ret = `>=${M}.${m}.${p
	          }${z} <${M}.${m}.${+p + 1}-0`;
    	        } else {
    	          ret = `>=${M}.${m}.${p
	          }${z} <${M}.${+m + 1}.0-0`;
    	        }
    	      } else {
    	        ret = `>=${M}.${m}.${p
	        } <${+M + 1}.0.0-0`;
    	      }
    	    }

    	    debug('caret return', ret);
    	    return ret
    	  })
    	};

    	const replaceXRanges = (comp, options) => {
    	  debug('replaceXRanges', comp, options);
    	  return comp.split(/\s+/).map((c) => {
    	    return replaceXRange(c, options)
    	  }).join(' ')
    	};

    	const replaceXRange = (comp, options) => {
    	  comp = comp.trim();
    	  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    	  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    	    const xM = isX(M);
    	    const xm = xM || isX(m);
    	    const xp = xm || isX(p);
    	    const anyX = xp;

    	    if (gtlt === '=' && anyX) {
    	      gtlt = '';
    	    }

    	    // if we're including prereleases in the match, then we need
    	    // to fix this to -0, the lowest possible prerelease value
    	    pr = options.includePrerelease ? '-0' : '';

    	    if (xM) {
    	      if (gtlt === '>' || gtlt === '<') {
    	        // nothing is allowed
    	        ret = '<0.0.0-0';
    	      } else {
    	        // nothing is forbidden
    	        ret = '*';
    	      }
    	    } else if (gtlt && anyX) {
    	      // we know patch is an x, because we have any x at all.
    	      // replace X with 0
    	      if (xm) {
    	        m = 0;
    	      }
    	      p = 0;

    	      if (gtlt === '>') {
    	        // >1 => >=2.0.0
    	        // >1.2 => >=1.3.0
    	        gtlt = '>=';
    	        if (xm) {
    	          M = +M + 1;
    	          m = 0;
    	          p = 0;
    	        } else {
    	          m = +m + 1;
    	          p = 0;
    	        }
    	      } else if (gtlt === '<=') {
    	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
    	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
    	        gtlt = '<';
    	        if (xm) {
    	          M = +M + 1;
    	        } else {
    	          m = +m + 1;
    	        }
    	      }

    	      if (gtlt === '<') {
    	        pr = '-0';
    	      }

    	      ret = `${gtlt + M}.${m}.${p}${pr}`;
    	    } else if (xm) {
    	      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
    	    } else if (xp) {
    	      ret = `>=${M}.${m}.0${pr
	      } <${M}.${+m + 1}.0-0`;
    	    }

    	    debug('xRange return', ret);

    	    return ret
    	  })
    	};

    	// Because * is AND-ed with everything else in the comparator,
    	// and '' means "any version", just remove the *s entirely.
    	const replaceStars = (comp, options) => {
    	  debug('replaceStars', comp, options);
    	  // Looseness is ignored here.  star is always as loose as it gets!
    	  return comp.trim().replace(re[t.STAR], '')
    	};

    	const replaceGTE0 = (comp, options) => {
    	  debug('replaceGTE0', comp, options);
    	  return comp.trim()
    	    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
    	};

    	// This function is passed to string.replace(re[t.HYPHENRANGE])
    	// M, m, patch, prerelease, build
    	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
    	// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
    	const hyphenReplace = incPr => ($0,
    	  from, fM, fm, fp, fpr, fb,
    	  to, tM, tm, tp, tpr, tb) => {
    	  if (isX(fM)) {
    	    from = '';
    	  } else if (isX(fm)) {
    	    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
    	  } else if (isX(fp)) {
    	    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
    	  } else if (fpr) {
    	    from = `>=${from}`;
    	  } else {
    	    from = `>=${from}${incPr ? '-0' : ''}`;
    	  }

    	  if (isX(tM)) {
    	    to = '';
    	  } else if (isX(tm)) {
    	    to = `<${+tM + 1}.0.0-0`;
    	  } else if (isX(tp)) {
    	    to = `<${tM}.${+tm + 1}.0-0`;
    	  } else if (tpr) {
    	    to = `<=${tM}.${tm}.${tp}-${tpr}`;
    	  } else if (incPr) {
    	    to = `<${tM}.${tm}.${+tp + 1}-0`;
    	  } else {
    	    to = `<=${to}`;
    	  }

    	  return (`${from} ${to}`).trim()
    	};

    	const testSet = (set, version, options) => {
    	  for (let i = 0; i < set.length; i++) {
    	    if (!set[i].test(version)) {
    	      return false
    	    }
    	  }

    	  if (version.prerelease.length && !options.includePrerelease) {
    	    // Find the set of versions that are allowed to have prereleases
    	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    	    // That should allow `1.2.3-pr.2` to pass.
    	    // However, `1.2.4-alpha.notready` should NOT be allowed,
    	    // even though it's within the range set by the comparators.
    	    for (let i = 0; i < set.length; i++) {
    	      debug(set[i].semver);
    	      if (set[i].semver === Comparator.ANY) {
    	        continue
    	      }

    	      if (set[i].semver.prerelease.length > 0) {
    	        const allowed = set[i].semver;
    	        if (allowed.major === version.major &&
    	            allowed.minor === version.minor &&
    	            allowed.patch === version.patch) {
    	          return true
    	        }
    	      }
    	    }

    	    // Version has a -pre, but it's not one of the ones we like.
    	    return false
    	  }

    	  return true
    	};
    	return range;
    }

    var comparator;
    var hasRequiredComparator;

    function requireComparator () {
    	if (hasRequiredComparator) return comparator;
    	hasRequiredComparator = 1;
    	const ANY = Symbol('SemVer ANY');
    	// hoisted class for cyclic dependency
    	class Comparator {
    	  static get ANY () {
    	    return ANY
    	  }

    	  constructor (comp, options) {
    	    options = parseOptions(options);

    	    if (comp instanceof Comparator) {
    	      if (comp.loose === !!options.loose) {
    	        return comp
    	      } else {
    	        comp = comp.value;
    	      }
    	    }

    	    debug('comparator', comp, options);
    	    this.options = options;
    	    this.loose = !!options.loose;
    	    this.parse(comp);

    	    if (this.semver === ANY) {
    	      this.value = '';
    	    } else {
    	      this.value = this.operator + this.semver.version;
    	    }

    	    debug('comp', this);
    	  }

    	  parse (comp) {
    	    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
    	    const m = comp.match(r);

    	    if (!m) {
    	      throw new TypeError(`Invalid comparator: ${comp}`)
    	    }

    	    this.operator = m[1] !== undefined ? m[1] : '';
    	    if (this.operator === '=') {
    	      this.operator = '';
    	    }

    	    // if it literally is just '>' or '' then allow anything.
    	    if (!m[2]) {
    	      this.semver = ANY;
    	    } else {
    	      this.semver = new SemVer(m[2], this.options.loose);
    	    }
    	  }

    	  toString () {
    	    return this.value
    	  }

    	  test (version) {
    	    debug('Comparator.test', version, this.options.loose);

    	    if (this.semver === ANY || version === ANY) {
    	      return true
    	    }

    	    if (typeof version === 'string') {
    	      try {
    	        version = new SemVer(version, this.options);
    	      } catch (er) {
    	        return false
    	      }
    	    }

    	    return cmp(version, this.operator, this.semver, this.options)
    	  }

    	  intersects (comp, options) {
    	    if (!(comp instanceof Comparator)) {
    	      throw new TypeError('a Comparator is required')
    	    }

    	    if (!options || typeof options !== 'object') {
    	      options = {
    	        loose: !!options,
    	        includePrerelease: false,
    	      };
    	    }

    	    if (this.operator === '') {
    	      if (this.value === '') {
    	        return true
    	      }
    	      return new Range(comp.value, options).test(this.value)
    	    } else if (comp.operator === '') {
    	      if (comp.value === '') {
    	        return true
    	      }
    	      return new Range(this.value, options).test(comp.semver)
    	    }

    	    const sameDirectionIncreasing =
    	      (this.operator === '>=' || this.operator === '>') &&
    	      (comp.operator === '>=' || comp.operator === '>');
    	    const sameDirectionDecreasing =
    	      (this.operator === '<=' || this.operator === '<') &&
    	      (comp.operator === '<=' || comp.operator === '<');
    	    const sameSemVer = this.semver.version === comp.semver.version;
    	    const differentDirectionsInclusive =
    	      (this.operator === '>=' || this.operator === '<=') &&
    	      (comp.operator === '>=' || comp.operator === '<=');
    	    const oppositeDirectionsLessThan =
    	      cmp(this.semver, '<', comp.semver, options) &&
    	      (this.operator === '>=' || this.operator === '>') &&
    	        (comp.operator === '<=' || comp.operator === '<');
    	    const oppositeDirectionsGreaterThan =
    	      cmp(this.semver, '>', comp.semver, options) &&
    	      (this.operator === '<=' || this.operator === '<') &&
    	        (comp.operator === '>=' || comp.operator === '>');

    	    return (
    	      sameDirectionIncreasing ||
    	      sameDirectionDecreasing ||
    	      (sameSemVer && differentDirectionsInclusive) ||
    	      oppositeDirectionsLessThan ||
    	      oppositeDirectionsGreaterThan
    	    )
    	  }
    	}

    	comparator = Comparator;

    	const parseOptions = parseOptions_1;
    	const { re, t } = reExports;
    	const cmp = cmp_1;
    	const debug = debug_1;
    	const SemVer = semver$5;
    	const Range = requireRange();
    	return comparator;
    }

    const Range$9 = requireRange();
    const satisfies$4 = (version, range, options) => {
      try {
        range = new Range$9(range, options);
      } catch (er) {
        return false
      }
      return range.test(version)
    };
    var satisfies_1 = satisfies$4;

    const Range$8 = requireRange();

    // Mostly just for testing and legacy API reasons
    const toComparators$1 = (range, options) =>
      new Range$8(range, options).set
        .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));

    var toComparators_1 = toComparators$1;

    const SemVer$4 = semver$5;
    const Range$7 = requireRange();

    const maxSatisfying$1 = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range$7(range, options);
      } catch (er) {
        return null
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v;
            maxSV = new SemVer$4(max, options);
          }
        }
      });
      return max
    };
    var maxSatisfying_1 = maxSatisfying$1;

    const SemVer$3 = semver$5;
    const Range$6 = requireRange();
    const minSatisfying$1 = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range$6(range, options);
      } catch (er) {
        return null
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v;
            minSV = new SemVer$3(min, options);
          }
        }
      });
      return min
    };
    var minSatisfying_1 = minSatisfying$1;

    const SemVer$2 = semver$5;
    const Range$5 = requireRange();
    const gt$2 = gt_1;

    const minVersion$1 = (range, loose) => {
      range = new Range$5(range, loose);

      let minver = new SemVer$2('0.0.0');
      if (range.test(minver)) {
        return minver
      }

      minver = new SemVer$2('0.0.0-0');
      if (range.test(minver)) {
        return minver
      }

      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];

        let setMin = null;
        comparators.forEach((comparator) => {
          // Clone to avoid manipulating the comparator's semver object.
          const compver = new SemVer$2(comparator.semver.version);
          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
              /* fallthrough */
            case '':
            case '>=':
              if (!setMin || gt$2(compver, setMin)) {
                setMin = compver;
              }
              break
            case '<':
            case '<=':
              /* Ignore maximum versions */
              break
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`)
          }
        });
        if (setMin && (!minver || gt$2(minver, setMin))) {
          minver = setMin;
        }
      }

      if (minver && range.test(minver)) {
        return minver
      }

      return null
    };
    var minVersion_1 = minVersion$1;

    const Range$4 = requireRange();
    const validRange$1 = (range, options) => {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range$4(range, options).range || '*'
      } catch (er) {
        return null
      }
    };
    var valid$1 = validRange$1;

    const SemVer$1 = semver$5;
    const Comparator$2 = requireComparator();
    const { ANY: ANY$1 } = Comparator$2;
    const Range$3 = requireRange();
    const satisfies$3 = satisfies_1;
    const gt$1 = gt_1;
    const lt$1 = lt_1;
    const lte$1 = lte_1;
    const gte$1 = gte_1;

    const outside$3 = (version, range, hilo, options) => {
      version = new SemVer$1(version, options);
      range = new Range$3(range, options);

      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case '>':
          gtfn = gt$1;
          ltefn = lte$1;
          ltfn = lt$1;
          comp = '>';
          ecomp = '>=';
          break
        case '<':
          gtfn = lt$1;
          ltefn = gte$1;
          ltfn = gt$1;
          comp = '<';
          ecomp = '<=';
          break
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"')
      }

      // If it satisfies the range it is not outside
      if (satisfies$3(version, range, options)) {
        return false
      }

      // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.

      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];

        let high = null;
        let low = null;

        comparators.forEach((comparator) => {
          if (comparator.semver === ANY$1) {
            comparator = new Comparator$2('>=0.0.0');
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });

        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) {
          return false
        }

        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) &&
            ltefn(version, low.semver)) {
          return false
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false
        }
      }
      return true
    };

    var outside_1 = outside$3;

    // Determine if version is greater than all the versions possible in the range.
    const outside$2 = outside_1;
    const gtr$1 = (version, range, options) => outside$2(version, range, '>', options);
    var gtr_1 = gtr$1;

    const outside$1 = outside_1;
    // Determine if version is less than all the versions possible in the range
    const ltr$1 = (version, range, options) => outside$1(version, range, '<', options);
    var ltr_1 = ltr$1;

    const Range$2 = requireRange();
    const intersects$1 = (r1, r2, options) => {
      r1 = new Range$2(r1, options);
      r2 = new Range$2(r2, options);
      return r1.intersects(r2)
    };
    var intersects_1 = intersects$1;

    // given a set of versions and a range, create a "simplified" range
    // that includes the same versions that the original range does
    // If the original range is shorter than the simplified one, return that.
    const satisfies$2 = satisfies_1;
    const compare$2 = compare_1;
    var simplify = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare$2(a, b, options));
      for (const version of v) {
        const included = satisfies$2(version, range, options);
        if (included) {
          prev = version;
          if (!first) {
            first = version;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }

      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push('*');
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(' || ');
      const original = typeof range.raw === 'string' ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range
    };

    const Range$1 = requireRange();
    const Comparator$1 = requireComparator();
    const { ANY } = Comparator$1;
    const satisfies$1 = satisfies_1;
    const compare$1 = compare_1;

    // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
    // - Every simple range `r1, r2, ...` is a null set, OR
    // - Every simple range `r1, r2, ...` which is not a null set is a subset of
    //   some `R1, R2, ...`
    //
    // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
    // - If c is only the ANY comparator
    //   - If C is only the ANY comparator, return true
    //   - Else if in prerelease mode, return false
    //   - else replace c with `[>=0.0.0]`
    // - If C is only the ANY comparator
    //   - if in prerelease mode, return true
    //   - else replace C with `[>=0.0.0]`
    // - Let EQ be the set of = comparators in c
    // - If EQ is more than one, return true (null set)
    // - Let GT be the highest > or >= comparator in c
    // - Let LT be the lowest < or <= comparator in c
    // - If GT and LT, and GT.semver > LT.semver, return true (null set)
    // - If any C is a = range, and GT or LT are set, return false
    // - If EQ
    //   - If GT, and EQ does not satisfy GT, return true (null set)
    //   - If LT, and EQ does not satisfy LT, return true (null set)
    //   - If EQ satisfies every C, return true
    //   - Else return false
    // - If GT
    //   - If GT.semver is lower than any > or >= comp in C, return false
    //   - If GT is >=, and GT.semver does not satisfy every C, return false
    //   - If GT.semver has a prerelease, and not in prerelease mode
    //     - If no C has a prerelease and the GT.semver tuple, return false
    // - If LT
    //   - If LT.semver is greater than any < or <= comp in C, return false
    //   - If LT is <=, and LT.semver does not satisfy every C, return false
    //   - If GT.semver has a prerelease, and not in prerelease mode
    //     - If no C has a prerelease and the LT.semver tuple, return false
    // - Else return true

    const subset$1 = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true
      }

      sub = new Range$1(sub, options);
      dom = new Range$1(dom, options);
      let sawNonNull = false;

      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER
          }
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) {
          return false
        }
      }
      return true
    };

    const simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true
      }

      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true
        } else if (options.includePrerelease) {
          sub = [new Comparator$1('>=0.0.0-0')];
        } else {
          sub = [new Comparator$1('>=0.0.0')];
        }
      }

      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true
        } else {
          dom = [new Comparator$1('>=0.0.0')];
        }
      }

      const eqSet = new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === '>' || c.operator === '>=') {
          gt = higherGT(gt, c, options);
        } else if (c.operator === '<' || c.operator === '<=') {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }

      if (eqSet.size > 1) {
        return null
      }

      let gtltComp;
      if (gt && lt) {
        gtltComp = compare$1(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null
        } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {
          return null
        }
      }

      // will iterate one or zero times
      for (const eq of eqSet) {
        if (gt && !satisfies$1(eq, String(gt), options)) {
          return null
        }

        if (lt && !satisfies$1(eq, String(lt), options)) {
          return null
        }

        for (const c of dom) {
          if (!satisfies$1(eq, String(c), options)) {
            return false
          }
        }

        return true
      }

      let higher, lower;
      let hasDomLT, hasDomGT;
      // if the subset has a prerelease, we need a comparator in the superset
      // with the same tuple and a prerelease, or it's not a subset
      let needDomLTPre = lt &&
        !options.includePrerelease &&
        lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt &&
        !options.includePrerelease &&
        gt.semver.prerelease.length ? gt.semver : false;
      // exception: <1.2.3-0 is the same as <1.2.3
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
          lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }

      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
        hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length &&
                c.semver.major === needDomGTPre.major &&
                c.semver.minor === needDomGTPre.minor &&
                c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === '>' || c.operator === '>=') {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false
            }
          } else if (gt.operator === '>=' && !satisfies$1(gt.semver, String(c), options)) {
            return false
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length &&
                c.semver.major === needDomLTPre.major &&
                c.semver.minor === needDomLTPre.minor &&
                c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === '<' || c.operator === '<=') {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false
            }
          } else if (lt.operator === '<=' && !satisfies$1(lt.semver, String(c), options)) {
            return false
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false
        }
      }

      // if there was a < or >, and nothing in the dom, then must be false
      // UNLESS it was limited by another range in the other direction.
      // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false
      }

      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false
      }

      // we needed a prerelease range in a specific tuple, but didn't get one
      // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
      // because it includes prereleases in the 1.2.3 tuple
      if (needDomGTPre || needDomLTPre) {
        return false
      }

      return true
    };

    // >=1.2.3 is lower than >1.2.3
    const higherGT = (a, b, options) => {
      if (!a) {
        return b
      }
      const comp = compare$1(a.semver, b.semver, options);
      return comp > 0 ? a
        : comp < 0 ? b
        : b.operator === '>' && a.operator === '>=' ? b
        : a
    };

    // <=1.2.3 is higher than <1.2.3
    const lowerLT = (a, b, options) => {
      if (!a) {
        return b
      }
      const comp = compare$1(a.semver, b.semver, options);
      return comp < 0 ? a
        : comp > 0 ? b
        : b.operator === '<' && a.operator === '<=' ? b
        : a
    };

    var subset_1 = subset$1;

    // just pre-load all the stuff that index.js lazily exports
    const internalRe = reExports;
    const constants = constants$1;
    const SemVer = semver$5;
    const identifiers = identifiers$1;
    const parse$7 = parse_1$1;
    const valid = valid_1;
    const clean = clean_1;
    const inc = inc_1;
    const diff = diff_1;
    const major = major_1;
    const minor = minor_1;
    const patch = patch_1;
    const prerelease = prerelease_1;
    const compare = compare_1;
    const rcompare = rcompare_1;
    const compareLoose = compareLoose_1;
    const compareBuild = compareBuild_1;
    const sort = sort_1;
    const rsort = rsort_1;
    const gt = gt_1;
    const lt = lt_1;
    const eq = eq_1;
    const neq = neq_1;
    const gte = gte_1;
    const lte = lte_1;
    const cmp = cmp_1;
    const coerce = coerce_1;
    const Comparator = requireComparator();
    const Range = requireRange();
    const satisfies = satisfies_1;
    const toComparators = toComparators_1;
    const maxSatisfying = maxSatisfying_1;
    const minSatisfying = minSatisfying_1;
    const minVersion = minVersion_1;
    const validRange = valid$1;
    const outside = outside_1;
    const gtr = gtr_1;
    const ltr = ltr_1;
    const intersects = intersects_1;
    const simplifyRange = simplify;
    const subset = subset_1;
    var semver$4 = {
      parse: parse$7,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers,
    };

    const proxyAddr = proxyAddrExports;
    const semver$3 = semver$4;
    const warning$3 = warnings$1;
    const {
      kHasBeenDecorated: kHasBeenDecorated$2,
      kSchemaBody,
      kSchemaHeaders,
      kSchemaParams,
      kSchemaQuerystring,
      kSchemaController: kSchemaController$3,
      kOptions: kOptions$2,
      kRequestValidateWeakMap: kRequestValidateWeakMap$1,
      kRouteContext: kRouteContext$1,
      kPublicRouteContext: kPublicRouteContext$1
    } = symbols$2;
    const { FST_ERR_REQ_INVALID_VALIDATION_INVOCATION } = errorsExports;

    const HTTP_PART_SYMBOL_MAP = {
      body: kSchemaBody,
      headers: kSchemaHeaders,
      params: kSchemaParams,
      querystring: kSchemaQuerystring,
      query: kSchemaQuerystring
    };

    function Request$3 (id, params, req, query, log, context) {
      this.id = id;
      this[kRouteContext$1] = context;
      this.params = params;
      this.raw = req;
      this.query = query;
      this.log = log;
      this.body = undefined;
    }
    Request$3.props = [];

    function getTrustProxyFn (tp) {
      if (typeof tp === 'function') {
        return tp
      }
      if (tp === true) {
        // Support plain true/false
        return function () { return true }
      }
      if (typeof tp === 'number') {
        // Support trusting hop count
        return function (a, i) { return i < tp }
      }
      if (typeof tp === 'string') {
        // Support comma-separated tps
        const vals = tp.split(',').map(it => it.trim());
        return proxyAddr.compile(vals)
      }
      return proxyAddr.compile(tp)
    }

    function buildRequest (R, trustProxy) {
      if (trustProxy) {
        return buildRequestWithTrustProxy(R, trustProxy)
      }

      return buildRegularRequest(R)
    }

    function buildRegularRequest (R) {
      const props = [...R.props];
      function _Request (id, params, req, query, log, context) {
        this.id = id;
        this[kRouteContext$1] = context;
        this.params = params;
        this.raw = req;
        this.query = query;
        this.log = log;
        this.body = undefined;

        // eslint-disable-next-line no-var
        var prop;
        // eslint-disable-next-line no-var
        for (var i = 0; i < props.length; i++) {
          prop = props[i];
          this[prop.key] = prop.value;
        }
      }
      Object.setPrototypeOf(_Request.prototype, R.prototype);
      Object.setPrototypeOf(_Request, R);
      _Request.props = props;
      _Request.parent = R;

      return _Request
    }

    function getLastEntryInMultiHeaderValue (headerValue) {
      // we use the last one if the header is set more than once
      const lastIndex = headerValue.lastIndexOf(',');
      return lastIndex === -1 ? headerValue.trim() : headerValue.slice(lastIndex + 1).trim()
    }

    function buildRequestWithTrustProxy (R, trustProxy) {
      const _Request = buildRegularRequest(R);
      const proxyFn = getTrustProxyFn(trustProxy);

      // This is a more optimized version of decoration
      _Request[kHasBeenDecorated$2] = true;

      Object.defineProperties(_Request.prototype, {
        ip: {
          get () {
            return proxyAddr(this.raw, proxyFn)
          }
        },
        ips: {
          get () {
            return proxyAddr.all(this.raw, proxyFn)
          }
        },
        hostname: {
          get () {
            if (this.ip !== undefined && this.headers['x-forwarded-host']) {
              return getLastEntryInMultiHeaderValue(this.headers['x-forwarded-host'])
            }
            return this.headers.host || this.headers[':authority']
          }
        },
        protocol: {
          get () {
            if (this.headers['x-forwarded-proto']) {
              return getLastEntryInMultiHeaderValue(this.headers['x-forwarded-proto'])
            }
            if (this.socket) {
              return this.socket.encrypted ? 'https' : 'http'
            }
          }
        }
      });

      return _Request
    }

    Object.defineProperties(Request$3.prototype, {
      server: {
        get () {
          return this[kRouteContext$1].server
        }
      },
      url: {
        get () {
          return this.raw.url
        }
      },
      method: {
        get () {
          return this.raw.method
        }
      },
      context: {
        get () {
          warning$3.emit('FSTDEP012');
          return this[kRouteContext$1]
        }
      },
      routerPath: {
        get () {
          return this[kRouteContext$1].config.url
        }
      },
      routeOptions: {
        get () {
          const context = this[kRouteContext$1];
          const routeLimit = context._parserOptions.limit;
          const serverLimit = context.server.initialConfig.bodyLimit;
          const version = context.server.hasConstraintStrategy('version') ? this.raw.headers['accept-version'] : undefined;
          const options = {
            method: context.config.method,
            url: context.config.url,
            bodyLimit: (routeLimit || serverLimit),
            attachValidation: context.attachValidation,
            logLevel: context.logLevel,
            exposeHeadRoute: context.exposeHeadRoute,
            prefixTrailingSlash: context.prefixTrailingSlash,
            version
          };
          return Object.freeze(options)
        }
      },
      routerMethod: {
        get () {
          return this[kRouteContext$1].config.method
        }
      },
      routeConfig: {
        get () {
          return this[kRouteContext$1][kPublicRouteContext$1].config
        }
      },
      routeSchema: {
        get () {
          return this[kRouteContext$1][kPublicRouteContext$1].schema
        }
      },
      is404: {
        get () {
          return this[kRouteContext$1].config.url === undefined
        }
      },
      connection: {
        get () {
          /* istanbul ignore next */
          if (semver$3.gte(process.versions.node, '13.0.0')) {
            warning$3.emit('FSTDEP005');
          }
          return this.raw.connection
        }
      },
      socket: {
        get () {
          return this.raw.socket
        }
      },
      ip: {
        get () {
          if (this.socket) {
            return this.socket.remoteAddress
          }
        }
      },
      hostname: {
        get () {
          return this.raw.headers.host || this.raw.headers[':authority']
        }
      },
      protocol: {
        get () {
          if (this.socket) {
            return this.socket.encrypted ? 'https' : 'http'
          }
        }
      },
      headers: {
        get () {
          if (this.additionalHeaders) {
            return Object.assign({}, this.raw.headers, this.additionalHeaders)
          }
          return this.raw.headers
        },
        set (headers) {
          this.additionalHeaders = headers;
        }
      },
      getValidationFunction: {
        value: function (httpPartOrSchema) {
          if (typeof httpPartOrSchema === 'string') {
            const symbol = HTTP_PART_SYMBOL_MAP[httpPartOrSchema];
            return this[kRouteContext$1][symbol]
          } else if (typeof httpPartOrSchema === 'object') {
            return this[kRouteContext$1][kRequestValidateWeakMap$1]?.get(httpPartOrSchema)
          }
        }
      },
      compileValidationSchema: {
        value: function (schema, httpPart = null) {
          const { method, url } = this;

          if (this[kRouteContext$1][kRequestValidateWeakMap$1]?.has(schema)) {
            return this[kRouteContext$1][kRequestValidateWeakMap$1].get(schema)
          }

          const validatorCompiler = this[kRouteContext$1].validatorCompiler ||
          this.server[kSchemaController$3].validatorCompiler ||
         (
           // We compile the schemas if no custom validatorCompiler is provided
           // nor set
           this.server[kSchemaController$3].setupValidator(this.server[kOptions$2]) ||
           this.server[kSchemaController$3].validatorCompiler
         );

          const validateFn = validatorCompiler({
            schema,
            method,
            url,
            httpPart
          });

          // We create a WeakMap to compile the schema only once
          // Its done leazily to avoid add overhead by creating the WeakMap
          // if it is not used
          // TODO: Explore a central cache for all the schemas shared across
          // encapsulated contexts
          if (this[kRouteContext$1][kRequestValidateWeakMap$1] == null) {
            this[kRouteContext$1][kRequestValidateWeakMap$1] = new WeakMap();
          }

          this[kRouteContext$1][kRequestValidateWeakMap$1].set(schema, validateFn);

          return validateFn
        }
      },
      validateInput: {
        value: function (input, schema, httpPart) {
          httpPart = typeof schema === 'string' ? schema : httpPart;

          const symbol = (httpPart != null && typeof httpPart === 'string') && HTTP_PART_SYMBOL_MAP[httpPart];
          let validate;

          if (symbol) {
            // Validate using the HTTP Request Part schema
            validate = this[kRouteContext$1][symbol];
          }

          // We cannot compile if the schema is missed
          if (validate == null && (schema == null ||
              typeof schema !== 'object' ||
              Array.isArray(schema))
          ) {
            throw new FST_ERR_REQ_INVALID_VALIDATION_INVOCATION(httpPart)
          }

          if (validate == null) {
            if (this[kRouteContext$1][kRequestValidateWeakMap$1]?.has(schema)) {
              validate = this[kRouteContext$1][kRequestValidateWeakMap$1].get(schema);
            } else {
              // We proceed to compile if there's no validate function yet
              validate = this.compileValidationSchema(schema, httpPart);
            }
          }

          return validate(input)
        }
      }
    });

    request$1.exports = Request$3;
    requestExports$1.buildRequest = buildRequest;

    var httpMethods$2 = {
      supportedMethods: [
        'DELETE',
        'GET',
        'HEAD',
        'PATCH',
        'POST',
        'PUT',
        'OPTIONS',
        'PROPFIND',
        'PROPPATCH',
        'MKCOL',
        'COPY',
        'MOVE',
        'LOCK',
        'UNLOCK',
        'TRACE',
        'SEARCH'
      ]
    };

    /* eslint no-prototype-builtins: 0 */

    const {
      kReply: kReply$3,
      kRequest: kRequest$3,
      kState: kState$1,
      kHasBeenDecorated: kHasBeenDecorated$1
    } = symbols$2;

    const {
      FST_ERR_DEC_ALREADY_PRESENT,
      FST_ERR_DEC_MISSING_DEPENDENCY,
      FST_ERR_DEC_AFTER_START,
      FST_ERR_DEC_DEPENDENCY_INVALID_TYPE
    } = errorsExports;

    const warning$2 = warnings$1;

    function decorate (instance, name, fn, dependencies) {
      if (Object.prototype.hasOwnProperty.call(instance, name)) {
        throw new FST_ERR_DEC_ALREADY_PRESENT(name)
      }

      checkDependencies(instance, name, dependencies);

      if (fn && (typeof fn.getter === 'function' || typeof fn.setter === 'function')) {
        Object.defineProperty(instance, name, {
          get: fn.getter,
          set: fn.setter
        });
      } else {
        instance[name] = fn;
      }
    }

    function decorateConstructor (konstructor, name, fn, dependencies) {
      const instance = konstructor.prototype;
      if (Object.prototype.hasOwnProperty.call(instance, name) || hasKey(konstructor, name)) {
        throw new FST_ERR_DEC_ALREADY_PRESENT(name)
      }

      konstructor[kHasBeenDecorated$1] = true;
      checkDependencies(konstructor, name, dependencies);

      if (fn && (typeof fn.getter === 'function' || typeof fn.setter === 'function')) {
        Object.defineProperty(instance, name, {
          get: fn.getter,
          set: fn.setter
        });
      } else if (typeof fn === 'function') {
        instance[name] = fn;
      } else {
        konstructor.props.push({ key: name, value: fn });
      }
    }

    function checkReferenceType (name, fn) {
      if (typeof fn === 'object' && fn && !(typeof fn.getter === 'function' || typeof fn.setter === 'function')) {
        warning$2.emit('FSTDEP006', name);
      }
    }

    function decorateFastify (name, fn, dependencies) {
      assertNotStarted(this, name);
      decorate(this, name, fn, dependencies);
      return this
    }

    function checkExistence (instance, name) {
      if (name) {
        return name in instance || (instance.prototype && name in instance.prototype) || hasKey(instance, name)
      }

      return instance in this
    }

    function hasKey (fn, name) {
      if (fn.props) {
        return fn.props.find(({ key }) => key === name)
      }
      return false
    }

    function checkRequestExistence (name) {
      if (name && hasKey(this[kRequest$3], name)) return true
      return checkExistence(this[kRequest$3].prototype, name)
    }

    function checkReplyExistence (name) {
      if (name && hasKey(this[kReply$3], name)) return true
      return checkExistence(this[kReply$3].prototype, name)
    }

    function checkDependencies (instance, name, deps) {
      if (deps === undefined || deps === null) {
        return
      }

      if (!Array.isArray(deps)) {
        throw new FST_ERR_DEC_DEPENDENCY_INVALID_TYPE(name)
      }

      // eslint-disable-next-line no-var
      for (var i = 0; i !== deps.length; ++i) {
        if (!checkExistence(instance, deps[i])) {
          throw new FST_ERR_DEC_MISSING_DEPENDENCY(deps[i])
        }
      }
    }

    function decorateReply (name, fn, dependencies) {
      assertNotStarted(this, name);
      checkReferenceType(name, fn);
      decorateConstructor(this[kReply$3], name, fn, dependencies);
      return this
    }

    function decorateRequest (name, fn, dependencies) {
      assertNotStarted(this, name);
      checkReferenceType(name, fn);
      decorateConstructor(this[kRequest$3], name, fn, dependencies);
      return this
    }

    function assertNotStarted (instance, name) {
      if (instance[kState$1].started) {
        throw new FST_ERR_DEC_AFTER_START(name)
      }
    }

    var decorate_1 = {
      add: decorateFastify,
      exist: checkExistence,
      existRequest: checkRequestExistence,
      existReply: checkReplyExistence,
      dependencies: checkDependencies,
      decorateReply,
      decorateRequest
    };

    var contentTypeParserExports = {};
    var contentTypeParser = {
      get exports(){ return contentTypeParserExports; },
      set exports(v){ contentTypeParserExports = v; },
    };

    /**
     * tiny-lru
     *
     * @copyright 2022 Jason Mulligan <jason.mulligan@avoidwork.com>
     * @license BSD-3-Clause
     * @version 10.0.1
     */
    class LRU {
    	constructor (max = 0, ttl = 0) {
    		this.first = null;
    		this.items = Object.create(null);
    		this.last = null;
    		this.max = max;
    		this.size = 0;
    		this.ttl = ttl;
    	}

    	#has (key) {
    		return key in this.items;
    	}

    	clear () {
    		this.first = null;
    		this.items = Object.create(null);
    		this.last = null;
    		this.size = 0;

    		return this;
    	}

    	delete (key) {
    		if (this.#has(key)) {
    			const item = this.items[key];

    			delete this.items[key];
    			this.size--;

    			if (item.prev !== null) {
    				item.prev.next = item.next;
    			}

    			if (item.next !== null) {
    				item.next.prev = item.prev;
    			}

    			if (this.first === item) {
    				this.first = item.next;
    			}

    			if (this.last === item) {
    				this.last = item.prev;
    			}
    		}

    		return this;
    	}

    	evict (bypass = false) {
    		if (bypass || this.size > 0) {
    			const item = this.first;

    			delete this.items[item.key];
    			this.size--;

    			if (this.size === 0) {
    				this.first = null;
    				this.last = null;
    			} else {
    				this.first = item.next;
    				this.first.prev = null;
    			}
    		}

    		return this;
    	}

    	get (key) {
    		let result;

    		if (this.#has(key)) {
    			const item = this.items[key];

    			if (this.ttl > 0 && item.expiry <= new Date().getTime()) {
    				this.delete(key);
    			} else {
    				result = item.value;
    				this.set(key, result, true);
    			}
    		}

    		return result;
    	}

    	keys () {
    		return Object.keys(this.items);
    	}

    	set (key, value, bypass = false) {
    		let item;

    		if (bypass || this.#has(key)) {
    			item = this.items[key];
    			item.value = value;

    			if (this.last !== item) {
    				const last = this.last,
    					next = item.next,
    					prev = item.prev;

    				if (this.first === item) {
    					this.first = item.next;
    				}

    				item.next = null;
    				item.prev = this.last;
    				last.next = item;

    				if (prev !== null) {
    					prev.next = next;
    				}

    				if (next !== null) {
    					next.prev = prev;
    				}
    			}
    		} else {
    			if (this.max > 0 && this.size === this.max) {
    				this.evict(true);
    			}

    			item = this.items[key] = {
    				expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl,
    				key: key,
    				prev: this.last,
    				next: null,
    				value
    			};

    			if (++this.size === 1) {
    				this.first = item;
    			} else {
    				this.last.next = item;
    			}
    		}

    		this.last = item;

    		return this;
    	}
    }

    function lru (max = 1000, ttl = 0) {
    	if (isNaN(max) || max < 0) {
    		throw new TypeError("Invalid max value");
    	}

    	if (isNaN(ttl) || ttl < 0) {
    		throw new TypeError("Invalid ttl value");
    	}

    	return new LRU(max, ttl);
    }

    var tinyLru_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        lru: lru
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(tinyLru_esm);

    var fastContentTypeParse = {};

    const NullObject = function NullObject () { };
    NullObject.prototype = Object.create(null);

    /**
     * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
     *
     * parameter     = token "=" ( token / quoted-string )
     * token         = 1*tchar
     * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
     *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
     *               / DIGIT / ALPHA
     *               ; any VCHAR, except delimiters
     * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
     * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
     * obs-text      = %x80-FF
     * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
     */
    const paramRE = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+)=("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g; // eslint-disable-line no-control-regex

    /**
     * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
     *
     * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
     * obs-text    = %x80-FF
     */
    const quotedPairRE = /\\([\u000b\u0020-\u00ff])/g; // eslint-disable-line no-control-regex

    /**
     * RegExp to match type in RFC 7231 sec 3.1.1.1
     *
     * media-type = type "/" subtype
     * type       = token
     * subtype    = token
     */
    const mediaTypeRE = /^[!#$%&'*+.^_|~0-9A-Za-z-]+\/[!#$%&'*+.^_|~0-9A-Za-z-]+$/;

    // default ContentType to prevent repeated object creation
    const defaultContentType = { type: '', parameters: new NullObject() };
    Object.freeze(defaultContentType.parameters);
    Object.freeze(defaultContentType);

    /**
     * Parse media type to object.
     *
     * @param {string|object} header
     * @return {Object}
     * @public
     */

    function parse$6 (header) {
      if (typeof header !== 'string') {
        throw new TypeError('argument header is required and must be a string')
      }

      let index = header.indexOf(';');
      const type = index !== -1
        ? header.slice(0, index).trim()
        : header.trim();

      if (mediaTypeRE.test(type) === false) {
        throw new TypeError('invalid media type')
      }

      const result = {
        type: type.toLowerCase(),
        parameters: new NullObject()
      };

      // parse parameters
      if (index === -1) {
        return result
      }

      let key;
      let match;
      let value;

      paramRE.lastIndex = index;

      while ((match = paramRE.exec(header))) {
        if (match.index !== index) {
          throw new TypeError('invalid parameter format')
        }

        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];

        if (value[0] === '"') {
          // remove quotes and escapes
          value = value
            .slice(1, value.length - 1);

          quotedPairRE.test(value) && (value = value.replace(quotedPairRE, '$1'));
        }

        result.parameters[key] = value;
      }

      if (index !== header.length) {
        throw new TypeError('invalid parameter format')
      }

      return result
    }

    function safeParse$1 (header) {
      if (typeof header !== 'string') {
        return defaultContentType
      }

      let index = header.indexOf(';');
      const type = index !== -1
        ? header.slice(0, index).trim()
        : header.trim();

      if (mediaTypeRE.test(type) === false) {
        return defaultContentType
      }

      const result = {
        type: type.toLowerCase(),
        parameters: new NullObject()
      };

      // parse parameters
      if (index === -1) {
        return result
      }

      let key;
      let match;
      let value;

      paramRE.lastIndex = index;

      while ((match = paramRE.exec(header))) {
        if (match.index !== index) {
          return defaultContentType
        }

        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];

        if (value[0] === '"') {
          // remove quotes and escapes
          value = value
            .slice(1, value.length - 1);

          quotedPairRE.test(value) && (value = value.replace(quotedPairRE, '$1'));
        }

        result.parameters[key] = value;
      }

      if (index !== header.length) {
        return defaultContentType
      }

      return result
    }

    fastContentTypeParse.default = { parse: parse$6, safeParse: safeParse$1 };
    fastContentTypeParse.parse = parse$6;
    fastContentTypeParse.safeParse = safeParse$1;
    fastContentTypeParse.defaultContentType = defaultContentType;

    var secureJsonParseExports = {};
    var secureJsonParse = {
      get exports(){ return secureJsonParseExports; },
      set exports(v){ secureJsonParseExports = v; },
    };

    const hasBuffer = typeof Buffer !== 'undefined';
    const suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
    const suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;

    function parse$5 (text, reviver, options) {
      // Normalize arguments
      if (options == null) {
        if (reviver !== null && typeof reviver === 'object') {
          options = reviver;
          reviver = undefined;
        }
      }

      if (hasBuffer && Buffer.isBuffer(text)) {
        text = text.toString();
      }

      // BOM checker
      if (text && text.charCodeAt(0) === 0xFEFF) {
        text = text.slice(1);
      }

      // Parse normally, allowing exceptions
      const obj = JSON.parse(text, reviver);

      // Ignore null and non-objects
      if (obj === null || typeof obj !== 'object') {
        return obj
      }

      const protoAction = (options && options.protoAction) || 'error';
      const constructorAction = (options && options.constructorAction) || 'error';

      // options: 'error' (default) / 'remove' / 'ignore'
      if (protoAction === 'ignore' && constructorAction === 'ignore') {
        return obj
      }

      if (protoAction !== 'ignore' && constructorAction !== 'ignore') {
        if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {
          return obj
        }
      } else if (protoAction !== 'ignore' && constructorAction === 'ignore') {
        if (suspectProtoRx.test(text) === false) {
          return obj
        }
      } else {
        if (suspectConstructorRx.test(text) === false) {
          return obj
        }
      }

      // Scan result for proto keys
      return filter(obj, { protoAction, constructorAction, safe: options && options.safe })
    }

    function filter (obj, { protoAction = 'error', constructorAction = 'error', safe } = {}) {
      let next = [obj];

      while (next.length) {
        const nodes = next;
        next = [];

        for (const node of nodes) {
          if (protoAction !== 'ignore' && Object.prototype.hasOwnProperty.call(node, '__proto__')) { // Avoid calling node.hasOwnProperty directly
            if (safe === true) {
              return null
            } else if (protoAction === 'error') {
              throw new SyntaxError('Object contains forbidden prototype property')
            }

            delete node.__proto__; // eslint-disable-line no-proto
          }

          if (constructorAction !== 'ignore' &&
              Object.prototype.hasOwnProperty.call(node, 'constructor') &&
              Object.prototype.hasOwnProperty.call(node.constructor, 'prototype')) { // Avoid calling node.hasOwnProperty directly
            if (safe === true) {
              return null
            } else if (constructorAction === 'error') {
              throw new SyntaxError('Object contains forbidden prototype property')
            }

            delete node.constructor;
          }

          for (const key in node) {
            const value = node[key];
            if (value && typeof value === 'object') {
              next.push(value);
            }
          }
        }
      }
      return obj
    }

    function safeParse (text, reviver) {
      try {
        return parse$5(text, reviver, { safe: true })
      } catch (ignoreError) {
        return null
      }
    }

    secureJsonParse.exports = parse$5;
    secureJsonParseExports.default = parse$5;
    secureJsonParseExports.parse = parse$5;
    secureJsonParseExports.safeParse = safeParse;
    secureJsonParseExports.scan = filter;

    (function (module) {

    	const { AsyncResource } = require$$0$a;
    	const lru = require$$1.lru;
    	const { safeParse: safeParseContentType, defaultContentType } = fastContentTypeParse;
    	const secureJson = secureJsonParseExports;
    	const {
    	  kDefaultJsonParse,
    	  kContentTypeParser,
    	  kBodyLimit,
    	  kRequestPayloadStream,
    	  kState,
    	  kTestInternals,
    	  kReplyIsError,
    	  kRouteContext
    	} = symbols$2;

    	const {
    	  FST_ERR_CTP_INVALID_TYPE,
    	  FST_ERR_CTP_EMPTY_TYPE,
    	  FST_ERR_CTP_ALREADY_PRESENT,
    	  FST_ERR_CTP_INVALID_HANDLER,
    	  FST_ERR_CTP_INVALID_PARSE_TYPE,
    	  FST_ERR_CTP_BODY_TOO_LARGE,
    	  FST_ERR_CTP_INVALID_MEDIA_TYPE,
    	  FST_ERR_CTP_INVALID_CONTENT_LENGTH,
    	  FST_ERR_CTP_EMPTY_JSON_BODY
    	} = errorsExports;

    	function ContentTypeParser (bodyLimit, onProtoPoisoning, onConstructorPoisoning) {
    	  this[kDefaultJsonParse] = getDefaultJsonParser(onProtoPoisoning, onConstructorPoisoning);
    	  // using a map instead of a plain object to avoid prototype hijack attacks
    	  this.customParsers = new Map();
    	  this.customParsers.set('application/json', new Parser(true, false, bodyLimit, this[kDefaultJsonParse]));
    	  this.customParsers.set('text/plain', new Parser(true, false, bodyLimit, defaultPlainTextParser));
    	  this.parserList = [new ParserListItem('application/json'), new ParserListItem('text/plain')];
    	  this.parserRegExpList = [];
    	  this.cache = lru(100);
    	}

    	ContentTypeParser.prototype.add = function (contentType, opts, parserFn) {
    	  const contentTypeIsString = typeof contentType === 'string';

    	  if (!contentTypeIsString && !(contentType instanceof RegExp)) throw new FST_ERR_CTP_INVALID_TYPE()
    	  if (contentTypeIsString && contentType.length === 0) throw new FST_ERR_CTP_EMPTY_TYPE()
    	  if (typeof parserFn !== 'function') throw new FST_ERR_CTP_INVALID_HANDLER()

    	  if (this.existingParser(contentType)) {
    	    throw new FST_ERR_CTP_ALREADY_PRESENT(contentType)
    	  }

    	  if (opts.parseAs !== undefined) {
    	    if (opts.parseAs !== 'string' && opts.parseAs !== 'buffer') {
    	      throw new FST_ERR_CTP_INVALID_PARSE_TYPE(opts.parseAs)
    	    }
    	  }

    	  const parser = new Parser(
    	    opts.parseAs === 'string',
    	    opts.parseAs === 'buffer',
    	    opts.bodyLimit,
    	    parserFn
    	  );

    	  if (contentTypeIsString && contentType === '*') {
    	    this.customParsers.set('', parser);
    	  } else {
    	    if (contentTypeIsString) {
    	      this.parserList.unshift(new ParserListItem(contentType));
    	    } else {
    	      contentType.isEssence = contentType.source.indexOf(';') === -1;
    	      this.parserRegExpList.unshift(contentType);
    	    }
    	    this.customParsers.set(contentType.toString(), parser);
    	  }
    	};

    	ContentTypeParser.prototype.hasParser = function (contentType) {
    	  return this.customParsers.has(typeof contentType === 'string' ? contentType : contentType.toString())
    	};

    	ContentTypeParser.prototype.existingParser = function (contentType) {
    	  if (contentType === 'application/json' && this.customParsers.has(contentType)) {
    	    return this.customParsers.get(contentType).fn !== this[kDefaultJsonParse]
    	  }
    	  if (contentType === 'text/plain' && this.customParsers.has(contentType)) {
    	    return this.customParsers.get(contentType).fn !== defaultPlainTextParser
    	  }

    	  return this.hasParser(contentType)
    	};

    	ContentTypeParser.prototype.getParser = function (contentType) {
    	  if (this.hasParser(contentType)) {
    	    return this.customParsers.get(contentType)
    	  }

    	  const parser = this.cache.get(contentType);
    	  if (parser !== undefined) return parser

    	  const parsed = safeParseContentType(contentType);

    	  // dummyContentType always the same object
    	  // we can use === for the comparsion and return early
    	  if (parsed === defaultContentType) {
    	    return this.customParsers.get('')
    	  }

    	  // eslint-disable-next-line no-var
    	  for (var i = 0; i !== this.parserList.length; ++i) {
    	    const parserListItem = this.parserList[i];
    	    if (compareContentType(parsed, parserListItem)) {
    	      const parser = this.customParsers.get(parserListItem.name);
    	      // we set request content-type in cache to reduce parsing of MIME type
    	      this.cache.set(contentType, parser);
    	      return parser
    	    }
    	  }

    	  // eslint-disable-next-line no-var
    	  for (var j = 0; j !== this.parserRegExpList.length; ++j) {
    	    const parserRegExp = this.parserRegExpList[j];
    	    if (compareRegExpContentType(contentType, parsed.type, parserRegExp)) {
    	      const parser = this.customParsers.get(parserRegExp.toString());
    	      // we set request content-type in cache to reduce parsing of MIME type
    	      this.cache.set(contentType, parser);
    	      return parser
    	    }
    	  }

    	  return this.customParsers.get('')
    	};

    	ContentTypeParser.prototype.removeAll = function () {
    	  this.customParsers = new Map();
    	  this.parserRegExpList = [];
    	  this.parserList = [];
    	  this.cache = lru(100);
    	};

    	ContentTypeParser.prototype.remove = function (contentType) {
    	  if (!(typeof contentType === 'string' || contentType instanceof RegExp)) throw new FST_ERR_CTP_INVALID_TYPE()

    	  this.customParsers.delete(contentType.toString());

    	  const parsers = typeof contentType === 'string' ? this.parserList : this.parserRegExpList;

    	  const idx = parsers.findIndex(ct => ct.toString() === contentType.toString());

    	  if (idx > -1) {
    	    parsers.splice(idx, 1);
    	  }
    	};

    	ContentTypeParser.prototype.run = function (contentType, handler, request, reply) {
    	  const parser = this.getParser(contentType);
    	  const resource = new AsyncResource('content-type-parser:run', request);

    	  if (parser === undefined) {
    	    if (request.is404) {
    	      handler(request, reply);
    	    } else {
    	      reply.send(new FST_ERR_CTP_INVALID_MEDIA_TYPE(contentType || undefined));
    	    }
    	  } else if (parser.asString === true || parser.asBuffer === true) {
    	    rawBody(
    	      request,
    	      reply,
    	      reply[kRouteContext]._parserOptions,
    	      parser,
    	      done
    	    );
    	  } else {
    	    const result = parser.fn(request, request[kRequestPayloadStream], done);

    	    if (result && typeof result.then === 'function') {
    	      result.then(body => done(null, body), done);
    	    }
    	  }

    	  function done (error, body) {
    	    // We cannot use resource.bind() because it is broken in node v12 and v14
    	    resource.runInAsyncScope(() => {
    	      if (error) {
    	        reply[kReplyIsError] = true;
    	        reply.send(error);
    	      } else {
    	        request.body = body;
    	        handler(request, reply);
    	      }
    	    });
    	  }
    	};

    	function rawBody (request, reply, options, parser, done) {
    	  const asString = parser.asString;
    	  const limit = options.limit === null ? parser.bodyLimit : options.limit;
    	  const contentLength = request.headers['content-length'] === undefined
    	    ? NaN
    	    : Number(request.headers['content-length']);

    	  if (contentLength > limit) {
    	    // We must close the connection as the client is going
    	    // to send this data anyway
    	    reply.header('connection', 'close');
    	    reply.send(new FST_ERR_CTP_BODY_TOO_LARGE());
    	    return
    	  }

    	  let receivedLength = 0;
    	  let body = asString === true ? '' : [];

    	  const payload = request[kRequestPayloadStream] || request.raw;

    	  if (asString === true) {
    	    payload.setEncoding('utf8');
    	  }

    	  payload.on('data', onData);
    	  payload.on('end', onEnd);
    	  payload.on('error', onEnd);
    	  payload.resume();

    	  function onData (chunk) {
    	    receivedLength += chunk.length;

    	    if ((payload.receivedEncodedLength || receivedLength) > limit) {
    	      payload.removeListener('data', onData);
    	      payload.removeListener('end', onEnd);
    	      payload.removeListener('error', onEnd);
    	      reply.send(new FST_ERR_CTP_BODY_TOO_LARGE());
    	      return
    	    }

    	    if (asString === true) {
    	      body += chunk;
    	    } else {
    	      body.push(chunk);
    	    }
    	  }

    	  function onEnd (err) {
    	    payload.removeListener('data', onData);
    	    payload.removeListener('end', onEnd);
    	    payload.removeListener('error', onEnd);

    	    if (err !== undefined) {
    	      err.statusCode = 400;
    	      reply[kReplyIsError] = true;
    	      reply.code(err.statusCode).send(err);
    	      return
    	    }

    	    if (asString === true) {
    	      receivedLength = Buffer.byteLength(body);
    	    }

    	    if (!Number.isNaN(contentLength) && (payload.receivedEncodedLength || receivedLength) !== contentLength) {
    	      reply.header('connection', 'close');
    	      reply.send(new FST_ERR_CTP_INVALID_CONTENT_LENGTH());
    	      return
    	    }

    	    if (asString === false) {
    	      body = Buffer.concat(body);
    	    }

    	    const result = parser.fn(request, body, done);
    	    if (result && typeof result.then === 'function') {
    	      result.then(body => done(null, body), done);
    	    }
    	  }
    	}

    	function getDefaultJsonParser (onProtoPoisoning, onConstructorPoisoning) {
    	  return defaultJsonParser

    	  function defaultJsonParser (req, body, done) {
    	    if (body === '' || body == null) {
    	      return done(new FST_ERR_CTP_EMPTY_JSON_BODY(), undefined)
    	    }
    	    let json;
    	    try {
    	      json = secureJson.parse(body, { protoAction: onProtoPoisoning, constructorAction: onConstructorPoisoning });
    	    } catch (err) {
    	      err.statusCode = 400;
    	      return done(err, undefined)
    	    }
    	    done(null, json);
    	  }
    	}

    	function defaultPlainTextParser (req, body, done) {
    	  done(null, body);
    	}

    	function Parser (asString, asBuffer, bodyLimit, fn) {
    	  this.asString = asString;
    	  this.asBuffer = asBuffer;
    	  this.bodyLimit = bodyLimit;
    	  this.fn = fn;
    	}

    	function buildContentTypeParser (c) {
    	  const contentTypeParser = new ContentTypeParser();
    	  contentTypeParser[kDefaultJsonParse] = c[kDefaultJsonParse];
    	  contentTypeParser.customParsers = new Map(c.customParsers.entries());
    	  contentTypeParser.parserList = c.parserList.slice();
    	  contentTypeParser.parserRegExpList = c.parserRegExpList.slice();
    	  return contentTypeParser
    	}

    	function addContentTypeParser (contentType, opts, parser) {
    	  if (this[kState].started) {
    	    throw new Error('Cannot call "addContentTypeParser" when fastify instance is already started!')
    	  }

    	  if (typeof opts === 'function') {
    	    parser = opts;
    	    opts = {};
    	  }

    	  if (!opts) opts = {};
    	  if (!opts.bodyLimit) opts.bodyLimit = this[kBodyLimit];

    	  if (Array.isArray(contentType)) {
    	    contentType.forEach((type) => this[kContentTypeParser].add(type, opts, parser));
    	  } else {
    	    this[kContentTypeParser].add(contentType, opts, parser);
    	  }

    	  return this
    	}

    	function hasContentTypeParser (contentType) {
    	  return this[kContentTypeParser].hasParser(contentType)
    	}

    	function removeContentTypeParser (contentType) {
    	  if (this[kState].started) {
    	    throw new Error('Cannot call "removeContentTypeParser" when fastify instance is already started!')
    	  }

    	  if (Array.isArray(contentType)) {
    	    for (const type of contentType) {
    	      this[kContentTypeParser].remove(type);
    	    }
    	  } else {
    	    this[kContentTypeParser].remove(contentType);
    	  }
    	}

    	function removeAllContentTypeParsers () {
    	  if (this[kState].started) {
    	    throw new Error('Cannot call "removeAllContentTypeParsers" when fastify instance is already started!')
    	  }

    	  this[kContentTypeParser].removeAll();
    	}

    	function compareContentType (contentType, parserListItem) {
    	  if (parserListItem.isEssence) {
    	    // we do essence check
    	    return contentType.type.indexOf(parserListItem) !== -1
    	  } else {
    	    // when the content-type includes parameters
    	    // we do a full-text search
    	    // reject essence content-type before checking parameters
    	    if (contentType.type.indexOf(parserListItem.type) === -1) return false
    	    for (const key of parserListItem.parameterKeys) {
    	      // reject when missing parameters
    	      if (!(key in contentType.parameters)) return false
    	      // reject when parameters do not match
    	      if (contentType.parameters[key] !== parserListItem.parameters[key]) return false
    	    }
    	    return true
    	  }
    	}

    	function compareRegExpContentType (contentType, essenceMIMEType, regexp) {
    	  if (regexp.isEssence) {
    	    // we do essence check
    	    return regexp.test(essenceMIMEType)
    	  } else {
    	    // when the content-type includes parameters
    	    // we do a full-text match
    	    return regexp.test(contentType)
    	  }
    	}

    	function ParserListItem (contentType) {
    	  this.name = contentType;
    	  // we pre-calculate all the needed information
    	  // before content-type comparsion
    	  const parsed = safeParseContentType(contentType);
    	  this.type = parsed.type;
    	  this.parameters = parsed.parameters;
    	  this.parameterKeys = Object.keys(parsed.parameters);
    	  this.isEssence = contentType.indexOf(';') === -1;
    	}

    	// used in ContentTypeParser.remove
    	ParserListItem.prototype.toString = function () {
    	  return this.name
    	};

    	module.exports = ContentTypeParser;
    	module.exports.helpers = {
    	  buildContentTypeParser,
    	  addContentTypeParser,
    	  hasContentTypeParser,
    	  removeContentTypeParser,
    	  removeAllContentTypeParsers
    	};
    	module.exports.defaultParsers = {
    	  getDefaultJsonParser,
    	  defaultTextParser: defaultPlainTextParser
    	};
    	module.exports[kTestInternals] = { rawBody };
    } (contentTypeParser));

    var fastJsonStringifyCompilerExports = {};
    var fastJsonStringifyCompiler = {
      get exports(){ return fastJsonStringifyCompilerExports; },
      set exports(v){ fastJsonStringifyCompilerExports = v; },
    };

    var fastJsonStringifyExports = {};
    var fastJsonStringify = {
      get exports(){ return fastJsonStringifyExports; },
      set exports(v){ fastJsonStringifyExports = v; },
    };

    var deepmergeExports = {};
    var deepmerge = {
      get exports(){ return deepmergeExports; },
      set exports(v){ deepmergeExports = v; },
    };

    // based on https://github.com/TehShrike/deepmerge
    // MIT License
    // Copyright (c) 2012 - 2022 James Halliday, Josh Duff, and other contributors of deepmerge

    const JSON_PROTO = Object.getPrototypeOf({});

    function deepmergeConstructor (options) {
      function isNotPrototypeKey (value) {
        return (
          value !== 'constructor' &&
          value !== 'prototype' &&
          value !== '__proto__'
        )
      }

      function cloneArray (value) {
        let i = 0;
        const il = value.length;
        const result = new Array(il);
        for (i = 0; i < il; ++i) {
          result[i] = clone(value[i]);
        }
        return result
      }

      function cloneObject (target) {
        const result = {};

        if (cloneProtoObject && Object.getPrototypeOf(target) !== JSON_PROTO) {
          return cloneProtoObject(target)
        }

        const targetKeys = getKeys(target);
        let i, il, key;
        for (i = 0, il = targetKeys.length; i < il; ++i) {
          isNotPrototypeKey(key = targetKeys[i]) &&
            (result[key] = clone(target[key]));
        }
        return result
      }

      function concatArrays (target, source) {
        const tl = target.length;
        const sl = source.length;
        let i = 0;
        const result = new Array(tl + sl);
        for (i = 0; i < tl; ++i) {
          result[i] = clone(target[i]);
        }
        for (i = 0; i < sl; ++i) {
          result[i + tl] = clone(source[i]);
        }
        return result
      }

      const propertyIsEnumerable = Object.prototype.propertyIsEnumerable;
      function getSymbolsAndKeys (value) {
        const result = Object.keys(value);
        const keys = Object.getOwnPropertySymbols(value);
        for (let i = 0, il = keys.length; i < il; ++i) {
          propertyIsEnumerable.call(value, keys[i]) && result.push(keys[i]);
        }
        return result
      }

      const getKeys = options && options.symbols
        ? getSymbolsAndKeys
        : Object.keys;

      const cloneProtoObject = typeof options?.cloneProtoObject === 'function'
        ? options.cloneProtoObject
        : undefined;

      function isMergeableObject (value) {
        return typeof value === 'object' && value !== null && !(value instanceof RegExp) && !(value instanceof Date)
      }

      function isPrimitive (value) {
        return typeof value !== 'object' || value === null
      }

      const isPrimitiveOrBuiltIn = typeof Buffer !== 'undefined'
        ? (value) => typeof value !== 'object' || value === null || value instanceof RegExp || value instanceof Date || value instanceof Buffer
        : (value) => typeof value !== 'object' || value === null || value instanceof RegExp || value instanceof Date;

      const mergeArray = options && typeof options.mergeArray === 'function'
        ? options.mergeArray({ clone, deepmerge: _deepmerge, getKeys, isMergeableObject })
        : concatArrays;

      function clone (entry) {
        return isMergeableObject(entry)
          ? Array.isArray(entry)
            ? cloneArray(entry)
            : cloneObject(entry)
          : entry
      }

      function mergeObject (target, source) {
        const result = {};
        const targetKeys = getKeys(target);
        const sourceKeys = getKeys(source);
        let i, il, key;
        for (i = 0, il = targetKeys.length; i < il; ++i) {
          isNotPrototypeKey(key = targetKeys[i]) &&
          (sourceKeys.indexOf(key) === -1) &&
          (result[key] = clone(target[key]));
        }

        for (i = 0, il = sourceKeys.length; i < il; ++i) {
          isNotPrototypeKey(key = sourceKeys[i]) &&
          (
            key in target && (targetKeys.indexOf(key) !== -1 && (result[key] = _deepmerge(target[key], source[key])), true) || // eslint-disable-line no-mixed-operators
            (result[key] = clone(source[key]))
          );
        }
        return result
      }

      function _deepmerge (target, source) {
        const sourceIsArray = Array.isArray(source);
        const targetIsArray = Array.isArray(target);

        if (isPrimitive(source)) {
          return source
        } else if (isPrimitiveOrBuiltIn(target)) {
          return clone(source)
        } else if (sourceIsArray && targetIsArray) {
          return mergeArray(target, source)
        } else if (sourceIsArray !== targetIsArray) {
          return clone(source)
        } else {
          return mergeObject(target, source)
        }
      }

      function _deepmergeAll () {
        switch (arguments.length) {
          case 0:
            return {}
          case 1:
            return clone(arguments[0])
          case 2:
            return _deepmerge(arguments[0], arguments[1])
        }
        let result;
        for (let i = 0, il = arguments.length; i < il; ++i) {
          result = _deepmerge(result, arguments[i]);
        }
        return result
      }

      return options && options.all
        ? _deepmergeAll
        : _deepmerge
    }

    deepmerge.exports = deepmergeConstructor;
    deepmergeExports.default = deepmergeConstructor;
    deepmergeExports.deepmerge = deepmergeConstructor;

    var schemaValidatorExports = {};
    var schemaValidator = {
      get exports(){ return schemaValidatorExports; },
      set exports(v){ schemaValidatorExports = v; },
    };

    var formats = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.formatNames = exports.fastFormats = exports.fullFormats = void 0;
    	function fmtDef(validate, compare) {
    	    return { validate, compare };
    	}
    	exports.fullFormats = {
    	    // date: http://tools.ietf.org/html/rfc3339#section-5.6
    	    date: fmtDef(date, compareDate),
    	    // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
    	    time: fmtDef(time, compareTime),
    	    "date-time": fmtDef(date_time, compareDateTime),
    	    // duration: https://tools.ietf.org/html/rfc3339#appendix-A
    	    duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
    	    uri,
    	    "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
    	    // uri-template: https://tools.ietf.org/html/rfc6570
    	    "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
    	    // For the source: https://gist.github.com/dperini/729294
    	    // For test cases: https://mathiasbynens.be/demo/url-regex
    	    url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
    	    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    	    hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
    	    // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
    	    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    	    ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
    	    regex,
    	    // uuid: http://tools.ietf.org/html/rfc4122
    	    uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
    	    // JSON-pointer: https://tools.ietf.org/html/rfc6901
    	    // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
    	    "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
    	    "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
    	    // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
    	    "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
    	    // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types
    	    // byte: https://github.com/miguelmota/is-base64
    	    byte,
    	    // signed 32 bit integer
    	    int32: { type: "number", validate: validateInt32 },
    	    // signed 64 bit integer
    	    int64: { type: "number", validate: validateInt64 },
    	    // C-type float
    	    float: { type: "number", validate: validateNumber },
    	    // C-type double
    	    double: { type: "number", validate: validateNumber },
    	    // hint to the UI to hide input strings
    	    password: true,
    	    // unchecked string payload
    	    binary: true,
    	};
    	exports.fastFormats = {
    	    ...exports.fullFormats,
    	    date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
    	    time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareTime),
    	    "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
    	    // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
    	    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    	    "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    	    // email (sources from jsen validator):
    	    // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
    	    // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')
    	    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    	};
    	exports.formatNames = Object.keys(exports.fullFormats);
    	function isLeapYear(year) {
    	    // https://tools.ietf.org/html/rfc3339#appendix-C
    	    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    	}
    	const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    	const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    	function date(str) {
    	    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    	    const matches = DATE.exec(str);
    	    if (!matches)
    	        return false;
    	    const year = +matches[1];
    	    const month = +matches[2];
    	    const day = +matches[3];
    	    return (month >= 1 &&
    	        month <= 12 &&
    	        day >= 1 &&
    	        day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]));
    	}
    	function compareDate(d1, d2) {
    	    if (!(d1 && d2))
    	        return undefined;
    	    if (d1 > d2)
    	        return 1;
    	    if (d1 < d2)
    	        return -1;
    	    return 0;
    	}
    	const TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
    	function time(str, withTimeZone) {
    	    const matches = TIME.exec(str);
    	    if (!matches)
    	        return false;
    	    const hour = +matches[1];
    	    const minute = +matches[2];
    	    const second = +matches[3];
    	    const timeZone = matches[5];
    	    return (((hour <= 23 && minute <= 59 && second <= 59) ||
    	        (hour === 23 && minute === 59 && second === 60)) &&
    	        (!withTimeZone || timeZone !== ""));
    	}
    	function compareTime(t1, t2) {
    	    if (!(t1 && t2))
    	        return undefined;
    	    const a1 = TIME.exec(t1);
    	    const a2 = TIME.exec(t2);
    	    if (!(a1 && a2))
    	        return undefined;
    	    t1 = a1[1] + a1[2] + a1[3] + (a1[4] || "");
    	    t2 = a2[1] + a2[2] + a2[3] + (a2[4] || "");
    	    if (t1 > t2)
    	        return 1;
    	    if (t1 < t2)
    	        return -1;
    	    return 0;
    	}
    	const DATE_TIME_SEPARATOR = /t|\s/i;
    	function date_time(str) {
    	    // http://tools.ietf.org/html/rfc3339#section-5.6
    	    const dateTime = str.split(DATE_TIME_SEPARATOR);
    	    return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1], true);
    	}
    	function compareDateTime(dt1, dt2) {
    	    if (!(dt1 && dt2))
    	        return undefined;
    	    const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
    	    const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
    	    const res = compareDate(d1, d2);
    	    if (res === undefined)
    	        return undefined;
    	    return res || compareTime(t1, t2);
    	}
    	const NOT_URI_FRAGMENT = /\/|:/;
    	const URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
    	function uri(str) {
    	    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    	    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
    	}
    	const BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
    	function byte(str) {
    	    BYTE.lastIndex = 0;
    	    return BYTE.test(str);
    	}
    	const MIN_INT32 = -(2 ** 31);
    	const MAX_INT32 = 2 ** 31 - 1;
    	function validateInt32(value) {
    	    return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
    	}
    	function validateInt64(value) {
    	    // JSON and javascript max Int is 2**53, so any int that passes isInteger is valid for Int64
    	    return Number.isInteger(value);
    	}
    	function validateNumber() {
    	    return true;
    	}
    	const Z_ANCHOR = /[^\\]\\Z/;
    	function regex(str) {
    	    if (Z_ANCHOR.test(str))
    	        return false;
    	    try {
    	        new RegExp(str);
    	        return true;
    	    }
    	    catch (e) {
    	        return false;
    	    }
    	}
    	
    } (formats));

    var equal$7 = {};

    // do not edit .js files directly - edit src/index.jst



    var fastDeepEqual = function equal(a, b) {
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;

        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }



        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;

        for (i = length; i-- !== 0;)
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

        for (i = length; i-- !== 0;) {
          var key = keys[i];

          if (!equal(a[key], b[key])) return false;
        }

        return true;
      }

      // true if both NaN, false otherwise
      return a!==a && b!==b;
    };

    Object.defineProperty(equal$7, "__esModule", { value: true });
    // https://github.com/ajv-validator/ajv/issues/889
    const equal$6 = fastDeepEqual;
    equal$6.code = 'require("ajv/dist/runtime/equal").default';
    equal$7.default = equal$6;

    /* CODE GENERATED BY 'build-schema-validator.js' DO NOT EDIT! */
    schemaValidator.exports = validate10$1;
    schemaValidatorExports.default = validate10$1;
    const schema11$1 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true};
    const schema20 = {"enum":["array","boolean","integer","null","number","object","string"]};
    const formats0 = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
    const formats2 = formats.fullFormats.uri;
    const formats6 = formats.fullFormats.regex;

    function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
    let vErrors = null;
    let errors = 0;
    if(!(((typeof data == "number") && (!(data % 1) && !isNaN(data))) && (isFinite(data)))){
    validate11.errors = [{instancePath,schemaPath:"#/definitions/nonNegativeInteger/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    {
    if((typeof data == "number") && (isFinite(data))){
    if(data < 0 || isNaN(data)){
    validate11.errors = [{instancePath,schemaPath:"#/definitions/nonNegativeInteger/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];
    return false;
    }
    }
    }
    validate11.errors = vErrors;
    return errors === 0;
    }
    const root1 = {validate: validate10$1};

    function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
    let vErrors = null;
    let errors = 0;
    if(errors === 0){
    if(Array.isArray(data)){
    if(data.length < 1){
    validate13.errors = [{instancePath,schemaPath:"#/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];
    return false;
    }
    else {
    var valid0 = true;
    const len0 = data.length;
    for(let i0=0; i0<len0; i0++){
    const _errs1 = errors;
    if(!(root1.validate(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){
    vErrors = vErrors === null ? root1.validate.errors : vErrors.concat(root1.validate.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs1 === errors;
    if(!valid0){
    break;
    }
    }
    }
    }
    else {
    validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];
    return false;
    }
    }
    validate13.errors = vErrors;
    return errors === 0;
    }

    const func0 = equal$7.default;

    function validate10$1(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
    let vErrors = null;
    let errors = 0;
    if((!(data && typeof data == "object" && !Array.isArray(data))) && (typeof data !== "boolean")){
    validate10$1.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: schema11$1.type},message:"must be object,boolean"}];
    return false;
    }
    if(errors === 0){
    if(data && typeof data == "object" && !Array.isArray(data)){
    if(data.$id !== undefined){
    let data0 = data.$id;
    const _errs1 = errors;
    if(errors === _errs1){
    if(errors === _errs1){
    if(typeof data0 === "string"){
    if(!(formats0.test(data0))){
    validate10$1.errors = [{instancePath:instancePath+"/$id",schemaPath:"#/properties/%24id/format",keyword:"format",params:{format: "uri-reference"},message:"must match format \""+"uri-reference"+"\""}];
    return false;
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/$id",schemaPath:"#/properties/%24id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    }
    var valid0 = _errs1 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.$schema !== undefined){
    let data1 = data.$schema;
    const _errs3 = errors;
    if(errors === _errs3){
    if(errors === _errs3){
    if(typeof data1 === "string"){
    if(!(formats2(data1))){
    validate10$1.errors = [{instancePath:instancePath+"/$schema",schemaPath:"#/properties/%24schema/format",keyword:"format",params:{format: "uri"},message:"must match format \""+"uri"+"\""}];
    return false;
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/$schema",schemaPath:"#/properties/%24schema/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    }
    var valid0 = _errs3 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.$ref !== undefined){
    let data2 = data.$ref;
    const _errs5 = errors;
    if(errors === _errs5){
    if(errors === _errs5){
    if(typeof data2 === "string"){
    if(!(formats0.test(data2))){
    validate10$1.errors = [{instancePath:instancePath+"/$ref",schemaPath:"#/properties/%24ref/format",keyword:"format",params:{format: "uri-reference"},message:"must match format \""+"uri-reference"+"\""}];
    return false;
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/$ref",schemaPath:"#/properties/%24ref/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    }
    var valid0 = _errs5 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.$comment !== undefined){
    const _errs7 = errors;
    if(typeof data.$comment !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/$comment",schemaPath:"#/properties/%24comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid0 = _errs7 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.title !== undefined){
    const _errs9 = errors;
    if(typeof data.title !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/title",schemaPath:"#/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid0 = _errs9 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.description !== undefined){
    const _errs11 = errors;
    if(typeof data.description !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid0 = _errs11 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.readOnly !== undefined){
    const _errs13 = errors;
    if(typeof data.readOnly !== "boolean"){
    validate10$1.errors = [{instancePath:instancePath+"/readOnly",schemaPath:"#/properties/readOnly/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    var valid0 = _errs13 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.examples !== undefined){
    const _errs15 = errors;
    if(errors === _errs15){
    if(!(Array.isArray(data.examples))){
    validate10$1.errors = [{instancePath:instancePath+"/examples",schemaPath:"#/properties/examples/type",keyword:"type",params:{type: "array"},message:"must be array"}];
    return false;
    }
    }
    var valid0 = _errs15 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.multipleOf !== undefined){
    let data8 = data.multipleOf;
    const _errs17 = errors;
    if(errors === _errs17){
    if((typeof data8 == "number") && (isFinite(data8))){
    if(data8 <= 0 || isNaN(data8)){
    validate10$1.errors = [{instancePath:instancePath+"/multipleOf",schemaPath:"#/properties/multipleOf/exclusiveMinimum",keyword:"exclusiveMinimum",params:{comparison: ">", limit: 0},message:"must be > 0"}];
    return false;
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/multipleOf",schemaPath:"#/properties/multipleOf/type",keyword:"type",params:{type: "number"},message:"must be number"}];
    return false;
    }
    }
    var valid0 = _errs17 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.maximum !== undefined){
    let data9 = data.maximum;
    const _errs19 = errors;
    if(!((typeof data9 == "number") && (isFinite(data9)))){
    validate10$1.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/properties/maximum/type",keyword:"type",params:{type: "number"},message:"must be number"}];
    return false;
    }
    var valid0 = _errs19 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.exclusiveMaximum !== undefined){
    let data10 = data.exclusiveMaximum;
    const _errs21 = errors;
    if(!((typeof data10 == "number") && (isFinite(data10)))){
    validate10$1.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/properties/exclusiveMaximum/type",keyword:"type",params:{type: "number"},message:"must be number"}];
    return false;
    }
    var valid0 = _errs21 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.minimum !== undefined){
    let data11 = data.minimum;
    const _errs23 = errors;
    if(!((typeof data11 == "number") && (isFinite(data11)))){
    validate10$1.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/properties/minimum/type",keyword:"type",params:{type: "number"},message:"must be number"}];
    return false;
    }
    var valid0 = _errs23 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.exclusiveMinimum !== undefined){
    let data12 = data.exclusiveMinimum;
    const _errs25 = errors;
    if(!((typeof data12 == "number") && (isFinite(data12)))){
    validate10$1.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/properties/exclusiveMinimum/type",keyword:"type",params:{type: "number"},message:"must be number"}];
    return false;
    }
    var valid0 = _errs25 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.maxLength !== undefined){
    let data13 = data.maxLength;
    const _errs27 = errors;
    const _errs28 = errors;
    if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){
    validate10$1.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/definitions/nonNegativeInteger/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    if(errors === _errs28){
    if((typeof data13 == "number") && (isFinite(data13))){
    if(data13 < 0 || isNaN(data13)){
    validate10$1.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/definitions/nonNegativeInteger/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];
    return false;
    }
    }
    }
    var valid0 = _errs27 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.minLength !== undefined){
    const _errs30 = errors;
    if(!(validate11(data.minLength, {instancePath:instancePath+"/minLength",parentData:data,parentDataProperty:"minLength",rootData}))){
    vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs30 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.pattern !== undefined){
    let data15 = data.pattern;
    const _errs31 = errors;
    if(errors === _errs31){
    if(errors === _errs31){
    if(typeof data15 === "string"){
    if(!(formats6(data15))){
    validate10$1.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/format",keyword:"format",params:{format: "regex"},message:"must match format \""+"regex"+"\""}];
    return false;
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    }
    var valid0 = _errs31 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.additionalItems !== undefined){
    const _errs33 = errors;
    if(!(validate10$1(data.additionalItems, {instancePath:instancePath+"/additionalItems",parentData:data,parentDataProperty:"additionalItems",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs33 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.items !== undefined){
    let data17 = data.items;
    const _errs34 = errors;
    const _errs35 = errors;
    let valid2 = false;
    const _errs36 = errors;
    if(!(validate10$1(data17, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var _valid0 = _errs36 === errors;
    valid2 = valid2 || _valid0;
    if(!valid2){
    const _errs37 = errors;
    if(!(validate13(data17, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
    vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
    errors = vErrors.length;
    }
    var _valid0 = _errs37 === errors;
    valid2 = valid2 || _valid0;
    }
    if(!valid2){
    const err0 = {instancePath:instancePath+"/items",schemaPath:"#/properties/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
    if(vErrors === null){
    vErrors = [err0];
    }
    else {
    vErrors.push(err0);
    }
    errors++;
    validate10$1.errors = vErrors;
    return false;
    }
    else {
    errors = _errs35;
    if(vErrors !== null){
    if(_errs35){
    vErrors.length = _errs35;
    }
    else {
    vErrors = null;
    }
    }
    }
    var valid0 = _errs34 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.maxItems !== undefined){
    let data18 = data.maxItems;
    const _errs38 = errors;
    const _errs39 = errors;
    if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){
    validate10$1.errors = [{instancePath:instancePath+"/maxItems",schemaPath:"#/definitions/nonNegativeInteger/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    if(errors === _errs39){
    if((typeof data18 == "number") && (isFinite(data18))){
    if(data18 < 0 || isNaN(data18)){
    validate10$1.errors = [{instancePath:instancePath+"/maxItems",schemaPath:"#/definitions/nonNegativeInteger/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];
    return false;
    }
    }
    }
    var valid0 = _errs38 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.minItems !== undefined){
    const _errs41 = errors;
    if(!(validate11(data.minItems, {instancePath:instancePath+"/minItems",parentData:data,parentDataProperty:"minItems",rootData}))){
    vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs41 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.uniqueItems !== undefined){
    const _errs42 = errors;
    if(typeof data.uniqueItems !== "boolean"){
    validate10$1.errors = [{instancePath:instancePath+"/uniqueItems",schemaPath:"#/properties/uniqueItems/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    var valid0 = _errs42 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.contains !== undefined){
    const _errs44 = errors;
    if(!(validate10$1(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs44 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.maxProperties !== undefined){
    let data22 = data.maxProperties;
    const _errs45 = errors;
    const _errs46 = errors;
    if(!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))){
    validate10$1.errors = [{instancePath:instancePath+"/maxProperties",schemaPath:"#/definitions/nonNegativeInteger/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    if(errors === _errs46){
    if((typeof data22 == "number") && (isFinite(data22))){
    if(data22 < 0 || isNaN(data22)){
    validate10$1.errors = [{instancePath:instancePath+"/maxProperties",schemaPath:"#/definitions/nonNegativeInteger/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];
    return false;
    }
    }
    }
    var valid0 = _errs45 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.minProperties !== undefined){
    const _errs48 = errors;
    if(!(validate11(data.minProperties, {instancePath:instancePath+"/minProperties",parentData:data,parentDataProperty:"minProperties",rootData}))){
    vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs48 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.required !== undefined){
    let data24 = data.required;
    const _errs49 = errors;
    const _errs50 = errors;
    if(errors === _errs50){
    if(Array.isArray(data24)){
    var valid6 = true;
    const len0 = data24.length;
    for(let i0=0; i0<len0; i0++){
    const _errs52 = errors;
    if(typeof data24[i0] !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/required/" + i0,schemaPath:"#/definitions/stringArray/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid6 = _errs52 === errors;
    if(!valid6){
    break;
    }
    }
    if(valid6){
    let i1 = data24.length;
    let j0;
    if(i1 > 1){
    const indices0 = {};
    for(;i1--;){
    let item0 = data24[i1];
    if(typeof item0 !== "string"){
    continue;
    }
    if(typeof indices0[item0] == "number"){
    j0 = indices0[item0];
    validate10$1.errors = [{instancePath:instancePath+"/required",schemaPath:"#/definitions/stringArray/uniqueItems",keyword:"uniqueItems",params:{i: i1, j: j0},message:"must NOT have duplicate items (items ## "+j0+" and "+i1+" are identical)"}];
    return false;
    }
    indices0[item0] = i1;
    }
    }
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/required",schemaPath:"#/definitions/stringArray/type",keyword:"type",params:{type: "array"},message:"must be array"}];
    return false;
    }
    }
    var valid0 = _errs49 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.additionalProperties !== undefined){
    const _errs54 = errors;
    if(!(validate10$1(data.additionalProperties, {instancePath:instancePath+"/additionalProperties",parentData:data,parentDataProperty:"additionalProperties",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs54 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.definitions !== undefined){
    let data27 = data.definitions;
    const _errs55 = errors;
    if(errors === _errs55){
    if(data27 && typeof data27 == "object" && !Array.isArray(data27)){
    for(const key0 in data27){
    const _errs58 = errors;
    if(!(validate10$1(data27[key0], {instancePath:instancePath+"/definitions/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data27,parentDataProperty:key0,rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid8 = _errs58 === errors;
    if(!valid8){
    break;
    }
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/definitions",schemaPath:"#/properties/definitions/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid0 = _errs55 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.properties !== undefined){
    let data29 = data.properties;
    const _errs59 = errors;
    if(errors === _errs59){
    if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
    for(const key1 in data29){
    const _errs62 = errors;
    if(!(validate10$1(data29[key1], {instancePath:instancePath+"/properties/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data29,parentDataProperty:key1,rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid9 = _errs62 === errors;
    if(!valid9){
    break;
    }
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/properties",schemaPath:"#/properties/properties/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid0 = _errs59 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.patternProperties !== undefined){
    let data31 = data.patternProperties;
    const _errs63 = errors;
    if(errors === _errs63){
    if(data31 && typeof data31 == "object" && !Array.isArray(data31)){
    for(const key2 in data31){
    const _errs65 = errors;
    if(errors === _errs65){
    if(typeof key2 === "string"){
    if(!(formats6(key2))){
    const err1 = {instancePath:instancePath+"/patternProperties",schemaPath:"#/properties/patternProperties/propertyNames/format",keyword:"format",params:{format: "regex"},message:"must match format \""+"regex"+"\"",propertyName:key2};
    if(vErrors === null){
    vErrors = [err1];
    }
    else {
    vErrors.push(err1);
    }
    errors++;
    }
    }
    }
    var valid10 = _errs65 === errors;
    if(!valid10){
    const err2 = {instancePath:instancePath+"/patternProperties",schemaPath:"#/properties/patternProperties/propertyNames",keyword:"propertyNames",params:{propertyName: key2},message:"property name must be valid"};
    if(vErrors === null){
    vErrors = [err2];
    }
    else {
    vErrors.push(err2);
    }
    errors++;
    validate10$1.errors = vErrors;
    return false;
    }
    }
    if(valid10){
    for(const key3 in data31){
    const _errs67 = errors;
    if(!(validate10$1(data31[key3], {instancePath:instancePath+"/patternProperties/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data31,parentDataProperty:key3,rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid11 = _errs67 === errors;
    if(!valid11){
    break;
    }
    }
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/patternProperties",schemaPath:"#/properties/patternProperties/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid0 = _errs63 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.dependencies !== undefined){
    let data33 = data.dependencies;
    const _errs68 = errors;
    if(errors === _errs68){
    if(data33 && typeof data33 == "object" && !Array.isArray(data33)){
    for(const key4 in data33){
    let data34 = data33[key4];
    const _errs71 = errors;
    const _errs72 = errors;
    let valid13 = false;
    const _errs73 = errors;
    if(!(validate10$1(data34, {instancePath:instancePath+"/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data33,parentDataProperty:key4,rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var _valid1 = _errs73 === errors;
    valid13 = valid13 || _valid1;
    if(!valid13){
    const _errs74 = errors;
    const _errs75 = errors;
    if(errors === _errs75){
    if(Array.isArray(data34)){
    var valid15 = true;
    const len1 = data34.length;
    for(let i2=0; i2<len1; i2++){
    const _errs77 = errors;
    if(typeof data34[i2] !== "string"){
    const err3 = {instancePath:instancePath+"/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1")+"/" + i2,schemaPath:"#/definitions/stringArray/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
    if(vErrors === null){
    vErrors = [err3];
    }
    else {
    vErrors.push(err3);
    }
    errors++;
    }
    var valid15 = _errs77 === errors;
    if(!valid15){
    break;
    }
    }
    if(valid15){
    let i3 = data34.length;
    let j1;
    if(i3 > 1){
    const indices1 = {};
    for(;i3--;){
    let item1 = data34[i3];
    if(typeof item1 !== "string"){
    continue;
    }
    if(typeof indices1[item1] == "number"){
    j1 = indices1[item1];
    const err4 = {instancePath:instancePath+"/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/stringArray/uniqueItems",keyword:"uniqueItems",params:{i: i3, j: j1},message:"must NOT have duplicate items (items ## "+j1+" and "+i3+" are identical)"};
    if(vErrors === null){
    vErrors = [err4];
    }
    else {
    vErrors.push(err4);
    }
    errors++;
    break;
    }
    indices1[item1] = i3;
    }
    }
    }
    }
    else {
    const err5 = {instancePath:instancePath+"/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/definitions/stringArray/type",keyword:"type",params:{type: "array"},message:"must be array"};
    if(vErrors === null){
    vErrors = [err5];
    }
    else {
    vErrors.push(err5);
    }
    errors++;
    }
    }
    var _valid1 = _errs74 === errors;
    valid13 = valid13 || _valid1;
    }
    if(!valid13){
    const err6 = {instancePath:instancePath+"/dependencies/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/dependencies/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
    if(vErrors === null){
    vErrors = [err6];
    }
    else {
    vErrors.push(err6);
    }
    errors++;
    validate10$1.errors = vErrors;
    return false;
    }
    else {
    errors = _errs72;
    if(vErrors !== null){
    if(_errs72){
    vErrors.length = _errs72;
    }
    else {
    vErrors = null;
    }
    }
    }
    var valid12 = _errs71 === errors;
    if(!valid12){
    break;
    }
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/dependencies",schemaPath:"#/properties/dependencies/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid0 = _errs68 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.propertyNames !== undefined){
    const _errs79 = errors;
    if(!(validate10$1(data.propertyNames, {instancePath:instancePath+"/propertyNames",parentData:data,parentDataProperty:"propertyNames",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs79 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.enum !== undefined){
    let data37 = data.enum;
    const _errs80 = errors;
    if(errors === _errs80){
    if(Array.isArray(data37)){
    if(data37.length < 1){
    validate10$1.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];
    return false;
    }
    else {
    let i4 = data37.length;
    let j2;
    if(i4 > 1){
    for(;i4--;){
    for(j2 = i4; j2--;){
    if(func0(data37[i4], data37[j2])){
    validate10$1.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/uniqueItems",keyword:"uniqueItems",params:{i: i4, j: j2},message:"must NOT have duplicate items (items ## "+j2+" and "+i4+" are identical)"}];
    return false;
    }
    }
    }
    }
    }
    }
    else {
    validate10$1.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
    return false;
    }
    }
    var valid0 = _errs80 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.type !== undefined){
    let data38 = data.type;
    const _errs82 = errors;
    const _errs83 = errors;
    let valid18 = false;
    const _errs84 = errors;
    if(!(((((((data38 === "array") || (data38 === "boolean")) || (data38 === "integer")) || (data38 === "null")) || (data38 === "number")) || (data38 === "object")) || (data38 === "string"))){
    const err7 = {instancePath:instancePath+"/type",schemaPath:"#/definitions/simpleTypes/enum",keyword:"enum",params:{allowedValues: schema20.enum},message:"must be equal to one of the allowed values"};
    if(vErrors === null){
    vErrors = [err7];
    }
    else {
    vErrors.push(err7);
    }
    errors++;
    }
    var _valid2 = _errs84 === errors;
    valid18 = valid18 || _valid2;
    if(!valid18){
    const _errs86 = errors;
    if(errors === _errs86){
    if(Array.isArray(data38)){
    if(data38.length < 1){
    const err8 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf/1/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};
    if(vErrors === null){
    vErrors = [err8];
    }
    else {
    vErrors.push(err8);
    }
    errors++;
    }
    else {
    var valid20 = true;
    const len2 = data38.length;
    for(let i5=0; i5<len2; i5++){
    let data39 = data38[i5];
    const _errs88 = errors;
    if(!(((((((data39 === "array") || (data39 === "boolean")) || (data39 === "integer")) || (data39 === "null")) || (data39 === "number")) || (data39 === "object")) || (data39 === "string"))){
    const err9 = {instancePath:instancePath+"/type/" + i5,schemaPath:"#/definitions/simpleTypes/enum",keyword:"enum",params:{allowedValues: schema20.enum},message:"must be equal to one of the allowed values"};
    if(vErrors === null){
    vErrors = [err9];
    }
    else {
    vErrors.push(err9);
    }
    errors++;
    }
    var valid20 = _errs88 === errors;
    if(!valid20){
    break;
    }
    }
    if(valid20){
    let i6 = data38.length;
    let j3;
    if(i6 > 1){
    outer1:
    for(;i6--;){
    for(j3 = i6; j3--;){
    if(func0(data38[i6], data38[j3])){
    const err10 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf/1/uniqueItems",keyword:"uniqueItems",params:{i: i6, j: j3},message:"must NOT have duplicate items (items ## "+j3+" and "+i6+" are identical)"};
    if(vErrors === null){
    vErrors = [err10];
    }
    else {
    vErrors.push(err10);
    }
    errors++;
    break outer1;
    }
    }
    }
    }
    }
    }
    }
    else {
    const err11 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
    if(vErrors === null){
    vErrors = [err11];
    }
    else {
    vErrors.push(err11);
    }
    errors++;
    }
    }
    var _valid2 = _errs86 === errors;
    valid18 = valid18 || _valid2;
    }
    if(!valid18){
    const err12 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
    if(vErrors === null){
    vErrors = [err12];
    }
    else {
    vErrors.push(err12);
    }
    errors++;
    validate10$1.errors = vErrors;
    return false;
    }
    else {
    errors = _errs83;
    if(vErrors !== null){
    if(_errs83){
    vErrors.length = _errs83;
    }
    else {
    vErrors = null;
    }
    }
    }
    var valid0 = _errs82 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.format !== undefined){
    const _errs90 = errors;
    if(typeof data.format !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid0 = _errs90 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.contentMediaType !== undefined){
    const _errs92 = errors;
    if(typeof data.contentMediaType !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/contentMediaType",schemaPath:"#/properties/contentMediaType/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid0 = _errs92 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.contentEncoding !== undefined){
    const _errs94 = errors;
    if(typeof data.contentEncoding !== "string"){
    validate10$1.errors = [{instancePath:instancePath+"/contentEncoding",schemaPath:"#/properties/contentEncoding/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    var valid0 = _errs94 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.if !== undefined){
    const _errs96 = errors;
    if(!(validate10$1(data.if, {instancePath:instancePath+"/if",parentData:data,parentDataProperty:"if",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs96 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.then !== undefined){
    const _errs97 = errors;
    if(!(validate10$1(data.then, {instancePath:instancePath+"/then",parentData:data,parentDataProperty:"then",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs97 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.else !== undefined){
    const _errs98 = errors;
    if(!(validate10$1(data.else, {instancePath:instancePath+"/else",parentData:data,parentDataProperty:"else",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs98 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.allOf !== undefined){
    const _errs99 = errors;
    if(!(validate13(data.allOf, {instancePath:instancePath+"/allOf",parentData:data,parentDataProperty:"allOf",rootData}))){
    vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs99 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.anyOf !== undefined){
    const _errs100 = errors;
    if(!(validate13(data.anyOf, {instancePath:instancePath+"/anyOf",parentData:data,parentDataProperty:"anyOf",rootData}))){
    vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs100 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.oneOf !== undefined){
    const _errs101 = errors;
    if(!(validate13(data.oneOf, {instancePath:instancePath+"/oneOf",parentData:data,parentDataProperty:"oneOf",rootData}))){
    vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs101 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.not !== undefined){
    const _errs102 = errors;
    if(!(validate10$1(data.not, {instancePath:instancePath+"/not",parentData:data,parentDataProperty:"not",rootData}))){
    vErrors = vErrors === null ? validate10$1.errors : vErrors.concat(validate10$1.errors);
    errors = vErrors.length;
    }
    var valid0 = _errs102 === errors;
    }
    else {
    var valid0 = true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    validate10$1.errors = vErrors;
    return errors === 0;
    }

    // eslint-disable-next-line
    const STR_ESCAPE = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;

    var serializer = class Serializer {
      constructor (options = {}) {
        switch (options.rounding) {
          case 'floor':
            this.parseInteger = Math.floor;
            break
          case 'ceil':
            this.parseInteger = Math.ceil;
            break
          case 'round':
            this.parseInteger = Math.round;
            break
          default:
            this.parseInteger = Math.trunc;
            break
        }
      }

      asInteger (i) {
        if (typeof i === 'bigint') {
          return i.toString()
        } else if (Number.isInteger(i)) {
          return '' + i
        } else {
          /* eslint no-undef: "off" */
          const integer = this.parseInteger(i);
          if (Number.isNaN(integer) || !Number.isFinite(integer)) {
            throw new Error(`The value "${i}" cannot be converted to an integer.`)
          } else {
            return '' + integer
          }
        }
      }

      asNumber (i) {
        const num = Number(i);
        if (Number.isNaN(num)) {
          throw new Error(`The value "${i}" cannot be converted to a number.`)
        } else if (!Number.isFinite(num)) {
          return null
        } else {
          return '' + num
        }
      }

      asBoolean (bool) {
        return bool && 'true' || 'false' // eslint-disable-line
      }

      asDateTime (date) {
        if (date === null) return '""'
        if (date instanceof Date) {
          return '"' + date.toISOString() + '"'
        }
        if (typeof date === 'string') {
          return '"' + date + '"'
        }
        throw new Error(`The value "${date}" cannot be converted to a date-time.`)
      }

      asDate (date) {
        if (date === null) return '""'
        if (date instanceof Date) {
          return '"' + new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 10) + '"'
        }
        if (typeof date === 'string') {
          return '"' + date + '"'
        }
        throw new Error(`The value "${date}" cannot be converted to a date.`)
      }

      asTime (date) {
        if (date === null) return '""'
        if (date instanceof Date) {
          return '"' + new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(11, 19) + '"'
        }
        if (typeof date === 'string') {
          return '"' + date + '"'
        }
        throw new Error(`The value "${date}" cannot be converted to a time.`)
      }

      asString (str) {
        const quotes = '"';
        if (str instanceof Date) {
          return quotes + str.toISOString() + quotes
        } else if (str === null) {
          return quotes + quotes
        } else if (str instanceof RegExp) {
          str = str.source;
        } else if (typeof str !== 'string') {
          str = str.toString();
        }

        // Fast escape chars check
        if (!STR_ESCAPE.test(str)) {
          return quotes + str + quotes
        }

        if (str.length < 42) {
          return this.asStringSmall(str)
        } else {
          return JSON.stringify(str)
        }
      }

      // magically escape strings for json
      // relying on their charCodeAt
      // everything below 32 needs JSON.stringify()
      // every string that contain surrogate needs JSON.stringify()
      // 34 and 92 happens all the time, so we
      // have a fast case for them
      asStringSmall (str) {
        const l = str.length;
        let result = '';
        let last = 0;
        let found = false;
        let surrogateFound = false;
        let point = 255;
        // eslint-disable-next-line
        for (var i = 0; i < l && point >= 32; i++) {
          point = str.charCodeAt(i);
          if (point >= 0xD800 && point <= 0xDFFF) {
            // The current character is a surrogate.
            surrogateFound = true;
          }
          if (point === 34 || point === 92) {
            result += str.slice(last, i) + '\\';
            last = i;
            found = true;
          }
        }

        if (!found) {
          result = str;
        } else {
          result += str.slice(last);
        }
        return ((point < 32) || (surrogateFound === true)) ? JSON.stringify(str) : '"' + result + '"'
      }
    };

    var ajvExports$2 = {};
    var ajv$2 = {
      get exports(){ return ajvExports$2; },
      set exports(v){ ajvExports$2 = v; },
    };

    var core$7 = {};

    var validate$5 = {};

    var boolSchema$2 = {};

    var errors$2 = {};

    var codegen$2 = {};

    var code$5 = {};

    var hasRequiredCode$3;

    function requireCode$3 () {
    	if (hasRequiredCode$3) return code$5;
    	hasRequiredCode$3 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    		class _CodeOrName {
    		}
    		exports._CodeOrName = _CodeOrName;
    		exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    		class Name extends _CodeOrName {
    		    constructor(s) {
    		        super();
    		        if (!exports.IDENTIFIER.test(s))
    		            throw new Error("CodeGen: name must be a valid identifier");
    		        this.str = s;
    		    }
    		    toString() {
    		        return this.str;
    		    }
    		    emptyStr() {
    		        return false;
    		    }
    		    get names() {
    		        return { [this.str]: 1 };
    		    }
    		}
    		exports.Name = Name;
    		class _Code extends _CodeOrName {
    		    constructor(code) {
    		        super();
    		        this._items = typeof code === "string" ? [code] : code;
    		    }
    		    toString() {
    		        return this.str;
    		    }
    		    emptyStr() {
    		        if (this._items.length > 1)
    		            return false;
    		        const item = this._items[0];
    		        return item === "" || item === '""';
    		    }
    		    get str() {
    		        var _a;
    		        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
    		    }
    		    get names() {
    		        var _a;
    		        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
    		            if (c instanceof Name)
    		                names[c.str] = (names[c.str] || 0) + 1;
    		            return names;
    		        }, {})));
    		    }
    		}
    		exports._Code = _Code;
    		exports.nil = new _Code("");
    		function _(strs, ...args) {
    		    const code = [strs[0]];
    		    let i = 0;
    		    while (i < args.length) {
    		        addCodeArg(code, args[i]);
    		        code.push(strs[++i]);
    		    }
    		    return new _Code(code);
    		}
    		exports._ = _;
    		const plus = new _Code("+");
    		function str(strs, ...args) {
    		    const expr = [safeStringify(strs[0])];
    		    let i = 0;
    		    while (i < args.length) {
    		        expr.push(plus);
    		        addCodeArg(expr, args[i]);
    		        expr.push(plus, safeStringify(strs[++i]));
    		    }
    		    optimize(expr);
    		    return new _Code(expr);
    		}
    		exports.str = str;
    		function addCodeArg(code, arg) {
    		    if (arg instanceof _Code)
    		        code.push(...arg._items);
    		    else if (arg instanceof Name)
    		        code.push(arg);
    		    else
    		        code.push(interpolate(arg));
    		}
    		exports.addCodeArg = addCodeArg;
    		function optimize(expr) {
    		    let i = 1;
    		    while (i < expr.length - 1) {
    		        if (expr[i] === plus) {
    		            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
    		            if (res !== undefined) {
    		                expr.splice(i - 1, 3, res);
    		                continue;
    		            }
    		            expr[i++] = "+";
    		        }
    		        i++;
    		    }
    		}
    		function mergeExprItems(a, b) {
    		    if (b === '""')
    		        return a;
    		    if (a === '""')
    		        return b;
    		    if (typeof a == "string") {
    		        if (b instanceof Name || a[a.length - 1] !== '"')
    		            return;
    		        if (typeof b != "string")
    		            return `${a.slice(0, -1)}${b}"`;
    		        if (b[0] === '"')
    		            return a.slice(0, -1) + b.slice(1);
    		        return;
    		    }
    		    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
    		        return `"${a}${b.slice(1)}`;
    		    return;
    		}
    		function strConcat(c1, c2) {
    		    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
    		}
    		exports.strConcat = strConcat;
    		// TODO do not allow arrays here
    		function interpolate(x) {
    		    return typeof x == "number" || typeof x == "boolean" || x === null
    		        ? x
    		        : safeStringify(Array.isArray(x) ? x.join(",") : x);
    		}
    		function stringify(x) {
    		    return new _Code(safeStringify(x));
    		}
    		exports.stringify = stringify;
    		function safeStringify(x) {
    		    return JSON.stringify(x)
    		        .replace(/\u2028/g, "\\u2028")
    		        .replace(/\u2029/g, "\\u2029");
    		}
    		exports.safeStringify = safeStringify;
    		function getProperty(key) {
    		    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
    		}
    		exports.getProperty = getProperty;
    		//Does best effort to format the name properly
    		function getEsmExportName(key) {
    		    if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
    		        return new _Code(`${key}`);
    		    }
    		    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    		}
    		exports.getEsmExportName = getEsmExportName;
    		function regexpCode(rx) {
    		    return new _Code(rx.toString());
    		}
    		exports.regexpCode = regexpCode;
    		
    } (code$5));
    	return code$5;
    }

    var scope$2 = {};

    var hasRequiredScope$1;

    function requireScope$1 () {
    	if (hasRequiredScope$1) return scope$2;
    	hasRequiredScope$1 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    		const code_1 = requireCode$3();
    		class ValueError extends Error {
    		    constructor(name) {
    		        super(`CodeGen: "code" for ${name} not defined`);
    		        this.value = name.value;
    		    }
    		}
    		var UsedValueState;
    		(function (UsedValueState) {
    		    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    		    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
    		})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    		exports.varKinds = {
    		    const: new code_1.Name("const"),
    		    let: new code_1.Name("let"),
    		    var: new code_1.Name("var"),
    		};
    		class Scope {
    		    constructor({ prefixes, parent } = {}) {
    		        this._names = {};
    		        this._prefixes = prefixes;
    		        this._parent = parent;
    		    }
    		    toName(nameOrPrefix) {
    		        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    		    }
    		    name(prefix) {
    		        return new code_1.Name(this._newName(prefix));
    		    }
    		    _newName(prefix) {
    		        const ng = this._names[prefix] || this._nameGroup(prefix);
    		        return `${prefix}${ng.index++}`;
    		    }
    		    _nameGroup(prefix) {
    		        var _a, _b;
    		        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
    		            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
    		        }
    		        return (this._names[prefix] = { prefix, index: 0 });
    		    }
    		}
    		exports.Scope = Scope;
    		class ValueScopeName extends code_1.Name {
    		    constructor(prefix, nameStr) {
    		        super(nameStr);
    		        this.prefix = prefix;
    		    }
    		    setValue(value, { property, itemIndex }) {
    		        this.value = value;
    		        this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
    		    }
    		}
    		exports.ValueScopeName = ValueScopeName;
    		const line = (0, code_1._) `\n`;
    		class ValueScope extends Scope {
    		    constructor(opts) {
    		        super(opts);
    		        this._values = {};
    		        this._scope = opts.scope;
    		        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    		    }
    		    get() {
    		        return this._scope;
    		    }
    		    name(prefix) {
    		        return new ValueScopeName(prefix, this._newName(prefix));
    		    }
    		    value(nameOrPrefix, value) {
    		        var _a;
    		        if (value.ref === undefined)
    		            throw new Error("CodeGen: ref must be passed in value");
    		        const name = this.toName(nameOrPrefix);
    		        const { prefix } = name;
    		        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
    		        let vs = this._values[prefix];
    		        if (vs) {
    		            const _name = vs.get(valueKey);
    		            if (_name)
    		                return _name;
    		        }
    		        else {
    		            vs = this._values[prefix] = new Map();
    		        }
    		        vs.set(valueKey, name);
    		        const s = this._scope[prefix] || (this._scope[prefix] = []);
    		        const itemIndex = s.length;
    		        s[itemIndex] = value.ref;
    		        name.setValue(value, { property: prefix, itemIndex });
    		        return name;
    		    }
    		    getValue(prefix, keyOrRef) {
    		        const vs = this._values[prefix];
    		        if (!vs)
    		            return;
    		        return vs.get(keyOrRef);
    		    }
    		    scopeRefs(scopeName, values = this._values) {
    		        return this._reduceValues(values, (name) => {
    		            if (name.scopePath === undefined)
    		                throw new Error(`CodeGen: name "${name}" has no value`);
    		            return (0, code_1._) `${scopeName}${name.scopePath}`;
    		        });
    		    }
    		    scopeCode(values = this._values, usedValues, getCode) {
    		        return this._reduceValues(values, (name) => {
    		            if (name.value === undefined)
    		                throw new Error(`CodeGen: name "${name}" has no value`);
    		            return name.value.code;
    		        }, usedValues, getCode);
    		    }
    		    _reduceValues(values, valueCode, usedValues = {}, getCode) {
    		        let code = code_1.nil;
    		        for (const prefix in values) {
    		            const vs = values[prefix];
    		            if (!vs)
    		                continue;
    		            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
    		            vs.forEach((name) => {
    		                if (nameSet.has(name))
    		                    return;
    		                nameSet.set(name, UsedValueState.Started);
    		                let c = valueCode(name);
    		                if (c) {
    		                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
    		                    code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
    		                }
    		                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
    		                    code = (0, code_1._) `${code}${c}${this.opts._n}`;
    		                }
    		                else {
    		                    throw new ValueError(name);
    		                }
    		                nameSet.set(name, UsedValueState.Completed);
    		            });
    		        }
    		        return code;
    		    }
    		}
    		exports.ValueScope = ValueScope;
    		
    } (scope$2));
    	return scope$2;
    }

    var hasRequiredCodegen$2;

    function requireCodegen$2 () {
    	if (hasRequiredCodegen$2) return codegen$2;
    	hasRequiredCodegen$2 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    		const code_1 = requireCode$3();
    		const scope_1 = requireScope$1();
    		var code_2 = requireCode$3();
    		Object.defineProperty(exports, "_", { enumerable: true, get: function () { return code_2._; } });
    		Object.defineProperty(exports, "str", { enumerable: true, get: function () { return code_2.str; } });
    		Object.defineProperty(exports, "strConcat", { enumerable: true, get: function () { return code_2.strConcat; } });
    		Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return code_2.nil; } });
    		Object.defineProperty(exports, "getProperty", { enumerable: true, get: function () { return code_2.getProperty; } });
    		Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return code_2.stringify; } });
    		Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function () { return code_2.regexpCode; } });
    		Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return code_2.Name; } });
    		var scope_2 = requireScope$1();
    		Object.defineProperty(exports, "Scope", { enumerable: true, get: function () { return scope_2.Scope; } });
    		Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function () { return scope_2.ValueScope; } });
    		Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });
    		Object.defineProperty(exports, "varKinds", { enumerable: true, get: function () { return scope_2.varKinds; } });
    		exports.operators = {
    		    GT: new code_1._Code(">"),
    		    GTE: new code_1._Code(">="),
    		    LT: new code_1._Code("<"),
    		    LTE: new code_1._Code("<="),
    		    EQ: new code_1._Code("==="),
    		    NEQ: new code_1._Code("!=="),
    		    NOT: new code_1._Code("!"),
    		    OR: new code_1._Code("||"),
    		    AND: new code_1._Code("&&"),
    		    ADD: new code_1._Code("+"),
    		};
    		class Node {
    		    optimizeNodes() {
    		        return this;
    		    }
    		    optimizeNames(_names, _constants) {
    		        return this;
    		    }
    		}
    		class Def extends Node {
    		    constructor(varKind, name, rhs) {
    		        super();
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.rhs = rhs;
    		    }
    		    render({ es5, _n }) {
    		        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
    		        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
    		        return `${varKind} ${this.name}${rhs};` + _n;
    		    }
    		    optimizeNames(names, constants) {
    		        if (!names[this.name.str])
    		            return;
    		        if (this.rhs)
    		            this.rhs = optimizeExpr(this.rhs, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    		    }
    		}
    		class Assign extends Node {
    		    constructor(lhs, rhs, sideEffects) {
    		        super();
    		        this.lhs = lhs;
    		        this.rhs = rhs;
    		        this.sideEffects = sideEffects;
    		    }
    		    render({ _n }) {
    		        return `${this.lhs} = ${this.rhs};` + _n;
    		    }
    		    optimizeNames(names, constants) {
    		        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
    		            return;
    		        this.rhs = optimizeExpr(this.rhs, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
    		        return addExprNames(names, this.rhs);
    		    }
    		}
    		class AssignOp extends Assign {
    		    constructor(lhs, op, rhs, sideEffects) {
    		        super(lhs, rhs, sideEffects);
    		        this.op = op;
    		    }
    		    render({ _n }) {
    		        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    		    }
    		}
    		class Label extends Node {
    		    constructor(label) {
    		        super();
    		        this.label = label;
    		        this.names = {};
    		    }
    		    render({ _n }) {
    		        return `${this.label}:` + _n;
    		    }
    		}
    		class Break extends Node {
    		    constructor(label) {
    		        super();
    		        this.label = label;
    		        this.names = {};
    		    }
    		    render({ _n }) {
    		        const label = this.label ? ` ${this.label}` : "";
    		        return `break${label};` + _n;
    		    }
    		}
    		class Throw extends Node {
    		    constructor(error) {
    		        super();
    		        this.error = error;
    		    }
    		    render({ _n }) {
    		        return `throw ${this.error};` + _n;
    		    }
    		    get names() {
    		        return this.error.names;
    		    }
    		}
    		class AnyCode extends Node {
    		    constructor(code) {
    		        super();
    		        this.code = code;
    		    }
    		    render({ _n }) {
    		        return `${this.code};` + _n;
    		    }
    		    optimizeNodes() {
    		        return `${this.code}` ? this : undefined;
    		    }
    		    optimizeNames(names, constants) {
    		        this.code = optimizeExpr(this.code, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    		    }
    		}
    		class ParentNode extends Node {
    		    constructor(nodes = []) {
    		        super();
    		        this.nodes = nodes;
    		    }
    		    render(opts) {
    		        return this.nodes.reduce((code, n) => code + n.render(opts), "");
    		    }
    		    optimizeNodes() {
    		        const { nodes } = this;
    		        let i = nodes.length;
    		        while (i--) {
    		            const n = nodes[i].optimizeNodes();
    		            if (Array.isArray(n))
    		                nodes.splice(i, 1, ...n);
    		            else if (n)
    		                nodes[i] = n;
    		            else
    		                nodes.splice(i, 1);
    		        }
    		        return nodes.length > 0 ? this : undefined;
    		    }
    		    optimizeNames(names, constants) {
    		        const { nodes } = this;
    		        let i = nodes.length;
    		        while (i--) {
    		            // iterating backwards improves 1-pass optimization
    		            const n = nodes[i];
    		            if (n.optimizeNames(names, constants))
    		                continue;
    		            subtractNames(names, n.names);
    		            nodes.splice(i, 1);
    		        }
    		        return nodes.length > 0 ? this : undefined;
    		    }
    		    get names() {
    		        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    		    }
    		}
    		class BlockNode extends ParentNode {
    		    render(opts) {
    		        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    		    }
    		}
    		class Root extends ParentNode {
    		}
    		class Else extends BlockNode {
    		}
    		Else.kind = "else";
    		class If extends BlockNode {
    		    constructor(condition, nodes) {
    		        super(nodes);
    		        this.condition = condition;
    		    }
    		    render(opts) {
    		        let code = `if(${this.condition})` + super.render(opts);
    		        if (this.else)
    		            code += "else " + this.else.render(opts);
    		        return code;
    		    }
    		    optimizeNodes() {
    		        super.optimizeNodes();
    		        const cond = this.condition;
    		        if (cond === true)
    		            return this.nodes; // else is ignored here
    		        let e = this.else;
    		        if (e) {
    		            const ns = e.optimizeNodes();
    		            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
    		        }
    		        if (e) {
    		            if (cond === false)
    		                return e instanceof If ? e : e.nodes;
    		            if (this.nodes.length)
    		                return this;
    		            return new If(not(cond), e instanceof If ? [e] : e.nodes);
    		        }
    		        if (cond === false || !this.nodes.length)
    		            return undefined;
    		        return this;
    		    }
    		    optimizeNames(names, constants) {
    		        var _a;
    		        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    		        if (!(super.optimizeNames(names, constants) || this.else))
    		            return;
    		        this.condition = optimizeExpr(this.condition, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = super.names;
    		        addExprNames(names, this.condition);
    		        if (this.else)
    		            addNames(names, this.else.names);
    		        return names;
    		    }
    		}
    		If.kind = "if";
    		class For extends BlockNode {
    		}
    		For.kind = "for";
    		class ForLoop extends For {
    		    constructor(iteration) {
    		        super();
    		        this.iteration = iteration;
    		    }
    		    render(opts) {
    		        return `for(${this.iteration})` + super.render(opts);
    		    }
    		    optimizeNames(names, constants) {
    		        if (!super.optimizeNames(names, constants))
    		            return;
    		        this.iteration = optimizeExpr(this.iteration, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return addNames(super.names, this.iteration.names);
    		    }
    		}
    		class ForRange extends For {
    		    constructor(varKind, name, from, to) {
    		        super();
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.from = from;
    		        this.to = to;
    		    }
    		    render(opts) {
    		        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
    		        const { name, from, to } = this;
    		        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    		    }
    		    get names() {
    		        const names = addExprNames(super.names, this.from);
    		        return addExprNames(names, this.to);
    		    }
    		}
    		class ForIter extends For {
    		    constructor(loop, varKind, name, iterable) {
    		        super();
    		        this.loop = loop;
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.iterable = iterable;
    		    }
    		    render(opts) {
    		        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    		    }
    		    optimizeNames(names, constants) {
    		        if (!super.optimizeNames(names, constants))
    		            return;
    		        this.iterable = optimizeExpr(this.iterable, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return addNames(super.names, this.iterable.names);
    		    }
    		}
    		class Func extends BlockNode {
    		    constructor(name, args, async) {
    		        super();
    		        this.name = name;
    		        this.args = args;
    		        this.async = async;
    		    }
    		    render(opts) {
    		        const _async = this.async ? "async " : "";
    		        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    		    }
    		}
    		Func.kind = "func";
    		class Return extends ParentNode {
    		    render(opts) {
    		        return "return " + super.render(opts);
    		    }
    		}
    		Return.kind = "return";
    		class Try extends BlockNode {
    		    render(opts) {
    		        let code = "try" + super.render(opts);
    		        if (this.catch)
    		            code += this.catch.render(opts);
    		        if (this.finally)
    		            code += this.finally.render(opts);
    		        return code;
    		    }
    		    optimizeNodes() {
    		        var _a, _b;
    		        super.optimizeNodes();
    		        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
    		        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
    		        return this;
    		    }
    		    optimizeNames(names, constants) {
    		        var _a, _b;
    		        super.optimizeNames(names, constants);
    		        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    		        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = super.names;
    		        if (this.catch)
    		            addNames(names, this.catch.names);
    		        if (this.finally)
    		            addNames(names, this.finally.names);
    		        return names;
    		    }
    		}
    		class Catch extends BlockNode {
    		    constructor(error) {
    		        super();
    		        this.error = error;
    		    }
    		    render(opts) {
    		        return `catch(${this.error})` + super.render(opts);
    		    }
    		}
    		Catch.kind = "catch";
    		class Finally extends BlockNode {
    		    render(opts) {
    		        return "finally" + super.render(opts);
    		    }
    		}
    		Finally.kind = "finally";
    		class CodeGen {
    		    constructor(extScope, opts = {}) {
    		        this._values = {};
    		        this._blockStarts = [];
    		        this._constants = {};
    		        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
    		        this._extScope = extScope;
    		        this._scope = new scope_1.Scope({ parent: extScope });
    		        this._nodes = [new Root()];
    		    }
    		    toString() {
    		        return this._root.render(this.opts);
    		    }
    		    // returns unique name in the internal scope
    		    name(prefix) {
    		        return this._scope.name(prefix);
    		    }
    		    // reserves unique name in the external scope
    		    scopeName(prefix) {
    		        return this._extScope.name(prefix);
    		    }
    		    // reserves unique name in the external scope and assigns value to it
    		    scopeValue(prefixOrName, value) {
    		        const name = this._extScope.value(prefixOrName, value);
    		        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
    		        vs.add(name);
    		        return name;
    		    }
    		    getScopeValue(prefix, keyOrRef) {
    		        return this._extScope.getValue(prefix, keyOrRef);
    		    }
    		    // return code that assigns values in the external scope to the names that are used internally
    		    // (same names that were returned by gen.scopeName or gen.scopeValue)
    		    scopeRefs(scopeName) {
    		        return this._extScope.scopeRefs(scopeName, this._values);
    		    }
    		    scopeCode() {
    		        return this._extScope.scopeCode(this._values);
    		    }
    		    _def(varKind, nameOrPrefix, rhs, constant) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        if (rhs !== undefined && constant)
    		            this._constants[name.str] = rhs;
    		        this._leafNode(new Def(varKind, name, rhs));
    		        return name;
    		    }
    		    // `const` declaration (`var` in es5 mode)
    		    const(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    		    }
    		    // `let` declaration with optional assignment (`var` in es5 mode)
    		    let(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    		    }
    		    // `var` declaration with optional assignment
    		    var(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    		    }
    		    // assignment code
    		    assign(lhs, rhs, sideEffects) {
    		        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    		    }
    		    // `+=` code
    		    add(lhs, rhs) {
    		        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    		    }
    		    // appends passed SafeExpr to code or executes Block
    		    code(c) {
    		        if (typeof c == "function")
    		            c();
    		        else if (c !== code_1.nil)
    		            this._leafNode(new AnyCode(c));
    		        return this;
    		    }
    		    // returns code for object literal for the passed argument list of key-value pairs
    		    object(...keyValues) {
    		        const code = ["{"];
    		        for (const [key, value] of keyValues) {
    		            if (code.length > 1)
    		                code.push(",");
    		            code.push(key);
    		            if (key !== value || this.opts.es5) {
    		                code.push(":");
    		                (0, code_1.addCodeArg)(code, value);
    		            }
    		        }
    		        code.push("}");
    		        return new code_1._Code(code);
    		    }
    		    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    		    if(condition, thenBody, elseBody) {
    		        this._blockNode(new If(condition));
    		        if (thenBody && elseBody) {
    		            this.code(thenBody).else().code(elseBody).endIf();
    		        }
    		        else if (thenBody) {
    		            this.code(thenBody).endIf();
    		        }
    		        else if (elseBody) {
    		            throw new Error('CodeGen: "else" body without "then" body');
    		        }
    		        return this;
    		    }
    		    // `else if` clause - invalid without `if` or after `else` clauses
    		    elseIf(condition) {
    		        return this._elseNode(new If(condition));
    		    }
    		    // `else` clause - only valid after `if` or `else if` clauses
    		    else() {
    		        return this._elseNode(new Else());
    		    }
    		    // end `if` statement (needed if gen.if was used only with condition)
    		    endIf() {
    		        return this._endBlockNode(If, Else);
    		    }
    		    _for(node, forBody) {
    		        this._blockNode(node);
    		        if (forBody)
    		            this.code(forBody).endFor();
    		        return this;
    		    }
    		    // a generic `for` clause (or statement if `forBody` is passed)
    		    for(iteration, forBody) {
    		        return this._for(new ForLoop(iteration), forBody);
    		    }
    		    // `for` statement for a range of values
    		    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    		    }
    		    // `for-of` statement (in es5 mode replace with a normal for loop)
    		    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        if (this.opts.es5) {
    		            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
    		            return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
    		                this.var(name, (0, code_1._) `${arr}[${i}]`);
    		                forBody(name);
    		            });
    		        }
    		        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    		    }
    		    // `for-in` statement.
    		    // With option `ownProperties` replaced with a `for-of` loop for object keys
    		    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
    		        if (this.opts.ownProperties) {
    		            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
    		        }
    		        const name = this._scope.toName(nameOrPrefix);
    		        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    		    }
    		    // end `for` loop
    		    endFor() {
    		        return this._endBlockNode(For);
    		    }
    		    // `label` statement
    		    label(label) {
    		        return this._leafNode(new Label(label));
    		    }
    		    // `break` statement
    		    break(label) {
    		        return this._leafNode(new Break(label));
    		    }
    		    // `return` statement
    		    return(value) {
    		        const node = new Return();
    		        this._blockNode(node);
    		        this.code(value);
    		        if (node.nodes.length !== 1)
    		            throw new Error('CodeGen: "return" should have one node');
    		        return this._endBlockNode(Return);
    		    }
    		    // `try` statement
    		    try(tryBody, catchCode, finallyCode) {
    		        if (!catchCode && !finallyCode)
    		            throw new Error('CodeGen: "try" without "catch" and "finally"');
    		        const node = new Try();
    		        this._blockNode(node);
    		        this.code(tryBody);
    		        if (catchCode) {
    		            const error = this.name("e");
    		            this._currNode = node.catch = new Catch(error);
    		            catchCode(error);
    		        }
    		        if (finallyCode) {
    		            this._currNode = node.finally = new Finally();
    		            this.code(finallyCode);
    		        }
    		        return this._endBlockNode(Catch, Finally);
    		    }
    		    // `throw` statement
    		    throw(error) {
    		        return this._leafNode(new Throw(error));
    		    }
    		    // start self-balancing block
    		    block(body, nodeCount) {
    		        this._blockStarts.push(this._nodes.length);
    		        if (body)
    		            this.code(body).endBlock(nodeCount);
    		        return this;
    		    }
    		    // end the current self-balancing block
    		    endBlock(nodeCount) {
    		        const len = this._blockStarts.pop();
    		        if (len === undefined)
    		            throw new Error("CodeGen: not in self-balancing block");
    		        const toClose = this._nodes.length - len;
    		        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
    		            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
    		        }
    		        this._nodes.length = len;
    		        return this;
    		    }
    		    // `function` heading (or definition if funcBody is passed)
    		    func(name, args = code_1.nil, async, funcBody) {
    		        this._blockNode(new Func(name, args, async));
    		        if (funcBody)
    		            this.code(funcBody).endFunc();
    		        return this;
    		    }
    		    // end function definition
    		    endFunc() {
    		        return this._endBlockNode(Func);
    		    }
    		    optimize(n = 1) {
    		        while (n-- > 0) {
    		            this._root.optimizeNodes();
    		            this._root.optimizeNames(this._root.names, this._constants);
    		        }
    		    }
    		    _leafNode(node) {
    		        this._currNode.nodes.push(node);
    		        return this;
    		    }
    		    _blockNode(node) {
    		        this._currNode.nodes.push(node);
    		        this._nodes.push(node);
    		    }
    		    _endBlockNode(N1, N2) {
    		        const n = this._currNode;
    		        if (n instanceof N1 || (N2 && n instanceof N2)) {
    		            this._nodes.pop();
    		            return this;
    		        }
    		        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    		    }
    		    _elseNode(node) {
    		        const n = this._currNode;
    		        if (!(n instanceof If)) {
    		            throw new Error('CodeGen: "else" without "if"');
    		        }
    		        this._currNode = n.else = node;
    		        return this;
    		    }
    		    get _root() {
    		        return this._nodes[0];
    		    }
    		    get _currNode() {
    		        const ns = this._nodes;
    		        return ns[ns.length - 1];
    		    }
    		    set _currNode(node) {
    		        const ns = this._nodes;
    		        ns[ns.length - 1] = node;
    		    }
    		}
    		exports.CodeGen = CodeGen;
    		function addNames(names, from) {
    		    for (const n in from)
    		        names[n] = (names[n] || 0) + (from[n] || 0);
    		    return names;
    		}
    		function addExprNames(names, from) {
    		    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    		}
    		function optimizeExpr(expr, names, constants) {
    		    if (expr instanceof code_1.Name)
    		        return replaceName(expr);
    		    if (!canOptimize(expr))
    		        return expr;
    		    return new code_1._Code(expr._items.reduce((items, c) => {
    		        if (c instanceof code_1.Name)
    		            c = replaceName(c);
    		        if (c instanceof code_1._Code)
    		            items.push(...c._items);
    		        else
    		            items.push(c);
    		        return items;
    		    }, []));
    		    function replaceName(n) {
    		        const c = constants[n.str];
    		        if (c === undefined || names[n.str] !== 1)
    		            return n;
    		        delete names[n.str];
    		        return c;
    		    }
    		    function canOptimize(e) {
    		        return (e instanceof code_1._Code &&
    		            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
    		    }
    		}
    		function subtractNames(names, from) {
    		    for (const n in from)
    		        names[n] = (names[n] || 0) - (from[n] || 0);
    		}
    		function not(x) {
    		    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
    		}
    		exports.not = not;
    		const andCode = mappend(exports.operators.AND);
    		// boolean AND (&&) expression with the passed arguments
    		function and(...args) {
    		    return args.reduce(andCode);
    		}
    		exports.and = and;
    		const orCode = mappend(exports.operators.OR);
    		// boolean OR (||) expression with the passed arguments
    		function or(...args) {
    		    return args.reduce(orCode);
    		}
    		exports.or = or;
    		function mappend(op) {
    		    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
    		}
    		function par(x) {
    		    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
    		}
    		
    } (codegen$2));
    	return codegen$2;
    }

    var util$8 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    	const codegen_1 = requireCodegen$2();
    	const code_1 = requireCode$3();
    	// TODO refactor to use Set
    	function toHash(arr) {
    	    const hash = {};
    	    for (const item of arr)
    	        hash[item] = true;
    	    return hash;
    	}
    	exports.toHash = toHash;
    	function alwaysValidSchema(it, schema) {
    	    if (typeof schema == "boolean")
    	        return schema;
    	    if (Object.keys(schema).length === 0)
    	        return true;
    	    checkUnknownRules(it, schema);
    	    return !schemaHasRules(schema, it.self.RULES.all);
    	}
    	exports.alwaysValidSchema = alwaysValidSchema;
    	function checkUnknownRules(it, schema = it.schema) {
    	    const { opts, self } = it;
    	    if (!opts.strictSchema)
    	        return;
    	    if (typeof schema === "boolean")
    	        return;
    	    const rules = self.RULES.keywords;
    	    for (const key in schema) {
    	        if (!rules[key])
    	            checkStrictMode(it, `unknown keyword: "${key}"`);
    	    }
    	}
    	exports.checkUnknownRules = checkUnknownRules;
    	function schemaHasRules(schema, rules) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (rules[key])
    	            return true;
    	    return false;
    	}
    	exports.schemaHasRules = schemaHasRules;
    	function schemaHasRulesButRef(schema, RULES) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (key !== "$ref" && RULES.all[key])
    	            return true;
    	    return false;
    	}
    	exports.schemaHasRulesButRef = schemaHasRulesButRef;
    	function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    	    if (!$data) {
    	        if (typeof schema == "number" || typeof schema == "boolean")
    	            return schema;
    	        if (typeof schema == "string")
    	            return (0, codegen_1._) `${schema}`;
    	    }
    	    return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    	}
    	exports.schemaRefOrVal = schemaRefOrVal;
    	function unescapeFragment(str) {
    	    return unescapeJsonPointer(decodeURIComponent(str));
    	}
    	exports.unescapeFragment = unescapeFragment;
    	function escapeFragment(str) {
    	    return encodeURIComponent(escapeJsonPointer(str));
    	}
    	exports.escapeFragment = escapeFragment;
    	function escapeJsonPointer(str) {
    	    if (typeof str == "number")
    	        return `${str}`;
    	    return str.replace(/~/g, "~0").replace(/\//g, "~1");
    	}
    	exports.escapeJsonPointer = escapeJsonPointer;
    	function unescapeJsonPointer(str) {
    	    return str.replace(/~1/g, "/").replace(/~0/g, "~");
    	}
    	exports.unescapeJsonPointer = unescapeJsonPointer;
    	function eachItem(xs, f) {
    	    if (Array.isArray(xs)) {
    	        for (const x of xs)
    	            f(x);
    	    }
    	    else {
    	        f(xs);
    	    }
    	}
    	exports.eachItem = eachItem;
    	function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
    	    return (gen, from, to, toName) => {
    	        const res = to === undefined
    	            ? from
    	            : to instanceof codegen_1.Name
    	                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
    	                : from instanceof codegen_1.Name
    	                    ? (mergeToName(gen, to, from), from)
    	                    : mergeValues(from, to);
    	        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    	    };
    	}
    	exports.mergeEvaluated = {
    	    props: makeMergeEvaluated({
    	        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
    	            gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
    	        }),
    	        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
    	            if (from === true) {
    	                gen.assign(to, true);
    	            }
    	            else {
    	                gen.assign(to, (0, codegen_1._) `${to} || {}`);
    	                setEvaluated(gen, to, from);
    	            }
    	        }),
    	        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
    	        resultToName: evaluatedPropsToName,
    	    }),
    	    items: makeMergeEvaluated({
    	        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
    	        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
    	        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
    	        resultToName: (gen, items) => gen.var("items", items),
    	    }),
    	};
    	function evaluatedPropsToName(gen, ps) {
    	    if (ps === true)
    	        return gen.var("props", true);
    	    const props = gen.var("props", (0, codegen_1._) `{}`);
    	    if (ps !== undefined)
    	        setEvaluated(gen, props, ps);
    	    return props;
    	}
    	exports.evaluatedPropsToName = evaluatedPropsToName;
    	function setEvaluated(gen, props, ps) {
    	    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
    	}
    	exports.setEvaluated = setEvaluated;
    	const snippets = {};
    	function useFunc(gen, f) {
    	    return gen.scopeValue("func", {
    	        ref: f,
    	        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
    	    });
    	}
    	exports.useFunc = useFunc;
    	var Type;
    	(function (Type) {
    	    Type[Type["Num"] = 0] = "Num";
    	    Type[Type["Str"] = 1] = "Str";
    	})(Type = exports.Type || (exports.Type = {}));
    	function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    	    // let path
    	    if (dataProp instanceof codegen_1.Name) {
    	        const isNumber = dataPropType === Type.Num;
    	        return jsPropertySyntax
    	            ? isNumber
    	                ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
    	                : (0, codegen_1._) `"['" + ${dataProp} + "']"`
    	            : isNumber
    	                ? (0, codegen_1._) `"/" + ${dataProp}`
    	                : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    	    }
    	    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    	}
    	exports.getErrorPath = getErrorPath;
    	function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    	    if (!mode)
    	        return;
    	    msg = `strict mode: ${msg}`;
    	    if (mode === true)
    	        throw new Error(msg);
    	    it.self.logger.warn(msg);
    	}
    	exports.checkStrictMode = checkStrictMode;
    	
    } (util$8));

    var names$3 = {};

    var hasRequiredNames$1;

    function requireNames$1 () {
    	if (hasRequiredNames$1) return names$3;
    	hasRequiredNames$1 = 1;
    	Object.defineProperty(names$3, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$2();
    	const names = {
    	    // validation function arguments
    	    data: new codegen_1.Name("data"),
    	    // args passed from referencing schema
    	    valCxt: new codegen_1.Name("valCxt"),
    	    instancePath: new codegen_1.Name("instancePath"),
    	    parentData: new codegen_1.Name("parentData"),
    	    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    	    rootData: new codegen_1.Name("rootData"),
    	    dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
    	    // function scoped variables
    	    vErrors: new codegen_1.Name("vErrors"),
    	    errors: new codegen_1.Name("errors"),
    	    this: new codegen_1.Name("this"),
    	    // "globals"
    	    self: new codegen_1.Name("self"),
    	    scope: new codegen_1.Name("scope"),
    	    // JTD serialize/parse name for JSON string and position
    	    json: new codegen_1.Name("json"),
    	    jsonPos: new codegen_1.Name("jsonPos"),
    	    jsonLen: new codegen_1.Name("jsonLen"),
    	    jsonPart: new codegen_1.Name("jsonPart"),
    	};
    	names$3.default = names;
    	
    	return names$3;
    }

    var hasRequiredErrors$2;

    function requireErrors$2 () {
    	if (hasRequiredErrors$2) return errors$2;
    	hasRequiredErrors$2 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    		const codegen_1 = requireCodegen$2();
    		const util_1 = util$8;
    		const names_1 = requireNames$1();
    		exports.keywordError = {
    		    message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
    		};
    		exports.keyword$DataError = {
    		    message: ({ keyword, schemaType }) => schemaType
    		        ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
    		        : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
    		};
    		function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    		    const { it } = cxt;
    		    const { gen, compositeRule, allErrors } = it;
    		    const errObj = errorObjectCode(cxt, error, errorPaths);
    		    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
    		        addError(gen, errObj);
    		    }
    		    else {
    		        returnErrors(it, (0, codegen_1._) `[${errObj}]`);
    		    }
    		}
    		exports.reportError = reportError;
    		function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    		    const { it } = cxt;
    		    const { gen, compositeRule, allErrors } = it;
    		    const errObj = errorObjectCode(cxt, error, errorPaths);
    		    addError(gen, errObj);
    		    if (!(compositeRule || allErrors)) {
    		        returnErrors(it, names_1.default.vErrors);
    		    }
    		}
    		exports.reportExtraError = reportExtraError;
    		function resetErrorsCount(gen, errsCount) {
    		    gen.assign(names_1.default.errors, errsCount);
    		    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    		}
    		exports.resetErrorsCount = resetErrorsCount;
    		function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
    		    /* istanbul ignore if */
    		    if (errsCount === undefined)
    		        throw new Error("ajv implementation error");
    		    const err = gen.name("err");
    		    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
    		        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
    		        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
    		        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
    		        if (it.opts.verbose) {
    		            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
    		            gen.assign((0, codegen_1._) `${err}.data`, data);
    		        }
    		    });
    		}
    		exports.extendErrors = extendErrors;
    		function addError(gen, errObj) {
    		    const err = gen.const("err", errObj);
    		    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
    		    gen.code((0, codegen_1._) `${names_1.default.errors}++`);
    		}
    		function returnErrors(it, errs) {
    		    const { gen, validateName, schemaEnv } = it;
    		    if (schemaEnv.$async) {
    		        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
    		    }
    		    else {
    		        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
    		        gen.return(false);
    		    }
    		}
    		const E = {
    		    keyword: new codegen_1.Name("keyword"),
    		    schemaPath: new codegen_1.Name("schemaPath"),
    		    params: new codegen_1.Name("params"),
    		    propertyName: new codegen_1.Name("propertyName"),
    		    message: new codegen_1.Name("message"),
    		    schema: new codegen_1.Name("schema"),
    		    parentSchema: new codegen_1.Name("parentSchema"),
    		};
    		function errorObjectCode(cxt, error, errorPaths) {
    		    const { createErrors } = cxt.it;
    		    if (createErrors === false)
    		        return (0, codegen_1._) `{}`;
    		    return errorObject(cxt, error, errorPaths);
    		}
    		function errorObject(cxt, error, errorPaths = {}) {
    		    const { gen, it } = cxt;
    		    const keyValues = [
    		        errorInstancePath(it, errorPaths),
    		        errorSchemaPath(cxt, errorPaths),
    		    ];
    		    extraErrorProps(cxt, error, keyValues);
    		    return gen.object(...keyValues);
    		}
    		function errorInstancePath({ errorPath }, { instancePath }) {
    		    const instPath = instancePath
    		        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
    		        : errorPath;
    		    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    		}
    		function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    		    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
    		    if (schemaPath) {
    		        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    		    }
    		    return [E.schemaPath, schPath];
    		}
    		function extraErrorProps(cxt, { params, message }, keyValues) {
    		    const { keyword, data, schemaValue, it } = cxt;
    		    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    		    keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
    		    if (opts.messages) {
    		        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    		    }
    		    if (opts.verbose) {
    		        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    		    }
    		    if (propertyName)
    		        keyValues.push([E.propertyName, propertyName]);
    		}
    		
    } (errors$2));
    	return errors$2;
    }

    var hasRequiredBoolSchema$2;

    function requireBoolSchema$2 () {
    	if (hasRequiredBoolSchema$2) return boolSchema$2;
    	hasRequiredBoolSchema$2 = 1;
    	Object.defineProperty(boolSchema$2, "__esModule", { value: true });
    	boolSchema$2.boolOrEmptySchema = boolSchema$2.topBoolOrEmptySchema = void 0;
    	const errors_1 = requireErrors$2();
    	const codegen_1 = requireCodegen$2();
    	const names_1 = requireNames$1();
    	const boolError = {
    	    message: "boolean schema is false",
    	};
    	function topBoolOrEmptySchema(it) {
    	    const { gen, schema, validateName } = it;
    	    if (schema === false) {
    	        falseSchemaError(it, false);
    	    }
    	    else if (typeof schema == "object" && schema.$async === true) {
    	        gen.return(names_1.default.data);
    	    }
    	    else {
    	        gen.assign((0, codegen_1._) `${validateName}.errors`, null);
    	        gen.return(true);
    	    }
    	}
    	boolSchema$2.topBoolOrEmptySchema = topBoolOrEmptySchema;
    	function boolOrEmptySchema(it, valid) {
    	    const { gen, schema } = it;
    	    if (schema === false) {
    	        gen.var(valid, false); // TODO var
    	        falseSchemaError(it);
    	    }
    	    else {
    	        gen.var(valid, true); // TODO var
    	    }
    	}
    	boolSchema$2.boolOrEmptySchema = boolOrEmptySchema;
    	function falseSchemaError(it, overrideAllErrors) {
    	    const { gen, data } = it;
    	    // TODO maybe some other interface should be used for non-keyword validation errors...
    	    const cxt = {
    	        gen,
    	        keyword: "false schema",
    	        data,
    	        schema: false,
    	        schemaCode: false,
    	        schemaValue: false,
    	        params: {},
    	        it,
    	    };
    	    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
    	}
    	
    	return boolSchema$2;
    }

    var dataType$2 = {};

    var rules$2 = {};

    Object.defineProperty(rules$2, "__esModule", { value: true });
    rules$2.getRules = rules$2.isJSONType = void 0;
    const _jsonTypes$1 = ["string", "number", "integer", "boolean", "null", "object", "array"];
    const jsonTypes$1 = new Set(_jsonTypes$1);
    function isJSONType$1(x) {
        return typeof x == "string" && jsonTypes$1.has(x);
    }
    rules$2.isJSONType = isJSONType$1;
    function getRules$1() {
        const groups = {
            number: { type: "number", rules: [] },
            string: { type: "string", rules: [] },
            array: { type: "array", rules: [] },
            object: { type: "object", rules: [] },
        };
        return {
            types: { ...groups, integer: true, boolean: true, null: true },
            rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
            post: { rules: [] },
            all: {},
            keywords: {},
        };
    }
    rules$2.getRules = getRules$1;

    var applicability$2 = {};

    var hasRequiredApplicability$2;

    function requireApplicability$2 () {
    	if (hasRequiredApplicability$2) return applicability$2;
    	hasRequiredApplicability$2 = 1;
    	Object.defineProperty(applicability$2, "__esModule", { value: true });
    	applicability$2.shouldUseRule = applicability$2.shouldUseGroup = applicability$2.schemaHasRulesForType = void 0;
    	function schemaHasRulesForType({ schema, self }, type) {
    	    const group = self.RULES.types[type];
    	    return group && group !== true && shouldUseGroup(schema, group);
    	}
    	applicability$2.schemaHasRulesForType = schemaHasRulesForType;
    	function shouldUseGroup(schema, group) {
    	    return group.rules.some((rule) => shouldUseRule(schema, rule));
    	}
    	applicability$2.shouldUseGroup = shouldUseGroup;
    	function shouldUseRule(schema, rule) {
    	    var _a;
    	    return (schema[rule.keyword] !== undefined ||
    	        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
    	}
    	applicability$2.shouldUseRule = shouldUseRule;
    	
    	return applicability$2;
    }

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    	const rules_1 = rules$2;
    	const applicability_1 = requireApplicability$2();
    	const errors_1 = requireErrors$2();
    	const codegen_1 = requireCodegen$2();
    	const util_1 = util$8;
    	var DataType;
    	(function (DataType) {
    	    DataType[DataType["Correct"] = 0] = "Correct";
    	    DataType[DataType["Wrong"] = 1] = "Wrong";
    	})(DataType = exports.DataType || (exports.DataType = {}));
    	function getSchemaTypes(schema) {
    	    const types = getJSONTypes(schema.type);
    	    const hasNull = types.includes("null");
    	    if (hasNull) {
    	        if (schema.nullable === false)
    	            throw new Error("type: null contradicts nullable: false");
    	    }
    	    else {
    	        if (!types.length && schema.nullable !== undefined) {
    	            throw new Error('"nullable" cannot be used without "type"');
    	        }
    	        if (schema.nullable === true)
    	            types.push("null");
    	    }
    	    return types;
    	}
    	exports.getSchemaTypes = getSchemaTypes;
    	function getJSONTypes(ts) {
    	    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    	    if (types.every(rules_1.isJSONType))
    	        return types;
    	    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    	}
    	exports.getJSONTypes = getJSONTypes;
    	function coerceAndCheckDataType(it, types) {
    	    const { gen, data, opts } = it;
    	    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    	    const checkTypes = types.length > 0 &&
    	        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    	    if (checkTypes) {
    	        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
    	        gen.if(wrongType, () => {
    	            if (coerceTo.length)
    	                coerceData(it, types, coerceTo);
    	            else
    	                reportTypeError(it);
    	        });
    	    }
    	    return checkTypes;
    	}
    	exports.coerceAndCheckDataType = coerceAndCheckDataType;
    	const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
    	function coerceToTypes(types, coerceTypes) {
    	    return coerceTypes
    	        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
    	        : [];
    	}
    	function coerceData(it, types, coerceTo) {
    	    const { gen, data, opts } = it;
    	    const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
    	    const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
    	    if (opts.coerceTypes === "array") {
    	        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
    	            .assign(data, (0, codegen_1._) `${data}[0]`)
    	            .assign(dataType, (0, codegen_1._) `typeof ${data}`)
    	            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
    	    }
    	    gen.if((0, codegen_1._) `${coerced} !== undefined`);
    	    for (const t of coerceTo) {
    	        if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
    	            coerceSpecificType(t);
    	        }
    	    }
    	    gen.else();
    	    reportTypeError(it);
    	    gen.endIf();
    	    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
    	        gen.assign(data, coerced);
    	        assignParentData(it, coerced);
    	    });
    	    function coerceSpecificType(t) {
    	        switch (t) {
    	            case "string":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
    	                    .assign(coerced, (0, codegen_1._) `"" + ${data}`)
    	                    .elseIf((0, codegen_1._) `${data} === null`)
    	                    .assign(coerced, (0, codegen_1._) `""`);
    	                return;
    	            case "number":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
    	                    .assign(coerced, (0, codegen_1._) `+${data}`);
    	                return;
    	            case "integer":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
    	                    .assign(coerced, (0, codegen_1._) `+${data}`);
    	                return;
    	            case "boolean":
    	                gen
    	                    .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
    	                    .assign(coerced, false)
    	                    .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
    	                    .assign(coerced, true);
    	                return;
    	            case "null":
    	                gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
    	                gen.assign(coerced, null);
    	                return;
    	            case "array":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
    	                    .assign(coerced, (0, codegen_1._) `[${data}]`);
    	        }
    	    }
    	}
    	function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    	    // TODO use gen.property
    	    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
    	}
    	function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    	    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    	    let cond;
    	    switch (dataType) {
    	        case "null":
    	            return (0, codegen_1._) `${data} ${EQ} null`;
    	        case "array":
    	            cond = (0, codegen_1._) `Array.isArray(${data})`;
    	            break;
    	        case "object":
    	            cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
    	            break;
    	        case "integer":
    	            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
    	            break;
    	        case "number":
    	            cond = numCond();
    	            break;
    	        default:
    	            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
    	    }
    	    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    	    function numCond(_cond = codegen_1.nil) {
    	        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
    	    }
    	}
    	exports.checkDataType = checkDataType;
    	function checkDataTypes(dataTypes, data, strictNums, correct) {
    	    if (dataTypes.length === 1) {
    	        return checkDataType(dataTypes[0], data, strictNums, correct);
    	    }
    	    let cond;
    	    const types = (0, util_1.toHash)(dataTypes);
    	    if (types.array && types.object) {
    	        const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
    	        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
    	        delete types.null;
    	        delete types.array;
    	        delete types.object;
    	    }
    	    else {
    	        cond = codegen_1.nil;
    	    }
    	    if (types.number)
    	        delete types.integer;
    	    for (const t in types)
    	        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    	    return cond;
    	}
    	exports.checkDataTypes = checkDataTypes;
    	const typeError = {
    	    message: ({ schema }) => `must be ${schema}`,
    	    params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
    	};
    	function reportTypeError(it) {
    	    const cxt = getTypeErrorContext(it);
    	    (0, errors_1.reportError)(cxt, typeError);
    	}
    	exports.reportTypeError = reportTypeError;
    	function getTypeErrorContext(it) {
    	    const { gen, data, schema } = it;
    	    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    	    return {
    	        gen,
    	        keyword: "type",
    	        data,
    	        schema: schema.type,
    	        schemaCode,
    	        schemaValue: schemaCode,
    	        parentSchema: schema,
    	        params: {},
    	        it,
    	    };
    	}
    	
    } (dataType$2));

    var defaults$2 = {};

    var hasRequiredDefaults$2;

    function requireDefaults$2 () {
    	if (hasRequiredDefaults$2) return defaults$2;
    	hasRequiredDefaults$2 = 1;
    	Object.defineProperty(defaults$2, "__esModule", { value: true });
    	defaults$2.assignDefaults = void 0;
    	const codegen_1 = requireCodegen$2();
    	const util_1 = util$8;
    	function assignDefaults(it, ty) {
    	    const { properties, items } = it.schema;
    	    if (ty === "object" && properties) {
    	        for (const key in properties) {
    	            assignDefault(it, key, properties[key].default);
    	        }
    	    }
    	    else if (ty === "array" && Array.isArray(items)) {
    	        items.forEach((sch, i) => assignDefault(it, i, sch.default));
    	    }
    	}
    	defaults$2.assignDefaults = assignDefaults;
    	function assignDefault(it, prop, defaultValue) {
    	    const { gen, compositeRule, data, opts } = it;
    	    if (defaultValue === undefined)
    	        return;
    	    const childData = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(prop)}`;
    	    if (compositeRule) {
    	        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
    	        return;
    	    }
    	    let condition = (0, codegen_1._) `${childData} === undefined`;
    	    if (opts.useDefaults === "empty") {
    	        condition = (0, codegen_1._) `${condition} || ${childData} === null || ${childData} === ""`;
    	    }
    	    // `${childData} === undefined` +
    	    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    	    gen.if(condition, (0, codegen_1._) `${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
    	}
    	
    	return defaults$2;
    }

    var keyword$2 = {};

    var code$4 = {};

    var hasRequiredCode$2;

    function requireCode$2 () {
    	if (hasRequiredCode$2) return code$4;
    	hasRequiredCode$2 = 1;
    	Object.defineProperty(code$4, "__esModule", { value: true });
    	code$4.validateUnion = code$4.validateArray = code$4.usePattern = code$4.callValidateCode = code$4.schemaProperties = code$4.allSchemaProperties = code$4.noPropertyInData = code$4.propertyInData = code$4.isOwnProperty = code$4.hasPropFunc = code$4.reportMissingProp = code$4.checkMissingProp = code$4.checkReportMissingProp = void 0;
    	const codegen_1 = requireCodegen$2();
    	const util_1 = util$8;
    	const names_1 = requireNames$1();
    	const util_2 = util$8;
    	function checkReportMissingProp(cxt, prop) {
    	    const { gen, data, it } = cxt;
    	    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
    	        cxt.setParams({ missingProperty: (0, codegen_1._) `${prop}` }, true);
    	        cxt.error();
    	    });
    	}
    	code$4.checkReportMissingProp = checkReportMissingProp;
    	function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    	    return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._) `${missing} = ${prop}`)));
    	}
    	code$4.checkMissingProp = checkMissingProp;
    	function reportMissingProp(cxt, missing) {
    	    cxt.setParams({ missingProperty: missing }, true);
    	    cxt.error();
    	}
    	code$4.reportMissingProp = reportMissingProp;
    	function hasPropFunc(gen) {
    	    return gen.scopeValue("func", {
    	        // eslint-disable-next-line @typescript-eslint/unbound-method
    	        ref: Object.prototype.hasOwnProperty,
    	        code: (0, codegen_1._) `Object.prototype.hasOwnProperty`,
    	    });
    	}
    	code$4.hasPropFunc = hasPropFunc;
    	function isOwnProperty(gen, data, property) {
    	    return (0, codegen_1._) `${hasPropFunc(gen)}.call(${data}, ${property})`;
    	}
    	code$4.isOwnProperty = isOwnProperty;
    	function propertyInData(gen, data, property, ownProperties) {
    	    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
    	    return ownProperties ? (0, codegen_1._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
    	}
    	code$4.propertyInData = propertyInData;
    	function noPropertyInData(gen, data, property, ownProperties) {
    	    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} === undefined`;
    	    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
    	}
    	code$4.noPropertyInData = noPropertyInData;
    	function allSchemaProperties(schemaMap) {
    	    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    	}
    	code$4.allSchemaProperties = allSchemaProperties;
    	function schemaProperties(it, schemaMap) {
    	    return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
    	}
    	code$4.schemaProperties = schemaProperties;
    	function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    	    const dataAndSchema = passSchema ? (0, codegen_1._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    	    const valCxt = [
    	        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
    	        [names_1.default.parentData, it.parentData],
    	        [names_1.default.parentDataProperty, it.parentDataProperty],
    	        [names_1.default.rootData, names_1.default.rootData],
    	    ];
    	    if (it.opts.dynamicRef)
    	        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
    	    const args = (0, codegen_1._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
    	    return context !== codegen_1.nil ? (0, codegen_1._) `${func}.call(${context}, ${args})` : (0, codegen_1._) `${func}(${args})`;
    	}
    	code$4.callValidateCode = callValidateCode;
    	const newRegExp = (0, codegen_1._) `new RegExp`;
    	function usePattern({ gen, it: { opts } }, pattern) {
    	    const u = opts.unicodeRegExp ? "u" : "";
    	    const { regExp } = opts.code;
    	    const rx = regExp(pattern, u);
    	    return gen.scopeValue("pattern", {
    	        key: rx.toString(),
    	        ref: rx,
    	        code: (0, codegen_1._) `${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`,
    	    });
    	}
    	code$4.usePattern = usePattern;
    	function validateArray(cxt) {
    	    const { gen, data, keyword, it } = cxt;
    	    const valid = gen.name("valid");
    	    if (it.allErrors) {
    	        const validArr = gen.let("valid", true);
    	        validateItems(() => gen.assign(validArr, false));
    	        return validArr;
    	    }
    	    gen.var(valid, true);
    	    validateItems(() => gen.break());
    	    return valid;
    	    function validateItems(notValid) {
    	        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    	        gen.forRange("i", 0, len, (i) => {
    	            cxt.subschema({
    	                keyword,
    	                dataProp: i,
    	                dataPropType: util_1.Type.Num,
    	            }, valid);
    	            gen.if((0, codegen_1.not)(valid), notValid);
    	        });
    	    }
    	}
    	code$4.validateArray = validateArray;
    	function validateUnion(cxt) {
    	    const { gen, schema, keyword, it } = cxt;
    	    /* istanbul ignore if */
    	    if (!Array.isArray(schema))
    	        throw new Error("ajv implementation error");
    	    const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
    	    if (alwaysValid && !it.opts.unevaluated)
    	        return;
    	    const valid = gen.let("valid", false);
    	    const schValid = gen.name("_valid");
    	    gen.block(() => schema.forEach((_sch, i) => {
    	        const schCxt = cxt.subschema({
    	            keyword,
    	            schemaProp: i,
    	            compositeRule: true,
    	        }, schValid);
    	        gen.assign(valid, (0, codegen_1._) `${valid} || ${schValid}`);
    	        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
    	        // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
    	        // or if all properties and items were evaluated (it.props === true && it.items === true)
    	        if (!merged)
    	            gen.if((0, codegen_1.not)(valid));
    	    }));
    	    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    	}
    	code$4.validateUnion = validateUnion;
    	
    	return code$4;
    }

    var hasRequiredKeyword$2;

    function requireKeyword$2 () {
    	if (hasRequiredKeyword$2) return keyword$2;
    	hasRequiredKeyword$2 = 1;
    	Object.defineProperty(keyword$2, "__esModule", { value: true });
    	keyword$2.validateKeywordUsage = keyword$2.validSchemaType = keyword$2.funcKeywordCode = keyword$2.macroKeywordCode = void 0;
    	const codegen_1 = requireCodegen$2();
    	const names_1 = requireNames$1();
    	const code_1 = requireCode$2();
    	const errors_1 = requireErrors$2();
    	function macroKeywordCode(cxt, def) {
    	    const { gen, keyword, schema, parentSchema, it } = cxt;
    	    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    	    const schemaRef = useKeyword(gen, keyword, macroSchema);
    	    if (it.opts.validateSchema !== false)
    	        it.self.validateSchema(macroSchema, true);
    	    const valid = gen.name("valid");
    	    cxt.subschema({
    	        schema: macroSchema,
    	        schemaPath: codegen_1.nil,
    	        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    	        topSchemaRef: schemaRef,
    	        compositeRule: true,
    	    }, valid);
    	    cxt.pass(valid, () => cxt.error(true));
    	}
    	keyword$2.macroKeywordCode = macroKeywordCode;
    	function funcKeywordCode(cxt, def) {
    	    var _a;
    	    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    	    checkAsyncKeyword(it, def);
    	    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    	    const validateRef = useKeyword(gen, keyword, validate);
    	    const valid = gen.let("valid");
    	    cxt.block$data(valid, validateKeyword);
    	    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    	    function validateKeyword() {
    	        if (def.errors === false) {
    	            assignValid();
    	            if (def.modifying)
    	                modifyData(cxt);
    	            reportErrs(() => cxt.error());
    	        }
    	        else {
    	            const ruleErrs = def.async ? validateAsync() : validateSync();
    	            if (def.modifying)
    	                modifyData(cxt);
    	            reportErrs(() => addErrs(cxt, ruleErrs));
    	        }
    	    }
    	    function validateAsync() {
    	        const ruleErrs = gen.let("ruleErrs", null);
    	        gen.try(() => assignValid((0, codegen_1._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._) `${e}.errors`), () => gen.throw(e)));
    	        return ruleErrs;
    	    }
    	    function validateSync() {
    	        const validateErrs = (0, codegen_1._) `${validateRef}.errors`;
    	        gen.assign(validateErrs, null);
    	        assignValid(codegen_1.nil);
    	        return validateErrs;
    	    }
    	    function assignValid(_await = def.async ? (0, codegen_1._) `await ` : codegen_1.nil) {
    	        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
    	        const passSchema = !(("compile" in def && !$data) || def.schema === false);
    	        gen.assign(valid, (0, codegen_1._) `${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    	    }
    	    function reportErrs(errors) {
    	        var _a;
    	        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    	    }
    	}
    	keyword$2.funcKeywordCode = funcKeywordCode;
    	function modifyData(cxt) {
    	    const { gen, data, it } = cxt;
    	    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._) `${it.parentData}[${it.parentDataProperty}]`));
    	}
    	function addErrs(cxt, errs) {
    	    const { gen } = cxt;
    	    gen.if((0, codegen_1._) `Array.isArray(${errs})`, () => {
    	        gen
    	            .assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)
    	            .assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
    	        (0, errors_1.extendErrors)(cxt);
    	    }, () => cxt.error());
    	}
    	function checkAsyncKeyword({ schemaEnv }, def) {
    	    if (def.async && !schemaEnv.$async)
    	        throw new Error("async keyword in sync schema");
    	}
    	function useKeyword(gen, keyword, result) {
    	    if (result === undefined)
    	        throw new Error(`keyword "${keyword}" failed to compile`);
    	    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
    	}
    	function validSchemaType(schema, schemaType, allowUndefined = false) {
    	    // TODO add tests
    	    return (!schemaType.length ||
    	        schemaType.some((st) => st === "array"
    	            ? Array.isArray(schema)
    	            : st === "object"
    	                ? schema && typeof schema == "object" && !Array.isArray(schema)
    	                : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
    	}
    	keyword$2.validSchemaType = validSchemaType;
    	function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    	    /* istanbul ignore if */
    	    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
    	        throw new Error("ajv implementation error");
    	    }
    	    const deps = def.dependencies;
    	    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
    	        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    	    }
    	    if (def.validateSchema) {
    	        const valid = def.validateSchema(schema[keyword]);
    	        if (!valid) {
    	            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
    	                self.errorsText(def.validateSchema.errors);
    	            if (opts.validateSchema === "log")
    	                self.logger.error(msg);
    	            else
    	                throw new Error(msg);
    	        }
    	    }
    	}
    	keyword$2.validateKeywordUsage = validateKeywordUsage;
    	
    	return keyword$2;
    }

    var subschema$2 = {};

    var hasRequiredSubschema$2;

    function requireSubschema$2 () {
    	if (hasRequiredSubschema$2) return subschema$2;
    	hasRequiredSubschema$2 = 1;
    	Object.defineProperty(subschema$2, "__esModule", { value: true });
    	subschema$2.extendSubschemaMode = subschema$2.extendSubschemaData = subschema$2.getSubschema = void 0;
    	const codegen_1 = requireCodegen$2();
    	const util_1 = util$8;
    	function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    	    if (keyword !== undefined && schema !== undefined) {
    	        throw new Error('both "keyword" and "schema" passed, only one allowed');
    	    }
    	    if (keyword !== undefined) {
    	        const sch = it.schema[keyword];
    	        return schemaProp === undefined
    	            ? {
    	                schema: sch,
    	                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
    	                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    	            }
    	            : {
    	                schema: sch[schemaProp],
    	                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
    	                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,
    	            };
    	    }
    	    if (schema !== undefined) {
    	        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
    	            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
    	        }
    	        return {
    	            schema,
    	            schemaPath,
    	            topSchemaRef,
    	            errSchemaPath,
    	        };
    	    }
    	    throw new Error('either "keyword" or "schema" must be passed');
    	}
    	subschema$2.getSubschema = getSubschema;
    	function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    	    if (data !== undefined && dataProp !== undefined) {
    	        throw new Error('both "data" and "dataProp" passed, only one allowed');
    	    }
    	    const { gen } = it;
    	    if (dataProp !== undefined) {
    	        const { errorPath, dataPathArr, opts } = it;
    	        const nextData = gen.let("data", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
    	        dataContextProps(nextData);
    	        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
    	        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;
    	        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    	    }
    	    if (data !== undefined) {
    	        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
    	        dataContextProps(nextData);
    	        if (propertyName !== undefined)
    	            subschema.propertyName = propertyName;
    	        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    	    }
    	    if (dataTypes)
    	        subschema.dataTypes = dataTypes;
    	    function dataContextProps(_nextData) {
    	        subschema.data = _nextData;
    	        subschema.dataLevel = it.dataLevel + 1;
    	        subschema.dataTypes = [];
    	        it.definedProperties = new Set();
    	        subschema.parentData = it.data;
    	        subschema.dataNames = [...it.dataNames, _nextData];
    	    }
    	}
    	subschema$2.extendSubschemaData = extendSubschemaData;
    	function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    	    if (compositeRule !== undefined)
    	        subschema.compositeRule = compositeRule;
    	    if (createErrors !== undefined)
    	        subschema.createErrors = createErrors;
    	    if (allErrors !== undefined)
    	        subschema.allErrors = allErrors;
    	    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    	    subschema.jtdMetadata = jtdMetadata; // not inherited
    	}
    	subschema$2.extendSubschemaMode = extendSubschemaMode;
    	
    	return subschema$2;
    }

    var resolve$5 = {};

    var jsonSchemaTraverseExports$2 = {};
    var jsonSchemaTraverse$2 = {
      get exports(){ return jsonSchemaTraverseExports$2; },
      set exports(v){ jsonSchemaTraverseExports$2 = v; },
    };

    var traverse$3 = jsonSchemaTraverse$2.exports = function (schema, opts, cb) {
      // Legacy support for v0.3.1 and earlier.
      if (typeof opts == 'function') {
        cb = opts;
        opts = {};
      }

      cb = opts.cb || cb;
      var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
      var post = cb.post || function() {};

      _traverse$1(opts, pre, post, schema, '', schema);
    };


    traverse$3.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };

    traverse$3.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };

    traverse$3.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };

    traverse$3.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };


    function _traverse$1(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse$3.arrayKeywords) {
              for (var i=0; i<sch.length; i++)
                _traverse$1(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse$3.propsKeywords) {
            if (sch && typeof sch == 'object') {
              for (var prop in sch)
                _traverse$1(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr$1(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse$3.keywords || (opts.allKeys && !(key in traverse$3.skipKeywords))) {
            _traverse$1(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }


    function escapeJsonPtr$1(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }

    Object.defineProperty(resolve$5, "__esModule", { value: true });
    resolve$5.getSchemaRefs = resolve$5.resolveUrl = resolve$5.normalizeId = resolve$5._getFullPath = resolve$5.getFullPath = resolve$5.inlineRef = void 0;
    const util_1$N = util$8;
    const equal$5 = fastDeepEqual;
    const traverse$2 = jsonSchemaTraverseExports$2;
    // TODO refactor to use keyword definitions
    const SIMPLE_INLINED$1 = new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const",
    ]);
    function inlineRef$1(schema, limit = true) {
        if (typeof schema == "boolean")
            return true;
        if (limit === true)
            return !hasRef$2(schema);
        if (!limit)
            return false;
        return countKeys$1(schema) <= limit;
    }
    resolve$5.inlineRef = inlineRef$1;
    const REF_KEYWORDS$1 = new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor",
    ]);
    function hasRef$2(schema) {
        for (const key in schema) {
            if (REF_KEYWORDS$1.has(key))
                return true;
            const sch = schema[key];
            if (Array.isArray(sch) && sch.some(hasRef$2))
                return true;
            if (typeof sch == "object" && hasRef$2(sch))
                return true;
        }
        return false;
    }
    function countKeys$1(schema) {
        let count = 0;
        for (const key in schema) {
            if (key === "$ref")
                return Infinity;
            count++;
            if (SIMPLE_INLINED$1.has(key))
                continue;
            if (typeof schema[key] == "object") {
                (0, util_1$N.eachItem)(schema[key], (sch) => (count += countKeys$1(sch)));
            }
            if (count === Infinity)
                return Infinity;
        }
        return count;
    }
    function getFullPath$1(resolver, id = "", normalize) {
        if (normalize !== false)
            id = normalizeId$1(id);
        const p = resolver.parse(id);
        return _getFullPath$1(resolver, p);
    }
    resolve$5.getFullPath = getFullPath$1;
    function _getFullPath$1(resolver, p) {
        const serialized = resolver.serialize(p);
        return serialized.split("#")[0] + "#";
    }
    resolve$5._getFullPath = _getFullPath$1;
    const TRAILING_SLASH_HASH$1 = /#\/?$/;
    function normalizeId$1(id) {
        return id ? id.replace(TRAILING_SLASH_HASH$1, "") : "";
    }
    resolve$5.normalizeId = normalizeId$1;
    function resolveUrl$1(resolver, baseId, id) {
        id = normalizeId$1(id);
        return resolver.resolve(baseId, id);
    }
    resolve$5.resolveUrl = resolveUrl$1;
    const ANCHOR$1 = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs$1(schema, baseId) {
        if (typeof schema == "boolean")
            return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId$1(schema[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath$1(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = new Set();
        traverse$2(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
            if (parentJsonPtr === undefined)
                return;
            const fullPath = pathPrefix + jsonPtr;
            let baseId = baseIds[parentJsonPtr];
            if (typeof sch[schemaId] == "string")
                baseId = addRef.call(this, sch[schemaId]);
            addAnchor.call(this, sch.$anchor);
            addAnchor.call(this, sch.$dynamicAnchor);
            baseIds[jsonPtr] = baseId;
            function addRef(ref) {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                const _resolve = this.opts.uriResolver.resolve;
                ref = normalizeId$1(baseId ? _resolve(baseId, ref) : ref);
                if (schemaRefs.has(ref))
                    throw ambiguos(ref);
                schemaRefs.add(ref);
                let schOrRef = this.refs[ref];
                if (typeof schOrRef == "string")
                    schOrRef = this.refs[schOrRef];
                if (typeof schOrRef == "object") {
                    checkAmbiguosRef(sch, schOrRef.schema, ref);
                }
                else if (ref !== normalizeId$1(fullPath)) {
                    if (ref[0] === "#") {
                        checkAmbiguosRef(sch, localRefs[ref], ref);
                        localRefs[ref] = sch;
                    }
                    else {
                        this.refs[ref] = fullPath;
                    }
                }
                return ref;
            }
            function addAnchor(anchor) {
                if (typeof anchor == "string") {
                    if (!ANCHOR$1.test(anchor))
                        throw new Error(`invalid anchor "${anchor}"`);
                    addRef.call(this, `#${anchor}`);
                }
            }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
            if (sch2 !== undefined && !equal$5(sch1, sch2))
                throw ambiguos(ref);
        }
        function ambiguos(ref) {
            return new Error(`reference "${ref}" resolves to more than one schema`);
        }
    }
    resolve$5.getSchemaRefs = getSchemaRefs$1;

    var hasRequiredValidate$2;

    function requireValidate$2 () {
    	if (hasRequiredValidate$2) return validate$5;
    	hasRequiredValidate$2 = 1;
    	Object.defineProperty(validate$5, "__esModule", { value: true });
    	validate$5.getData = validate$5.KeywordCxt = validate$5.validateFunctionCode = void 0;
    	const boolSchema_1 = requireBoolSchema$2();
    	const dataType_1 = dataType$2;
    	const applicability_1 = requireApplicability$2();
    	const dataType_2 = dataType$2;
    	const defaults_1 = requireDefaults$2();
    	const keyword_1 = requireKeyword$2();
    	const subschema_1 = requireSubschema$2();
    	const codegen_1 = requireCodegen$2();
    	const names_1 = requireNames$1();
    	const resolve_1 = resolve$5;
    	const util_1 = util$8;
    	const errors_1 = requireErrors$2();
    	// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
    	function validateFunctionCode(it) {
    	    if (isSchemaObj(it)) {
    	        checkKeywords(it);
    	        if (schemaCxtHasRules(it)) {
    	            topSchemaObjCode(it);
    	            return;
    	        }
    	    }
    	    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    	}
    	validate$5.validateFunctionCode = validateFunctionCode;
    	function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    	    if (opts.code.es5) {
    	        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
    	            gen.code((0, codegen_1._) `"use strict"; ${funcSourceUrl(schema, opts)}`);
    	            destructureValCxtES5(gen, opts);
    	            gen.code(body);
    	        });
    	    }
    	    else {
    	        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    	    }
    	}
    	function destructureValCxt(opts) {
    	    return (0, codegen_1._) `{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._) `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
    	}
    	function destructureValCxtES5(gen, opts) {
    	    gen.if(names_1.default.valCxt, () => {
    	        gen.var(names_1.default.instancePath, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.instancePath}`);
    	        gen.var(names_1.default.parentData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentData}`);
    	        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
    	        gen.var(names_1.default.rootData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.rootData}`);
    	        if (opts.dynamicRef)
    	            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    	    }, () => {
    	        gen.var(names_1.default.instancePath, (0, codegen_1._) `""`);
    	        gen.var(names_1.default.parentData, (0, codegen_1._) `undefined`);
    	        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `undefined`);
    	        gen.var(names_1.default.rootData, names_1.default.data);
    	        if (opts.dynamicRef)
    	            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `{}`);
    	    });
    	}
    	function topSchemaObjCode(it) {
    	    const { schema, opts, gen } = it;
    	    validateFunction(it, () => {
    	        if (opts.$comment && schema.$comment)
    	            commentKeyword(it);
    	        checkNoDefault(it);
    	        gen.let(names_1.default.vErrors, null);
    	        gen.let(names_1.default.errors, 0);
    	        if (opts.unevaluated)
    	            resetEvaluated(it);
    	        typeAndKeywords(it);
    	        returnResults(it);
    	    });
    	    return;
    	}
    	function resetEvaluated(it) {
    	    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    	    const { gen, validateName } = it;
    	    it.evaluated = gen.const("evaluated", (0, codegen_1._) `${validateName}.evaluated`);
    	    gen.if((0, codegen_1._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._) `${it.evaluated}.props`, (0, codegen_1._) `undefined`));
    	    gen.if((0, codegen_1._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._) `${it.evaluated}.items`, (0, codegen_1._) `undefined`));
    	}
    	function funcSourceUrl(schema, opts) {
    	    const schId = typeof schema == "object" && schema[opts.schemaId];
    	    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._) `/*# sourceURL=${schId} */` : codegen_1.nil;
    	}
    	// schema compilation - this function is used recursively to generate code for sub-schemas
    	function subschemaCode(it, valid) {
    	    if (isSchemaObj(it)) {
    	        checkKeywords(it);
    	        if (schemaCxtHasRules(it)) {
    	            subSchemaObjCode(it, valid);
    	            return;
    	        }
    	    }
    	    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
    	}
    	function schemaCxtHasRules({ schema, self }) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (self.RULES.all[key])
    	            return true;
    	    return false;
    	}
    	function isSchemaObj(it) {
    	    return typeof it.schema != "boolean";
    	}
    	function subSchemaObjCode(it, valid) {
    	    const { schema, gen, opts } = it;
    	    if (opts.$comment && schema.$comment)
    	        commentKeyword(it);
    	    updateContext(it);
    	    checkAsyncSchema(it);
    	    const errsCount = gen.const("_errs", names_1.default.errors);
    	    typeAndKeywords(it, errsCount);
    	    // TODO var
    	    gen.var(valid, (0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
    	}
    	function checkKeywords(it) {
    	    (0, util_1.checkUnknownRules)(it);
    	    checkRefsAndKeywords(it);
    	}
    	function typeAndKeywords(it, errsCount) {
    	    if (it.opts.jtd)
    	        return schemaKeywords(it, [], false, errsCount);
    	    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    	    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    	    schemaKeywords(it, types, !checkedTypes, errsCount);
    	}
    	function checkRefsAndKeywords(it) {
    	    const { schema, errSchemaPath, opts, self } = it;
    	    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
    	        self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    	    }
    	}
    	function checkNoDefault(it) {
    	    const { schema, opts } = it;
    	    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
    	        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
    	    }
    	}
    	function updateContext(it) {
    	    const schId = it.schema[it.opts.schemaId];
    	    if (schId)
    	        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    	}
    	function checkAsyncSchema(it) {
    	    if (it.schema.$async && !it.schemaEnv.$async)
    	        throw new Error("async schema in sync schema");
    	}
    	function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    	    const msg = schema.$comment;
    	    if (opts.$comment === true) {
    	        gen.code((0, codegen_1._) `${names_1.default.self}.logger.log(${msg})`);
    	    }
    	    else if (typeof opts.$comment == "function") {
    	        const schemaPath = (0, codegen_1.str) `${errSchemaPath}/$comment`;
    	        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
    	        gen.code((0, codegen_1._) `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    	    }
    	}
    	function returnResults(it) {
    	    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    	    if (schemaEnv.$async) {
    	        // TODO assign unevaluated
    	        gen.if((0, codegen_1._) `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._) `new ${ValidationError}(${names_1.default.vErrors})`));
    	    }
    	    else {
    	        gen.assign((0, codegen_1._) `${validateName}.errors`, names_1.default.vErrors);
    	        if (opts.unevaluated)
    	            assignEvaluated(it);
    	        gen.return((0, codegen_1._) `${names_1.default.errors} === 0`);
    	    }
    	}
    	function assignEvaluated({ gen, evaluated, props, items }) {
    	    if (props instanceof codegen_1.Name)
    	        gen.assign((0, codegen_1._) `${evaluated}.props`, props);
    	    if (items instanceof codegen_1.Name)
    	        gen.assign((0, codegen_1._) `${evaluated}.items`, items);
    	}
    	function schemaKeywords(it, types, typeErrors, errsCount) {
    	    const { gen, schema, data, allErrors, opts, self } = it;
    	    const { RULES } = self;
    	    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
    	        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
    	        return;
    	    }
    	    if (!opts.jtd)
    	        checkStrictTypes(it, types);
    	    gen.block(() => {
    	        for (const group of RULES.rules)
    	            groupKeywords(group);
    	        groupKeywords(RULES.post);
    	    });
    	    function groupKeywords(group) {
    	        if (!(0, applicability_1.shouldUseGroup)(schema, group))
    	            return;
    	        if (group.type) {
    	            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
    	            iterateKeywords(it, group);
    	            if (types.length === 1 && types[0] === group.type && typeErrors) {
    	                gen.else();
    	                (0, dataType_2.reportTypeError)(it);
    	            }
    	            gen.endIf();
    	        }
    	        else {
    	            iterateKeywords(it, group);
    	        }
    	        // TODO make it "ok" call?
    	        if (!allErrors)
    	            gen.if((0, codegen_1._) `${names_1.default.errors} === ${errsCount || 0}`);
    	    }
    	}
    	function iterateKeywords(it, group) {
    	    const { gen, schema, opts: { useDefaults }, } = it;
    	    if (useDefaults)
    	        (0, defaults_1.assignDefaults)(it, group.type);
    	    gen.block(() => {
    	        for (const rule of group.rules) {
    	            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
    	                keywordCode(it, rule.keyword, rule.definition, group.type);
    	            }
    	        }
    	    });
    	}
    	function checkStrictTypes(it, types) {
    	    if (it.schemaEnv.meta || !it.opts.strictTypes)
    	        return;
    	    checkContextTypes(it, types);
    	    if (!it.opts.allowUnionTypes)
    	        checkMultipleTypes(it, types);
    	    checkKeywordTypes(it, it.dataTypes);
    	}
    	function checkContextTypes(it, types) {
    	    if (!types.length)
    	        return;
    	    if (!it.dataTypes.length) {
    	        it.dataTypes = types;
    	        return;
    	    }
    	    types.forEach((t) => {
    	        if (!includesType(it.dataTypes, t)) {
    	            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
    	        }
    	    });
    	    narrowSchemaTypes(it, types);
    	}
    	function checkMultipleTypes(it, ts) {
    	    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
    	        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    	    }
    	}
    	function checkKeywordTypes(it, ts) {
    	    const rules = it.self.RULES.all;
    	    for (const keyword in rules) {
    	        const rule = rules[keyword];
    	        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
    	            const { type } = rule.definition;
    	            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
    	                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
    	            }
    	        }
    	    }
    	}
    	function hasApplicableType(schTs, kwdT) {
    	    return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
    	}
    	function includesType(ts, t) {
    	    return ts.includes(t) || (t === "integer" && ts.includes("number"));
    	}
    	function narrowSchemaTypes(it, withTypes) {
    	    const ts = [];
    	    for (const t of it.dataTypes) {
    	        if (includesType(withTypes, t))
    	            ts.push(t);
    	        else if (withTypes.includes("integer") && t === "number")
    	            ts.push("integer");
    	    }
    	    it.dataTypes = ts;
    	}
    	function strictTypesError(it, msg) {
    	    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    	    msg += ` at "${schemaPath}" (strictTypes)`;
    	    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
    	}
    	class KeywordCxt {
    	    constructor(it, def, keyword) {
    	        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
    	        this.gen = it.gen;
    	        this.allErrors = it.allErrors;
    	        this.keyword = keyword;
    	        this.data = it.data;
    	        this.schema = it.schema[keyword];
    	        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
    	        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
    	        this.schemaType = def.schemaType;
    	        this.parentSchema = it.schema;
    	        this.params = {};
    	        this.it = it;
    	        this.def = def;
    	        if (this.$data) {
    	            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
    	        }
    	        else {
    	            this.schemaCode = this.schemaValue;
    	            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
    	                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
    	            }
    	        }
    	        if ("code" in def ? def.trackErrors : def.errors !== false) {
    	            this.errsCount = it.gen.const("_errs", names_1.default.errors);
    	        }
    	    }
    	    result(condition, successAction, failAction) {
    	        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    	    }
    	    failResult(condition, successAction, failAction) {
    	        this.gen.if(condition);
    	        if (failAction)
    	            failAction();
    	        else
    	            this.error();
    	        if (successAction) {
    	            this.gen.else();
    	            successAction();
    	            if (this.allErrors)
    	                this.gen.endIf();
    	        }
    	        else {
    	            if (this.allErrors)
    	                this.gen.endIf();
    	            else
    	                this.gen.else();
    	        }
    	    }
    	    pass(condition, failAction) {
    	        this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    	    }
    	    fail(condition) {
    	        if (condition === undefined) {
    	            this.error();
    	            if (!this.allErrors)
    	                this.gen.if(false); // this branch will be removed by gen.optimize
    	            return;
    	        }
    	        this.gen.if(condition);
    	        this.error();
    	        if (this.allErrors)
    	            this.gen.endIf();
    	        else
    	            this.gen.else();
    	    }
    	    fail$data(condition) {
    	        if (!this.$data)
    	            return this.fail(condition);
    	        const { schemaCode } = this;
    	        this.fail((0, codegen_1._) `${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    	    }
    	    error(append, errorParams, errorPaths) {
    	        if (errorParams) {
    	            this.setParams(errorParams);
    	            this._error(append, errorPaths);
    	            this.setParams({});
    	            return;
    	        }
    	        this._error(append, errorPaths);
    	    }
    	    _error(append, errorPaths) {
    	        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    	    }
    	    $dataError() {
    	        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    	    }
    	    reset() {
    	        if (this.errsCount === undefined)
    	            throw new Error('add "trackErrors" to keyword definition');
    	        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    	    }
    	    ok(cond) {
    	        if (!this.allErrors)
    	            this.gen.if(cond);
    	    }
    	    setParams(obj, assign) {
    	        if (assign)
    	            Object.assign(this.params, obj);
    	        else
    	            this.params = obj;
    	    }
    	    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
    	        this.gen.block(() => {
    	            this.check$data(valid, $dataValid);
    	            codeBlock();
    	        });
    	    }
    	    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
    	        if (!this.$data)
    	            return;
    	        const { gen, schemaCode, schemaType, def } = this;
    	        gen.if((0, codegen_1.or)((0, codegen_1._) `${schemaCode} === undefined`, $dataValid));
    	        if (valid !== codegen_1.nil)
    	            gen.assign(valid, true);
    	        if (schemaType.length || def.validateSchema) {
    	            gen.elseIf(this.invalid$data());
    	            this.$dataError();
    	            if (valid !== codegen_1.nil)
    	                gen.assign(valid, false);
    	        }
    	        gen.else();
    	    }
    	    invalid$data() {
    	        const { gen, schemaCode, schemaType, def, it } = this;
    	        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
    	        function wrong$DataType() {
    	            if (schemaType.length) {
    	                /* istanbul ignore if */
    	                if (!(schemaCode instanceof codegen_1.Name))
    	                    throw new Error("ajv implementation error");
    	                const st = Array.isArray(schemaType) ? schemaType : [schemaType];
    	                return (0, codegen_1._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
    	            }
    	            return codegen_1.nil;
    	        }
    	        function invalid$DataSchema() {
    	            if (def.validateSchema) {
    	                const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
    	                return (0, codegen_1._) `!${validateSchemaRef}(${schemaCode})`;
    	            }
    	            return codegen_1.nil;
    	        }
    	    }
    	    subschema(appl, valid) {
    	        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
    	        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
    	        (0, subschema_1.extendSubschemaMode)(subschema, appl);
    	        const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
    	        subschemaCode(nextContext, valid);
    	        return nextContext;
    	    }
    	    mergeEvaluated(schemaCxt, toName) {
    	        const { it, gen } = this;
    	        if (!it.opts.unevaluated)
    	            return;
    	        if (it.props !== true && schemaCxt.props !== undefined) {
    	            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
    	        }
    	        if (it.items !== true && schemaCxt.items !== undefined) {
    	            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
    	        }
    	    }
    	    mergeValidEvaluated(schemaCxt, valid) {
    	        const { it, gen } = this;
    	        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
    	            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
    	            return true;
    	        }
    	    }
    	}
    	validate$5.KeywordCxt = KeywordCxt;
    	function keywordCode(it, keyword, def, ruleType) {
    	    const cxt = new KeywordCxt(it, def, keyword);
    	    if ("code" in def) {
    	        def.code(cxt, ruleType);
    	    }
    	    else if (cxt.$data && def.validate) {
    	        (0, keyword_1.funcKeywordCode)(cxt, def);
    	    }
    	    else if ("macro" in def) {
    	        (0, keyword_1.macroKeywordCode)(cxt, def);
    	    }
    	    else if (def.compile || def.validate) {
    	        (0, keyword_1.funcKeywordCode)(cxt, def);
    	    }
    	}
    	const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    	const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    	function getData($data, { dataLevel, dataNames, dataPathArr }) {
    	    let jsonPointer;
    	    let data;
    	    if ($data === "")
    	        return names_1.default.rootData;
    	    if ($data[0] === "/") {
    	        if (!JSON_POINTER.test($data))
    	            throw new Error(`Invalid JSON-pointer: ${$data}`);
    	        jsonPointer = $data;
    	        data = names_1.default.rootData;
    	    }
    	    else {
    	        const matches = RELATIVE_JSON_POINTER.exec($data);
    	        if (!matches)
    	            throw new Error(`Invalid JSON-pointer: ${$data}`);
    	        const up = +matches[1];
    	        jsonPointer = matches[2];
    	        if (jsonPointer === "#") {
    	            if (up >= dataLevel)
    	                throw new Error(errorMsg("property/index", up));
    	            return dataPathArr[dataLevel - up];
    	        }
    	        if (up > dataLevel)
    	            throw new Error(errorMsg("data", up));
    	        data = dataNames[dataLevel - up];
    	        if (!jsonPointer)
    	            return data;
    	    }
    	    let expr = data;
    	    const segments = jsonPointer.split("/");
    	    for (const segment of segments) {
    	        if (segment) {
    	            data = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
    	            expr = (0, codegen_1._) `${expr} && ${data}`;
    	        }
    	    }
    	    return expr;
    	    function errorMsg(pointerType, up) {
    	        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    	    }
    	}
    	validate$5.getData = getData;
    	
    	return validate$5;
    }

    var validation_error$2 = {};

    var hasRequiredValidation_error$2;

    function requireValidation_error$2 () {
    	if (hasRequiredValidation_error$2) return validation_error$2;
    	hasRequiredValidation_error$2 = 1;
    	Object.defineProperty(validation_error$2, "__esModule", { value: true });
    	class ValidationError extends Error {
    	    constructor(errors) {
    	        super("validation failed");
    	        this.errors = errors;
    	        this.ajv = this.validation = true;
    	    }
    	}
    	validation_error$2.default = ValidationError;
    	
    	return validation_error$2;
    }

    var ref_error$2 = {};

    var hasRequiredRef_error$2;

    function requireRef_error$2 () {
    	if (hasRequiredRef_error$2) return ref_error$2;
    	hasRequiredRef_error$2 = 1;
    	Object.defineProperty(ref_error$2, "__esModule", { value: true });
    	const resolve_1 = resolve$5;
    	class MissingRefError extends Error {
    	    constructor(resolver, baseId, ref, msg) {
    	        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
    	        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
    	        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    	    }
    	}
    	ref_error$2.default = MissingRefError;
    	
    	return ref_error$2;
    }

    var compile$2 = {};

    Object.defineProperty(compile$2, "__esModule", { value: true });
    compile$2.resolveSchema = compile$2.getCompilingSchema = compile$2.resolveRef = compile$2.compileSchema = compile$2.SchemaEnv = void 0;
    const codegen_1$U = requireCodegen$2();
    const validation_error_1$1 = requireValidation_error$2();
    const names_1$9 = requireNames$1();
    const resolve_1$1 = resolve$5;
    const util_1$M = util$8;
    const validate_1$3 = requireValidate$2();
    let SchemaEnv$1 = class SchemaEnv {
        constructor(env) {
            var _a;
            this.refs = {};
            this.dynamicAnchors = {};
            let schema;
            if (typeof env.schema == "object")
                schema = env.schema;
            this.schema = env.schema;
            this.schemaId = env.schemaId;
            this.root = env.root || this;
            this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1$1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
            this.schemaPath = env.schemaPath;
            this.localRefs = env.localRefs;
            this.meta = env.meta;
            this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
            this.refs = {};
        }
    };
    compile$2.SchemaEnv = SchemaEnv$1;
    // let codeSize = 0
    // let nodeCount = 0
    // Compiles schema in SchemaEnv
    function compileSchema$1(sch) {
        // TODO refactor - remove compilations
        const _sch = getCompilingSchema$1.call(this, sch);
        if (_sch)
            return _sch;
        const rootId = (0, resolve_1$1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1$U.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
            _ValidationError = gen.scopeValue("Error", {
                ref: validation_error_1$1.default,
                code: (0, codegen_1$U._) `require("ajv/dist/runtime/validation_error").default`,
            });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
            gen,
            allErrors: this.opts.allErrors,
            data: names_1$9.default.data,
            parentData: names_1$9.default.parentData,
            parentDataProperty: names_1$9.default.parentDataProperty,
            dataNames: [names_1$9.default.data],
            dataPathArr: [codegen_1$U.nil],
            dataLevel: 0,
            dataTypes: [],
            definedProperties: new Set(),
            topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
                ? { ref: sch.schema, code: (0, codegen_1$U.stringify)(sch.schema) }
                : { ref: sch.schema }),
            validateName,
            ValidationError: _ValidationError,
            schema: sch.schema,
            schemaEnv: sch,
            rootId,
            baseId: sch.baseId || rootId,
            schemaPath: codegen_1$U.nil,
            errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
            errorPath: (0, codegen_1$U._) `""`,
            opts: this.opts,
            self: this,
        };
        let sourceCode;
        try {
            this._compilations.add(sch);
            (0, validate_1$3.validateFunctionCode)(schemaCxt);
            gen.optimize(this.opts.code.optimize);
            // gen.optimize(1)
            const validateCode = gen.toString();
            sourceCode = `${gen.scopeRefs(names_1$9.default.scope)}return ${validateCode}`;
            // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
            if (this.opts.code.process)
                sourceCode = this.opts.code.process(sourceCode, sch);
            // console.log("\n\n\n *** \n", sourceCode)
            const makeValidate = new Function(`${names_1$9.default.self}`, `${names_1$9.default.scope}`, sourceCode);
            const validate = makeValidate(this, this.scope.get());
            this.scope.value(validateName, { ref: validate });
            validate.errors = null;
            validate.schema = sch.schema;
            validate.schemaEnv = sch;
            if (sch.$async)
                validate.$async = true;
            if (this.opts.code.source === true) {
                validate.source = { validateName, validateCode, scopeValues: gen._values };
            }
            if (this.opts.unevaluated) {
                const { props, items } = schemaCxt;
                validate.evaluated = {
                    props: props instanceof codegen_1$U.Name ? undefined : props,
                    items: items instanceof codegen_1$U.Name ? undefined : items,
                    dynamicProps: props instanceof codegen_1$U.Name,
                    dynamicItems: items instanceof codegen_1$U.Name,
                };
                if (validate.source)
                    validate.source.evaluated = (0, codegen_1$U.stringify)(validate.evaluated);
            }
            sch.validate = validate;
            return sch;
        }
        catch (e) {
            delete sch.validate;
            delete sch.validateName;
            if (sourceCode)
                this.logger.error("Error compiling schema, function code:", sourceCode);
            // console.log("\n\n\n *** \n", sourceCode, this.opts)
            throw e;
        }
        finally {
            this._compilations.delete(sch);
        }
    }
    compile$2.compileSchema = compileSchema$1;
    function resolveRef$2(root, baseId, ref) {
        var _a;
        ref = (0, resolve_1$1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root.refs[ref];
        if (schOrFunc)
            return schOrFunc;
        let _sch = resolve$4.call(this, root, ref);
        if (_sch === undefined) {
            const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
            const { schemaId } = this.opts;
            if (schema)
                _sch = new SchemaEnv$1({ schema, schemaId, root, baseId });
        }
        if (_sch === undefined)
            return;
        return (root.refs[ref] = inlineOrCompile$1.call(this, _sch));
    }
    compile$2.resolveRef = resolveRef$2;
    function inlineOrCompile$1(sch) {
        if ((0, resolve_1$1.inlineRef)(sch.schema, this.opts.inlineRefs))
            return sch.schema;
        return sch.validate ? sch : compileSchema$1.call(this, sch);
    }
    // Index of schema compilation in the currently compiled list
    function getCompilingSchema$1(schEnv) {
        for (const sch of this._compilations) {
            if (sameSchemaEnv$1(sch, schEnv))
                return sch;
        }
    }
    compile$2.getCompilingSchema = getCompilingSchema$1;
    function sameSchemaEnv$1(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    // resolve and compile the references ($ref)
    // TODO returns AnySchemaObject (if the schema can be inlined) or validation function
    function resolve$4(root, // information about the root schema for the current schema
    ref // reference to resolve
    ) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
            ref = sch;
        return sch || this.schemas[ref] || resolveSchema$1.call(this, root, ref);
    }
    // Resolve schema, its root and baseId
    function resolveSchema$1(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
    ref // reference to resolve
    ) {
        const p = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1$1._getFullPath)(this.opts.uriResolver, p);
        let baseId = (0, resolve_1$1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
        // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
        if (Object.keys(root.schema).length > 0 && refPath === baseId) {
            return getJsonPointer$1.call(this, p, root);
        }
        const id = (0, resolve_1$1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
            const sch = resolveSchema$1.call(this, root, schOrRef);
            if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
                return;
            return getJsonPointer$1.call(this, p, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
            return;
        if (!schOrRef.validate)
            compileSchema$1.call(this, schOrRef);
        if (id === (0, resolve_1$1.normalizeId)(ref)) {
            const { schema } = schOrRef;
            const { schemaId } = this.opts;
            const schId = schema[schemaId];
            if (schId)
                baseId = (0, resolve_1$1.resolveUrl)(this.opts.uriResolver, baseId, schId);
            return new SchemaEnv$1({ schema, schemaId, root, baseId });
        }
        return getJsonPointer$1.call(this, p, schOrRef);
    }
    compile$2.resolveSchema = resolveSchema$1;
    const PREVENT_SCOPE_CHANGE$1 = new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions",
    ]);
    function getJsonPointer$1(parsedRef, { baseId, schema, root }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
            return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
            if (typeof schema === "boolean")
                return;
            const partSchema = schema[(0, util_1$M.unescapeFragment)(part)];
            if (partSchema === undefined)
                return;
            schema = partSchema;
            // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
            const schId = typeof schema === "object" && schema[this.opts.schemaId];
            if (!PREVENT_SCOPE_CHANGE$1.has(part) && schId) {
                baseId = (0, resolve_1$1.resolveUrl)(this.opts.uriResolver, baseId, schId);
            }
        }
        let env;
        if (typeof schema != "boolean" && schema.$ref && !(0, util_1$M.schemaHasRulesButRef)(schema, this.RULES)) {
            const $ref = (0, resolve_1$1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
            env = resolveSchema$1.call(this, root, $ref);
        }
        // even though resolution failed we need to return SchemaEnv to throw exception
        // so that compileAsync loads missing schema.
        const { schemaId } = this.opts;
        env = env || new SchemaEnv$1({ schema, schemaId, root, baseId });
        if (env.schema !== env.root.schema)
            return env;
        return undefined;
    }

    var $id$5 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
    var description$2 = "Meta-schema for $data reference (JSON AnySchema extension proposal)";
    var type$6 = "object";
    var required$5 = [
    	"$data"
    ];
    var properties$9 = {
    	$data: {
    		type: "string",
    		anyOf: [
    			{
    				format: "relative-json-pointer"
    			},
    			{
    				format: "json-pointer"
    			}
    		]
    	}
    };
    var additionalProperties$5 = false;
    var require$$9$2 = {
    	$id: $id$5,
    	description: description$2,
    	type: type$6,
    	required: required$5,
    	properties: properties$9,
    	additionalProperties: additionalProperties$5
    };

    var uri$4 = {};

    var uri_allExports = {};
    var uri_all = {
      get exports(){ return uri_allExports; },
      set exports(v){ uri_allExports = v; },
    };

    /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */

    (function (module, exports) {
    	(function (global, factory) {
    		factory(exports) ;
    	}(commonjsGlobal, (function (exports) {
    	function merge() {
    	    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
    	        sets[_key] = arguments[_key];
    	    }

    	    if (sets.length > 1) {
    	        sets[0] = sets[0].slice(0, -1);
    	        var xl = sets.length - 1;
    	        for (var x = 1; x < xl; ++x) {
    	            sets[x] = sets[x].slice(1, -1);
    	        }
    	        sets[xl] = sets[xl].slice(1);
    	        return sets.join('');
    	    } else {
    	        return sets[0];
    	    }
    	}
    	function subexp(str) {
    	    return "(?:" + str + ")";
    	}
    	function typeOf(o) {
    	    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    	}
    	function toUpperCase(str) {
    	    return str.toUpperCase();
    	}
    	function toArray(obj) {
    	    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    	}
    	function assign(target, source) {
    	    var obj = target;
    	    if (source) {
    	        for (var key in source) {
    	            obj[key] = source[key];
    	        }
    	    }
    	    return obj;
    	}

    	function buildExps(isIRI) {
    	    var ALPHA$$ = "[A-Za-z]",
    	        DIGIT$$ = "[0-9]",
    	        HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
    	        PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
    	        //expanded
    	    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
    	        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
    	        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
    	        UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
    	        //subset, excludes bidi control characters
    	    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
    	        //subset
    	    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
    	        subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
    	        subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*");
    	        var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
    	        //relaxed parsing rules
    	    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
    	        H16$ = subexp(HEXDIG$$ + "{1,4}"),
    	        LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
    	        IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
    	        //                           6( h16 ":" ) ls32
    	    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
    	        //                      "::" 5( h16 ":" ) ls32
    	    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
    	        //[               h16 ] "::" 4( h16 ":" ) ls32
    	    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
    	        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    	    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
    	        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    	    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
    	        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    	    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
    	        //[ *4( h16 ":" ) h16 ] "::"              ls32
    	    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
    	        //[ *5( h16 ":" ) h16 ] "::"              h16
    	    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
    	        //[ *6( h16 ":" ) h16 ] "::"
    	    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
    	        ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+");
    	        //RFC 6874, with relaxed parsing rules
    	    subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+");
    	        //RFC 6874
    	    subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*");
    	        var PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]"));
    	        subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+");
    	        subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
    	    return {
    	        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
    	        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    	        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    	        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    	        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    	        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
    	        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
    	        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
    	        UNRESERVED: new RegExp(UNRESERVED$$, "g"),
    	        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
    	        PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
    	        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
    	        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
    	    };
    	}
    	var URI_PROTOCOL = buildExps(false);

    	var IRI_PROTOCOL = buildExps(true);

    	var slicedToArray = function () {
    	  function sliceIterator(arr, i) {
    	    var _arr = [];
    	    var _n = true;
    	    var _d = false;
    	    var _e = undefined;

    	    try {
    	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
    	        _arr.push(_s.value);

    	        if (i && _arr.length === i) break;
    	      }
    	    } catch (err) {
    	      _d = true;
    	      _e = err;
    	    } finally {
    	      try {
    	        if (!_n && _i["return"]) _i["return"]();
    	      } finally {
    	        if (_d) throw _e;
    	      }
    	    }

    	    return _arr;
    	  }

    	  return function (arr, i) {
    	    if (Array.isArray(arr)) {
    	      return arr;
    	    } else if (Symbol.iterator in Object(arr)) {
    	      return sliceIterator(arr, i);
    	    } else {
    	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    	    }
    	  };
    	}();













    	var toConsumableArray = function (arr) {
    	  if (Array.isArray(arr)) {
    	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    	    return arr2;
    	  } else {
    	    return Array.from(arr);
    	  }
    	};

    	/** Highest positive signed 32-bit float value */

    	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    	/** Bootstring parameters */
    	var base = 36;
    	var tMin = 1;
    	var tMax = 26;
    	var skew = 38;
    	var damp = 700;
    	var initialBias = 72;
    	var initialN = 128; // 0x80
    	var delimiter = '-'; // '\x2D'

    	/** Regular expressions */
    	var regexPunycode = /^xn--/;
    	var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    	var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    	/** Error messages */
    	var errors = {
    		'overflow': 'Overflow: input needs wider integers to process',
    		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    		'invalid-input': 'Invalid input'
    	};

    	/** Convenience shortcuts */
    	var baseMinusTMin = base - tMin;
    	var floor = Math.floor;
    	var stringFromCharCode = String.fromCharCode;

    	/*--------------------------------------------------------------------------*/

    	/**
    	 * A generic error utility function.
    	 * @private
    	 * @param {String} type The error type.
    	 * @returns {Error} Throws a `RangeError` with the applicable error message.
    	 */
    	function error$1(type) {
    		throw new RangeError(errors[type]);
    	}

    	/**
    	 * A generic `Array#map` utility function.
    	 * @private
    	 * @param {Array} array The array to iterate over.
    	 * @param {Function} callback The function that gets called for every array
    	 * item.
    	 * @returns {Array} A new array of values returned by the callback function.
    	 */
    	function map(array, fn) {
    		var result = [];
    		var length = array.length;
    		while (length--) {
    			result[length] = fn(array[length]);
    		}
    		return result;
    	}

    	/**
    	 * A simple `Array#map`-like wrapper to work with domain name strings or email
    	 * addresses.
    	 * @private
    	 * @param {String} domain The domain name or email address.
    	 * @param {Function} callback The function that gets called for every
    	 * character.
    	 * @returns {Array} A new string of characters returned by the callback
    	 * function.
    	 */
    	function mapDomain(string, fn) {
    		var parts = string.split('@');
    		var result = '';
    		if (parts.length > 1) {
    			// In email addresses, only the domain name should be punycoded. Leave
    			// the local part (i.e. everything up to `@`) intact.
    			result = parts[0] + '@';
    			string = parts[1];
    		}
    		// Avoid `split(regex)` for IE8 compatibility. See #17.
    		string = string.replace(regexSeparators, '\x2E');
    		var labels = string.split('.');
    		var encoded = map(labels, fn).join('.');
    		return result + encoded;
    	}

    	/**
    	 * Creates an array containing the numeric code points of each Unicode
    	 * character in the string. While JavaScript uses UCS-2 internally,
    	 * this function will convert a pair of surrogate halves (each of which
    	 * UCS-2 exposes as separate characters) into a single code point,
    	 * matching UTF-16.
    	 * @see `punycode.ucs2.encode`
    	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
    	 * @memberOf punycode.ucs2
    	 * @name decode
    	 * @param {String} string The Unicode input string (UCS-2).
    	 * @returns {Array} The new array of code points.
    	 */
    	function ucs2decode(string) {
    		var output = [];
    		var counter = 0;
    		var length = string.length;
    		while (counter < length) {
    			var value = string.charCodeAt(counter++);
    			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
    				// It's a high surrogate, and there is a next character.
    				var extra = string.charCodeAt(counter++);
    				if ((extra & 0xFC00) == 0xDC00) {
    					// Low surrogate.
    					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
    				} else {
    					// It's an unmatched surrogate; only append this code unit, in case the
    					// next code unit is the high surrogate of a surrogate pair.
    					output.push(value);
    					counter--;
    				}
    			} else {
    				output.push(value);
    			}
    		}
    		return output;
    	}

    	/**
    	 * Creates a string based on an array of numeric code points.
    	 * @see `punycode.ucs2.decode`
    	 * @memberOf punycode.ucs2
    	 * @name encode
    	 * @param {Array} codePoints The array of numeric code points.
    	 * @returns {String} The new Unicode string (UCS-2).
    	 */
    	var ucs2encode = function ucs2encode(array) {
    		return String.fromCodePoint.apply(String, toConsumableArray(array));
    	};

    	/**
    	 * Converts a basic code point into a digit/integer.
    	 * @see `digitToBasic()`
    	 * @private
    	 * @param {Number} codePoint The basic numeric code point value.
    	 * @returns {Number} The numeric value of a basic code point (for use in
    	 * representing integers) in the range `0` to `base - 1`, or `base` if
    	 * the code point does not represent a value.
    	 */
    	var basicToDigit = function basicToDigit(codePoint) {
    		if (codePoint - 0x30 < 0x0A) {
    			return codePoint - 0x16;
    		}
    		if (codePoint - 0x41 < 0x1A) {
    			return codePoint - 0x41;
    		}
    		if (codePoint - 0x61 < 0x1A) {
    			return codePoint - 0x61;
    		}
    		return base;
    	};

    	/**
    	 * Converts a digit/integer into a basic code point.
    	 * @see `basicToDigit()`
    	 * @private
    	 * @param {Number} digit The numeric value of a basic code point.
    	 * @returns {Number} The basic code point whose value (when used for
    	 * representing integers) is `digit`, which needs to be in the range
    	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
    	 * used; else, the lowercase form is used. The behavior is undefined
    	 * if `flag` is non-zero and `digit` has no uppercase form.
    	 */
    	var digitToBasic = function digitToBasic(digit, flag) {
    		//  0..25 map to ASCII a..z or A..Z
    		// 26..35 map to ASCII 0..9
    		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    	};

    	/**
    	 * Bias adaptation function as per section 3.4 of RFC 3492.
    	 * https://tools.ietf.org/html/rfc3492#section-3.4
    	 * @private
    	 */
    	var adapt = function adapt(delta, numPoints, firstTime) {
    		var k = 0;
    		delta = firstTime ? floor(delta / damp) : delta >> 1;
    		delta += floor(delta / numPoints);
    		for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
    			delta = floor(delta / baseMinusTMin);
    		}
    		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    	};

    	/**
    	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
    	 * symbols.
    	 * @memberOf punycode
    	 * @param {String} input The Punycode string of ASCII-only symbols.
    	 * @returns {String} The resulting string of Unicode symbols.
    	 */
    	var decode = function decode(input) {
    		// Don't use UCS-2.
    		var output = [];
    		var inputLength = input.length;
    		var i = 0;
    		var n = initialN;
    		var bias = initialBias;

    		// Handle the basic code points: let `basic` be the number of input code
    		// points before the last delimiter, or `0` if there is none, then copy
    		// the first basic code points to the output.

    		var basic = input.lastIndexOf(delimiter);
    		if (basic < 0) {
    			basic = 0;
    		}

    		for (var j = 0; j < basic; ++j) {
    			// if it's not a basic code point
    			if (input.charCodeAt(j) >= 0x80) {
    				error$1('not-basic');
    			}
    			output.push(input.charCodeAt(j));
    		}

    		// Main decoding loop: start just after the last delimiter if any basic code
    		// points were copied; start at the beginning otherwise.

    		for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

    			// `index` is the index of the next character to be consumed.
    			// Decode a generalized variable-length integer into `delta`,
    			// which gets added to `i`. The overflow checking is easier
    			// if we increase `i` as we go, then subtract off its starting
    			// value at the end to obtain `delta`.
    			var oldi = i;
    			for (var w = 1, k = base;; /* no condition */k += base) {

    				if (index >= inputLength) {
    					error$1('invalid-input');
    				}

    				var digit = basicToDigit(input.charCodeAt(index++));

    				if (digit >= base || digit > floor((maxInt - i) / w)) {
    					error$1('overflow');
    				}

    				i += digit * w;
    				var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

    				if (digit < t) {
    					break;
    				}

    				var baseMinusT = base - t;
    				if (w > floor(maxInt / baseMinusT)) {
    					error$1('overflow');
    				}

    				w *= baseMinusT;
    			}

    			var out = output.length + 1;
    			bias = adapt(i - oldi, out, oldi == 0);

    			// `i` was supposed to wrap around from `out` to `0`,
    			// incrementing `n` each time, so we'll fix that now:
    			if (floor(i / out) > maxInt - n) {
    				error$1('overflow');
    			}

    			n += floor(i / out);
    			i %= out;

    			// Insert `n` at position `i` of the output.
    			output.splice(i++, 0, n);
    		}

    		return String.fromCodePoint.apply(String, output);
    	};

    	/**
    	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
    	 * Punycode string of ASCII-only symbols.
    	 * @memberOf punycode
    	 * @param {String} input The string of Unicode symbols.
    	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
    	 */
    	var encode = function encode(input) {
    		var output = [];

    		// Convert the input in UCS-2 to an array of Unicode code points.
    		input = ucs2decode(input);

    		// Cache the length.
    		var inputLength = input.length;

    		// Initialize the state.
    		var n = initialN;
    		var delta = 0;
    		var bias = initialBias;

    		// Handle the basic code points.
    		var _iteratorNormalCompletion = true;
    		var _didIteratorError = false;
    		var _iteratorError = undefined;

    		try {
    			for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    				var _currentValue2 = _step.value;

    				if (_currentValue2 < 0x80) {
    					output.push(stringFromCharCode(_currentValue2));
    				}
    			}
    		} catch (err) {
    			_didIteratorError = true;
    			_iteratorError = err;
    		} finally {
    			try {
    				if (!_iteratorNormalCompletion && _iterator.return) {
    					_iterator.return();
    				}
    			} finally {
    				if (_didIteratorError) {
    					throw _iteratorError;
    				}
    			}
    		}

    		var basicLength = output.length;
    		var handledCPCount = basicLength;

    		// `handledCPCount` is the number of code points that have been handled;
    		// `basicLength` is the number of basic code points.

    		// Finish the basic string with a delimiter unless it's empty.
    		if (basicLength) {
    			output.push(delimiter);
    		}

    		// Main encoding loop:
    		while (handledCPCount < inputLength) {

    			// All non-basic code points < n have been handled already. Find the next
    			// larger one:
    			var m = maxInt;
    			var _iteratorNormalCompletion2 = true;
    			var _didIteratorError2 = false;
    			var _iteratorError2 = undefined;

    			try {
    				for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    					var currentValue = _step2.value;

    					if (currentValue >= n && currentValue < m) {
    						m = currentValue;
    					}
    				}

    				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    				// but guard against overflow.
    			} catch (err) {
    				_didIteratorError2 = true;
    				_iteratorError2 = err;
    			} finally {
    				try {
    					if (!_iteratorNormalCompletion2 && _iterator2.return) {
    						_iterator2.return();
    					}
    				} finally {
    					if (_didIteratorError2) {
    						throw _iteratorError2;
    					}
    				}
    			}

    			var handledCPCountPlusOne = handledCPCount + 1;
    			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
    				error$1('overflow');
    			}

    			delta += (m - n) * handledCPCountPlusOne;
    			n = m;

    			var _iteratorNormalCompletion3 = true;
    			var _didIteratorError3 = false;
    			var _iteratorError3 = undefined;

    			try {
    				for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
    					var _currentValue = _step3.value;

    					if (_currentValue < n && ++delta > maxInt) {
    						error$1('overflow');
    					}
    					if (_currentValue == n) {
    						// Represent delta as a generalized variable-length integer.
    						var q = delta;
    						for (var k = base;; /* no condition */k += base) {
    							var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
    							if (q < t) {
    								break;
    							}
    							var qMinusT = q - t;
    							var baseMinusT = base - t;
    							output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
    							q = floor(qMinusT / baseMinusT);
    						}

    						output.push(stringFromCharCode(digitToBasic(q, 0)));
    						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
    						delta = 0;
    						++handledCPCount;
    					}
    				}
    			} catch (err) {
    				_didIteratorError3 = true;
    				_iteratorError3 = err;
    			} finally {
    				try {
    					if (!_iteratorNormalCompletion3 && _iterator3.return) {
    						_iterator3.return();
    					}
    				} finally {
    					if (_didIteratorError3) {
    						throw _iteratorError3;
    					}
    				}
    			}

    			++delta;
    			++n;
    		}
    		return output.join('');
    	};

    	/**
    	 * Converts a Punycode string representing a domain name or an email address
    	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
    	 * it doesn't matter if you call it on a string that has already been
    	 * converted to Unicode.
    	 * @memberOf punycode
    	 * @param {String} input The Punycoded domain name or email address to
    	 * convert to Unicode.
    	 * @returns {String} The Unicode representation of the given Punycode
    	 * string.
    	 */
    	var toUnicode = function toUnicode(input) {
    		return mapDomain(input, function (string) {
    			return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    		});
    	};

    	/**
    	 * Converts a Unicode string representing a domain name or an email address to
    	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
    	 * i.e. it doesn't matter if you call it with a domain that's already in
    	 * ASCII.
    	 * @memberOf punycode
    	 * @param {String} input The domain name or email address to convert, as a
    	 * Unicode string.
    	 * @returns {String} The Punycode representation of the given domain name or
    	 * email address.
    	 */
    	var toASCII = function toASCII(input) {
    		return mapDomain(input, function (string) {
    			return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    		});
    	};

    	/*--------------------------------------------------------------------------*/

    	/** Define the public API */
    	var punycode = {
    		/**
    	  * A string representing the current Punycode.js version number.
    	  * @memberOf punycode
    	  * @type String
    	  */
    		'version': '2.1.0',
    		/**
    	  * An object of methods to convert from JavaScript's internal character
    	  * representation (UCS-2) to Unicode code points, and back.
    	  * @see <https://mathiasbynens.be/notes/javascript-encoding>
    	  * @memberOf punycode
    	  * @type Object
    	  */
    		'ucs2': {
    			'decode': ucs2decode,
    			'encode': ucs2encode
    		},
    		'decode': decode,
    		'encode': encode,
    		'toASCII': toASCII,
    		'toUnicode': toUnicode
    	};

    	/**
    	 * URI.js
    	 *
    	 * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
    	 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
    	 * @see http://github.com/garycourt/uri-js
    	 */
    	/**
    	 * Copyright 2011 Gary Court. All rights reserved.
    	 *
    	 * Redistribution and use in source and binary forms, with or without modification, are
    	 * permitted provided that the following conditions are met:
    	 *
    	 *    1. Redistributions of source code must retain the above copyright notice, this list of
    	 *       conditions and the following disclaimer.
    	 *
    	 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
    	 *       of conditions and the following disclaimer in the documentation and/or other materials
    	 *       provided with the distribution.
    	 *
    	 * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
    	 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
    	 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
    	 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    	 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
    	 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
    	 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    	 *
    	 * The views and conclusions contained in the software and documentation are those of the
    	 * authors and should not be interpreted as representing official policies, either expressed
    	 * or implied, of Gary Court.
    	 */
    	var SCHEMES = {};
    	function pctEncChar(chr) {
    	    var c = chr.charCodeAt(0);
    	    var e = void 0;
    	    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
    	    return e;
    	}
    	function pctDecChars(str) {
    	    var newStr = "";
    	    var i = 0;
    	    var il = str.length;
    	    while (i < il) {
    	        var c = parseInt(str.substr(i + 1, 2), 16);
    	        if (c < 128) {
    	            newStr += String.fromCharCode(c);
    	            i += 3;
    	        } else if (c >= 194 && c < 224) {
    	            if (il - i >= 6) {
    	                var c2 = parseInt(str.substr(i + 4, 2), 16);
    	                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
    	            } else {
    	                newStr += str.substr(i, 6);
    	            }
    	            i += 6;
    	        } else if (c >= 224) {
    	            if (il - i >= 9) {
    	                var _c = parseInt(str.substr(i + 4, 2), 16);
    	                var c3 = parseInt(str.substr(i + 7, 2), 16);
    	                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
    	            } else {
    	                newStr += str.substr(i, 9);
    	            }
    	            i += 9;
    	        } else {
    	            newStr += str.substr(i, 3);
    	            i += 3;
    	        }
    	    }
    	    return newStr;
    	}
    	function _normalizeComponentEncoding(components, protocol) {
    	    function decodeUnreserved(str) {
    	        var decStr = pctDecChars(str);
    	        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
    	    }
    	    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
    	    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    	    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    	    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    	    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    	    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    	    return components;
    	}

    	function _stripLeadingZeros(str) {
    	    return str.replace(/^0*(.*)/, "$1") || "0";
    	}
    	function _normalizeIPv4(host, protocol) {
    	    var matches = host.match(protocol.IPV4ADDRESS) || [];

    	    var _matches = slicedToArray(matches, 2),
    	        address = _matches[1];

    	    if (address) {
    	        return address.split(".").map(_stripLeadingZeros).join(".");
    	    } else {
    	        return host;
    	    }
    	}
    	function _normalizeIPv6(host, protocol) {
    	    var matches = host.match(protocol.IPV6ADDRESS) || [];

    	    var _matches2 = slicedToArray(matches, 3),
    	        address = _matches2[1],
    	        zone = _matches2[2];

    	    if (address) {
    	        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
    	            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
    	            last = _address$toLowerCase$2[0],
    	            first = _address$toLowerCase$2[1];

    	        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
    	        var lastFields = last.split(":").map(_stripLeadingZeros);
    	        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
    	        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
    	        var lastFieldsStart = lastFields.length - fieldCount;
    	        var fields = Array(fieldCount);
    	        for (var x = 0; x < fieldCount; ++x) {
    	            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
    	        }
    	        if (isLastFieldIPv4Address) {
    	            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
    	        }
    	        var allZeroFields = fields.reduce(function (acc, field, index) {
    	            if (!field || field === "0") {
    	                var lastLongest = acc[acc.length - 1];
    	                if (lastLongest && lastLongest.index + lastLongest.length === index) {
    	                    lastLongest.length++;
    	                } else {
    	                    acc.push({ index: index, length: 1 });
    	                }
    	            }
    	            return acc;
    	        }, []);
    	        var longestZeroFields = allZeroFields.sort(function (a, b) {
    	            return b.length - a.length;
    	        })[0];
    	        var newHost = void 0;
    	        if (longestZeroFields && longestZeroFields.length > 1) {
    	            var newFirst = fields.slice(0, longestZeroFields.index);
    	            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
    	            newHost = newFirst.join(":") + "::" + newLast.join(":");
    	        } else {
    	            newHost = fields.join(":");
    	        }
    	        if (zone) {
    	            newHost += "%" + zone;
    	        }
    	        return newHost;
    	    } else {
    	        return host;
    	    }
    	}
    	var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    	var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
    	function parse(uriString) {
    	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	    var components = {};
    	    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    	    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
    	    var matches = uriString.match(URI_PARSE);
    	    if (matches) {
    	        if (NO_MATCH_IS_UNDEFINED) {
    	            //store each component
    	            components.scheme = matches[1];
    	            components.userinfo = matches[3];
    	            components.host = matches[4];
    	            components.port = parseInt(matches[5], 10);
    	            components.path = matches[6] || "";
    	            components.query = matches[7];
    	            components.fragment = matches[8];
    	            //fix port number
    	            if (isNaN(components.port)) {
    	                components.port = matches[5];
    	            }
    	        } else {
    	            //IE FIX for improper RegExp matching
    	            //store each component
    	            components.scheme = matches[1] || undefined;
    	            components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
    	            components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
    	            components.port = parseInt(matches[5], 10);
    	            components.path = matches[6] || "";
    	            components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
    	            components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
    	            //fix port number
    	            if (isNaN(components.port)) {
    	                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
    	            }
    	        }
    	        if (components.host) {
    	            //normalize IP hosts
    	            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
    	        }
    	        //determine reference type
    	        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
    	            components.reference = "same-document";
    	        } else if (components.scheme === undefined) {
    	            components.reference = "relative";
    	        } else if (components.fragment === undefined) {
    	            components.reference = "absolute";
    	        } else {
    	            components.reference = "uri";
    	        }
    	        //check for reference errors
    	        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
    	            components.error = components.error || "URI is not a " + options.reference + " reference.";
    	        }
    	        //find scheme handler
    	        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    	        //check if scheme can't handle IRIs
    	        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
    	            //if host component is a domain name
    	            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
    	                //convert Unicode IDN -> ASCII IDN
    	                try {
    	                    components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
    	                } catch (e) {
    	                    components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
    	                }
    	            }
    	            //convert IRI -> URI
    	            _normalizeComponentEncoding(components, URI_PROTOCOL);
    	        } else {
    	            //normalize encodings
    	            _normalizeComponentEncoding(components, protocol);
    	        }
    	        //perform scheme specific parsing
    	        if (schemeHandler && schemeHandler.parse) {
    	            schemeHandler.parse(components, options);
    	        }
    	    } else {
    	        components.error = components.error || "URI can not be parsed.";
    	    }
    	    return components;
    	}

    	function _recomposeAuthority(components, options) {
    	    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
    	    var uriTokens = [];
    	    if (components.userinfo !== undefined) {
    	        uriTokens.push(components.userinfo);
    	        uriTokens.push("@");
    	    }
    	    if (components.host !== undefined) {
    	        //normalize IP hosts, add brackets and escape zone separator for IPv6
    	        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
    	            return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
    	        }));
    	    }
    	    if (typeof components.port === "number" || typeof components.port === "string") {
    	        uriTokens.push(":");
    	        uriTokens.push(String(components.port));
    	    }
    	    return uriTokens.length ? uriTokens.join("") : undefined;
    	}

    	var RDS1 = /^\.\.?\//;
    	var RDS2 = /^\/\.(\/|$)/;
    	var RDS3 = /^\/\.\.(\/|$)/;
    	var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    	function removeDotSegments(input) {
    	    var output = [];
    	    while (input.length) {
    	        if (input.match(RDS1)) {
    	            input = input.replace(RDS1, "");
    	        } else if (input.match(RDS2)) {
    	            input = input.replace(RDS2, "/");
    	        } else if (input.match(RDS3)) {
    	            input = input.replace(RDS3, "/");
    	            output.pop();
    	        } else if (input === "." || input === "..") {
    	            input = "";
    	        } else {
    	            var im = input.match(RDS5);
    	            if (im) {
    	                var s = im[0];
    	                input = input.slice(s.length);
    	                output.push(s);
    	            } else {
    	                throw new Error("Unexpected dot segment condition");
    	            }
    	        }
    	    }
    	    return output.join("");
    	}

    	function serialize(components) {
    	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    	    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
    	    var uriTokens = [];
    	    //find scheme handler
    	    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    	    //perform scheme specific serialization
    	    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
    	    if (components.host) {
    	        //if host component is an IPv6 address
    	        if (protocol.IPV6ADDRESS.test(components.host)) ;
    	        //TODO: normalize IPv6 address as per RFC 5952

    	        //if host component is a domain name
    	        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
    	                //convert IDN via punycode
    	                try {
    	                    components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
    	                } catch (e) {
    	                    components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
    	                }
    	            }
    	    }
    	    //normalize encoding
    	    _normalizeComponentEncoding(components, protocol);
    	    if (options.reference !== "suffix" && components.scheme) {
    	        uriTokens.push(components.scheme);
    	        uriTokens.push(":");
    	    }
    	    var authority = _recomposeAuthority(components, options);
    	    if (authority !== undefined) {
    	        if (options.reference !== "suffix") {
    	            uriTokens.push("//");
    	        }
    	        uriTokens.push(authority);
    	        if (components.path && components.path.charAt(0) !== "/") {
    	            uriTokens.push("/");
    	        }
    	    }
    	    if (components.path !== undefined) {
    	        var s = components.path;
    	        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
    	            s = removeDotSegments(s);
    	        }
    	        if (authority === undefined) {
    	            s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
    	        }
    	        uriTokens.push(s);
    	    }
    	    if (components.query !== undefined) {
    	        uriTokens.push("?");
    	        uriTokens.push(components.query);
    	    }
    	    if (components.fragment !== undefined) {
    	        uriTokens.push("#");
    	        uriTokens.push(components.fragment);
    	    }
    	    return uriTokens.join(""); //merge tokens into a string
    	}

    	function resolveComponents(base, relative) {
    	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    	    var skipNormalization = arguments[3];

    	    var target = {};
    	    if (!skipNormalization) {
    	        base = parse(serialize(base, options), options); //normalize base components
    	        relative = parse(serialize(relative, options), options); //normalize relative components
    	    }
    	    options = options || {};
    	    if (!options.tolerant && relative.scheme) {
    	        target.scheme = relative.scheme;
    	        //target.authority = relative.authority;
    	        target.userinfo = relative.userinfo;
    	        target.host = relative.host;
    	        target.port = relative.port;
    	        target.path = removeDotSegments(relative.path || "");
    	        target.query = relative.query;
    	    } else {
    	        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
    	            //target.authority = relative.authority;
    	            target.userinfo = relative.userinfo;
    	            target.host = relative.host;
    	            target.port = relative.port;
    	            target.path = removeDotSegments(relative.path || "");
    	            target.query = relative.query;
    	        } else {
    	            if (!relative.path) {
    	                target.path = base.path;
    	                if (relative.query !== undefined) {
    	                    target.query = relative.query;
    	                } else {
    	                    target.query = base.query;
    	                }
    	            } else {
    	                if (relative.path.charAt(0) === "/") {
    	                    target.path = removeDotSegments(relative.path);
    	                } else {
    	                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
    	                        target.path = "/" + relative.path;
    	                    } else if (!base.path) {
    	                        target.path = relative.path;
    	                    } else {
    	                        target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
    	                    }
    	                    target.path = removeDotSegments(target.path);
    	                }
    	                target.query = relative.query;
    	            }
    	            //target.authority = base.authority;
    	            target.userinfo = base.userinfo;
    	            target.host = base.host;
    	            target.port = base.port;
    	        }
    	        target.scheme = base.scheme;
    	    }
    	    target.fragment = relative.fragment;
    	    return target;
    	}

    	function resolve(baseURI, relativeURI, options) {
    	    var schemelessOptions = assign({ scheme: 'null' }, options);
    	    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    	}

    	function normalize(uri, options) {
    	    if (typeof uri === "string") {
    	        uri = serialize(parse(uri, options), options);
    	    } else if (typeOf(uri) === "object") {
    	        uri = parse(serialize(uri, options), options);
    	    }
    	    return uri;
    	}

    	function equal(uriA, uriB, options) {
    	    if (typeof uriA === "string") {
    	        uriA = serialize(parse(uriA, options), options);
    	    } else if (typeOf(uriA) === "object") {
    	        uriA = serialize(uriA, options);
    	    }
    	    if (typeof uriB === "string") {
    	        uriB = serialize(parse(uriB, options), options);
    	    } else if (typeOf(uriB) === "object") {
    	        uriB = serialize(uriB, options);
    	    }
    	    return uriA === uriB;
    	}

    	function escapeComponent(str, options) {
    	    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    	}

    	function unescapeComponent(str, options) {
    	    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    	}

    	var handler = {
    	    scheme: "http",
    	    domainHost: true,
    	    parse: function parse(components, options) {
    	        //report missing host
    	        if (!components.host) {
    	            components.error = components.error || "HTTP URIs must have a host.";
    	        }
    	        return components;
    	    },
    	    serialize: function serialize(components, options) {
    	        var secure = String(components.scheme).toLowerCase() === "https";
    	        //normalize the default port
    	        if (components.port === (secure ? 443 : 80) || components.port === "") {
    	            components.port = undefined;
    	        }
    	        //normalize the empty path
    	        if (!components.path) {
    	            components.path = "/";
    	        }
    	        //NOTE: We do not parse query strings for HTTP URIs
    	        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
    	        //and not the HTTP spec.
    	        return components;
    	    }
    	};

    	var handler$1 = {
    	    scheme: "https",
    	    domainHost: handler.domainHost,
    	    parse: handler.parse,
    	    serialize: handler.serialize
    	};

    	function isSecure(wsComponents) {
    	    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
    	}
    	//RFC 6455
    	var handler$2 = {
    	    scheme: "ws",
    	    domainHost: true,
    	    parse: function parse(components, options) {
    	        var wsComponents = components;
    	        //indicate if the secure flag is set
    	        wsComponents.secure = isSecure(wsComponents);
    	        //construct resouce name
    	        wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
    	        wsComponents.path = undefined;
    	        wsComponents.query = undefined;
    	        return wsComponents;
    	    },
    	    serialize: function serialize(wsComponents, options) {
    	        //normalize the default port
    	        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
    	            wsComponents.port = undefined;
    	        }
    	        //ensure scheme matches secure flag
    	        if (typeof wsComponents.secure === 'boolean') {
    	            wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
    	            wsComponents.secure = undefined;
    	        }
    	        //reconstruct path from resource name
    	        if (wsComponents.resourceName) {
    	            var _wsComponents$resourc = wsComponents.resourceName.split('?'),
    	                _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
    	                path = _wsComponents$resourc2[0],
    	                query = _wsComponents$resourc2[1];

    	            wsComponents.path = path && path !== '/' ? path : undefined;
    	            wsComponents.query = query;
    	            wsComponents.resourceName = undefined;
    	        }
    	        //forbid fragment component
    	        wsComponents.fragment = undefined;
    	        return wsComponents;
    	    }
    	};

    	var handler$3 = {
    	    scheme: "wss",
    	    domainHost: handler$2.domainHost,
    	    parse: handler$2.parse,
    	    serialize: handler$2.serialize
    	};

    	var O = {};
    	//RFC 3986
    	var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ("\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
    	var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
    	var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
    	//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
    	//const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
    	//const WSP$$ = "[\\x20\\x09]";
    	//const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
    	//const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
    	//const VCHAR$$ = "[\\x21-\\x7E]";
    	//const WSP$$ = "[\\x20\\x09]";
    	//const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
    	//const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
    	//const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
    	//const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
    	var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    	var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    	var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
    	var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    	var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    	var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    	var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
    	var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    	var NOT_HFVALUE = NOT_HFNAME;
    	function decodeUnreserved(str) {
    	    var decStr = pctDecChars(str);
    	    return !decStr.match(UNRESERVED) ? str : decStr;
    	}
    	var handler$4 = {
    	    scheme: "mailto",
    	    parse: function parse$$1(components, options) {
    	        var mailtoComponents = components;
    	        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
    	        mailtoComponents.path = undefined;
    	        if (mailtoComponents.query) {
    	            var unknownHeaders = false;
    	            var headers = {};
    	            var hfields = mailtoComponents.query.split("&");
    	            for (var x = 0, xl = hfields.length; x < xl; ++x) {
    	                var hfield = hfields[x].split("=");
    	                switch (hfield[0]) {
    	                    case "to":
    	                        var toAddrs = hfield[1].split(",");
    	                        for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
    	                            to.push(toAddrs[_x]);
    	                        }
    	                        break;
    	                    case "subject":
    	                        mailtoComponents.subject = unescapeComponent(hfield[1], options);
    	                        break;
    	                    case "body":
    	                        mailtoComponents.body = unescapeComponent(hfield[1], options);
    	                        break;
    	                    default:
    	                        unknownHeaders = true;
    	                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
    	                        break;
    	                }
    	            }
    	            if (unknownHeaders) mailtoComponents.headers = headers;
    	        }
    	        mailtoComponents.query = undefined;
    	        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
    	            var addr = to[_x2].split("@");
    	            addr[0] = unescapeComponent(addr[0]);
    	            if (!options.unicodeSupport) {
    	                //convert Unicode IDN -> ASCII IDN
    	                try {
    	                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
    	                } catch (e) {
    	                    mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
    	                }
    	            } else {
    	                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
    	            }
    	            to[_x2] = addr.join("@");
    	        }
    	        return mailtoComponents;
    	    },
    	    serialize: function serialize$$1(mailtoComponents, options) {
    	        var components = mailtoComponents;
    	        var to = toArray(mailtoComponents.to);
    	        if (to) {
    	            for (var x = 0, xl = to.length; x < xl; ++x) {
    	                var toAddr = String(to[x]);
    	                var atIdx = toAddr.lastIndexOf("@");
    	                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
    	                var domain = toAddr.slice(atIdx + 1);
    	                //convert IDN via punycode
    	                try {
    	                    domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
    	                } catch (e) {
    	                    components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
    	                }
    	                to[x] = localPart + "@" + domain;
    	            }
    	            components.path = to.join(",");
    	        }
    	        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
    	        if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
    	        if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
    	        var fields = [];
    	        for (var name in headers) {
    	            if (headers[name] !== O[name]) {
    	                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
    	            }
    	        }
    	        if (fields.length) {
    	            components.query = fields.join("&");
    	        }
    	        return components;
    	    }
    	};

    	var URN_PARSE = /^([^\:]+)\:(.*)/;
    	//RFC 2141
    	var handler$5 = {
    	    scheme: "urn",
    	    parse: function parse$$1(components, options) {
    	        var matches = components.path && components.path.match(URN_PARSE);
    	        var urnComponents = components;
    	        if (matches) {
    	            var scheme = options.scheme || urnComponents.scheme || "urn";
    	            var nid = matches[1].toLowerCase();
    	            var nss = matches[2];
    	            var urnScheme = scheme + ":" + (options.nid || nid);
    	            var schemeHandler = SCHEMES[urnScheme];
    	            urnComponents.nid = nid;
    	            urnComponents.nss = nss;
    	            urnComponents.path = undefined;
    	            if (schemeHandler) {
    	                urnComponents = schemeHandler.parse(urnComponents, options);
    	            }
    	        } else {
    	            urnComponents.error = urnComponents.error || "URN can not be parsed.";
    	        }
    	        return urnComponents;
    	    },
    	    serialize: function serialize$$1(urnComponents, options) {
    	        var scheme = options.scheme || urnComponents.scheme || "urn";
    	        var nid = urnComponents.nid;
    	        var urnScheme = scheme + ":" + (options.nid || nid);
    	        var schemeHandler = SCHEMES[urnScheme];
    	        if (schemeHandler) {
    	            urnComponents = schemeHandler.serialize(urnComponents, options);
    	        }
    	        var uriComponents = urnComponents;
    	        var nss = urnComponents.nss;
    	        uriComponents.path = (nid || options.nid) + ":" + nss;
    	        return uriComponents;
    	    }
    	};

    	var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    	//RFC 4122
    	var handler$6 = {
    	    scheme: "urn:uuid",
    	    parse: function parse(urnComponents, options) {
    	        var uuidComponents = urnComponents;
    	        uuidComponents.uuid = uuidComponents.nss;
    	        uuidComponents.nss = undefined;
    	        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
    	            uuidComponents.error = uuidComponents.error || "UUID is not valid.";
    	        }
    	        return uuidComponents;
    	    },
    	    serialize: function serialize(uuidComponents, options) {
    	        var urnComponents = uuidComponents;
    	        //normalize UUID
    	        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
    	        return urnComponents;
    	    }
    	};

    	SCHEMES[handler.scheme] = handler;
    	SCHEMES[handler$1.scheme] = handler$1;
    	SCHEMES[handler$2.scheme] = handler$2;
    	SCHEMES[handler$3.scheme] = handler$3;
    	SCHEMES[handler$4.scheme] = handler$4;
    	SCHEMES[handler$5.scheme] = handler$5;
    	SCHEMES[handler$6.scheme] = handler$6;

    	exports.SCHEMES = SCHEMES;
    	exports.pctEncChar = pctEncChar;
    	exports.pctDecChars = pctDecChars;
    	exports.parse = parse;
    	exports.removeDotSegments = removeDotSegments;
    	exports.serialize = serialize;
    	exports.resolveComponents = resolveComponents;
    	exports.resolve = resolve;
    	exports.normalize = normalize;
    	exports.equal = equal;
    	exports.escapeComponent = escapeComponent;
    	exports.unescapeComponent = unescapeComponent;

    	Object.defineProperty(exports, '__esModule', { value: true });

    	})));
    	
    } (uri_all, uri_allExports));

    Object.defineProperty(uri$4, "__esModule", { value: true });
    const uri$3 = uri_allExports;
    uri$3.code = 'require("ajv/dist/runtime/uri").default';
    uri$4.default = uri$3;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    	var validate_1 = requireValidate$2();
    	Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    	var codegen_1 = requireCodegen$2();
    	Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    	Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    	Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    	Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    	Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    	Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    	const validation_error_1 = requireValidation_error$2();
    	const ref_error_1 = requireRef_error$2();
    	const rules_1 = rules$2;
    	const compile_1 = compile$2;
    	const codegen_2 = requireCodegen$2();
    	const resolve_1 = resolve$5;
    	const dataType_1 = dataType$2;
    	const util_1 = util$8;
    	const $dataRefSchema = require$$9$2;
    	const uri_1 = uri$4;
    	const defaultRegExp = (str, flags) => new RegExp(str, flags);
    	defaultRegExp.code = "new RegExp";
    	const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    	const EXT_SCOPE_NAMES = new Set([
    	    "validate",
    	    "serialize",
    	    "parse",
    	    "wrapper",
    	    "root",
    	    "schema",
    	    "keyword",
    	    "pattern",
    	    "formats",
    	    "validate$data",
    	    "func",
    	    "obj",
    	    "Error",
    	]);
    	const removedOptions = {
    	    errorDataPath: "",
    	    format: "`validateFormats: false` can be used instead.",
    	    nullable: '"nullable" keyword is supported by default.',
    	    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    	    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    	    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    	    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    	    sourceCode: "Use option `code: {source: true}`",
    	    strictDefaults: "It is default now, see option `strict`.",
    	    strictKeywords: "It is default now, see option `strict`.",
    	    uniqueItems: '"uniqueItems" keyword is always validated.',
    	    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    	    cache: "Map is used as cache, schema object as key.",
    	    serialize: "Map is used as cache, schema object as key.",
    	    ajvErrors: "It is default now.",
    	};
    	const deprecatedOptions = {
    	    ignoreKeywordsWithRef: "",
    	    jsPropertySyntax: "",
    	    unicode: '"minLength"/"maxLength" account for unicode characters by default.',
    	};
    	const MAX_EXPRESSION = 200;
    	// eslint-disable-next-line complexity
    	function requiredOptions(o) {
    	    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    	    const s = o.strict;
    	    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
    	    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    	    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
    	    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
    	    return {
    	        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
    	        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
    	        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
    	        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
    	        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
    	        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
    	        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
    	        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
    	        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
    	        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
    	        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
    	        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
    	        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
    	        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
    	        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
    	        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
    	        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
    	        uriResolver: uriResolver,
    	    };
    	}
    	class Ajv {
    	    constructor(opts = {}) {
    	        this.schemas = {};
    	        this.refs = {};
    	        this.formats = {};
    	        this._compilations = new Set();
    	        this._loading = {};
    	        this._cache = new Map();
    	        opts = this.opts = { ...opts, ...requiredOptions(opts) };
    	        const { es5, lines } = this.opts.code;
    	        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
    	        this.logger = getLogger(opts.logger);
    	        const formatOpt = opts.validateFormats;
    	        opts.validateFormats = false;
    	        this.RULES = (0, rules_1.getRules)();
    	        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
    	        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
    	        this._metaOpts = getMetaSchemaOptions.call(this);
    	        if (opts.formats)
    	            addInitialFormats.call(this);
    	        this._addVocabularies();
    	        this._addDefaultMetaSchema();
    	        if (opts.keywords)
    	            addInitialKeywords.call(this, opts.keywords);
    	        if (typeof opts.meta == "object")
    	            this.addMetaSchema(opts.meta);
    	        addInitialSchemas.call(this);
    	        opts.validateFormats = formatOpt;
    	    }
    	    _addVocabularies() {
    	        this.addKeyword("$async");
    	    }
    	    _addDefaultMetaSchema() {
    	        const { $data, meta, schemaId } = this.opts;
    	        let _dataRefSchema = $dataRefSchema;
    	        if (schemaId === "id") {
    	            _dataRefSchema = { ...$dataRefSchema };
    	            _dataRefSchema.id = _dataRefSchema.$id;
    	            delete _dataRefSchema.$id;
    	        }
    	        if (meta && $data)
    	            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    	    }
    	    defaultMeta() {
    	        const { meta, schemaId } = this.opts;
    	        return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
    	    }
    	    validate(schemaKeyRef, // key, ref or schema object
    	    data // to be validated
    	    ) {
    	        let v;
    	        if (typeof schemaKeyRef == "string") {
    	            v = this.getSchema(schemaKeyRef);
    	            if (!v)
    	                throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
    	        }
    	        else {
    	            v = this.compile(schemaKeyRef);
    	        }
    	        const valid = v(data);
    	        if (!("$async" in v))
    	            this.errors = v.errors;
    	        return valid;
    	    }
    	    compile(schema, _meta) {
    	        const sch = this._addSchema(schema, _meta);
    	        return (sch.validate || this._compileSchemaEnv(sch));
    	    }
    	    compileAsync(schema, meta) {
    	        if (typeof this.opts.loadSchema != "function") {
    	            throw new Error("options.loadSchema should be a function");
    	        }
    	        const { loadSchema } = this.opts;
    	        return runCompileAsync.call(this, schema, meta);
    	        async function runCompileAsync(_schema, _meta) {
    	            await loadMetaSchema.call(this, _schema.$schema);
    	            const sch = this._addSchema(_schema, _meta);
    	            return sch.validate || _compileAsync.call(this, sch);
    	        }
    	        async function loadMetaSchema($ref) {
    	            if ($ref && !this.getSchema($ref)) {
    	                await runCompileAsync.call(this, { $ref }, true);
    	            }
    	        }
    	        async function _compileAsync(sch) {
    	            try {
    	                return this._compileSchemaEnv(sch);
    	            }
    	            catch (e) {
    	                if (!(e instanceof ref_error_1.default))
    	                    throw e;
    	                checkLoaded.call(this, e);
    	                await loadMissingSchema.call(this, e.missingSchema);
    	                return _compileAsync.call(this, sch);
    	            }
    	        }
    	        function checkLoaded({ missingSchema: ref, missingRef }) {
    	            if (this.refs[ref]) {
    	                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
    	            }
    	        }
    	        async function loadMissingSchema(ref) {
    	            const _schema = await _loadSchema.call(this, ref);
    	            if (!this.refs[ref])
    	                await loadMetaSchema.call(this, _schema.$schema);
    	            if (!this.refs[ref])
    	                this.addSchema(_schema, ref, meta);
    	        }
    	        async function _loadSchema(ref) {
    	            const p = this._loading[ref];
    	            if (p)
    	                return p;
    	            try {
    	                return await (this._loading[ref] = loadSchema(ref));
    	            }
    	            finally {
    	                delete this._loading[ref];
    	            }
    	        }
    	    }
    	    // Adds schema to the instance
    	    addSchema(schema, // If array is passed, `key` will be ignored
    	    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
    	    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
    	    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    	    ) {
    	        if (Array.isArray(schema)) {
    	            for (const sch of schema)
    	                this.addSchema(sch, undefined, _meta, _validateSchema);
    	            return this;
    	        }
    	        let id;
    	        if (typeof schema === "object") {
    	            const { schemaId } = this.opts;
    	            id = schema[schemaId];
    	            if (id !== undefined && typeof id != "string") {
    	                throw new Error(`schema ${schemaId} must be string`);
    	            }
    	        }
    	        key = (0, resolve_1.normalizeId)(key || id);
    	        this._checkUnique(key);
    	        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
    	        return this;
    	    }
    	    // Add schema that will be used to validate other schemas
    	    // options in META_IGNORE_OPTIONS are alway set to false
    	    addMetaSchema(schema, key, // schema key
    	    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    	    ) {
    	        this.addSchema(schema, key, true, _validateSchema);
    	        return this;
    	    }
    	    //  Validate schema against its meta-schema
    	    validateSchema(schema, throwOrLogError) {
    	        if (typeof schema == "boolean")
    	            return true;
    	        let $schema;
    	        $schema = schema.$schema;
    	        if ($schema !== undefined && typeof $schema != "string") {
    	            throw new Error("$schema must be a string");
    	        }
    	        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
    	        if (!$schema) {
    	            this.logger.warn("meta-schema not available");
    	            this.errors = null;
    	            return true;
    	        }
    	        const valid = this.validate($schema, schema);
    	        if (!valid && throwOrLogError) {
    	            const message = "schema is invalid: " + this.errorsText();
    	            if (this.opts.validateSchema === "log")
    	                this.logger.error(message);
    	            else
    	                throw new Error(message);
    	        }
    	        return valid;
    	    }
    	    // Get compiled schema by `key` or `ref`.
    	    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    	    getSchema(keyRef) {
    	        let sch;
    	        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
    	            keyRef = sch;
    	        if (sch === undefined) {
    	            const { schemaId } = this.opts;
    	            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
    	            sch = compile_1.resolveSchema.call(this, root, keyRef);
    	            if (!sch)
    	                return;
    	            this.refs[keyRef] = sch;
    	        }
    	        return (sch.validate || this._compileSchemaEnv(sch));
    	    }
    	    // Remove cached schema(s).
    	    // If no parameter is passed all schemas but meta-schemas are removed.
    	    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    	    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    	    removeSchema(schemaKeyRef) {
    	        if (schemaKeyRef instanceof RegExp) {
    	            this._removeAllSchemas(this.schemas, schemaKeyRef);
    	            this._removeAllSchemas(this.refs, schemaKeyRef);
    	            return this;
    	        }
    	        switch (typeof schemaKeyRef) {
    	            case "undefined":
    	                this._removeAllSchemas(this.schemas);
    	                this._removeAllSchemas(this.refs);
    	                this._cache.clear();
    	                return this;
    	            case "string": {
    	                const sch = getSchEnv.call(this, schemaKeyRef);
    	                if (typeof sch == "object")
    	                    this._cache.delete(sch.schema);
    	                delete this.schemas[schemaKeyRef];
    	                delete this.refs[schemaKeyRef];
    	                return this;
    	            }
    	            case "object": {
    	                const cacheKey = schemaKeyRef;
    	                this._cache.delete(cacheKey);
    	                let id = schemaKeyRef[this.opts.schemaId];
    	                if (id) {
    	                    id = (0, resolve_1.normalizeId)(id);
    	                    delete this.schemas[id];
    	                    delete this.refs[id];
    	                }
    	                return this;
    	            }
    	            default:
    	                throw new Error("ajv.removeSchema: invalid parameter");
    	        }
    	    }
    	    // add "vocabulary" - a collection of keywords
    	    addVocabulary(definitions) {
    	        for (const def of definitions)
    	            this.addKeyword(def);
    	        return this;
    	    }
    	    addKeyword(kwdOrDef, def // deprecated
    	    ) {
    	        let keyword;
    	        if (typeof kwdOrDef == "string") {
    	            keyword = kwdOrDef;
    	            if (typeof def == "object") {
    	                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
    	                def.keyword = keyword;
    	            }
    	        }
    	        else if (typeof kwdOrDef == "object" && def === undefined) {
    	            def = kwdOrDef;
    	            keyword = def.keyword;
    	            if (Array.isArray(keyword) && !keyword.length) {
    	                throw new Error("addKeywords: keyword must be string or non-empty array");
    	            }
    	        }
    	        else {
    	            throw new Error("invalid addKeywords parameters");
    	        }
    	        checkKeyword.call(this, keyword, def);
    	        if (!def) {
    	            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
    	            return this;
    	        }
    	        keywordMetaschema.call(this, def);
    	        const definition = {
    	            ...def,
    	            type: (0, dataType_1.getJSONTypes)(def.type),
    	            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
    	        };
    	        (0, util_1.eachItem)(keyword, definition.type.length === 0
    	            ? (k) => addRule.call(this, k, definition)
    	            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
    	        return this;
    	    }
    	    getKeyword(keyword) {
    	        const rule = this.RULES.all[keyword];
    	        return typeof rule == "object" ? rule.definition : !!rule;
    	    }
    	    // Remove keyword
    	    removeKeyword(keyword) {
    	        // TODO return type should be Ajv
    	        const { RULES } = this;
    	        delete RULES.keywords[keyword];
    	        delete RULES.all[keyword];
    	        for (const group of RULES.rules) {
    	            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
    	            if (i >= 0)
    	                group.rules.splice(i, 1);
    	        }
    	        return this;
    	    }
    	    // Add format
    	    addFormat(name, format) {
    	        if (typeof format == "string")
    	            format = new RegExp(format);
    	        this.formats[name] = format;
    	        return this;
    	    }
    	    errorsText(errors = this.errors, // optional array of validation errors
    	    { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    	    ) {
    	        if (!errors || errors.length === 0)
    	            return "No errors";
    	        return errors
    	            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
    	            .reduce((text, msg) => text + separator + msg);
    	    }
    	    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
    	        const rules = this.RULES.all;
    	        metaSchema = JSON.parse(JSON.stringify(metaSchema));
    	        for (const jsonPointer of keywordsJsonPointers) {
    	            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
    	            let keywords = metaSchema;
    	            for (const seg of segments)
    	                keywords = keywords[seg];
    	            for (const key in rules) {
    	                const rule = rules[key];
    	                if (typeof rule != "object")
    	                    continue;
    	                const { $data } = rule.definition;
    	                const schema = keywords[key];
    	                if ($data && schema)
    	                    keywords[key] = schemaOrData(schema);
    	            }
    	        }
    	        return metaSchema;
    	    }
    	    _removeAllSchemas(schemas, regex) {
    	        for (const keyRef in schemas) {
    	            const sch = schemas[keyRef];
    	            if (!regex || regex.test(keyRef)) {
    	                if (typeof sch == "string") {
    	                    delete schemas[keyRef];
    	                }
    	                else if (sch && !sch.meta) {
    	                    this._cache.delete(sch.schema);
    	                    delete schemas[keyRef];
    	                }
    	            }
    	        }
    	    }
    	    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
    	        let id;
    	        const { schemaId } = this.opts;
    	        if (typeof schema == "object") {
    	            id = schema[schemaId];
    	        }
    	        else {
    	            if (this.opts.jtd)
    	                throw new Error("schema must be object");
    	            else if (typeof schema != "boolean")
    	                throw new Error("schema must be object or boolean");
    	        }
    	        let sch = this._cache.get(schema);
    	        if (sch !== undefined)
    	            return sch;
    	        baseId = (0, resolve_1.normalizeId)(id || baseId);
    	        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
    	        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
    	        this._cache.set(sch.schema, sch);
    	        if (addSchema && !baseId.startsWith("#")) {
    	            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
    	            if (baseId)
    	                this._checkUnique(baseId);
    	            this.refs[baseId] = sch;
    	        }
    	        if (validateSchema)
    	            this.validateSchema(schema, true);
    	        return sch;
    	    }
    	    _checkUnique(id) {
    	        if (this.schemas[id] || this.refs[id]) {
    	            throw new Error(`schema with key or id "${id}" already exists`);
    	        }
    	    }
    	    _compileSchemaEnv(sch) {
    	        if (sch.meta)
    	            this._compileMetaSchema(sch);
    	        else
    	            compile_1.compileSchema.call(this, sch);
    	        /* istanbul ignore if */
    	        if (!sch.validate)
    	            throw new Error("ajv implementation error");
    	        return sch.validate;
    	    }
    	    _compileMetaSchema(sch) {
    	        const currentOpts = this.opts;
    	        this.opts = this._metaOpts;
    	        try {
    	            compile_1.compileSchema.call(this, sch);
    	        }
    	        finally {
    	            this.opts = currentOpts;
    	        }
    	    }
    	}
    	exports.default = Ajv;
    	Ajv.ValidationError = validation_error_1.default;
    	Ajv.MissingRefError = ref_error_1.default;
    	function checkOptions(checkOpts, options, msg, log = "error") {
    	    for (const key in checkOpts) {
    	        const opt = key;
    	        if (opt in options)
    	            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    	    }
    	}
    	function getSchEnv(keyRef) {
    	    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
    	    return this.schemas[keyRef] || this.refs[keyRef];
    	}
    	function addInitialSchemas() {
    	    const optsSchemas = this.opts.schemas;
    	    if (!optsSchemas)
    	        return;
    	    if (Array.isArray(optsSchemas))
    	        this.addSchema(optsSchemas);
    	    else
    	        for (const key in optsSchemas)
    	            this.addSchema(optsSchemas[key], key);
    	}
    	function addInitialFormats() {
    	    for (const name in this.opts.formats) {
    	        const format = this.opts.formats[name];
    	        if (format)
    	            this.addFormat(name, format);
    	    }
    	}
    	function addInitialKeywords(defs) {
    	    if (Array.isArray(defs)) {
    	        this.addVocabulary(defs);
    	        return;
    	    }
    	    this.logger.warn("keywords option as map is deprecated, pass array");
    	    for (const keyword in defs) {
    	        const def = defs[keyword];
    	        if (!def.keyword)
    	            def.keyword = keyword;
    	        this.addKeyword(def);
    	    }
    	}
    	function getMetaSchemaOptions() {
    	    const metaOpts = { ...this.opts };
    	    for (const opt of META_IGNORE_OPTIONS)
    	        delete metaOpts[opt];
    	    return metaOpts;
    	}
    	const noLogs = { log() { }, warn() { }, error() { } };
    	function getLogger(logger) {
    	    if (logger === false)
    	        return noLogs;
    	    if (logger === undefined)
    	        return console;
    	    if (logger.log && logger.warn && logger.error)
    	        return logger;
    	    throw new Error("logger must implement log, warn and error methods");
    	}
    	const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    	function checkKeyword(keyword, def) {
    	    const { RULES } = this;
    	    (0, util_1.eachItem)(keyword, (kwd) => {
    	        if (RULES.keywords[kwd])
    	            throw new Error(`Keyword ${kwd} is already defined`);
    	        if (!KEYWORD_NAME.test(kwd))
    	            throw new Error(`Keyword ${kwd} has invalid name`);
    	    });
    	    if (!def)
    	        return;
    	    if (def.$data && !("code" in def || "validate" in def)) {
    	        throw new Error('$data keyword must have "code" or "validate" function');
    	    }
    	}
    	function addRule(keyword, definition, dataType) {
    	    var _a;
    	    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    	    if (dataType && post)
    	        throw new Error('keyword with "post" flag cannot have "type"');
    	    const { RULES } = this;
    	    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    	    if (!ruleGroup) {
    	        ruleGroup = { type: dataType, rules: [] };
    	        RULES.rules.push(ruleGroup);
    	    }
    	    RULES.keywords[keyword] = true;
    	    if (!definition)
    	        return;
    	    const rule = {
    	        keyword,
    	        definition: {
    	            ...definition,
    	            type: (0, dataType_1.getJSONTypes)(definition.type),
    	            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
    	        },
    	    };
    	    if (definition.before)
    	        addBeforeRule.call(this, ruleGroup, rule, definition.before);
    	    else
    	        ruleGroup.rules.push(rule);
    	    RULES.all[keyword] = rule;
    	    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    	}
    	function addBeforeRule(ruleGroup, rule, before) {
    	    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    	    if (i >= 0) {
    	        ruleGroup.rules.splice(i, 0, rule);
    	    }
    	    else {
    	        ruleGroup.rules.push(rule);
    	        this.logger.warn(`rule ${before} is not defined`);
    	    }
    	}
    	function keywordMetaschema(def) {
    	    let { metaSchema } = def;
    	    if (metaSchema === undefined)
    	        return;
    	    if (def.$data && this.opts.$data)
    	        metaSchema = schemaOrData(metaSchema);
    	    def.validateSchema = this.compile(metaSchema, true);
    	}
    	const $dataRef = {
    	    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    	};
    	function schemaOrData(schema) {
    	    return { anyOf: [schema, $dataRef] };
    	}
    	
    } (core$7));

    var draft7$2 = {};

    var core$6 = {};

    var id$2 = {};

    Object.defineProperty(id$2, "__esModule", { value: true });
    const def$11 = {
        keyword: "id",
        code() {
            throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        },
    };
    id$2.default = def$11;

    var ref$3 = {};

    Object.defineProperty(ref$3, "__esModule", { value: true });
    ref$3.callRef = ref$3.getValidate = void 0;
    const ref_error_1$4 = requireRef_error$2();
    const code_1$l = requireCode$2();
    const codegen_1$T = requireCodegen$2();
    const names_1$8 = requireNames$1();
    const compile_1$4 = compile$2;
    const util_1$L = util$8;
    const def$10 = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
            const { gen, schema: $ref, it } = cxt;
            const { baseId, schemaEnv: env, validateName, opts, self } = it;
            const { root } = env;
            if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
                return callRootRef();
            const schOrEnv = compile_1$4.resolveRef.call(self, root, baseId, $ref);
            if (schOrEnv === undefined)
                throw new ref_error_1$4.default(it.opts.uriResolver, baseId, $ref);
            if (schOrEnv instanceof compile_1$4.SchemaEnv)
                return callValidate(schOrEnv);
            return inlineRefSchema(schOrEnv);
            function callRootRef() {
                if (env === root)
                    return callRef$1(cxt, validateName, env, env.$async);
                const rootName = gen.scopeValue("root", { ref: root });
                return callRef$1(cxt, (0, codegen_1$T._) `${rootName}.validate`, root, root.$async);
            }
            function callValidate(sch) {
                const v = getValidate$1(cxt, sch);
                callRef$1(cxt, v, sch, sch.$async);
            }
            function inlineRefSchema(sch) {
                const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1$T.stringify)(sch) } : { ref: sch });
                const valid = gen.name("valid");
                const schCxt = cxt.subschema({
                    schema: sch,
                    dataTypes: [],
                    schemaPath: codegen_1$T.nil,
                    topSchemaRef: schName,
                    errSchemaPath: $ref,
                }, valid);
                cxt.mergeEvaluated(schCxt);
                cxt.ok(valid);
            }
        },
    };
    function getValidate$1(cxt, sch) {
        const { gen } = cxt;
        return sch.validate
            ? gen.scopeValue("validate", { ref: sch.validate })
            : (0, codegen_1$T._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    ref$3.getValidate = getValidate$1;
    function callRef$1(cxt, v, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1$8.default.this : codegen_1$T.nil;
        if ($async)
            callAsyncRef();
        else
            callSyncRef();
        function callAsyncRef() {
            if (!env.$async)
                throw new Error("async schema referenced by sync schema");
            const valid = gen.let("valid");
            gen.try(() => {
                gen.code((0, codegen_1$T._) `await ${(0, code_1$l.callValidateCode)(cxt, v, passCxt)}`);
                addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
                if (!allErrors)
                    gen.assign(valid, true);
            }, (e) => {
                gen.if((0, codegen_1$T._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
                addErrorsFrom(e);
                if (!allErrors)
                    gen.assign(valid, false);
            });
            cxt.ok(valid);
        }
        function callSyncRef() {
            cxt.result((0, code_1$l.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
        }
        function addErrorsFrom(source) {
            const errs = (0, codegen_1$T._) `${source}.errors`;
            gen.assign(names_1$8.default.vErrors, (0, codegen_1$T._) `${names_1$8.default.vErrors} === null ? ${errs} : ${names_1$8.default.vErrors}.concat(${errs})`); // TODO tagged
            gen.assign(names_1$8.default.errors, (0, codegen_1$T._) `${names_1$8.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source) {
            var _a;
            if (!it.opts.unevaluated)
                return;
            const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
            // TODO refactor
            if (it.props !== true) {
                if (schEvaluated && !schEvaluated.dynamicProps) {
                    if (schEvaluated.props !== undefined) {
                        it.props = util_1$L.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                    }
                }
                else {
                    const props = gen.var("props", (0, codegen_1$T._) `${source}.evaluated.props`);
                    it.props = util_1$L.mergeEvaluated.props(gen, props, it.props, codegen_1$T.Name);
                }
            }
            if (it.items !== true) {
                if (schEvaluated && !schEvaluated.dynamicItems) {
                    if (schEvaluated.items !== undefined) {
                        it.items = util_1$L.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                    }
                }
                else {
                    const items = gen.var("items", (0, codegen_1$T._) `${source}.evaluated.items`);
                    it.items = util_1$L.mergeEvaluated.items(gen, items, it.items, codegen_1$T.Name);
                }
            }
        }
    }
    ref$3.callRef = callRef$1;
    ref$3.default = def$10;

    Object.defineProperty(core$6, "__esModule", { value: true });
    const id_1$1 = id$2;
    const ref_1$5 = ref$3;
    const core$5 = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1$1.default,
        ref_1$5.default,
    ];
    core$6.default = core$5;

    var validation$4 = {};

    var limitNumber$2 = {};

    Object.defineProperty(limitNumber$2, "__esModule", { value: true });
    const codegen_1$S = requireCodegen$2();
    const ops$1 = codegen_1$S.operators;
    const KWDs$1 = {
        maximum: { okStr: "<=", ok: ops$1.LTE, fail: ops$1.GT },
        minimum: { okStr: ">=", ok: ops$1.GTE, fail: ops$1.LT },
        exclusiveMaximum: { okStr: "<", ok: ops$1.LT, fail: ops$1.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops$1.GT, fail: ops$1.LTE },
    };
    const error$E = {
        message: ({ keyword, schemaCode }) => (0, codegen_1$S.str) `must be ${KWDs$1[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1$S._) `{comparison: ${KWDs$1[keyword].okStr}, limit: ${schemaCode}}`,
    };
    const def$$ = {
        keyword: Object.keys(KWDs$1),
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$E,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            cxt.fail$data((0, codegen_1$S._) `${data} ${KWDs$1[keyword].fail} ${schemaCode} || isNaN(${data})`);
        },
    };
    limitNumber$2.default = def$$;

    var multipleOf$2 = {};

    Object.defineProperty(multipleOf$2, "__esModule", { value: true });
    const codegen_1$R = requireCodegen$2();
    const error$D = {
        message: ({ schemaCode }) => (0, codegen_1$R.str) `must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1$R._) `{multipleOf: ${schemaCode}}`,
    };
    const def$_ = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$D,
        code(cxt) {
            const { gen, data, schemaCode, it } = cxt;
            // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
            const prec = it.opts.multipleOfPrecision;
            const res = gen.let("res");
            const invalid = prec
                ? (0, codegen_1$R._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
                : (0, codegen_1$R._) `${res} !== parseInt(${res})`;
            cxt.fail$data((0, codegen_1$R._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        },
    };
    multipleOf$2.default = def$_;

    var limitLength$2 = {};

    var ucs2length$4 = {};

    Object.defineProperty(ucs2length$4, "__esModule", { value: true });
    // https://mathiasbynens.be/notes/javascript-encoding
    // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
    function ucs2length$3(str) {
        const len = str.length;
        let length = 0;
        let pos = 0;
        let value;
        while (pos < len) {
            length++;
            value = str.charCodeAt(pos++);
            if (value >= 0xd800 && value <= 0xdbff && pos < len) {
                // high surrogate, and there is a next character
                value = str.charCodeAt(pos);
                if ((value & 0xfc00) === 0xdc00)
                    pos++; // low surrogate
            }
        }
        return length;
    }
    ucs2length$4.default = ucs2length$3;
    ucs2length$3.code = 'require("ajv/dist/runtime/ucs2length").default';

    Object.defineProperty(limitLength$2, "__esModule", { value: true });
    const codegen_1$Q = requireCodegen$2();
    const util_1$K = util$8;
    const ucs2length_1$1 = ucs2length$4;
    const error$C = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxLength" ? "more" : "fewer";
            return (0, codegen_1$Q.str) `must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1$Q._) `{limit: ${schemaCode}}`,
    };
    const def$Z = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error: error$C,
        code(cxt) {
            const { keyword, data, schemaCode, it } = cxt;
            const op = keyword === "maxLength" ? codegen_1$Q.operators.GT : codegen_1$Q.operators.LT;
            const len = it.opts.unicode === false ? (0, codegen_1$Q._) `${data}.length` : (0, codegen_1$Q._) `${(0, util_1$K.useFunc)(cxt.gen, ucs2length_1$1.default)}(${data})`;
            cxt.fail$data((0, codegen_1$Q._) `${len} ${op} ${schemaCode}`);
        },
    };
    limitLength$2.default = def$Z;

    var pattern$2 = {};

    Object.defineProperty(pattern$2, "__esModule", { value: true });
    const code_1$k = requireCode$2();
    const codegen_1$P = requireCodegen$2();
    const error$B = {
        message: ({ schemaCode }) => (0, codegen_1$P.str) `must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$P._) `{pattern: ${schemaCode}}`,
    };
    const def$Y = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error: error$B,
        code(cxt) {
            const { data, $data, schema, schemaCode, it } = cxt;
            // TODO regexp should be wrapped in try/catchs
            const u = it.opts.unicodeRegExp ? "u" : "";
            const regExp = $data ? (0, codegen_1$P._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1$k.usePattern)(cxt, schema);
            cxt.fail$data((0, codegen_1$P._) `!${regExp}.test(${data})`);
        },
    };
    pattern$2.default = def$Y;

    var limitProperties$2 = {};

    Object.defineProperty(limitProperties$2, "__esModule", { value: true });
    const codegen_1$O = requireCodegen$2();
    const error$A = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxProperties" ? "more" : "fewer";
            return (0, codegen_1$O.str) `must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1$O._) `{limit: ${schemaCode}}`,
    };
    const def$X = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error: error$A,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxProperties" ? codegen_1$O.operators.GT : codegen_1$O.operators.LT;
            cxt.fail$data((0, codegen_1$O._) `Object.keys(${data}).length ${op} ${schemaCode}`);
        },
    };
    limitProperties$2.default = def$X;

    var required$4 = {};

    Object.defineProperty(required$4, "__esModule", { value: true });
    const code_1$j = requireCode$2();
    const codegen_1$N = requireCodegen$2();
    const util_1$J = util$8;
    const error$z = {
        message: ({ params: { missingProperty } }) => (0, codegen_1$N.str) `must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1$N._) `{missingProperty: ${missingProperty}}`,
    };
    const def$W = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error: error$z,
        code(cxt) {
            const { gen, schema, schemaCode, data, $data, it } = cxt;
            const { opts } = it;
            if (!$data && schema.length === 0)
                return;
            const useLoop = schema.length >= opts.loopRequired;
            if (it.allErrors)
                allErrorsMode();
            else
                exitOnErrorMode();
            if (opts.strictRequired) {
                const props = cxt.parentSchema.properties;
                const { definedProperties } = cxt.it;
                for (const requiredKey of schema) {
                    if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                        const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                        (0, util_1$J.checkStrictMode)(it, msg, it.opts.strictRequired);
                    }
                }
            }
            function allErrorsMode() {
                if (useLoop || $data) {
                    cxt.block$data(codegen_1$N.nil, loopAllRequired);
                }
                else {
                    for (const prop of schema) {
                        (0, code_1$j.checkReportMissingProp)(cxt, prop);
                    }
                }
            }
            function exitOnErrorMode() {
                const missing = gen.let("missing");
                if (useLoop || $data) {
                    const valid = gen.let("valid", true);
                    cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                    cxt.ok(valid);
                }
                else {
                    gen.if((0, code_1$j.checkMissingProp)(cxt, schema, missing));
                    (0, code_1$j.reportMissingProp)(cxt, missing);
                    gen.else();
                }
            }
            function loopAllRequired() {
                gen.forOf("prop", schemaCode, (prop) => {
                    cxt.setParams({ missingProperty: prop });
                    gen.if((0, code_1$j.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
                });
            }
            function loopUntilMissing(missing, valid) {
                cxt.setParams({ missingProperty: missing });
                gen.forOf(missing, schemaCode, () => {
                    gen.assign(valid, (0, code_1$j.propertyInData)(gen, data, missing, opts.ownProperties));
                    gen.if((0, codegen_1$N.not)(valid), () => {
                        cxt.error();
                        gen.break();
                    });
                }, codegen_1$N.nil);
            }
        },
    };
    required$4.default = def$W;

    var limitItems$2 = {};

    Object.defineProperty(limitItems$2, "__esModule", { value: true });
    const codegen_1$M = requireCodegen$2();
    const error$y = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxItems" ? "more" : "fewer";
            return (0, codegen_1$M.str) `must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1$M._) `{limit: ${schemaCode}}`,
    };
    const def$V = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error: error$y,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxItems" ? codegen_1$M.operators.GT : codegen_1$M.operators.LT;
            cxt.fail$data((0, codegen_1$M._) `${data}.length ${op} ${schemaCode}`);
        },
    };
    limitItems$2.default = def$V;

    var uniqueItems$2 = {};

    Object.defineProperty(uniqueItems$2, "__esModule", { value: true });
    const dataType_1$1 = dataType$2;
    const codegen_1$L = requireCodegen$2();
    const util_1$I = util$8;
    const equal_1$5 = equal$7;
    const error$x = {
        message: ({ params: { i, j } }) => (0, codegen_1$L.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
        params: ({ params: { i, j } }) => (0, codegen_1$L._) `{i: ${i}, j: ${j}}`,
    };
    const def$U = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error: error$x,
        code(cxt) {
            const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
            if (!$data && !schema)
                return;
            const valid = gen.let("valid");
            const itemTypes = parentSchema.items ? (0, dataType_1$1.getSchemaTypes)(parentSchema.items) : [];
            cxt.block$data(valid, validateUniqueItems, (0, codegen_1$L._) `${schemaCode} === false`);
            cxt.ok(valid);
            function validateUniqueItems() {
                const i = gen.let("i", (0, codegen_1$L._) `${data}.length`);
                const j = gen.let("j");
                cxt.setParams({ i, j });
                gen.assign(valid, true);
                gen.if((0, codegen_1$L._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
            }
            function canOptimize() {
                return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
            }
            function loopN(i, j) {
                const item = gen.name("item");
                const wrongType = (0, dataType_1$1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1$1.DataType.Wrong);
                const indices = gen.const("indices", (0, codegen_1$L._) `{}`);
                gen.for((0, codegen_1$L._) `;${i}--;`, () => {
                    gen.let(item, (0, codegen_1$L._) `${data}[${i}]`);
                    gen.if(wrongType, (0, codegen_1$L._) `continue`);
                    if (itemTypes.length > 1)
                        gen.if((0, codegen_1$L._) `typeof ${item} == "string"`, (0, codegen_1$L._) `${item} += "_"`);
                    gen
                        .if((0, codegen_1$L._) `typeof ${indices}[${item}] == "number"`, () => {
                        gen.assign(j, (0, codegen_1$L._) `${indices}[${item}]`);
                        cxt.error();
                        gen.assign(valid, false).break();
                    })
                        .code((0, codegen_1$L._) `${indices}[${item}] = ${i}`);
                });
            }
            function loopN2(i, j) {
                const eql = (0, util_1$I.useFunc)(gen, equal_1$5.default);
                const outer = gen.name("outer");
                gen.label(outer).for((0, codegen_1$L._) `;${i}--;`, () => gen.for((0, codegen_1$L._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1$L._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                    cxt.error();
                    gen.assign(valid, false).break(outer);
                })));
            }
        },
    };
    uniqueItems$2.default = def$U;

    var _const$2 = {};

    Object.defineProperty(_const$2, "__esModule", { value: true });
    const codegen_1$K = requireCodegen$2();
    const util_1$H = util$8;
    const equal_1$4 = equal$7;
    const error$w = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1$K._) `{allowedValue: ${schemaCode}}`,
    };
    const def$T = {
        keyword: "const",
        $data: true,
        error: error$w,
        code(cxt) {
            const { gen, data, $data, schemaCode, schema } = cxt;
            if ($data || (schema && typeof schema == "object")) {
                cxt.fail$data((0, codegen_1$K._) `!${(0, util_1$H.useFunc)(gen, equal_1$4.default)}(${data}, ${schemaCode})`);
            }
            else {
                cxt.fail((0, codegen_1$K._) `${schema} !== ${data}`);
            }
        },
    };
    _const$2.default = def$T;

    var _enum$3 = {};

    Object.defineProperty(_enum$3, "__esModule", { value: true });
    const codegen_1$J = requireCodegen$2();
    const util_1$G = util$8;
    const equal_1$3 = equal$7;
    const error$v = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1$J._) `{allowedValues: ${schemaCode}}`,
    };
    const def$S = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error: error$v,
        code(cxt) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            if (!$data && schema.length === 0)
                throw new Error("enum must have non-empty array");
            const useLoop = schema.length >= it.opts.loopEnum;
            let eql;
            const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1$G.useFunc)(gen, equal_1$3.default)));
            let valid;
            if (useLoop || $data) {
                valid = gen.let("valid");
                cxt.block$data(valid, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                const vSchema = gen.const("vSchema", schemaCode);
                valid = (0, codegen_1$J.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.assign(valid, false);
                gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1$J._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
            }
            function equalCode(vSchema, i) {
                const sch = schema[i];
                return typeof sch === "object" && sch !== null
                    ? (0, codegen_1$J._) `${getEql()}(${data}, ${vSchema}[${i}])`
                    : (0, codegen_1$J._) `${data} === ${sch}`;
            }
        },
    };
    _enum$3.default = def$S;

    Object.defineProperty(validation$4, "__esModule", { value: true });
    const limitNumber_1$1 = limitNumber$2;
    const multipleOf_1$1 = multipleOf$2;
    const limitLength_1$1 = limitLength$2;
    const pattern_1$1 = pattern$2;
    const limitProperties_1$1 = limitProperties$2;
    const required_1$1 = required$4;
    const limitItems_1$1 = limitItems$2;
    const uniqueItems_1$1 = uniqueItems$2;
    const const_1$1 = _const$2;
    const enum_1$2 = _enum$3;
    const validation$3 = [
        // number
        limitNumber_1$1.default,
        multipleOf_1$1.default,
        // string
        limitLength_1$1.default,
        pattern_1$1.default,
        // object
        limitProperties_1$1.default,
        required_1$1.default,
        // array
        limitItems_1$1.default,
        uniqueItems_1$1.default,
        // any
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1$1.default,
        enum_1$2.default,
    ];
    validation$4.default = validation$3;

    var applicator$2 = {};

    var additionalItems$2 = {};

    Object.defineProperty(additionalItems$2, "__esModule", { value: true });
    additionalItems$2.validateAdditionalItems = void 0;
    const codegen_1$I = requireCodegen$2();
    const util_1$F = util$8;
    const error$u = {
        message: ({ params: { len } }) => (0, codegen_1$I.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$I._) `{limit: ${len}}`,
    };
    const def$R = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error: error$u,
        code(cxt) {
            const { parentSchema, it } = cxt;
            const { items } = parentSchema;
            if (!Array.isArray(items)) {
                (0, util_1$F.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
                return;
            }
            validateAdditionalItems$1(cxt, items);
        },
    };
    function validateAdditionalItems$1(cxt, items) {
        const { gen, schema, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1$I._) `${data}.length`);
        if (schema === false) {
            cxt.setParams({ len: items.length });
            cxt.pass((0, codegen_1$I._) `${len} <= ${items.length}`);
        }
        else if (typeof schema == "object" && !(0, util_1$F.alwaysValidSchema)(it, schema)) {
            const valid = gen.var("valid", (0, codegen_1$I._) `${len} <= ${items.length}`); // TODO var
            gen.if((0, codegen_1$I.not)(valid), () => validateItems(valid));
            cxt.ok(valid);
        }
        function validateItems(valid) {
            gen.forRange("i", items.length, len, (i) => {
                cxt.subschema({ keyword, dataProp: i, dataPropType: util_1$F.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if((0, codegen_1$I.not)(valid), () => gen.break());
            });
        }
    }
    additionalItems$2.validateAdditionalItems = validateAdditionalItems$1;
    additionalItems$2.default = def$R;

    var prefixItems$2 = {};

    var items$2 = {};

    Object.defineProperty(items$2, "__esModule", { value: true });
    items$2.validateTuple = void 0;
    const codegen_1$H = requireCodegen$2();
    const util_1$E = util$8;
    const code_1$i = requireCode$2();
    const def$Q = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
            const { schema, it } = cxt;
            if (Array.isArray(schema))
                return validateTuple$1(cxt, "additionalItems", schema);
            it.items = true;
            if ((0, util_1$E.alwaysValidSchema)(it, schema))
                return;
            cxt.ok((0, code_1$i.validateArray)(cxt));
        },
    };
    function validateTuple$1(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
            it.items = util_1$E.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1$H._) `${data}.length`);
        schArr.forEach((sch, i) => {
            if ((0, util_1$E.alwaysValidSchema)(it, sch))
                return;
            gen.if((0, codegen_1$H._) `${len} > ${i}`, () => cxt.subschema({
                keyword,
                schemaProp: i,
                dataProp: i,
            }, valid));
            cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
            const { opts, errSchemaPath } = it;
            const l = schArr.length;
            const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
            if (opts.strictTuples && !fullTuple) {
                const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
                (0, util_1$E.checkStrictMode)(it, msg, opts.strictTuples);
            }
        }
    }
    items$2.validateTuple = validateTuple$1;
    items$2.default = def$Q;

    Object.defineProperty(prefixItems$2, "__esModule", { value: true });
    const items_1$3 = items$2;
    const def$P = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1$3.validateTuple)(cxt, "items"),
    };
    prefixItems$2.default = def$P;

    var items2020$2 = {};

    Object.defineProperty(items2020$2, "__esModule", { value: true });
    const codegen_1$G = requireCodegen$2();
    const util_1$D = util$8;
    const code_1$h = requireCode$2();
    const additionalItems_1$3 = additionalItems$2;
    const error$t = {
        message: ({ params: { len } }) => (0, codegen_1$G.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$G._) `{limit: ${len}}`,
    };
    const def$O = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error: error$t,
        code(cxt) {
            const { schema, parentSchema, it } = cxt;
            const { prefixItems } = parentSchema;
            it.items = true;
            if ((0, util_1$D.alwaysValidSchema)(it, schema))
                return;
            if (prefixItems)
                (0, additionalItems_1$3.validateAdditionalItems)(cxt, prefixItems);
            else
                cxt.ok((0, code_1$h.validateArray)(cxt));
        },
    };
    items2020$2.default = def$O;

    var contains$2 = {};

    Object.defineProperty(contains$2, "__esModule", { value: true });
    const codegen_1$F = requireCodegen$2();
    const util_1$C = util$8;
    const error$s = {
        message: ({ params: { min, max } }) => max === undefined
            ? (0, codegen_1$F.str) `must contain at least ${min} valid item(s)`
            : (0, codegen_1$F.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1$F._) `{minContains: ${min}}` : (0, codegen_1$F._) `{minContains: ${min}, maxContains: ${max}}`,
    };
    const def$N = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error: error$s,
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            let min;
            let max;
            const { minContains, maxContains } = parentSchema;
            if (it.opts.next) {
                min = minContains === undefined ? 1 : minContains;
                max = maxContains;
            }
            else {
                min = 1;
            }
            const len = gen.const("len", (0, codegen_1$F._) `${data}.length`);
            cxt.setParams({ min, max });
            if (max === undefined && min === 0) {
                (0, util_1$C.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
                return;
            }
            if (max !== undefined && min > max) {
                (0, util_1$C.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
                cxt.fail();
                return;
            }
            if ((0, util_1$C.alwaysValidSchema)(it, schema)) {
                let cond = (0, codegen_1$F._) `${len} >= ${min}`;
                if (max !== undefined)
                    cond = (0, codegen_1$F._) `${cond} && ${len} <= ${max}`;
                cxt.pass(cond);
                return;
            }
            it.items = true;
            const valid = gen.name("valid");
            if (max === undefined && min === 1) {
                validateItems(valid, () => gen.if(valid, () => gen.break()));
            }
            else if (min === 0) {
                gen.let(valid, true);
                if (max !== undefined)
                    gen.if((0, codegen_1$F._) `${data}.length > 0`, validateItemsWithCount);
            }
            else {
                gen.let(valid, false);
                validateItemsWithCount();
            }
            cxt.result(valid, () => cxt.reset());
            function validateItemsWithCount() {
                const schValid = gen.name("_valid");
                const count = gen.let("count", 0);
                validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
            }
            function validateItems(_valid, block) {
                gen.forRange("i", 0, len, (i) => {
                    cxt.subschema({
                        keyword: "contains",
                        dataProp: i,
                        dataPropType: util_1$C.Type.Num,
                        compositeRule: true,
                    }, _valid);
                    block();
                });
            }
            function checkLimits(count) {
                gen.code((0, codegen_1$F._) `${count}++`);
                if (max === undefined) {
                    gen.if((0, codegen_1$F._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
                }
                else {
                    gen.if((0, codegen_1$F._) `${count} > ${max}`, () => gen.assign(valid, false).break());
                    if (min === 1)
                        gen.assign(valid, true);
                    else
                        gen.if((0, codegen_1$F._) `${count} >= ${min}`, () => gen.assign(valid, true));
                }
            }
        },
    };
    contains$2.default = def$N;

    var dependencies$2 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    	const codegen_1 = requireCodegen$2();
    	const util_1 = util$8;
    	const code_1 = requireCode$2();
    	exports.error = {
    	    message: ({ params: { property, depsCount, deps } }) => {
    	        const property_ies = depsCount === 1 ? "property" : "properties";
    	        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
    	    },
    	    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
    	};
    	const def = {
    	    keyword: "dependencies",
    	    type: "object",
    	    schemaType: "object",
    	    error: exports.error,
    	    code(cxt) {
    	        const [propDeps, schDeps] = splitDependencies(cxt);
    	        validatePropertyDeps(cxt, propDeps);
    	        validateSchemaDeps(cxt, schDeps);
    	    },
    	};
    	function splitDependencies({ schema }) {
    	    const propertyDeps = {};
    	    const schemaDeps = {};
    	    for (const key in schema) {
    	        if (key === "__proto__")
    	            continue;
    	        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
    	        deps[key] = schema[key];
    	    }
    	    return [propertyDeps, schemaDeps];
    	}
    	function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    	    const { gen, data, it } = cxt;
    	    if (Object.keys(propertyDeps).length === 0)
    	        return;
    	    const missing = gen.let("missing");
    	    for (const prop in propertyDeps) {
    	        const deps = propertyDeps[prop];
    	        if (deps.length === 0)
    	            continue;
    	        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
    	        cxt.setParams({
    	            property: prop,
    	            depsCount: deps.length,
    	            deps: deps.join(", "),
    	        });
    	        if (it.allErrors) {
    	            gen.if(hasProperty, () => {
    	                for (const depProp of deps) {
    	                    (0, code_1.checkReportMissingProp)(cxt, depProp);
    	                }
    	            });
    	        }
    	        else {
    	            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
    	            (0, code_1.reportMissingProp)(cxt, missing);
    	            gen.else();
    	        }
    	    }
    	}
    	exports.validatePropertyDeps = validatePropertyDeps;
    	function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    	    const { gen, data, keyword, it } = cxt;
    	    const valid = gen.name("valid");
    	    for (const prop in schemaDeps) {
    	        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
    	            continue;
    	        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
    	            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
    	            cxt.mergeValidEvaluated(schCxt, valid);
    	        }, () => gen.var(valid, true) // TODO var
    	        );
    	        cxt.ok(valid);
    	    }
    	}
    	exports.validateSchemaDeps = validateSchemaDeps;
    	exports.default = def;
    	
    } (dependencies$2));

    var propertyNames$2 = {};

    Object.defineProperty(propertyNames$2, "__esModule", { value: true });
    const codegen_1$E = requireCodegen$2();
    const util_1$B = util$8;
    const error$r = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1$E._) `{propertyName: ${params.propertyName}}`,
    };
    const def$M = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error: error$r,
        code(cxt) {
            const { gen, schema, data, it } = cxt;
            if ((0, util_1$B.alwaysValidSchema)(it, schema))
                return;
            const valid = gen.name("valid");
            gen.forIn("key", data, (key) => {
                cxt.setParams({ propertyName: key });
                cxt.subschema({
                    keyword: "propertyNames",
                    data: key,
                    dataTypes: ["string"],
                    propertyName: key,
                    compositeRule: true,
                }, valid);
                gen.if((0, codegen_1$E.not)(valid), () => {
                    cxt.error(true);
                    if (!it.allErrors)
                        gen.break();
                });
            });
            cxt.ok(valid);
        },
    };
    propertyNames$2.default = def$M;

    var additionalProperties$4 = {};

    Object.defineProperty(additionalProperties$4, "__esModule", { value: true });
    const code_1$g = requireCode$2();
    const codegen_1$D = requireCodegen$2();
    const names_1$7 = requireNames$1();
    const util_1$A = util$8;
    const error$q = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1$D._) `{additionalProperty: ${params.additionalProperty}}`,
    };
    const def$L = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error: error$q,
        code(cxt) {
            const { gen, schema, parentSchema, data, errsCount, it } = cxt;
            /* istanbul ignore if */
            if (!errsCount)
                throw new Error("ajv implementation error");
            const { allErrors, opts } = it;
            it.props = true;
            if (opts.removeAdditional !== "all" && (0, util_1$A.alwaysValidSchema)(it, schema))
                return;
            const props = (0, code_1$g.allSchemaProperties)(parentSchema.properties);
            const patProps = (0, code_1$g.allSchemaProperties)(parentSchema.patternProperties);
            checkAdditionalProperties();
            cxt.ok((0, codegen_1$D._) `${errsCount} === ${names_1$7.default.errors}`);
            function checkAdditionalProperties() {
                gen.forIn("key", data, (key) => {
                    if (!props.length && !patProps.length)
                        additionalPropertyCode(key);
                    else
                        gen.if(isAdditional(key), () => additionalPropertyCode(key));
                });
            }
            function isAdditional(key) {
                let definedProp;
                if (props.length > 8) {
                    // TODO maybe an option instead of hard-coded 8?
                    const propsSchema = (0, util_1$A.schemaRefOrVal)(it, parentSchema.properties, "properties");
                    definedProp = (0, code_1$g.isOwnProperty)(gen, propsSchema, key);
                }
                else if (props.length) {
                    definedProp = (0, codegen_1$D.or)(...props.map((p) => (0, codegen_1$D._) `${key} === ${p}`));
                }
                else {
                    definedProp = codegen_1$D.nil;
                }
                if (patProps.length) {
                    definedProp = (0, codegen_1$D.or)(definedProp, ...patProps.map((p) => (0, codegen_1$D._) `${(0, code_1$g.usePattern)(cxt, p)}.test(${key})`));
                }
                return (0, codegen_1$D.not)(definedProp);
            }
            function deleteAdditional(key) {
                gen.code((0, codegen_1$D._) `delete ${data}[${key}]`);
            }
            function additionalPropertyCode(key) {
                if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                    deleteAdditional(key);
                    return;
                }
                if (schema === false) {
                    cxt.setParams({ additionalProperty: key });
                    cxt.error();
                    if (!allErrors)
                        gen.break();
                    return;
                }
                if (typeof schema == "object" && !(0, util_1$A.alwaysValidSchema)(it, schema)) {
                    const valid = gen.name("valid");
                    if (opts.removeAdditional === "failing") {
                        applyAdditionalSchema(key, valid, false);
                        gen.if((0, codegen_1$D.not)(valid), () => {
                            cxt.reset();
                            deleteAdditional(key);
                        });
                    }
                    else {
                        applyAdditionalSchema(key, valid);
                        if (!allErrors)
                            gen.if((0, codegen_1$D.not)(valid), () => gen.break());
                    }
                }
            }
            function applyAdditionalSchema(key, valid, errors) {
                const subschema = {
                    keyword: "additionalProperties",
                    dataProp: key,
                    dataPropType: util_1$A.Type.Str,
                };
                if (errors === false) {
                    Object.assign(subschema, {
                        compositeRule: true,
                        createErrors: false,
                        allErrors: false,
                    });
                }
                cxt.subschema(subschema, valid);
            }
        },
    };
    additionalProperties$4.default = def$L;

    var properties$8 = {};

    Object.defineProperty(properties$8, "__esModule", { value: true });
    const validate_1$2 = requireValidate$2();
    const code_1$f = requireCode$2();
    const util_1$z = util$8;
    const additionalProperties_1$3 = additionalProperties$4;
    const def$K = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
                additionalProperties_1$3.default.code(new validate_1$2.KeywordCxt(it, additionalProperties_1$3.default, "additionalProperties"));
            }
            const allProps = (0, code_1$f.allSchemaProperties)(schema);
            for (const prop of allProps) {
                it.definedProperties.add(prop);
            }
            if (it.opts.unevaluated && allProps.length && it.props !== true) {
                it.props = util_1$z.mergeEvaluated.props(gen, (0, util_1$z.toHash)(allProps), it.props);
            }
            const properties = allProps.filter((p) => !(0, util_1$z.alwaysValidSchema)(it, schema[p]));
            if (properties.length === 0)
                return;
            const valid = gen.name("valid");
            for (const prop of properties) {
                if (hasDefault(prop)) {
                    applyPropertySchema(prop);
                }
                else {
                    gen.if((0, code_1$f.propertyInData)(gen, data, prop, it.opts.ownProperties));
                    applyPropertySchema(prop);
                    if (!it.allErrors)
                        gen.else().var(valid, true);
                    gen.endIf();
                }
                cxt.it.definedProperties.add(prop);
                cxt.ok(valid);
            }
            function hasDefault(prop) {
                return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
            }
            function applyPropertySchema(prop) {
                cxt.subschema({
                    keyword: "properties",
                    schemaProp: prop,
                    dataProp: prop,
                }, valid);
            }
        },
    };
    properties$8.default = def$K;

    var patternProperties$2 = {};

    Object.defineProperty(patternProperties$2, "__esModule", { value: true });
    const code_1$e = requireCode$2();
    const codegen_1$C = requireCodegen$2();
    const util_1$y = util$8;
    const util_2$2 = util$8;
    const def$J = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, data, parentSchema, it } = cxt;
            const { opts } = it;
            const patterns = (0, code_1$e.allSchemaProperties)(schema);
            const alwaysValidPatterns = patterns.filter((p) => (0, util_1$y.alwaysValidSchema)(it, schema[p]));
            if (patterns.length === 0 ||
                (alwaysValidPatterns.length === patterns.length &&
                    (!it.opts.unevaluated || it.props === true))) {
                return;
            }
            const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
            const valid = gen.name("valid");
            if (it.props !== true && !(it.props instanceof codegen_1$C.Name)) {
                it.props = (0, util_2$2.evaluatedPropsToName)(gen, it.props);
            }
            const { props } = it;
            validatePatternProperties();
            function validatePatternProperties() {
                for (const pat of patterns) {
                    if (checkProperties)
                        checkMatchingProperties(pat);
                    if (it.allErrors) {
                        validateProperties(pat);
                    }
                    else {
                        gen.var(valid, true); // TODO var
                        validateProperties(pat);
                        gen.if(valid);
                    }
                }
            }
            function checkMatchingProperties(pat) {
                for (const prop in checkProperties) {
                    if (new RegExp(pat).test(prop)) {
                        (0, util_1$y.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                    }
                }
            }
            function validateProperties(pat) {
                gen.forIn("key", data, (key) => {
                    gen.if((0, codegen_1$C._) `${(0, code_1$e.usePattern)(cxt, pat)}.test(${key})`, () => {
                        const alwaysValid = alwaysValidPatterns.includes(pat);
                        if (!alwaysValid) {
                            cxt.subschema({
                                keyword: "patternProperties",
                                schemaProp: pat,
                                dataProp: key,
                                dataPropType: util_2$2.Type.Str,
                            }, valid);
                        }
                        if (it.opts.unevaluated && props !== true) {
                            gen.assign((0, codegen_1$C._) `${props}[${key}]`, true);
                        }
                        else if (!alwaysValid && !it.allErrors) {
                            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                            // or if all properties were evaluated (props === true)
                            gen.if((0, codegen_1$C.not)(valid), () => gen.break());
                        }
                    });
                });
            }
        },
    };
    patternProperties$2.default = def$J;

    var not$2 = {};

    Object.defineProperty(not$2, "__esModule", { value: true });
    const util_1$x = util$8;
    const def$I = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
            const { gen, schema, it } = cxt;
            if ((0, util_1$x.alwaysValidSchema)(it, schema)) {
                cxt.fail();
                return;
            }
            const valid = gen.name("valid");
            cxt.subschema({
                keyword: "not",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, valid);
            cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" },
    };
    not$2.default = def$I;

    var anyOf$2 = {};

    Object.defineProperty(anyOf$2, "__esModule", { value: true });
    const code_1$d = requireCode$2();
    const def$H = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1$d.validateUnion,
        error: { message: "must match a schema in anyOf" },
    };
    anyOf$2.default = def$H;

    var oneOf$2 = {};

    Object.defineProperty(oneOf$2, "__esModule", { value: true });
    const codegen_1$B = requireCodegen$2();
    const util_1$w = util$8;
    const error$p = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1$B._) `{passingSchemas: ${params.passing}}`,
    };
    const def$G = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error: error$p,
        code(cxt) {
            const { gen, schema, parentSchema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            if (it.opts.discriminator && parentSchema.discriminator)
                return;
            const schArr = schema;
            const valid = gen.let("valid", false);
            const passing = gen.let("passing", null);
            const schValid = gen.name("_valid");
            cxt.setParams({ passing });
            // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
            gen.block(validateOneOf);
            cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
            function validateOneOf() {
                schArr.forEach((sch, i) => {
                    let schCxt;
                    if ((0, util_1$w.alwaysValidSchema)(it, sch)) {
                        gen.var(schValid, true);
                    }
                    else {
                        schCxt = cxt.subschema({
                            keyword: "oneOf",
                            schemaProp: i,
                            compositeRule: true,
                        }, schValid);
                    }
                    if (i > 0) {
                        gen
                            .if((0, codegen_1$B._) `${schValid} && ${valid}`)
                            .assign(valid, false)
                            .assign(passing, (0, codegen_1$B._) `[${passing}, ${i}]`)
                            .else();
                    }
                    gen.if(schValid, () => {
                        gen.assign(valid, true);
                        gen.assign(passing, i);
                        if (schCxt)
                            cxt.mergeEvaluated(schCxt, codegen_1$B.Name);
                    });
                });
            }
        },
    };
    oneOf$2.default = def$G;

    var allOf$2 = {};

    Object.defineProperty(allOf$2, "__esModule", { value: true });
    const util_1$v = util$8;
    const def$F = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
            const { gen, schema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const valid = gen.name("valid");
            schema.forEach((sch, i) => {
                if ((0, util_1$v.alwaysValidSchema)(it, sch))
                    return;
                const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
                cxt.ok(valid);
                cxt.mergeEvaluated(schCxt);
            });
        },
    };
    allOf$2.default = def$F;

    var _if$2 = {};

    Object.defineProperty(_if$2, "__esModule", { value: true });
    const codegen_1$A = requireCodegen$2();
    const util_1$u = util$8;
    const error$o = {
        message: ({ params }) => (0, codegen_1$A.str) `must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1$A._) `{failingKeyword: ${params.ifClause}}`,
    };
    const def$E = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error: error$o,
        code(cxt) {
            const { gen, parentSchema, it } = cxt;
            if (parentSchema.then === undefined && parentSchema.else === undefined) {
                (0, util_1$u.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
            }
            const hasThen = hasSchema$1(it, "then");
            const hasElse = hasSchema$1(it, "else");
            if (!hasThen && !hasElse)
                return;
            const valid = gen.let("valid", true);
            const schValid = gen.name("_valid");
            validateIf();
            cxt.reset();
            if (hasThen && hasElse) {
                const ifClause = gen.let("ifClause");
                cxt.setParams({ ifClause });
                gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
            }
            else if (hasThen) {
                gen.if(schValid, validateClause("then"));
            }
            else {
                gen.if((0, codegen_1$A.not)(schValid), validateClause("else"));
            }
            cxt.pass(valid, () => cxt.error(true));
            function validateIf() {
                const schCxt = cxt.subschema({
                    keyword: "if",
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                }, schValid);
                cxt.mergeEvaluated(schCxt);
            }
            function validateClause(keyword, ifClause) {
                return () => {
                    const schCxt = cxt.subschema({ keyword }, schValid);
                    gen.assign(valid, schValid);
                    cxt.mergeValidEvaluated(schCxt, valid);
                    if (ifClause)
                        gen.assign(ifClause, (0, codegen_1$A._) `${keyword}`);
                    else
                        cxt.setParams({ ifClause: keyword });
                };
            }
        },
    };
    function hasSchema$1(it, keyword) {
        const schema = it.schema[keyword];
        return schema !== undefined && !(0, util_1$u.alwaysValidSchema)(it, schema);
    }
    _if$2.default = def$E;

    var thenElse$2 = {};

    Object.defineProperty(thenElse$2, "__esModule", { value: true });
    const util_1$t = util$8;
    const def$D = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
            if (parentSchema.if === undefined)
                (0, util_1$t.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        },
    };
    thenElse$2.default = def$D;

    Object.defineProperty(applicator$2, "__esModule", { value: true });
    const additionalItems_1$2 = additionalItems$2;
    const prefixItems_1$1 = prefixItems$2;
    const items_1$2 = items$2;
    const items2020_1$1 = items2020$2;
    const contains_1$1 = contains$2;
    const dependencies_1$1 = dependencies$2;
    const propertyNames_1$1 = propertyNames$2;
    const additionalProperties_1$2 = additionalProperties$4;
    const properties_1$3 = properties$8;
    const patternProperties_1$1 = patternProperties$2;
    const not_1$1 = not$2;
    const anyOf_1$1 = anyOf$2;
    const oneOf_1$1 = oneOf$2;
    const allOf_1$1 = allOf$2;
    const if_1$1 = _if$2;
    const thenElse_1$1 = thenElse$2;
    function getApplicator$1(draft2020 = false) {
        const applicator = [
            // any
            not_1$1.default,
            anyOf_1$1.default,
            oneOf_1$1.default,
            allOf_1$1.default,
            if_1$1.default,
            thenElse_1$1.default,
            // object
            propertyNames_1$1.default,
            additionalProperties_1$2.default,
            dependencies_1$1.default,
            properties_1$3.default,
            patternProperties_1$1.default,
        ];
        // array
        if (draft2020)
            applicator.push(prefixItems_1$1.default, items2020_1$1.default);
        else
            applicator.push(additionalItems_1$2.default, items_1$2.default);
        applicator.push(contains_1$1.default);
        return applicator;
    }
    applicator$2.default = getApplicator$1;

    var format$7 = {};

    var format$6 = {};

    Object.defineProperty(format$6, "__esModule", { value: true });
    const codegen_1$z = requireCodegen$2();
    const error$n = {
        message: ({ schemaCode }) => (0, codegen_1$z.str) `must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$z._) `{format: ${schemaCode}}`,
    };
    const def$C = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error: error$n,
        code(cxt, ruleType) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            const { opts, errSchemaPath, schemaEnv, self } = it;
            if (!opts.validateFormats)
                return;
            if ($data)
                validate$DataFormat();
            else
                validateFormat();
            function validate$DataFormat() {
                const fmts = gen.scopeValue("formats", {
                    ref: self.formats,
                    code: opts.code.formats,
                });
                const fDef = gen.const("fDef", (0, codegen_1$z._) `${fmts}[${schemaCode}]`);
                const fType = gen.let("fType");
                const format = gen.let("format");
                // TODO simplify
                gen.if((0, codegen_1$z._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1$z._) `${fDef}.type || "string"`).assign(format, (0, codegen_1$z._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1$z._) `"string"`).assign(format, fDef));
                cxt.fail$data((0, codegen_1$z.or)(unknownFmt(), invalidFmt()));
                function unknownFmt() {
                    if (opts.strictSchema === false)
                        return codegen_1$z.nil;
                    return (0, codegen_1$z._) `${schemaCode} && !${format}`;
                }
                function invalidFmt() {
                    const callFormat = schemaEnv.$async
                        ? (0, codegen_1$z._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                        : (0, codegen_1$z._) `${format}(${data})`;
                    const validData = (0, codegen_1$z._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                    return (0, codegen_1$z._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
                }
            }
            function validateFormat() {
                const formatDef = self.formats[schema];
                if (!formatDef) {
                    unknownFormat();
                    return;
                }
                if (formatDef === true)
                    return;
                const [fmtType, format, fmtRef] = getFormat(formatDef);
                if (fmtType === ruleType)
                    cxt.pass(validCondition());
                function unknownFormat() {
                    if (opts.strictSchema === false) {
                        self.logger.warn(unknownMsg());
                        return;
                    }
                    throw new Error(unknownMsg());
                    function unknownMsg() {
                        return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                    }
                }
                function getFormat(fmtDef) {
                    const code = fmtDef instanceof RegExp
                        ? (0, codegen_1$z.regexpCode)(fmtDef)
                        : opts.code.formats
                            ? (0, codegen_1$z._) `${opts.code.formats}${(0, codegen_1$z.getProperty)(schema)}`
                            : undefined;
                    const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
                    if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                        return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1$z._) `${fmt}.validate`];
                    }
                    return ["string", fmtDef, fmt];
                }
                function validCondition() {
                    if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                        if (!schemaEnv.$async)
                            throw new Error("async format in sync schema");
                        return (0, codegen_1$z._) `await ${fmtRef}(${data})`;
                    }
                    return typeof format == "function" ? (0, codegen_1$z._) `${fmtRef}(${data})` : (0, codegen_1$z._) `${fmtRef}.test(${data})`;
                }
            }
        },
    };
    format$6.default = def$C;

    Object.defineProperty(format$7, "__esModule", { value: true });
    const format_1$3 = format$6;
    const format$5 = [format_1$3.default];
    format$7.default = format$5;

    var metadata$3 = {};

    Object.defineProperty(metadata$3, "__esModule", { value: true });
    metadata$3.contentVocabulary = metadata$3.metadataVocabulary = void 0;
    metadata$3.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples",
    ];
    metadata$3.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema",
    ];

    Object.defineProperty(draft7$2, "__esModule", { value: true });
    const core_1$1 = core$6;
    const validation_1$1 = validation$4;
    const applicator_1$1 = applicator$2;
    const format_1$2 = format$7;
    const metadata_1$7 = metadata$3;
    const draft7Vocabularies$1 = [
        core_1$1.default,
        validation_1$1.default,
        (0, applicator_1$1.default)(),
        format_1$2.default,
        metadata_1$7.metadataVocabulary,
        metadata_1$7.contentVocabulary,
    ];
    draft7$2.default = draft7Vocabularies$1;

    var discriminator$3 = {};

    var types$8 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.DiscrError = void 0;
    	(function (DiscrError) {
    	    DiscrError["Tag"] = "tag";
    	    DiscrError["Mapping"] = "mapping";
    	})(exports.DiscrError || (exports.DiscrError = {}));
    	
    } (types$8));

    Object.defineProperty(discriminator$3, "__esModule", { value: true });
    const codegen_1$y = requireCodegen$2();
    const types_1$4 = types$8;
    const compile_1$3 = compile$2;
    const util_1$s = util$8;
    const error$m = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1$4.DiscrError.Tag
            ? `tag "${tagName}" must be string`
            : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1$y._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
    };
    const def$B = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error: error$m,
        code(cxt) {
            const { gen, data, schema, parentSchema, it } = cxt;
            const { oneOf } = parentSchema;
            if (!it.opts.discriminator) {
                throw new Error("discriminator: requires discriminator option");
            }
            const tagName = schema.propertyName;
            if (typeof tagName != "string")
                throw new Error("discriminator: requires propertyName");
            if (schema.mapping)
                throw new Error("discriminator: mapping is not supported");
            if (!oneOf)
                throw new Error("discriminator: requires oneOf keyword");
            const valid = gen.let("valid", false);
            const tag = gen.const("tag", (0, codegen_1$y._) `${data}${(0, codegen_1$y.getProperty)(tagName)}`);
            gen.if((0, codegen_1$y._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1$4.DiscrError.Tag, tag, tagName }));
            cxt.ok(valid);
            function validateMapping() {
                const mapping = getMapping();
                gen.if(false);
                for (const tagValue in mapping) {
                    gen.elseIf((0, codegen_1$y._) `${tag} === ${tagValue}`);
                    gen.assign(valid, applyTagSchema(mapping[tagValue]));
                }
                gen.else();
                cxt.error(false, { discrError: types_1$4.DiscrError.Mapping, tag, tagName });
                gen.endIf();
            }
            function applyTagSchema(schemaProp) {
                const _valid = gen.name("valid");
                const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
                cxt.mergeEvaluated(schCxt, codegen_1$y.Name);
                return _valid;
            }
            function getMapping() {
                var _a;
                const oneOfMapping = {};
                const topRequired = hasRequired(parentSchema);
                let tagRequired = true;
                for (let i = 0; i < oneOf.length; i++) {
                    let sch = oneOf[i];
                    if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1$s.schemaHasRulesButRef)(sch, it.self.RULES)) {
                        sch = compile_1$3.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                        if (sch instanceof compile_1$3.SchemaEnv)
                            sch = sch.schema;
                    }
                    const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                    if (typeof propSch != "object") {
                        throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                    }
                    tagRequired = tagRequired && (topRequired || hasRequired(sch));
                    addMappings(propSch, i);
                }
                if (!tagRequired)
                    throw new Error(`discriminator: "${tagName}" must be required`);
                return oneOfMapping;
                function hasRequired({ required }) {
                    return Array.isArray(required) && required.includes(tagName);
                }
                function addMappings(sch, i) {
                    if (sch.const) {
                        addMapping(sch.const, i);
                    }
                    else if (sch.enum) {
                        for (const tagValue of sch.enum) {
                            addMapping(tagValue, i);
                        }
                    }
                    else {
                        throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                    }
                }
                function addMapping(tagValue, i) {
                    if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                        throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                    }
                    oneOfMapping[tagValue] = i;
                }
            }
        },
    };
    discriminator$3.default = def$B;

    var $schema$2 = "http://json-schema.org/draft-07/schema#";
    var $id$4 = "http://json-schema.org/draft-07/schema#";
    var title$2 = "Core schema meta-schema";
    var definitions$2 = {
    	schemaArray: {
    		type: "array",
    		minItems: 1,
    		items: {
    			$ref: "#"
    		}
    	},
    	nonNegativeInteger: {
    		type: "integer",
    		minimum: 0
    	},
    	nonNegativeIntegerDefault0: {
    		allOf: [
    			{
    				$ref: "#/definitions/nonNegativeInteger"
    			},
    			{
    				"default": 0
    			}
    		]
    	},
    	simpleTypes: {
    		"enum": [
    			"array",
    			"boolean",
    			"integer",
    			"null",
    			"number",
    			"object",
    			"string"
    		]
    	},
    	stringArray: {
    		type: "array",
    		items: {
    			type: "string"
    		},
    		uniqueItems: true,
    		"default": [
    		]
    	}
    };
    var type$5 = [
    	"object",
    	"boolean"
    ];
    var properties$7 = {
    	$id: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$schema: {
    		type: "string",
    		format: "uri"
    	},
    	$ref: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$comment: {
    		type: "string"
    	},
    	title: {
    		type: "string"
    	},
    	description: {
    		type: "string"
    	},
    	"default": true,
    	readOnly: {
    		type: "boolean",
    		"default": false
    	},
    	examples: {
    		type: "array",
    		items: true
    	},
    	multipleOf: {
    		type: "number",
    		exclusiveMinimum: 0
    	},
    	maximum: {
    		type: "number"
    	},
    	exclusiveMaximum: {
    		type: "number"
    	},
    	minimum: {
    		type: "number"
    	},
    	exclusiveMinimum: {
    		type: "number"
    	},
    	maxLength: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minLength: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	pattern: {
    		type: "string",
    		format: "regex"
    	},
    	additionalItems: {
    		$ref: "#"
    	},
    	items: {
    		anyOf: [
    			{
    				$ref: "#"
    			},
    			{
    				$ref: "#/definitions/schemaArray"
    			}
    		],
    		"default": true
    	},
    	maxItems: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minItems: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	uniqueItems: {
    		type: "boolean",
    		"default": false
    	},
    	contains: {
    		$ref: "#"
    	},
    	maxProperties: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minProperties: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	required: {
    		$ref: "#/definitions/stringArray"
    	},
    	additionalProperties: {
    		$ref: "#"
    	},
    	definitions: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	properties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	patternProperties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		propertyNames: {
    			format: "regex"
    		},
    		"default": {
    		}
    	},
    	dependencies: {
    		type: "object",
    		additionalProperties: {
    			anyOf: [
    				{
    					$ref: "#"
    				},
    				{
    					$ref: "#/definitions/stringArray"
    				}
    			]
    		}
    	},
    	propertyNames: {
    		$ref: "#"
    	},
    	"const": true,
    	"enum": {
    		type: "array",
    		items: true,
    		minItems: 1,
    		uniqueItems: true
    	},
    	type: {
    		anyOf: [
    			{
    				$ref: "#/definitions/simpleTypes"
    			},
    			{
    				type: "array",
    				items: {
    					$ref: "#/definitions/simpleTypes"
    				},
    				minItems: 1,
    				uniqueItems: true
    			}
    		]
    	},
    	format: {
    		type: "string"
    	},
    	contentMediaType: {
    		type: "string"
    	},
    	contentEncoding: {
    		type: "string"
    	},
    	"if": {
    		$ref: "#"
    	},
    	then: {
    		$ref: "#"
    	},
    	"else": {
    		$ref: "#"
    	},
    	allOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	anyOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	oneOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	not: {
    		$ref: "#"
    	}
    };
    var require$$3$2 = {
    	$schema: $schema$2,
    	$id: $id$4,
    	title: title$2,
    	definitions: definitions$2,
    	type: type$5,
    	properties: properties$7,
    	"default": true
    };

    (function (module, exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    	const core_1 = core$7;
    	const draft7_1 = draft7$2;
    	const discriminator_1 = discriminator$3;
    	const draft7MetaSchema = require$$3$2;
    	const META_SUPPORT_DATA = ["/properties"];
    	const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    	class Ajv extends core_1.default {
    	    _addVocabularies() {
    	        super._addVocabularies();
    	        draft7_1.default.forEach((v) => this.addVocabulary(v));
    	        if (this.opts.discriminator)
    	            this.addKeyword(discriminator_1.default);
    	    }
    	    _addDefaultMetaSchema() {
    	        super._addDefaultMetaSchema();
    	        if (!this.opts.meta)
    	            return;
    	        const metaSchema = this.opts.$data
    	            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
    	            : draft7MetaSchema;
    	        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
    	        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    	    }
    	    defaultMeta() {
    	        return (this.opts.defaultMeta =
    	            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    	    }
    	}
    	module.exports = exports = Ajv;
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.default = Ajv;
    	var validate_1 = requireValidate$2();
    	Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    	var codegen_1 = requireCodegen$2();
    	Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    	Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    	Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    	Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    	Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    	Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    	var validation_error_1 = requireValidation_error$2();
    	Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return validation_error_1.default; } });
    	var ref_error_1 = requireRef_error$2();
    	Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function () { return ref_error_1.default; } });
    	
    } (ajv$2, ajvExports$2));

    var fastUriExports = {};
    var fastUri$3 = {
      get exports(){ return fastUriExports; },
      set exports(v){ fastUriExports = v; },
    };

    const HEX$2 = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      a: 10,
      A: 10,
      b: 11,
      B: 11,
      c: 12,
      C: 12,
      d: 13,
      D: 13,
      e: 14,
      E: 14,
      f: 15,
      F: 15
    };

    var scopedChars = {
      HEX: HEX$2
    };

    const { HEX: HEX$1 } = scopedChars;

    function normalizeIPv4$1 (host) {
      if (findToken(host, '.') < 3) { return { host, isIPV4: false } }
      const matches = host.match(/^(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) || [];
      const [address] = matches;
      if (address) {
        return { host: stripLeadingZeros(address, '.'), isIPV4: true }
      } else {
        return { host, isIPV4: false }
      }
    }

    function stringToHexStripped (input) {
      let acc = '';
      let strip = true;
      for (const c of input) {
        if (c !== '0' && strip === true) strip = false;
        if (HEX$1[c] === undefined) return undefined
        if (!strip) acc += c;
      }
      return acc
    }

    function getIPV6 (input) {
      let tokenCount = 0;
      const output = { error: false, address: '', zone: '' };
      const address = [];
      const buffer = [];
      let isZone = false;
      let endipv6Encountered = false;
      let endIpv6 = false;

      function consume () {
        if (buffer.length) {
          if (isZone === false) {
            const hex = stringToHexStripped(buffer.join(''));
            if (hex !== undefined) {
              address.push(hex);
            } else {
              output.error = true;
              return false
            }
          }
          buffer.length = 0;
        }
        return true
      }

      for (let i = 0; i < input.length; i++) {
        const cursor = input[i];
        if (cursor === '[' || cursor === ']') { continue }
        if (cursor === ':') {
          if (endipv6Encountered === true) {
            endIpv6 = true;
          }
          if (!consume()) { break }
          tokenCount++;
          address.push(':');
          if (tokenCount > 7) {
            // not valid
            output.error = true;
            break
          }
          if (i - 1 >= 0 && input[i - 1] === ':') {
            endipv6Encountered = true;
          }
          continue
        } else if (cursor === '%') {
          if (!consume()) { break }
          // switch to zone detection
          isZone = true;
        } else {
          buffer.push(cursor);
          continue
        }
      }
      if (buffer.length) {
        if (isZone) {
          output.zone = buffer.join('');
        } else if (endIpv6) {
          address.push(buffer.join(''));
        } else {
          address.push(stringToHexStripped(buffer.join('')));
        }
      }
      output.address = address.join('');
      return output
    }

    function normalizeIPv6$1 (host, opts = {}) {
      if (findToken(host, ':') < 2) { return { host, isIPV6: false } }
      const ipv6 = getIPV6(host);

      if (!ipv6.error) {
        let newHost = ipv6.address;
        let escapedHost = ipv6.address;
        if (ipv6.zone) {
          newHost += '%' + ipv6.zone;
          escapedHost += '%25' + ipv6.zone;
        }
        return { host: newHost, escapedHost, isIPV6: true }
      } else {
        return { host, isIPV6: false }
      }
    }

    function stripLeadingZeros (str, token) {
      let out = '';
      let skip = true;
      const l = str.length;
      for (let i = 0; i < l; i++) {
        const c = str[i];
        if (c === '0' && skip) {
          if ((i + 1 <= l && str[i + 1] === token) || i + 1 === l) {
            out += c;
            skip = false;
          }
        } else {
          if (c === token) {
            skip = true;
          } else {
            skip = false;
          }
          out += c;
        }
      }
      return out
    }

    function findToken (str, token) {
      let ind = 0;
      for (let i = 0; i < str.length; i++) {
        if (str[i] === token) ind++;
      }
      return ind
    }

    const RDS1 = /^\.\.?\//;
    const RDS2 = /^\/\.(\/|$)/;
    const RDS3 = /^\/\.\.(\/|$)/;
    const RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;

    function removeDotSegments$1 (input) {
      const output = [];

      while (input.length) {
        if (input.match(RDS1)) {
          input = input.replace(RDS1, '');
        } else if (input.match(RDS2)) {
          input = input.replace(RDS2, '/');
        } else if (input.match(RDS3)) {
          input = input.replace(RDS3, '/');
          output.pop();
        } else if (input === '.' || input === '..') {
          input = '';
        } else {
          const im = input.match(RDS5);
          if (im) {
            const s = im[0];
            input = input.slice(s.length);
            output.push(s);
          } else {
            throw new Error('Unexpected dot segment condition')
          }
        }
      }
      return output.join('')
    }

    function normalizeComponentEncoding$1 (components, esc) {
      const func = esc !== true ? escape : unescape;
      if (components.scheme !== undefined) {
        components.scheme = func(components.scheme);
      }
      if (components.userinfo !== undefined) {
        components.userinfo = func(components.userinfo);
      }
      if (components.host !== undefined) {
        components.host = func(components.host);
      }
      if (components.path !== undefined) {
        components.path = func(components.path);
      }
      if (components.query !== undefined) {
        components.query = func(components.query);
      }
      if (components.fragment !== undefined) {
        components.fragment = func(components.fragment);
      }
      return components
    }

    function recomposeAuthority$1 (components, options) {
      const uriTokens = [];

      if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push('@');
      }

      if (components.host !== undefined) {
        let host = unescape(components.host);
        const ipV4res = normalizeIPv4$1(host);

        if (ipV4res.isIPV4) {
          host = ipV4res.host;
        } else {
          const ipV6res = normalizeIPv6$1(ipV4res.host, { isIPV4: false });
          if (ipV6res.isIPV6 === true) {
            host = `[${ipV6res.escapedHost}]`;
          } else {
            host = components.host;
          }
        }
        uriTokens.push(host);
      }

      if (typeof components.port === 'number' || typeof components.port === 'string') {
        uriTokens.push(':');
        uriTokens.push(String(components.port));
      }

      return uriTokens.length ? uriTokens.join('') : undefined
    }
    var utils = {
      recomposeAuthority: recomposeAuthority$1,
      normalizeComponentEncoding: normalizeComponentEncoding$1,
      removeDotSegments: removeDotSegments$1,
      normalizeIPv4: normalizeIPv4$1,
      normalizeIPv6: normalizeIPv6$1,
      stringToHexStripped
    };

    const UUID_REG = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/;
    const URN_REG = /([A-Za-z0-9][A-Za-z0-9-]{0,31}):(([A-Za-z0-9()+,\-.:=@;$_!*']|%[0-9A-Fa-f]{2})+)/;

    function isSecure (wsComponents) {
      return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === 'wss'
    }

    function httpParse (components) {
      if (!components.host) {
        components.error = components.error || 'HTTP URIs must have a host.';
      }

      return components
    }

    function httpSerialize (components) {
      const secure = String(components.scheme).toLowerCase() === 'https';

      // normalize the default port
      if (components.port === (secure ? 443 : 80) || components.port === '') {
        components.port = undefined;
      }

      // normalize the empty path
      if (!components.path) {
        components.path = '/';
      }

      // NOTE: We do not parse query strings for HTTP URIs
      // as WWW Form Url Encoded query strings are part of the HTML4+ spec,
      // and not the HTTP spec.

      return components
    }

    function wsParse (wsComponents) {
    // indicate if the secure flag is set
      wsComponents.secure = isSecure(wsComponents);

      // construct resouce name
      wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
      wsComponents.path = undefined;
      wsComponents.query = undefined;

      return wsComponents
    }

    function wsSerialize (wsComponents) {
    // normalize the default port
      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === '') {
        wsComponents.port = undefined;
      }

      // ensure scheme matches secure flag
      if (typeof wsComponents.secure === 'boolean') {
        wsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws');
        wsComponents.secure = undefined;
      }

      // reconstruct path from resource name
      if (wsComponents.resourceName) {
        const [path, query] = wsComponents.resourceName.split('?');
        wsComponents.path = (path && path !== '/' ? path : undefined);
        wsComponents.query = query;
        wsComponents.resourceName = undefined;
      }

      // forbid fragment component
      wsComponents.fragment = undefined;

      return wsComponents
    }

    function urnParse (urnComponents, options) {
      if (!urnComponents.path) {
        urnComponents.error = 'URN can not be parsed';
        return urnComponents
      }
      const matches = urnComponents.path.match(URN_REG);
      if (matches) {
        const scheme = options.scheme || urnComponents.scheme || 'urn';
        urnComponents.nid = matches[1].toLowerCase();
        urnComponents.nss = matches[2];
        const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;
        const schemeHandler = SCHEMES$1[urnScheme];
        urnComponents.path = undefined;

        if (schemeHandler) {
          urnComponents = schemeHandler.parse(urnComponents, options);
        }
      } else {
        urnComponents.error = urnComponents.error || 'URN can not be parsed.';
      }

      return urnComponents
    }

    function urnSerialize (urnComponents, options) {
      const scheme = options.scheme || urnComponents.scheme || 'urn';
      const nid = urnComponents.nid.toLowerCase();
      const urnScheme = `${scheme}:${options.nid || nid}`;
      const schemeHandler = SCHEMES$1[urnScheme];

      if (schemeHandler) {
        urnComponents = schemeHandler.serialize(urnComponents, options);
      }

      const uriComponents = urnComponents;
      const nss = urnComponents.nss;
      uriComponents.path = `${nid || options.nid}:${nss}`;

      options.skipEscape = true;
      return uriComponents
    }

    function urnuuidParse (urnComponents, options) {
      const uuidComponents = urnComponents;
      uuidComponents.uuid = uuidComponents.nss;
      uuidComponents.nss = undefined;

      if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {
        uuidComponents.error = uuidComponents.error || 'UUID is not valid.';
      }

      return uuidComponents
    }

    function urnuuidSerialize (uuidComponents) {
      const urnComponents = uuidComponents;
      // normalize UUID
      urnComponents.nss = (uuidComponents.uuid || '').toLowerCase();
      return urnComponents
    }

    const http$1 = {
      scheme: 'http',
      domainHost: true,
      parse: httpParse,
      serialize: httpSerialize
    };

    const https = {
      scheme: 'https',
      domainHost: http$1.domainHost,
      parse: httpParse,
      serialize: httpSerialize
    };

    const ws = {
      scheme: 'ws',
      domainHost: true,
      parse: wsParse,
      serialize: wsSerialize
    };

    const wss = {
      scheme: 'wss',
      domainHost: ws.domainHost,
      parse: ws.parse,
      serialize: ws.serialize
    };

    const urn = {
      scheme: 'urn',
      parse: urnParse,
      serialize: urnSerialize,
      skipNormalize: true
    };

    const urnuuid = {
      scheme: 'urn:uuid',
      parse: urnuuidParse,
      serialize: urnuuidSerialize,
      skipNormalize: true
    };

    const SCHEMES$1 = {
      http: http$1,
      https,
      ws,
      wss,
      urn,
      'urn:uuid': urnuuid
    };

    var schemes = SCHEMES$1;

    const URL = require$$0$6;
    const { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = utils;
    const SCHEMES = schemes;

    function normalize (uri, options) {
      if (typeof uri === 'string') {
        uri = serialize$1(parse$4(uri, options), options);
      } else if (typeof uri === 'object') {
        uri = parse$4(serialize$1(uri, options), options);
      }
      return uri
    }

    function resolve$3 (baseURI, relativeURI, options) {
      const schemelessOptions = Object.assign({ scheme: 'null' }, options);
      const resolved = resolveComponents(parse$4(baseURI, schemelessOptions), parse$4(relativeURI, schemelessOptions), schemelessOptions, true);
      return serialize$1(resolved, { ...schemelessOptions, skipEscape: true })
    }

    function resolveComponents (base, relative, options, skipNormalization) {
      const target = {};
      if (!skipNormalization) {
        base = parse$4(serialize$1(base, options), options); // normalize base components
        relative = parse$4(serialize$1(relative, options), options); // normalize relative components
      }
      options = options || {};

      if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        // target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || '');
        target.query = relative.query;
      } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
          // target.authority = relative.authority;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || '');
          target.query = relative.query;
        } else {
          if (!relative.path) {
            target.path = base.path;
            if (relative.query !== undefined) {
              target.query = relative.query;
            } else {
              target.query = base.query;
            }
          } else {
            if (relative.path.charAt(0) === '/') {
              target.path = removeDotSegments(relative.path);
            } else {
              if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                target.path = '/' + relative.path;
              } else if (!base.path) {
                target.path = relative.path;
              } else {
                target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path;
              }
              target.path = removeDotSegments(target.path);
            }
            target.query = relative.query;
          }
          // target.authority = base.authority;
          target.userinfo = base.userinfo;
          target.host = base.host;
          target.port = base.port;
        }
        target.scheme = base.scheme;
      }

      target.fragment = relative.fragment;

      return target
    }

    function equal$4 (uriA, uriB, options) {
      if (typeof uriA === 'string') {
        uriA = unescape(uriA);
        uriA = serialize$1(normalizeComponentEncoding(parse$4(uriA, options), true), { ...options, skipEscape: true });
      } else if (typeof uriA === 'object') {
        uriA = serialize$1(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true });
      }

      if (typeof uriB === 'string') {
        uriB = unescape(uriB);
        uriB = serialize$1(normalizeComponentEncoding(parse$4(uriB, options), true), { ...options, skipEscape: true });
      } else if (typeof uriB === 'object') {
        uriB = serialize$1(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true });
      }

      return uriA.toLowerCase() === uriB.toLowerCase()
    }

    function serialize$1 (cmpts, opts) {
      const components = {
        host: cmpts.host,
        scheme: cmpts.scheme,
        userinfo: cmpts.userinfo,
        port: cmpts.port,
        path: cmpts.path,
        query: cmpts.query,
        nid: cmpts.nid,
        nss: cmpts.nss,
        uuid: cmpts.uuid,
        fragment: cmpts.fragment,
        reference: cmpts.reference,
        resourceName: cmpts.resourceName,
        secure: cmpts.secure,
        error: ''
      };
      const options = Object.assign({}, opts);
      const uriTokens = [];

      // find scheme handler
      const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()];

      // perform scheme specific serialization
      if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);

      if (components.path !== undefined) {
        if (!options.skipEscape) {
          components.path = escape(components.path);

          if (components.scheme !== undefined) {
            components.path = components.path.split('%3A').join(':');
          }
        } else {
          components.path = unescape(components.path);
        }
      }

      if (options.reference !== 'suffix' && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(':');
      }

      const authority = recomposeAuthority(components, options);
      if (authority !== undefined) {
        if (options.reference !== 'suffix') {
          uriTokens.push('//');
        }

        uriTokens.push(authority);

        if (components.path && components.path.charAt(0) !== '/') {
          uriTokens.push('/');
        }
      }
      if (components.path !== undefined) {
        let s = components.path;

        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
          s = removeDotSegments(s);
        }

        if (authority === undefined) {
          s = s.replace(/^\/\//, '/%2F'); // don't allow the path to start with "//"
        }

        uriTokens.push(s);
      }

      if (components.query !== undefined) {
        uriTokens.push('?');
        uriTokens.push(components.query);
      }

      if (components.fragment !== undefined) {
        uriTokens.push('#');
        uriTokens.push(components.fragment);
      }
      return uriTokens.join('')
    }

    const URI_PARSE = /^(?:([^:/?#]+):)?(?:\/\/((?:([^/?#@]*)@)?(\[[^/?#\]]+\]|[^/?#:]*)(?::(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;

    function parse$4 (uri, opts) {
      const options = Object.assign({}, opts);
      const parsed = {
        scheme: undefined,
        userinfo: undefined,
        host: '',
        port: undefined,
        path: '',
        query: undefined,
        fragment: undefined
      };
      const gotEncoding = uri.indexOf('%') !== -1;
      if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri;

      const matches = uri.match(URI_PARSE);

      if (matches) {
        // store each component
        parsed.scheme = matches[1];
        parsed.userinfo = matches[3];
        parsed.host = matches[4];
        parsed.port = parseInt(matches[5], 10);
        parsed.path = matches[6] || '';
        parsed.query = matches[7];
        parsed.fragment = matches[8];

        // fix port number
        if (isNaN(parsed.port)) {
          parsed.port = matches[5];
        }
        if (parsed.host) {
          const ipv4result = normalizeIPv4(parsed.host);
          if (ipv4result.isIPV4 === false) {
            parsed.host = normalizeIPv6(ipv4result.host, { isIPV4: false }).host.toLowerCase();
          } else {
            parsed.host = ipv4result.host;
          }
        }
        if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && !parsed.path && parsed.query === undefined) {
          parsed.reference = 'same-document';
        } else if (parsed.scheme === undefined) {
          parsed.reference = 'relative';
        } else if (parsed.fragment === undefined) {
          parsed.reference = 'absolute';
        } else {
          parsed.reference = 'uri';
        }

        // check for reference errors
        if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {
          parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.';
        }

        // find scheme handler
        const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()];

        // check if scheme can't handle IRIs
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
          // if host component is a domain name
          if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {
            // convert Unicode IDN -> ASCII IDN
            try {
              parsed.host = URL.domainToASCII(parsed.host.toLowerCase());
            } catch (e) {
              parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e;
            }
          }
          // convert IRI -> URI
        }

        if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {
          if (gotEncoding && parsed.scheme !== undefined) {
            parsed.scheme = unescape(parsed.scheme);
          }
          if (gotEncoding && parsed.userinfo !== undefined) {
            parsed.userinfo = unescape(parsed.userinfo);
          }
          if (gotEncoding && parsed.host !== undefined) {
            parsed.host = unescape(parsed.host);
          }
          if (parsed.path !== undefined && parsed.path.length) {
            parsed.path = encodeURI(parsed.path);
          }
          if (parsed.fragment !== undefined && parsed.fragment.length) {
            parsed.fragment = encodeURI(decodeURI(parsed.fragment));
          }
        }

        // perform scheme specific parsing
        if (schemeHandler && schemeHandler.parse) {
          schemeHandler.parse(parsed, options);
        }
      } else {
        parsed.error = parsed.error || 'URI can not be parsed.';
      }
      return parsed
    }

    const fastUri$2 = {
      normalize,
      resolve: resolve$3,
      resolveComponents,
      equal: equal$4,
      serialize: serialize$1,
      parse: parse$4
    };

    fastUri$3.exports = fastUri$2;
    fastUriExports.default = fastUri$2;
    fastUriExports.fastUri = fastUri$2;

    var distExports = {};
    var dist = {
      get exports(){ return distExports; },
      set exports(v){ distExports = v; },
    };

    var limit = {};

    var ajvExports$1 = {};
    var ajv$1 = {
      get exports(){ return ajvExports$1; },
      set exports(v){ ajvExports$1 = v; },
    };

    var core$4 = {};

    var validate$4 = {};

    var boolSchema$1 = {};

    var errors$1 = {};

    var codegen$1 = {};

    var code$3 = {};

    var hasRequiredCode$1;

    function requireCode$1 () {
    	if (hasRequiredCode$1) return code$3;
    	hasRequiredCode$1 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    		class _CodeOrName {
    		}
    		exports._CodeOrName = _CodeOrName;
    		exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    		class Name extends _CodeOrName {
    		    constructor(s) {
    		        super();
    		        if (!exports.IDENTIFIER.test(s))
    		            throw new Error("CodeGen: name must be a valid identifier");
    		        this.str = s;
    		    }
    		    toString() {
    		        return this.str;
    		    }
    		    emptyStr() {
    		        return false;
    		    }
    		    get names() {
    		        return { [this.str]: 1 };
    		    }
    		}
    		exports.Name = Name;
    		class _Code extends _CodeOrName {
    		    constructor(code) {
    		        super();
    		        this._items = typeof code === "string" ? [code] : code;
    		    }
    		    toString() {
    		        return this.str;
    		    }
    		    emptyStr() {
    		        if (this._items.length > 1)
    		            return false;
    		        const item = this._items[0];
    		        return item === "" || item === '""';
    		    }
    		    get str() {
    		        var _a;
    		        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
    		    }
    		    get names() {
    		        var _a;
    		        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
    		            if (c instanceof Name)
    		                names[c.str] = (names[c.str] || 0) + 1;
    		            return names;
    		        }, {})));
    		    }
    		}
    		exports._Code = _Code;
    		exports.nil = new _Code("");
    		function _(strs, ...args) {
    		    const code = [strs[0]];
    		    let i = 0;
    		    while (i < args.length) {
    		        addCodeArg(code, args[i]);
    		        code.push(strs[++i]);
    		    }
    		    return new _Code(code);
    		}
    		exports._ = _;
    		const plus = new _Code("+");
    		function str(strs, ...args) {
    		    const expr = [safeStringify(strs[0])];
    		    let i = 0;
    		    while (i < args.length) {
    		        expr.push(plus);
    		        addCodeArg(expr, args[i]);
    		        expr.push(plus, safeStringify(strs[++i]));
    		    }
    		    optimize(expr);
    		    return new _Code(expr);
    		}
    		exports.str = str;
    		function addCodeArg(code, arg) {
    		    if (arg instanceof _Code)
    		        code.push(...arg._items);
    		    else if (arg instanceof Name)
    		        code.push(arg);
    		    else
    		        code.push(interpolate(arg));
    		}
    		exports.addCodeArg = addCodeArg;
    		function optimize(expr) {
    		    let i = 1;
    		    while (i < expr.length - 1) {
    		        if (expr[i] === plus) {
    		            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
    		            if (res !== undefined) {
    		                expr.splice(i - 1, 3, res);
    		                continue;
    		            }
    		            expr[i++] = "+";
    		        }
    		        i++;
    		    }
    		}
    		function mergeExprItems(a, b) {
    		    if (b === '""')
    		        return a;
    		    if (a === '""')
    		        return b;
    		    if (typeof a == "string") {
    		        if (b instanceof Name || a[a.length - 1] !== '"')
    		            return;
    		        if (typeof b != "string")
    		            return `${a.slice(0, -1)}${b}"`;
    		        if (b[0] === '"')
    		            return a.slice(0, -1) + b.slice(1);
    		        return;
    		    }
    		    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
    		        return `"${a}${b.slice(1)}`;
    		    return;
    		}
    		function strConcat(c1, c2) {
    		    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
    		}
    		exports.strConcat = strConcat;
    		// TODO do not allow arrays here
    		function interpolate(x) {
    		    return typeof x == "number" || typeof x == "boolean" || x === null
    		        ? x
    		        : safeStringify(Array.isArray(x) ? x.join(",") : x);
    		}
    		function stringify(x) {
    		    return new _Code(safeStringify(x));
    		}
    		exports.stringify = stringify;
    		function safeStringify(x) {
    		    return JSON.stringify(x)
    		        .replace(/\u2028/g, "\\u2028")
    		        .replace(/\u2029/g, "\\u2029");
    		}
    		exports.safeStringify = safeStringify;
    		function getProperty(key) {
    		    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
    		}
    		exports.getProperty = getProperty;
    		//Does best effort to format the name properly
    		function getEsmExportName(key) {
    		    if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
    		        return new _Code(`${key}`);
    		    }
    		    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    		}
    		exports.getEsmExportName = getEsmExportName;
    		function regexpCode(rx) {
    		    return new _Code(rx.toString());
    		}
    		exports.regexpCode = regexpCode;
    		
    } (code$3));
    	return code$3;
    }

    var scope$1 = {};

    var hasRequiredScope;

    function requireScope () {
    	if (hasRequiredScope) return scope$1;
    	hasRequiredScope = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    		const code_1 = requireCode$1();
    		class ValueError extends Error {
    		    constructor(name) {
    		        super(`CodeGen: "code" for ${name} not defined`);
    		        this.value = name.value;
    		    }
    		}
    		var UsedValueState;
    		(function (UsedValueState) {
    		    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    		    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
    		})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    		exports.varKinds = {
    		    const: new code_1.Name("const"),
    		    let: new code_1.Name("let"),
    		    var: new code_1.Name("var"),
    		};
    		class Scope {
    		    constructor({ prefixes, parent } = {}) {
    		        this._names = {};
    		        this._prefixes = prefixes;
    		        this._parent = parent;
    		    }
    		    toName(nameOrPrefix) {
    		        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    		    }
    		    name(prefix) {
    		        return new code_1.Name(this._newName(prefix));
    		    }
    		    _newName(prefix) {
    		        const ng = this._names[prefix] || this._nameGroup(prefix);
    		        return `${prefix}${ng.index++}`;
    		    }
    		    _nameGroup(prefix) {
    		        var _a, _b;
    		        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
    		            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
    		        }
    		        return (this._names[prefix] = { prefix, index: 0 });
    		    }
    		}
    		exports.Scope = Scope;
    		class ValueScopeName extends code_1.Name {
    		    constructor(prefix, nameStr) {
    		        super(nameStr);
    		        this.prefix = prefix;
    		    }
    		    setValue(value, { property, itemIndex }) {
    		        this.value = value;
    		        this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
    		    }
    		}
    		exports.ValueScopeName = ValueScopeName;
    		const line = (0, code_1._) `\n`;
    		class ValueScope extends Scope {
    		    constructor(opts) {
    		        super(opts);
    		        this._values = {};
    		        this._scope = opts.scope;
    		        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    		    }
    		    get() {
    		        return this._scope;
    		    }
    		    name(prefix) {
    		        return new ValueScopeName(prefix, this._newName(prefix));
    		    }
    		    value(nameOrPrefix, value) {
    		        var _a;
    		        if (value.ref === undefined)
    		            throw new Error("CodeGen: ref must be passed in value");
    		        const name = this.toName(nameOrPrefix);
    		        const { prefix } = name;
    		        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
    		        let vs = this._values[prefix];
    		        if (vs) {
    		            const _name = vs.get(valueKey);
    		            if (_name)
    		                return _name;
    		        }
    		        else {
    		            vs = this._values[prefix] = new Map();
    		        }
    		        vs.set(valueKey, name);
    		        const s = this._scope[prefix] || (this._scope[prefix] = []);
    		        const itemIndex = s.length;
    		        s[itemIndex] = value.ref;
    		        name.setValue(value, { property: prefix, itemIndex });
    		        return name;
    		    }
    		    getValue(prefix, keyOrRef) {
    		        const vs = this._values[prefix];
    		        if (!vs)
    		            return;
    		        return vs.get(keyOrRef);
    		    }
    		    scopeRefs(scopeName, values = this._values) {
    		        return this._reduceValues(values, (name) => {
    		            if (name.scopePath === undefined)
    		                throw new Error(`CodeGen: name "${name}" has no value`);
    		            return (0, code_1._) `${scopeName}${name.scopePath}`;
    		        });
    		    }
    		    scopeCode(values = this._values, usedValues, getCode) {
    		        return this._reduceValues(values, (name) => {
    		            if (name.value === undefined)
    		                throw new Error(`CodeGen: name "${name}" has no value`);
    		            return name.value.code;
    		        }, usedValues, getCode);
    		    }
    		    _reduceValues(values, valueCode, usedValues = {}, getCode) {
    		        let code = code_1.nil;
    		        for (const prefix in values) {
    		            const vs = values[prefix];
    		            if (!vs)
    		                continue;
    		            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
    		            vs.forEach((name) => {
    		                if (nameSet.has(name))
    		                    return;
    		                nameSet.set(name, UsedValueState.Started);
    		                let c = valueCode(name);
    		                if (c) {
    		                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
    		                    code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
    		                }
    		                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
    		                    code = (0, code_1._) `${code}${c}${this.opts._n}`;
    		                }
    		                else {
    		                    throw new ValueError(name);
    		                }
    		                nameSet.set(name, UsedValueState.Completed);
    		            });
    		        }
    		        return code;
    		    }
    		}
    		exports.ValueScope = ValueScope;
    		
    } (scope$1));
    	return scope$1;
    }

    var hasRequiredCodegen$1;

    function requireCodegen$1 () {
    	if (hasRequiredCodegen$1) return codegen$1;
    	hasRequiredCodegen$1 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    		const code_1 = requireCode$1();
    		const scope_1 = requireScope();
    		var code_2 = requireCode$1();
    		Object.defineProperty(exports, "_", { enumerable: true, get: function () { return code_2._; } });
    		Object.defineProperty(exports, "str", { enumerable: true, get: function () { return code_2.str; } });
    		Object.defineProperty(exports, "strConcat", { enumerable: true, get: function () { return code_2.strConcat; } });
    		Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return code_2.nil; } });
    		Object.defineProperty(exports, "getProperty", { enumerable: true, get: function () { return code_2.getProperty; } });
    		Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return code_2.stringify; } });
    		Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function () { return code_2.regexpCode; } });
    		Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return code_2.Name; } });
    		var scope_2 = requireScope();
    		Object.defineProperty(exports, "Scope", { enumerable: true, get: function () { return scope_2.Scope; } });
    		Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function () { return scope_2.ValueScope; } });
    		Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });
    		Object.defineProperty(exports, "varKinds", { enumerable: true, get: function () { return scope_2.varKinds; } });
    		exports.operators = {
    		    GT: new code_1._Code(">"),
    		    GTE: new code_1._Code(">="),
    		    LT: new code_1._Code("<"),
    		    LTE: new code_1._Code("<="),
    		    EQ: new code_1._Code("==="),
    		    NEQ: new code_1._Code("!=="),
    		    NOT: new code_1._Code("!"),
    		    OR: new code_1._Code("||"),
    		    AND: new code_1._Code("&&"),
    		    ADD: new code_1._Code("+"),
    		};
    		class Node {
    		    optimizeNodes() {
    		        return this;
    		    }
    		    optimizeNames(_names, _constants) {
    		        return this;
    		    }
    		}
    		class Def extends Node {
    		    constructor(varKind, name, rhs) {
    		        super();
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.rhs = rhs;
    		    }
    		    render({ es5, _n }) {
    		        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
    		        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
    		        return `${varKind} ${this.name}${rhs};` + _n;
    		    }
    		    optimizeNames(names, constants) {
    		        if (!names[this.name.str])
    		            return;
    		        if (this.rhs)
    		            this.rhs = optimizeExpr(this.rhs, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    		    }
    		}
    		class Assign extends Node {
    		    constructor(lhs, rhs, sideEffects) {
    		        super();
    		        this.lhs = lhs;
    		        this.rhs = rhs;
    		        this.sideEffects = sideEffects;
    		    }
    		    render({ _n }) {
    		        return `${this.lhs} = ${this.rhs};` + _n;
    		    }
    		    optimizeNames(names, constants) {
    		        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
    		            return;
    		        this.rhs = optimizeExpr(this.rhs, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
    		        return addExprNames(names, this.rhs);
    		    }
    		}
    		class AssignOp extends Assign {
    		    constructor(lhs, op, rhs, sideEffects) {
    		        super(lhs, rhs, sideEffects);
    		        this.op = op;
    		    }
    		    render({ _n }) {
    		        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    		    }
    		}
    		class Label extends Node {
    		    constructor(label) {
    		        super();
    		        this.label = label;
    		        this.names = {};
    		    }
    		    render({ _n }) {
    		        return `${this.label}:` + _n;
    		    }
    		}
    		class Break extends Node {
    		    constructor(label) {
    		        super();
    		        this.label = label;
    		        this.names = {};
    		    }
    		    render({ _n }) {
    		        const label = this.label ? ` ${this.label}` : "";
    		        return `break${label};` + _n;
    		    }
    		}
    		class Throw extends Node {
    		    constructor(error) {
    		        super();
    		        this.error = error;
    		    }
    		    render({ _n }) {
    		        return `throw ${this.error};` + _n;
    		    }
    		    get names() {
    		        return this.error.names;
    		    }
    		}
    		class AnyCode extends Node {
    		    constructor(code) {
    		        super();
    		        this.code = code;
    		    }
    		    render({ _n }) {
    		        return `${this.code};` + _n;
    		    }
    		    optimizeNodes() {
    		        return `${this.code}` ? this : undefined;
    		    }
    		    optimizeNames(names, constants) {
    		        this.code = optimizeExpr(this.code, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    		    }
    		}
    		class ParentNode extends Node {
    		    constructor(nodes = []) {
    		        super();
    		        this.nodes = nodes;
    		    }
    		    render(opts) {
    		        return this.nodes.reduce((code, n) => code + n.render(opts), "");
    		    }
    		    optimizeNodes() {
    		        const { nodes } = this;
    		        let i = nodes.length;
    		        while (i--) {
    		            const n = nodes[i].optimizeNodes();
    		            if (Array.isArray(n))
    		                nodes.splice(i, 1, ...n);
    		            else if (n)
    		                nodes[i] = n;
    		            else
    		                nodes.splice(i, 1);
    		        }
    		        return nodes.length > 0 ? this : undefined;
    		    }
    		    optimizeNames(names, constants) {
    		        const { nodes } = this;
    		        let i = nodes.length;
    		        while (i--) {
    		            // iterating backwards improves 1-pass optimization
    		            const n = nodes[i];
    		            if (n.optimizeNames(names, constants))
    		                continue;
    		            subtractNames(names, n.names);
    		            nodes.splice(i, 1);
    		        }
    		        return nodes.length > 0 ? this : undefined;
    		    }
    		    get names() {
    		        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    		    }
    		}
    		class BlockNode extends ParentNode {
    		    render(opts) {
    		        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    		    }
    		}
    		class Root extends ParentNode {
    		}
    		class Else extends BlockNode {
    		}
    		Else.kind = "else";
    		class If extends BlockNode {
    		    constructor(condition, nodes) {
    		        super(nodes);
    		        this.condition = condition;
    		    }
    		    render(opts) {
    		        let code = `if(${this.condition})` + super.render(opts);
    		        if (this.else)
    		            code += "else " + this.else.render(opts);
    		        return code;
    		    }
    		    optimizeNodes() {
    		        super.optimizeNodes();
    		        const cond = this.condition;
    		        if (cond === true)
    		            return this.nodes; // else is ignored here
    		        let e = this.else;
    		        if (e) {
    		            const ns = e.optimizeNodes();
    		            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
    		        }
    		        if (e) {
    		            if (cond === false)
    		                return e instanceof If ? e : e.nodes;
    		            if (this.nodes.length)
    		                return this;
    		            return new If(not(cond), e instanceof If ? [e] : e.nodes);
    		        }
    		        if (cond === false || !this.nodes.length)
    		            return undefined;
    		        return this;
    		    }
    		    optimizeNames(names, constants) {
    		        var _a;
    		        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    		        if (!(super.optimizeNames(names, constants) || this.else))
    		            return;
    		        this.condition = optimizeExpr(this.condition, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = super.names;
    		        addExprNames(names, this.condition);
    		        if (this.else)
    		            addNames(names, this.else.names);
    		        return names;
    		    }
    		}
    		If.kind = "if";
    		class For extends BlockNode {
    		}
    		For.kind = "for";
    		class ForLoop extends For {
    		    constructor(iteration) {
    		        super();
    		        this.iteration = iteration;
    		    }
    		    render(opts) {
    		        return `for(${this.iteration})` + super.render(opts);
    		    }
    		    optimizeNames(names, constants) {
    		        if (!super.optimizeNames(names, constants))
    		            return;
    		        this.iteration = optimizeExpr(this.iteration, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return addNames(super.names, this.iteration.names);
    		    }
    		}
    		class ForRange extends For {
    		    constructor(varKind, name, from, to) {
    		        super();
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.from = from;
    		        this.to = to;
    		    }
    		    render(opts) {
    		        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
    		        const { name, from, to } = this;
    		        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    		    }
    		    get names() {
    		        const names = addExprNames(super.names, this.from);
    		        return addExprNames(names, this.to);
    		    }
    		}
    		class ForIter extends For {
    		    constructor(loop, varKind, name, iterable) {
    		        super();
    		        this.loop = loop;
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.iterable = iterable;
    		    }
    		    render(opts) {
    		        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    		    }
    		    optimizeNames(names, constants) {
    		        if (!super.optimizeNames(names, constants))
    		            return;
    		        this.iterable = optimizeExpr(this.iterable, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return addNames(super.names, this.iterable.names);
    		    }
    		}
    		class Func extends BlockNode {
    		    constructor(name, args, async) {
    		        super();
    		        this.name = name;
    		        this.args = args;
    		        this.async = async;
    		    }
    		    render(opts) {
    		        const _async = this.async ? "async " : "";
    		        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    		    }
    		}
    		Func.kind = "func";
    		class Return extends ParentNode {
    		    render(opts) {
    		        return "return " + super.render(opts);
    		    }
    		}
    		Return.kind = "return";
    		class Try extends BlockNode {
    		    render(opts) {
    		        let code = "try" + super.render(opts);
    		        if (this.catch)
    		            code += this.catch.render(opts);
    		        if (this.finally)
    		            code += this.finally.render(opts);
    		        return code;
    		    }
    		    optimizeNodes() {
    		        var _a, _b;
    		        super.optimizeNodes();
    		        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
    		        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
    		        return this;
    		    }
    		    optimizeNames(names, constants) {
    		        var _a, _b;
    		        super.optimizeNames(names, constants);
    		        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    		        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = super.names;
    		        if (this.catch)
    		            addNames(names, this.catch.names);
    		        if (this.finally)
    		            addNames(names, this.finally.names);
    		        return names;
    		    }
    		}
    		class Catch extends BlockNode {
    		    constructor(error) {
    		        super();
    		        this.error = error;
    		    }
    		    render(opts) {
    		        return `catch(${this.error})` + super.render(opts);
    		    }
    		}
    		Catch.kind = "catch";
    		class Finally extends BlockNode {
    		    render(opts) {
    		        return "finally" + super.render(opts);
    		    }
    		}
    		Finally.kind = "finally";
    		class CodeGen {
    		    constructor(extScope, opts = {}) {
    		        this._values = {};
    		        this._blockStarts = [];
    		        this._constants = {};
    		        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
    		        this._extScope = extScope;
    		        this._scope = new scope_1.Scope({ parent: extScope });
    		        this._nodes = [new Root()];
    		    }
    		    toString() {
    		        return this._root.render(this.opts);
    		    }
    		    // returns unique name in the internal scope
    		    name(prefix) {
    		        return this._scope.name(prefix);
    		    }
    		    // reserves unique name in the external scope
    		    scopeName(prefix) {
    		        return this._extScope.name(prefix);
    		    }
    		    // reserves unique name in the external scope and assigns value to it
    		    scopeValue(prefixOrName, value) {
    		        const name = this._extScope.value(prefixOrName, value);
    		        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
    		        vs.add(name);
    		        return name;
    		    }
    		    getScopeValue(prefix, keyOrRef) {
    		        return this._extScope.getValue(prefix, keyOrRef);
    		    }
    		    // return code that assigns values in the external scope to the names that are used internally
    		    // (same names that were returned by gen.scopeName or gen.scopeValue)
    		    scopeRefs(scopeName) {
    		        return this._extScope.scopeRefs(scopeName, this._values);
    		    }
    		    scopeCode() {
    		        return this._extScope.scopeCode(this._values);
    		    }
    		    _def(varKind, nameOrPrefix, rhs, constant) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        if (rhs !== undefined && constant)
    		            this._constants[name.str] = rhs;
    		        this._leafNode(new Def(varKind, name, rhs));
    		        return name;
    		    }
    		    // `const` declaration (`var` in es5 mode)
    		    const(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    		    }
    		    // `let` declaration with optional assignment (`var` in es5 mode)
    		    let(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    		    }
    		    // `var` declaration with optional assignment
    		    var(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    		    }
    		    // assignment code
    		    assign(lhs, rhs, sideEffects) {
    		        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    		    }
    		    // `+=` code
    		    add(lhs, rhs) {
    		        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    		    }
    		    // appends passed SafeExpr to code or executes Block
    		    code(c) {
    		        if (typeof c == "function")
    		            c();
    		        else if (c !== code_1.nil)
    		            this._leafNode(new AnyCode(c));
    		        return this;
    		    }
    		    // returns code for object literal for the passed argument list of key-value pairs
    		    object(...keyValues) {
    		        const code = ["{"];
    		        for (const [key, value] of keyValues) {
    		            if (code.length > 1)
    		                code.push(",");
    		            code.push(key);
    		            if (key !== value || this.opts.es5) {
    		                code.push(":");
    		                (0, code_1.addCodeArg)(code, value);
    		            }
    		        }
    		        code.push("}");
    		        return new code_1._Code(code);
    		    }
    		    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    		    if(condition, thenBody, elseBody) {
    		        this._blockNode(new If(condition));
    		        if (thenBody && elseBody) {
    		            this.code(thenBody).else().code(elseBody).endIf();
    		        }
    		        else if (thenBody) {
    		            this.code(thenBody).endIf();
    		        }
    		        else if (elseBody) {
    		            throw new Error('CodeGen: "else" body without "then" body');
    		        }
    		        return this;
    		    }
    		    // `else if` clause - invalid without `if` or after `else` clauses
    		    elseIf(condition) {
    		        return this._elseNode(new If(condition));
    		    }
    		    // `else` clause - only valid after `if` or `else if` clauses
    		    else() {
    		        return this._elseNode(new Else());
    		    }
    		    // end `if` statement (needed if gen.if was used only with condition)
    		    endIf() {
    		        return this._endBlockNode(If, Else);
    		    }
    		    _for(node, forBody) {
    		        this._blockNode(node);
    		        if (forBody)
    		            this.code(forBody).endFor();
    		        return this;
    		    }
    		    // a generic `for` clause (or statement if `forBody` is passed)
    		    for(iteration, forBody) {
    		        return this._for(new ForLoop(iteration), forBody);
    		    }
    		    // `for` statement for a range of values
    		    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    		    }
    		    // `for-of` statement (in es5 mode replace with a normal for loop)
    		    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        if (this.opts.es5) {
    		            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
    		            return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
    		                this.var(name, (0, code_1._) `${arr}[${i}]`);
    		                forBody(name);
    		            });
    		        }
    		        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    		    }
    		    // `for-in` statement.
    		    // With option `ownProperties` replaced with a `for-of` loop for object keys
    		    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
    		        if (this.opts.ownProperties) {
    		            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
    		        }
    		        const name = this._scope.toName(nameOrPrefix);
    		        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    		    }
    		    // end `for` loop
    		    endFor() {
    		        return this._endBlockNode(For);
    		    }
    		    // `label` statement
    		    label(label) {
    		        return this._leafNode(new Label(label));
    		    }
    		    // `break` statement
    		    break(label) {
    		        return this._leafNode(new Break(label));
    		    }
    		    // `return` statement
    		    return(value) {
    		        const node = new Return();
    		        this._blockNode(node);
    		        this.code(value);
    		        if (node.nodes.length !== 1)
    		            throw new Error('CodeGen: "return" should have one node');
    		        return this._endBlockNode(Return);
    		    }
    		    // `try` statement
    		    try(tryBody, catchCode, finallyCode) {
    		        if (!catchCode && !finallyCode)
    		            throw new Error('CodeGen: "try" without "catch" and "finally"');
    		        const node = new Try();
    		        this._blockNode(node);
    		        this.code(tryBody);
    		        if (catchCode) {
    		            const error = this.name("e");
    		            this._currNode = node.catch = new Catch(error);
    		            catchCode(error);
    		        }
    		        if (finallyCode) {
    		            this._currNode = node.finally = new Finally();
    		            this.code(finallyCode);
    		        }
    		        return this._endBlockNode(Catch, Finally);
    		    }
    		    // `throw` statement
    		    throw(error) {
    		        return this._leafNode(new Throw(error));
    		    }
    		    // start self-balancing block
    		    block(body, nodeCount) {
    		        this._blockStarts.push(this._nodes.length);
    		        if (body)
    		            this.code(body).endBlock(nodeCount);
    		        return this;
    		    }
    		    // end the current self-balancing block
    		    endBlock(nodeCount) {
    		        const len = this._blockStarts.pop();
    		        if (len === undefined)
    		            throw new Error("CodeGen: not in self-balancing block");
    		        const toClose = this._nodes.length - len;
    		        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
    		            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
    		        }
    		        this._nodes.length = len;
    		        return this;
    		    }
    		    // `function` heading (or definition if funcBody is passed)
    		    func(name, args = code_1.nil, async, funcBody) {
    		        this._blockNode(new Func(name, args, async));
    		        if (funcBody)
    		            this.code(funcBody).endFunc();
    		        return this;
    		    }
    		    // end function definition
    		    endFunc() {
    		        return this._endBlockNode(Func);
    		    }
    		    optimize(n = 1) {
    		        while (n-- > 0) {
    		            this._root.optimizeNodes();
    		            this._root.optimizeNames(this._root.names, this._constants);
    		        }
    		    }
    		    _leafNode(node) {
    		        this._currNode.nodes.push(node);
    		        return this;
    		    }
    		    _blockNode(node) {
    		        this._currNode.nodes.push(node);
    		        this._nodes.push(node);
    		    }
    		    _endBlockNode(N1, N2) {
    		        const n = this._currNode;
    		        if (n instanceof N1 || (N2 && n instanceof N2)) {
    		            this._nodes.pop();
    		            return this;
    		        }
    		        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    		    }
    		    _elseNode(node) {
    		        const n = this._currNode;
    		        if (!(n instanceof If)) {
    		            throw new Error('CodeGen: "else" without "if"');
    		        }
    		        this._currNode = n.else = node;
    		        return this;
    		    }
    		    get _root() {
    		        return this._nodes[0];
    		    }
    		    get _currNode() {
    		        const ns = this._nodes;
    		        return ns[ns.length - 1];
    		    }
    		    set _currNode(node) {
    		        const ns = this._nodes;
    		        ns[ns.length - 1] = node;
    		    }
    		}
    		exports.CodeGen = CodeGen;
    		function addNames(names, from) {
    		    for (const n in from)
    		        names[n] = (names[n] || 0) + (from[n] || 0);
    		    return names;
    		}
    		function addExprNames(names, from) {
    		    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    		}
    		function optimizeExpr(expr, names, constants) {
    		    if (expr instanceof code_1.Name)
    		        return replaceName(expr);
    		    if (!canOptimize(expr))
    		        return expr;
    		    return new code_1._Code(expr._items.reduce((items, c) => {
    		        if (c instanceof code_1.Name)
    		            c = replaceName(c);
    		        if (c instanceof code_1._Code)
    		            items.push(...c._items);
    		        else
    		            items.push(c);
    		        return items;
    		    }, []));
    		    function replaceName(n) {
    		        const c = constants[n.str];
    		        if (c === undefined || names[n.str] !== 1)
    		            return n;
    		        delete names[n.str];
    		        return c;
    		    }
    		    function canOptimize(e) {
    		        return (e instanceof code_1._Code &&
    		            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
    		    }
    		}
    		function subtractNames(names, from) {
    		    for (const n in from)
    		        names[n] = (names[n] || 0) - (from[n] || 0);
    		}
    		function not(x) {
    		    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
    		}
    		exports.not = not;
    		const andCode = mappend(exports.operators.AND);
    		// boolean AND (&&) expression with the passed arguments
    		function and(...args) {
    		    return args.reduce(andCode);
    		}
    		exports.and = and;
    		const orCode = mappend(exports.operators.OR);
    		// boolean OR (||) expression with the passed arguments
    		function or(...args) {
    		    return args.reduce(orCode);
    		}
    		exports.or = or;
    		function mappend(op) {
    		    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
    		}
    		function par(x) {
    		    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
    		}
    		
    } (codegen$1));
    	return codegen$1;
    }

    var util$7 = {};

    var hasRequiredUtil;

    function requireUtil () {
    	if (hasRequiredUtil) return util$7;
    	hasRequiredUtil = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    		const codegen_1 = requireCodegen$1();
    		const code_1 = requireCode$1();
    		// TODO refactor to use Set
    		function toHash(arr) {
    		    const hash = {};
    		    for (const item of arr)
    		        hash[item] = true;
    		    return hash;
    		}
    		exports.toHash = toHash;
    		function alwaysValidSchema(it, schema) {
    		    if (typeof schema == "boolean")
    		        return schema;
    		    if (Object.keys(schema).length === 0)
    		        return true;
    		    checkUnknownRules(it, schema);
    		    return !schemaHasRules(schema, it.self.RULES.all);
    		}
    		exports.alwaysValidSchema = alwaysValidSchema;
    		function checkUnknownRules(it, schema = it.schema) {
    		    const { opts, self } = it;
    		    if (!opts.strictSchema)
    		        return;
    		    if (typeof schema === "boolean")
    		        return;
    		    const rules = self.RULES.keywords;
    		    for (const key in schema) {
    		        if (!rules[key])
    		            checkStrictMode(it, `unknown keyword: "${key}"`);
    		    }
    		}
    		exports.checkUnknownRules = checkUnknownRules;
    		function schemaHasRules(schema, rules) {
    		    if (typeof schema == "boolean")
    		        return !schema;
    		    for (const key in schema)
    		        if (rules[key])
    		            return true;
    		    return false;
    		}
    		exports.schemaHasRules = schemaHasRules;
    		function schemaHasRulesButRef(schema, RULES) {
    		    if (typeof schema == "boolean")
    		        return !schema;
    		    for (const key in schema)
    		        if (key !== "$ref" && RULES.all[key])
    		            return true;
    		    return false;
    		}
    		exports.schemaHasRulesButRef = schemaHasRulesButRef;
    		function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    		    if (!$data) {
    		        if (typeof schema == "number" || typeof schema == "boolean")
    		            return schema;
    		        if (typeof schema == "string")
    		            return (0, codegen_1._) `${schema}`;
    		    }
    		    return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    		}
    		exports.schemaRefOrVal = schemaRefOrVal;
    		function unescapeFragment(str) {
    		    return unescapeJsonPointer(decodeURIComponent(str));
    		}
    		exports.unescapeFragment = unescapeFragment;
    		function escapeFragment(str) {
    		    return encodeURIComponent(escapeJsonPointer(str));
    		}
    		exports.escapeFragment = escapeFragment;
    		function escapeJsonPointer(str) {
    		    if (typeof str == "number")
    		        return `${str}`;
    		    return str.replace(/~/g, "~0").replace(/\//g, "~1");
    		}
    		exports.escapeJsonPointer = escapeJsonPointer;
    		function unescapeJsonPointer(str) {
    		    return str.replace(/~1/g, "/").replace(/~0/g, "~");
    		}
    		exports.unescapeJsonPointer = unescapeJsonPointer;
    		function eachItem(xs, f) {
    		    if (Array.isArray(xs)) {
    		        for (const x of xs)
    		            f(x);
    		    }
    		    else {
    		        f(xs);
    		    }
    		}
    		exports.eachItem = eachItem;
    		function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
    		    return (gen, from, to, toName) => {
    		        const res = to === undefined
    		            ? from
    		            : to instanceof codegen_1.Name
    		                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
    		                : from instanceof codegen_1.Name
    		                    ? (mergeToName(gen, to, from), from)
    		                    : mergeValues(from, to);
    		        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    		    };
    		}
    		exports.mergeEvaluated = {
    		    props: makeMergeEvaluated({
    		        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
    		            gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
    		        }),
    		        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
    		            if (from === true) {
    		                gen.assign(to, true);
    		            }
    		            else {
    		                gen.assign(to, (0, codegen_1._) `${to} || {}`);
    		                setEvaluated(gen, to, from);
    		            }
    		        }),
    		        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
    		        resultToName: evaluatedPropsToName,
    		    }),
    		    items: makeMergeEvaluated({
    		        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
    		        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
    		        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
    		        resultToName: (gen, items) => gen.var("items", items),
    		    }),
    		};
    		function evaluatedPropsToName(gen, ps) {
    		    if (ps === true)
    		        return gen.var("props", true);
    		    const props = gen.var("props", (0, codegen_1._) `{}`);
    		    if (ps !== undefined)
    		        setEvaluated(gen, props, ps);
    		    return props;
    		}
    		exports.evaluatedPropsToName = evaluatedPropsToName;
    		function setEvaluated(gen, props, ps) {
    		    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
    		}
    		exports.setEvaluated = setEvaluated;
    		const snippets = {};
    		function useFunc(gen, f) {
    		    return gen.scopeValue("func", {
    		        ref: f,
    		        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
    		    });
    		}
    		exports.useFunc = useFunc;
    		var Type;
    		(function (Type) {
    		    Type[Type["Num"] = 0] = "Num";
    		    Type[Type["Str"] = 1] = "Str";
    		})(Type = exports.Type || (exports.Type = {}));
    		function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    		    // let path
    		    if (dataProp instanceof codegen_1.Name) {
    		        const isNumber = dataPropType === Type.Num;
    		        return jsPropertySyntax
    		            ? isNumber
    		                ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
    		                : (0, codegen_1._) `"['" + ${dataProp} + "']"`
    		            : isNumber
    		                ? (0, codegen_1._) `"/" + ${dataProp}`
    		                : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    		    }
    		    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    		}
    		exports.getErrorPath = getErrorPath;
    		function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    		    if (!mode)
    		        return;
    		    msg = `strict mode: ${msg}`;
    		    if (mode === true)
    		        throw new Error(msg);
    		    it.self.logger.warn(msg);
    		}
    		exports.checkStrictMode = checkStrictMode;
    		
    } (util$7));
    	return util$7;
    }

    var names$2 = {};

    var hasRequiredNames;

    function requireNames () {
    	if (hasRequiredNames) return names$2;
    	hasRequiredNames = 1;
    	Object.defineProperty(names$2, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const names = {
    	    // validation function arguments
    	    data: new codegen_1.Name("data"),
    	    // args passed from referencing schema
    	    valCxt: new codegen_1.Name("valCxt"),
    	    instancePath: new codegen_1.Name("instancePath"),
    	    parentData: new codegen_1.Name("parentData"),
    	    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    	    rootData: new codegen_1.Name("rootData"),
    	    dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
    	    // function scoped variables
    	    vErrors: new codegen_1.Name("vErrors"),
    	    errors: new codegen_1.Name("errors"),
    	    this: new codegen_1.Name("this"),
    	    // "globals"
    	    self: new codegen_1.Name("self"),
    	    scope: new codegen_1.Name("scope"),
    	    // JTD serialize/parse name for JSON string and position
    	    json: new codegen_1.Name("json"),
    	    jsonPos: new codegen_1.Name("jsonPos"),
    	    jsonLen: new codegen_1.Name("jsonLen"),
    	    jsonPart: new codegen_1.Name("jsonPart"),
    	};
    	names$2.default = names;
    	
    	return names$2;
    }

    var hasRequiredErrors$1;

    function requireErrors$1 () {
    	if (hasRequiredErrors$1) return errors$1;
    	hasRequiredErrors$1 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    		const codegen_1 = requireCodegen$1();
    		const util_1 = requireUtil();
    		const names_1 = requireNames();
    		exports.keywordError = {
    		    message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
    		};
    		exports.keyword$DataError = {
    		    message: ({ keyword, schemaType }) => schemaType
    		        ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
    		        : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
    		};
    		function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    		    const { it } = cxt;
    		    const { gen, compositeRule, allErrors } = it;
    		    const errObj = errorObjectCode(cxt, error, errorPaths);
    		    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
    		        addError(gen, errObj);
    		    }
    		    else {
    		        returnErrors(it, (0, codegen_1._) `[${errObj}]`);
    		    }
    		}
    		exports.reportError = reportError;
    		function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    		    const { it } = cxt;
    		    const { gen, compositeRule, allErrors } = it;
    		    const errObj = errorObjectCode(cxt, error, errorPaths);
    		    addError(gen, errObj);
    		    if (!(compositeRule || allErrors)) {
    		        returnErrors(it, names_1.default.vErrors);
    		    }
    		}
    		exports.reportExtraError = reportExtraError;
    		function resetErrorsCount(gen, errsCount) {
    		    gen.assign(names_1.default.errors, errsCount);
    		    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    		}
    		exports.resetErrorsCount = resetErrorsCount;
    		function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
    		    /* istanbul ignore if */
    		    if (errsCount === undefined)
    		        throw new Error("ajv implementation error");
    		    const err = gen.name("err");
    		    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
    		        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
    		        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
    		        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
    		        if (it.opts.verbose) {
    		            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
    		            gen.assign((0, codegen_1._) `${err}.data`, data);
    		        }
    		    });
    		}
    		exports.extendErrors = extendErrors;
    		function addError(gen, errObj) {
    		    const err = gen.const("err", errObj);
    		    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
    		    gen.code((0, codegen_1._) `${names_1.default.errors}++`);
    		}
    		function returnErrors(it, errs) {
    		    const { gen, validateName, schemaEnv } = it;
    		    if (schemaEnv.$async) {
    		        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
    		    }
    		    else {
    		        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
    		        gen.return(false);
    		    }
    		}
    		const E = {
    		    keyword: new codegen_1.Name("keyword"),
    		    schemaPath: new codegen_1.Name("schemaPath"),
    		    params: new codegen_1.Name("params"),
    		    propertyName: new codegen_1.Name("propertyName"),
    		    message: new codegen_1.Name("message"),
    		    schema: new codegen_1.Name("schema"),
    		    parentSchema: new codegen_1.Name("parentSchema"),
    		};
    		function errorObjectCode(cxt, error, errorPaths) {
    		    const { createErrors } = cxt.it;
    		    if (createErrors === false)
    		        return (0, codegen_1._) `{}`;
    		    return errorObject(cxt, error, errorPaths);
    		}
    		function errorObject(cxt, error, errorPaths = {}) {
    		    const { gen, it } = cxt;
    		    const keyValues = [
    		        errorInstancePath(it, errorPaths),
    		        errorSchemaPath(cxt, errorPaths),
    		    ];
    		    extraErrorProps(cxt, error, keyValues);
    		    return gen.object(...keyValues);
    		}
    		function errorInstancePath({ errorPath }, { instancePath }) {
    		    const instPath = instancePath
    		        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
    		        : errorPath;
    		    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    		}
    		function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    		    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
    		    if (schemaPath) {
    		        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    		    }
    		    return [E.schemaPath, schPath];
    		}
    		function extraErrorProps(cxt, { params, message }, keyValues) {
    		    const { keyword, data, schemaValue, it } = cxt;
    		    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    		    keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
    		    if (opts.messages) {
    		        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    		    }
    		    if (opts.verbose) {
    		        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    		    }
    		    if (propertyName)
    		        keyValues.push([E.propertyName, propertyName]);
    		}
    		
    } (errors$1));
    	return errors$1;
    }

    var hasRequiredBoolSchema$1;

    function requireBoolSchema$1 () {
    	if (hasRequiredBoolSchema$1) return boolSchema$1;
    	hasRequiredBoolSchema$1 = 1;
    	Object.defineProperty(boolSchema$1, "__esModule", { value: true });
    	boolSchema$1.boolOrEmptySchema = boolSchema$1.topBoolOrEmptySchema = void 0;
    	const errors_1 = requireErrors$1();
    	const codegen_1 = requireCodegen$1();
    	const names_1 = requireNames();
    	const boolError = {
    	    message: "boolean schema is false",
    	};
    	function topBoolOrEmptySchema(it) {
    	    const { gen, schema, validateName } = it;
    	    if (schema === false) {
    	        falseSchemaError(it, false);
    	    }
    	    else if (typeof schema == "object" && schema.$async === true) {
    	        gen.return(names_1.default.data);
    	    }
    	    else {
    	        gen.assign((0, codegen_1._) `${validateName}.errors`, null);
    	        gen.return(true);
    	    }
    	}
    	boolSchema$1.topBoolOrEmptySchema = topBoolOrEmptySchema;
    	function boolOrEmptySchema(it, valid) {
    	    const { gen, schema } = it;
    	    if (schema === false) {
    	        gen.var(valid, false); // TODO var
    	        falseSchemaError(it);
    	    }
    	    else {
    	        gen.var(valid, true); // TODO var
    	    }
    	}
    	boolSchema$1.boolOrEmptySchema = boolOrEmptySchema;
    	function falseSchemaError(it, overrideAllErrors) {
    	    const { gen, data } = it;
    	    // TODO maybe some other interface should be used for non-keyword validation errors...
    	    const cxt = {
    	        gen,
    	        keyword: "false schema",
    	        data,
    	        schema: false,
    	        schemaCode: false,
    	        schemaValue: false,
    	        params: {},
    	        it,
    	    };
    	    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
    	}
    	
    	return boolSchema$1;
    }

    var dataType$1 = {};

    var rules$1 = {};

    var hasRequiredRules;

    function requireRules () {
    	if (hasRequiredRules) return rules$1;
    	hasRequiredRules = 1;
    	Object.defineProperty(rules$1, "__esModule", { value: true });
    	rules$1.getRules = rules$1.isJSONType = void 0;
    	const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
    	const jsonTypes = new Set(_jsonTypes);
    	function isJSONType(x) {
    	    return typeof x == "string" && jsonTypes.has(x);
    	}
    	rules$1.isJSONType = isJSONType;
    	function getRules() {
    	    const groups = {
    	        number: { type: "number", rules: [] },
    	        string: { type: "string", rules: [] },
    	        array: { type: "array", rules: [] },
    	        object: { type: "object", rules: [] },
    	    };
    	    return {
    	        types: { ...groups, integer: true, boolean: true, null: true },
    	        rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
    	        post: { rules: [] },
    	        all: {},
    	        keywords: {},
    	    };
    	}
    	rules$1.getRules = getRules;
    	
    	return rules$1;
    }

    var applicability$1 = {};

    var hasRequiredApplicability$1;

    function requireApplicability$1 () {
    	if (hasRequiredApplicability$1) return applicability$1;
    	hasRequiredApplicability$1 = 1;
    	Object.defineProperty(applicability$1, "__esModule", { value: true });
    	applicability$1.shouldUseRule = applicability$1.shouldUseGroup = applicability$1.schemaHasRulesForType = void 0;
    	function schemaHasRulesForType({ schema, self }, type) {
    	    const group = self.RULES.types[type];
    	    return group && group !== true && shouldUseGroup(schema, group);
    	}
    	applicability$1.schemaHasRulesForType = schemaHasRulesForType;
    	function shouldUseGroup(schema, group) {
    	    return group.rules.some((rule) => shouldUseRule(schema, rule));
    	}
    	applicability$1.shouldUseGroup = shouldUseGroup;
    	function shouldUseRule(schema, rule) {
    	    var _a;
    	    return (schema[rule.keyword] !== undefined ||
    	        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
    	}
    	applicability$1.shouldUseRule = shouldUseRule;
    	
    	return applicability$1;
    }

    var hasRequiredDataType;

    function requireDataType () {
    	if (hasRequiredDataType) return dataType$1;
    	hasRequiredDataType = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    		const rules_1 = requireRules();
    		const applicability_1 = requireApplicability$1();
    		const errors_1 = requireErrors$1();
    		const codegen_1 = requireCodegen$1();
    		const util_1 = requireUtil();
    		var DataType;
    		(function (DataType) {
    		    DataType[DataType["Correct"] = 0] = "Correct";
    		    DataType[DataType["Wrong"] = 1] = "Wrong";
    		})(DataType = exports.DataType || (exports.DataType = {}));
    		function getSchemaTypes(schema) {
    		    const types = getJSONTypes(schema.type);
    		    const hasNull = types.includes("null");
    		    if (hasNull) {
    		        if (schema.nullable === false)
    		            throw new Error("type: null contradicts nullable: false");
    		    }
    		    else {
    		        if (!types.length && schema.nullable !== undefined) {
    		            throw new Error('"nullable" cannot be used without "type"');
    		        }
    		        if (schema.nullable === true)
    		            types.push("null");
    		    }
    		    return types;
    		}
    		exports.getSchemaTypes = getSchemaTypes;
    		function getJSONTypes(ts) {
    		    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    		    if (types.every(rules_1.isJSONType))
    		        return types;
    		    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    		}
    		exports.getJSONTypes = getJSONTypes;
    		function coerceAndCheckDataType(it, types) {
    		    const { gen, data, opts } = it;
    		    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    		    const checkTypes = types.length > 0 &&
    		        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    		    if (checkTypes) {
    		        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
    		        gen.if(wrongType, () => {
    		            if (coerceTo.length)
    		                coerceData(it, types, coerceTo);
    		            else
    		                reportTypeError(it);
    		        });
    		    }
    		    return checkTypes;
    		}
    		exports.coerceAndCheckDataType = coerceAndCheckDataType;
    		const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
    		function coerceToTypes(types, coerceTypes) {
    		    return coerceTypes
    		        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
    		        : [];
    		}
    		function coerceData(it, types, coerceTo) {
    		    const { gen, data, opts } = it;
    		    const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
    		    const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
    		    if (opts.coerceTypes === "array") {
    		        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
    		            .assign(data, (0, codegen_1._) `${data}[0]`)
    		            .assign(dataType, (0, codegen_1._) `typeof ${data}`)
    		            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
    		    }
    		    gen.if((0, codegen_1._) `${coerced} !== undefined`);
    		    for (const t of coerceTo) {
    		        if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
    		            coerceSpecificType(t);
    		        }
    		    }
    		    gen.else();
    		    reportTypeError(it);
    		    gen.endIf();
    		    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
    		        gen.assign(data, coerced);
    		        assignParentData(it, coerced);
    		    });
    		    function coerceSpecificType(t) {
    		        switch (t) {
    		            case "string":
    		                gen
    		                    .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
    		                    .assign(coerced, (0, codegen_1._) `"" + ${data}`)
    		                    .elseIf((0, codegen_1._) `${data} === null`)
    		                    .assign(coerced, (0, codegen_1._) `""`);
    		                return;
    		            case "number":
    		                gen
    		                    .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
    		                    .assign(coerced, (0, codegen_1._) `+${data}`);
    		                return;
    		            case "integer":
    		                gen
    		                    .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
    		                    .assign(coerced, (0, codegen_1._) `+${data}`);
    		                return;
    		            case "boolean":
    		                gen
    		                    .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
    		                    .assign(coerced, false)
    		                    .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
    		                    .assign(coerced, true);
    		                return;
    		            case "null":
    		                gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
    		                gen.assign(coerced, null);
    		                return;
    		            case "array":
    		                gen
    		                    .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
    		                    .assign(coerced, (0, codegen_1._) `[${data}]`);
    		        }
    		    }
    		}
    		function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    		    // TODO use gen.property
    		    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
    		}
    		function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    		    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    		    let cond;
    		    switch (dataType) {
    		        case "null":
    		            return (0, codegen_1._) `${data} ${EQ} null`;
    		        case "array":
    		            cond = (0, codegen_1._) `Array.isArray(${data})`;
    		            break;
    		        case "object":
    		            cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
    		            break;
    		        case "integer":
    		            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
    		            break;
    		        case "number":
    		            cond = numCond();
    		            break;
    		        default:
    		            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
    		    }
    		    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    		    function numCond(_cond = codegen_1.nil) {
    		        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
    		    }
    		}
    		exports.checkDataType = checkDataType;
    		function checkDataTypes(dataTypes, data, strictNums, correct) {
    		    if (dataTypes.length === 1) {
    		        return checkDataType(dataTypes[0], data, strictNums, correct);
    		    }
    		    let cond;
    		    const types = (0, util_1.toHash)(dataTypes);
    		    if (types.array && types.object) {
    		        const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
    		        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
    		        delete types.null;
    		        delete types.array;
    		        delete types.object;
    		    }
    		    else {
    		        cond = codegen_1.nil;
    		    }
    		    if (types.number)
    		        delete types.integer;
    		    for (const t in types)
    		        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    		    return cond;
    		}
    		exports.checkDataTypes = checkDataTypes;
    		const typeError = {
    		    message: ({ schema }) => `must be ${schema}`,
    		    params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
    		};
    		function reportTypeError(it) {
    		    const cxt = getTypeErrorContext(it);
    		    (0, errors_1.reportError)(cxt, typeError);
    		}
    		exports.reportTypeError = reportTypeError;
    		function getTypeErrorContext(it) {
    		    const { gen, data, schema } = it;
    		    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    		    return {
    		        gen,
    		        keyword: "type",
    		        data,
    		        schema: schema.type,
    		        schemaCode,
    		        schemaValue: schemaCode,
    		        parentSchema: schema,
    		        params: {},
    		        it,
    		    };
    		}
    		
    } (dataType$1));
    	return dataType$1;
    }

    var defaults$1 = {};

    var hasRequiredDefaults$1;

    function requireDefaults$1 () {
    	if (hasRequiredDefaults$1) return defaults$1;
    	hasRequiredDefaults$1 = 1;
    	Object.defineProperty(defaults$1, "__esModule", { value: true });
    	defaults$1.assignDefaults = void 0;
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	function assignDefaults(it, ty) {
    	    const { properties, items } = it.schema;
    	    if (ty === "object" && properties) {
    	        for (const key in properties) {
    	            assignDefault(it, key, properties[key].default);
    	        }
    	    }
    	    else if (ty === "array" && Array.isArray(items)) {
    	        items.forEach((sch, i) => assignDefault(it, i, sch.default));
    	    }
    	}
    	defaults$1.assignDefaults = assignDefaults;
    	function assignDefault(it, prop, defaultValue) {
    	    const { gen, compositeRule, data, opts } = it;
    	    if (defaultValue === undefined)
    	        return;
    	    const childData = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(prop)}`;
    	    if (compositeRule) {
    	        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
    	        return;
    	    }
    	    let condition = (0, codegen_1._) `${childData} === undefined`;
    	    if (opts.useDefaults === "empty") {
    	        condition = (0, codegen_1._) `${condition} || ${childData} === null || ${childData} === ""`;
    	    }
    	    // `${childData} === undefined` +
    	    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    	    gen.if(condition, (0, codegen_1._) `${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
    	}
    	
    	return defaults$1;
    }

    var keyword$1 = {};

    var code$2 = {};

    var hasRequiredCode;

    function requireCode () {
    	if (hasRequiredCode) return code$2;
    	hasRequiredCode = 1;
    	Object.defineProperty(code$2, "__esModule", { value: true });
    	code$2.validateUnion = code$2.validateArray = code$2.usePattern = code$2.callValidateCode = code$2.schemaProperties = code$2.allSchemaProperties = code$2.noPropertyInData = code$2.propertyInData = code$2.isOwnProperty = code$2.hasPropFunc = code$2.reportMissingProp = code$2.checkMissingProp = code$2.checkReportMissingProp = void 0;
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const names_1 = requireNames();
    	const util_2 = requireUtil();
    	function checkReportMissingProp(cxt, prop) {
    	    const { gen, data, it } = cxt;
    	    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
    	        cxt.setParams({ missingProperty: (0, codegen_1._) `${prop}` }, true);
    	        cxt.error();
    	    });
    	}
    	code$2.checkReportMissingProp = checkReportMissingProp;
    	function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    	    return (0, codegen_1.or)(...properties.map((prop) => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._) `${missing} = ${prop}`)));
    	}
    	code$2.checkMissingProp = checkMissingProp;
    	function reportMissingProp(cxt, missing) {
    	    cxt.setParams({ missingProperty: missing }, true);
    	    cxt.error();
    	}
    	code$2.reportMissingProp = reportMissingProp;
    	function hasPropFunc(gen) {
    	    return gen.scopeValue("func", {
    	        // eslint-disable-next-line @typescript-eslint/unbound-method
    	        ref: Object.prototype.hasOwnProperty,
    	        code: (0, codegen_1._) `Object.prototype.hasOwnProperty`,
    	    });
    	}
    	code$2.hasPropFunc = hasPropFunc;
    	function isOwnProperty(gen, data, property) {
    	    return (0, codegen_1._) `${hasPropFunc(gen)}.call(${data}, ${property})`;
    	}
    	code$2.isOwnProperty = isOwnProperty;
    	function propertyInData(gen, data, property, ownProperties) {
    	    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
    	    return ownProperties ? (0, codegen_1._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
    	}
    	code$2.propertyInData = propertyInData;
    	function noPropertyInData(gen, data, property, ownProperties) {
    	    const cond = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(property)} === undefined`;
    	    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
    	}
    	code$2.noPropertyInData = noPropertyInData;
    	function allSchemaProperties(schemaMap) {
    	    return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    	}
    	code$2.allSchemaProperties = allSchemaProperties;
    	function schemaProperties(it, schemaMap) {
    	    return allSchemaProperties(schemaMap).filter((p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
    	}
    	code$2.schemaProperties = schemaProperties;
    	function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    	    const dataAndSchema = passSchema ? (0, codegen_1._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    	    const valCxt = [
    	        [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)],
    	        [names_1.default.parentData, it.parentData],
    	        [names_1.default.parentDataProperty, it.parentDataProperty],
    	        [names_1.default.rootData, names_1.default.rootData],
    	    ];
    	    if (it.opts.dynamicRef)
    	        valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
    	    const args = (0, codegen_1._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
    	    return context !== codegen_1.nil ? (0, codegen_1._) `${func}.call(${context}, ${args})` : (0, codegen_1._) `${func}(${args})`;
    	}
    	code$2.callValidateCode = callValidateCode;
    	const newRegExp = (0, codegen_1._) `new RegExp`;
    	function usePattern({ gen, it: { opts } }, pattern) {
    	    const u = opts.unicodeRegExp ? "u" : "";
    	    const { regExp } = opts.code;
    	    const rx = regExp(pattern, u);
    	    return gen.scopeValue("pattern", {
    	        key: rx.toString(),
    	        ref: rx,
    	        code: (0, codegen_1._) `${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`,
    	    });
    	}
    	code$2.usePattern = usePattern;
    	function validateArray(cxt) {
    	    const { gen, data, keyword, it } = cxt;
    	    const valid = gen.name("valid");
    	    if (it.allErrors) {
    	        const validArr = gen.let("valid", true);
    	        validateItems(() => gen.assign(validArr, false));
    	        return validArr;
    	    }
    	    gen.var(valid, true);
    	    validateItems(() => gen.break());
    	    return valid;
    	    function validateItems(notValid) {
    	        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    	        gen.forRange("i", 0, len, (i) => {
    	            cxt.subschema({
    	                keyword,
    	                dataProp: i,
    	                dataPropType: util_1.Type.Num,
    	            }, valid);
    	            gen.if((0, codegen_1.not)(valid), notValid);
    	        });
    	    }
    	}
    	code$2.validateArray = validateArray;
    	function validateUnion(cxt) {
    	    const { gen, schema, keyword, it } = cxt;
    	    /* istanbul ignore if */
    	    if (!Array.isArray(schema))
    	        throw new Error("ajv implementation error");
    	    const alwaysValid = schema.some((sch) => (0, util_1.alwaysValidSchema)(it, sch));
    	    if (alwaysValid && !it.opts.unevaluated)
    	        return;
    	    const valid = gen.let("valid", false);
    	    const schValid = gen.name("_valid");
    	    gen.block(() => schema.forEach((_sch, i) => {
    	        const schCxt = cxt.subschema({
    	            keyword,
    	            schemaProp: i,
    	            compositeRule: true,
    	        }, schValid);
    	        gen.assign(valid, (0, codegen_1._) `${valid} || ${schValid}`);
    	        const merged = cxt.mergeValidEvaluated(schCxt, schValid);
    	        // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
    	        // or if all properties and items were evaluated (it.props === true && it.items === true)
    	        if (!merged)
    	            gen.if((0, codegen_1.not)(valid));
    	    }));
    	    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    	}
    	code$2.validateUnion = validateUnion;
    	
    	return code$2;
    }

    var hasRequiredKeyword$1;

    function requireKeyword$1 () {
    	if (hasRequiredKeyword$1) return keyword$1;
    	hasRequiredKeyword$1 = 1;
    	Object.defineProperty(keyword$1, "__esModule", { value: true });
    	keyword$1.validateKeywordUsage = keyword$1.validSchemaType = keyword$1.funcKeywordCode = keyword$1.macroKeywordCode = void 0;
    	const codegen_1 = requireCodegen$1();
    	const names_1 = requireNames();
    	const code_1 = requireCode();
    	const errors_1 = requireErrors$1();
    	function macroKeywordCode(cxt, def) {
    	    const { gen, keyword, schema, parentSchema, it } = cxt;
    	    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    	    const schemaRef = useKeyword(gen, keyword, macroSchema);
    	    if (it.opts.validateSchema !== false)
    	        it.self.validateSchema(macroSchema, true);
    	    const valid = gen.name("valid");
    	    cxt.subschema({
    	        schema: macroSchema,
    	        schemaPath: codegen_1.nil,
    	        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    	        topSchemaRef: schemaRef,
    	        compositeRule: true,
    	    }, valid);
    	    cxt.pass(valid, () => cxt.error(true));
    	}
    	keyword$1.macroKeywordCode = macroKeywordCode;
    	function funcKeywordCode(cxt, def) {
    	    var _a;
    	    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    	    checkAsyncKeyword(it, def);
    	    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    	    const validateRef = useKeyword(gen, keyword, validate);
    	    const valid = gen.let("valid");
    	    cxt.block$data(valid, validateKeyword);
    	    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    	    function validateKeyword() {
    	        if (def.errors === false) {
    	            assignValid();
    	            if (def.modifying)
    	                modifyData(cxt);
    	            reportErrs(() => cxt.error());
    	        }
    	        else {
    	            const ruleErrs = def.async ? validateAsync() : validateSync();
    	            if (def.modifying)
    	                modifyData(cxt);
    	            reportErrs(() => addErrs(cxt, ruleErrs));
    	        }
    	    }
    	    function validateAsync() {
    	        const ruleErrs = gen.let("ruleErrs", null);
    	        gen.try(() => assignValid((0, codegen_1._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._) `${e}.errors`), () => gen.throw(e)));
    	        return ruleErrs;
    	    }
    	    function validateSync() {
    	        const validateErrs = (0, codegen_1._) `${validateRef}.errors`;
    	        gen.assign(validateErrs, null);
    	        assignValid(codegen_1.nil);
    	        return validateErrs;
    	    }
    	    function assignValid(_await = def.async ? (0, codegen_1._) `await ` : codegen_1.nil) {
    	        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
    	        const passSchema = !(("compile" in def && !$data) || def.schema === false);
    	        gen.assign(valid, (0, codegen_1._) `${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    	    }
    	    function reportErrs(errors) {
    	        var _a;
    	        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    	    }
    	}
    	keyword$1.funcKeywordCode = funcKeywordCode;
    	function modifyData(cxt) {
    	    const { gen, data, it } = cxt;
    	    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._) `${it.parentData}[${it.parentDataProperty}]`));
    	}
    	function addErrs(cxt, errs) {
    	    const { gen } = cxt;
    	    gen.if((0, codegen_1._) `Array.isArray(${errs})`, () => {
    	        gen
    	            .assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)
    	            .assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
    	        (0, errors_1.extendErrors)(cxt);
    	    }, () => cxt.error());
    	}
    	function checkAsyncKeyword({ schemaEnv }, def) {
    	    if (def.async && !schemaEnv.$async)
    	        throw new Error("async keyword in sync schema");
    	}
    	function useKeyword(gen, keyword, result) {
    	    if (result === undefined)
    	        throw new Error(`keyword "${keyword}" failed to compile`);
    	    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
    	}
    	function validSchemaType(schema, schemaType, allowUndefined = false) {
    	    // TODO add tests
    	    return (!schemaType.length ||
    	        schemaType.some((st) => st === "array"
    	            ? Array.isArray(schema)
    	            : st === "object"
    	                ? schema && typeof schema == "object" && !Array.isArray(schema)
    	                : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
    	}
    	keyword$1.validSchemaType = validSchemaType;
    	function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    	    /* istanbul ignore if */
    	    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
    	        throw new Error("ajv implementation error");
    	    }
    	    const deps = def.dependencies;
    	    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
    	        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    	    }
    	    if (def.validateSchema) {
    	        const valid = def.validateSchema(schema[keyword]);
    	        if (!valid) {
    	            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
    	                self.errorsText(def.validateSchema.errors);
    	            if (opts.validateSchema === "log")
    	                self.logger.error(msg);
    	            else
    	                throw new Error(msg);
    	        }
    	    }
    	}
    	keyword$1.validateKeywordUsage = validateKeywordUsage;
    	
    	return keyword$1;
    }

    var subschema$1 = {};

    var hasRequiredSubschema$1;

    function requireSubschema$1 () {
    	if (hasRequiredSubschema$1) return subschema$1;
    	hasRequiredSubschema$1 = 1;
    	Object.defineProperty(subschema$1, "__esModule", { value: true });
    	subschema$1.extendSubschemaMode = subschema$1.extendSubschemaData = subschema$1.getSubschema = void 0;
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    	    if (keyword !== undefined && schema !== undefined) {
    	        throw new Error('both "keyword" and "schema" passed, only one allowed');
    	    }
    	    if (keyword !== undefined) {
    	        const sch = it.schema[keyword];
    	        return schemaProp === undefined
    	            ? {
    	                schema: sch,
    	                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
    	                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    	            }
    	            : {
    	                schema: sch[schemaProp],
    	                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
    	                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,
    	            };
    	    }
    	    if (schema !== undefined) {
    	        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
    	            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
    	        }
    	        return {
    	            schema,
    	            schemaPath,
    	            topSchemaRef,
    	            errSchemaPath,
    	        };
    	    }
    	    throw new Error('either "keyword" or "schema" must be passed');
    	}
    	subschema$1.getSubschema = getSubschema;
    	function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    	    if (data !== undefined && dataProp !== undefined) {
    	        throw new Error('both "data" and "dataProp" passed, only one allowed');
    	    }
    	    const { gen } = it;
    	    if (dataProp !== undefined) {
    	        const { errorPath, dataPathArr, opts } = it;
    	        const nextData = gen.let("data", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
    	        dataContextProps(nextData);
    	        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
    	        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;
    	        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    	    }
    	    if (data !== undefined) {
    	        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
    	        dataContextProps(nextData);
    	        if (propertyName !== undefined)
    	            subschema.propertyName = propertyName;
    	        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    	    }
    	    if (dataTypes)
    	        subschema.dataTypes = dataTypes;
    	    function dataContextProps(_nextData) {
    	        subschema.data = _nextData;
    	        subschema.dataLevel = it.dataLevel + 1;
    	        subschema.dataTypes = [];
    	        it.definedProperties = new Set();
    	        subschema.parentData = it.data;
    	        subschema.dataNames = [...it.dataNames, _nextData];
    	    }
    	}
    	subschema$1.extendSubschemaData = extendSubschemaData;
    	function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    	    if (compositeRule !== undefined)
    	        subschema.compositeRule = compositeRule;
    	    if (createErrors !== undefined)
    	        subschema.createErrors = createErrors;
    	    if (allErrors !== undefined)
    	        subschema.allErrors = allErrors;
    	    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    	    subschema.jtdMetadata = jtdMetadata; // not inherited
    	}
    	subschema$1.extendSubschemaMode = extendSubschemaMode;
    	
    	return subschema$1;
    }

    var resolve$2 = {};

    var jsonSchemaTraverseExports$1 = {};
    var jsonSchemaTraverse$1 = {
      get exports(){ return jsonSchemaTraverseExports$1; },
      set exports(v){ jsonSchemaTraverseExports$1 = v; },
    };

    var hasRequiredJsonSchemaTraverse;

    function requireJsonSchemaTraverse () {
    	if (hasRequiredJsonSchemaTraverse) return jsonSchemaTraverseExports$1;
    	hasRequiredJsonSchemaTraverse = 1;

    	var traverse = jsonSchemaTraverse$1.exports = function (schema, opts, cb) {
    	  // Legacy support for v0.3.1 and earlier.
    	  if (typeof opts == 'function') {
    	    cb = opts;
    	    opts = {};
    	  }

    	  cb = opts.cb || cb;
    	  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
    	  var post = cb.post || function() {};

    	  _traverse(opts, pre, post, schema, '', schema);
    	};


    	traverse.keywords = {
    	  additionalItems: true,
    	  items: true,
    	  contains: true,
    	  additionalProperties: true,
    	  propertyNames: true,
    	  not: true,
    	  if: true,
    	  then: true,
    	  else: true
    	};

    	traverse.arrayKeywords = {
    	  items: true,
    	  allOf: true,
    	  anyOf: true,
    	  oneOf: true
    	};

    	traverse.propsKeywords = {
    	  $defs: true,
    	  definitions: true,
    	  properties: true,
    	  patternProperties: true,
    	  dependencies: true
    	};

    	traverse.skipKeywords = {
    	  default: true,
    	  enum: true,
    	  const: true,
    	  required: true,
    	  maximum: true,
    	  minimum: true,
    	  exclusiveMaximum: true,
    	  exclusiveMinimum: true,
    	  multipleOf: true,
    	  maxLength: true,
    	  minLength: true,
    	  pattern: true,
    	  format: true,
    	  maxItems: true,
    	  minItems: true,
    	  uniqueItems: true,
    	  maxProperties: true,
    	  minProperties: true
    	};


    	function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    	  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
    	    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    	    for (var key in schema) {
    	      var sch = schema[key];
    	      if (Array.isArray(sch)) {
    	        if (key in traverse.arrayKeywords) {
    	          for (var i=0; i<sch.length; i++)
    	            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
    	        }
    	      } else if (key in traverse.propsKeywords) {
    	        if (sch && typeof sch == 'object') {
    	          for (var prop in sch)
    	            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
    	        }
    	      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
    	        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
    	      }
    	    }
    	    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    	  }
    	}


    	function escapeJsonPtr(str) {
    	  return str.replace(/~/g, '~0').replace(/\//g, '~1');
    	}
    	return jsonSchemaTraverseExports$1;
    }

    var hasRequiredResolve;

    function requireResolve () {
    	if (hasRequiredResolve) return resolve$2;
    	hasRequiredResolve = 1;
    	Object.defineProperty(resolve$2, "__esModule", { value: true });
    	resolve$2.getSchemaRefs = resolve$2.resolveUrl = resolve$2.normalizeId = resolve$2._getFullPath = resolve$2.getFullPath = resolve$2.inlineRef = void 0;
    	const util_1 = requireUtil();
    	const equal = fastDeepEqual;
    	const traverse = requireJsonSchemaTraverse();
    	// TODO refactor to use keyword definitions
    	const SIMPLE_INLINED = new Set([
    	    "type",
    	    "format",
    	    "pattern",
    	    "maxLength",
    	    "minLength",
    	    "maxProperties",
    	    "minProperties",
    	    "maxItems",
    	    "minItems",
    	    "maximum",
    	    "minimum",
    	    "uniqueItems",
    	    "multipleOf",
    	    "required",
    	    "enum",
    	    "const",
    	]);
    	function inlineRef(schema, limit = true) {
    	    if (typeof schema == "boolean")
    	        return true;
    	    if (limit === true)
    	        return !hasRef(schema);
    	    if (!limit)
    	        return false;
    	    return countKeys(schema) <= limit;
    	}
    	resolve$2.inlineRef = inlineRef;
    	const REF_KEYWORDS = new Set([
    	    "$ref",
    	    "$recursiveRef",
    	    "$recursiveAnchor",
    	    "$dynamicRef",
    	    "$dynamicAnchor",
    	]);
    	function hasRef(schema) {
    	    for (const key in schema) {
    	        if (REF_KEYWORDS.has(key))
    	            return true;
    	        const sch = schema[key];
    	        if (Array.isArray(sch) && sch.some(hasRef))
    	            return true;
    	        if (typeof sch == "object" && hasRef(sch))
    	            return true;
    	    }
    	    return false;
    	}
    	function countKeys(schema) {
    	    let count = 0;
    	    for (const key in schema) {
    	        if (key === "$ref")
    	            return Infinity;
    	        count++;
    	        if (SIMPLE_INLINED.has(key))
    	            continue;
    	        if (typeof schema[key] == "object") {
    	            (0, util_1.eachItem)(schema[key], (sch) => (count += countKeys(sch)));
    	        }
    	        if (count === Infinity)
    	            return Infinity;
    	    }
    	    return count;
    	}
    	function getFullPath(resolver, id = "", normalize) {
    	    if (normalize !== false)
    	        id = normalizeId(id);
    	    const p = resolver.parse(id);
    	    return _getFullPath(resolver, p);
    	}
    	resolve$2.getFullPath = getFullPath;
    	function _getFullPath(resolver, p) {
    	    const serialized = resolver.serialize(p);
    	    return serialized.split("#")[0] + "#";
    	}
    	resolve$2._getFullPath = _getFullPath;
    	const TRAILING_SLASH_HASH = /#\/?$/;
    	function normalizeId(id) {
    	    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
    	}
    	resolve$2.normalizeId = normalizeId;
    	function resolveUrl(resolver, baseId, id) {
    	    id = normalizeId(id);
    	    return resolver.resolve(baseId, id);
    	}
    	resolve$2.resolveUrl = resolveUrl;
    	const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    	function getSchemaRefs(schema, baseId) {
    	    if (typeof schema == "boolean")
    	        return {};
    	    const { schemaId, uriResolver } = this.opts;
    	    const schId = normalizeId(schema[schemaId] || baseId);
    	    const baseIds = { "": schId };
    	    const pathPrefix = getFullPath(uriResolver, schId, false);
    	    const localRefs = {};
    	    const schemaRefs = new Set();
    	    traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
    	        if (parentJsonPtr === undefined)
    	            return;
    	        const fullPath = pathPrefix + jsonPtr;
    	        let baseId = baseIds[parentJsonPtr];
    	        if (typeof sch[schemaId] == "string")
    	            baseId = addRef.call(this, sch[schemaId]);
    	        addAnchor.call(this, sch.$anchor);
    	        addAnchor.call(this, sch.$dynamicAnchor);
    	        baseIds[jsonPtr] = baseId;
    	        function addRef(ref) {
    	            // eslint-disable-next-line @typescript-eslint/unbound-method
    	            const _resolve = this.opts.uriResolver.resolve;
    	            ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);
    	            if (schemaRefs.has(ref))
    	                throw ambiguos(ref);
    	            schemaRefs.add(ref);
    	            let schOrRef = this.refs[ref];
    	            if (typeof schOrRef == "string")
    	                schOrRef = this.refs[schOrRef];
    	            if (typeof schOrRef == "object") {
    	                checkAmbiguosRef(sch, schOrRef.schema, ref);
    	            }
    	            else if (ref !== normalizeId(fullPath)) {
    	                if (ref[0] === "#") {
    	                    checkAmbiguosRef(sch, localRefs[ref], ref);
    	                    localRefs[ref] = sch;
    	                }
    	                else {
    	                    this.refs[ref] = fullPath;
    	                }
    	            }
    	            return ref;
    	        }
    	        function addAnchor(anchor) {
    	            if (typeof anchor == "string") {
    	                if (!ANCHOR.test(anchor))
    	                    throw new Error(`invalid anchor "${anchor}"`);
    	                addRef.call(this, `#${anchor}`);
    	            }
    	        }
    	    });
    	    return localRefs;
    	    function checkAmbiguosRef(sch1, sch2, ref) {
    	        if (sch2 !== undefined && !equal(sch1, sch2))
    	            throw ambiguos(ref);
    	    }
    	    function ambiguos(ref) {
    	        return new Error(`reference "${ref}" resolves to more than one schema`);
    	    }
    	}
    	resolve$2.getSchemaRefs = getSchemaRefs;
    	
    	return resolve$2;
    }

    var hasRequiredValidate$1;

    function requireValidate$1 () {
    	if (hasRequiredValidate$1) return validate$4;
    	hasRequiredValidate$1 = 1;
    	Object.defineProperty(validate$4, "__esModule", { value: true });
    	validate$4.getData = validate$4.KeywordCxt = validate$4.validateFunctionCode = void 0;
    	const boolSchema_1 = requireBoolSchema$1();
    	const dataType_1 = requireDataType();
    	const applicability_1 = requireApplicability$1();
    	const dataType_2 = requireDataType();
    	const defaults_1 = requireDefaults$1();
    	const keyword_1 = requireKeyword$1();
    	const subschema_1 = requireSubschema$1();
    	const codegen_1 = requireCodegen$1();
    	const names_1 = requireNames();
    	const resolve_1 = requireResolve();
    	const util_1 = requireUtil();
    	const errors_1 = requireErrors$1();
    	// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
    	function validateFunctionCode(it) {
    	    if (isSchemaObj(it)) {
    	        checkKeywords(it);
    	        if (schemaCxtHasRules(it)) {
    	            topSchemaObjCode(it);
    	            return;
    	        }
    	    }
    	    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    	}
    	validate$4.validateFunctionCode = validateFunctionCode;
    	function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    	    if (opts.code.es5) {
    	        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
    	            gen.code((0, codegen_1._) `"use strict"; ${funcSourceUrl(schema, opts)}`);
    	            destructureValCxtES5(gen, opts);
    	            gen.code(body);
    	        });
    	    }
    	    else {
    	        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    	    }
    	}
    	function destructureValCxt(opts) {
    	    return (0, codegen_1._) `{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._) `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
    	}
    	function destructureValCxtES5(gen, opts) {
    	    gen.if(names_1.default.valCxt, () => {
    	        gen.var(names_1.default.instancePath, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.instancePath}`);
    	        gen.var(names_1.default.parentData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentData}`);
    	        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
    	        gen.var(names_1.default.rootData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.rootData}`);
    	        if (opts.dynamicRef)
    	            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    	    }, () => {
    	        gen.var(names_1.default.instancePath, (0, codegen_1._) `""`);
    	        gen.var(names_1.default.parentData, (0, codegen_1._) `undefined`);
    	        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `undefined`);
    	        gen.var(names_1.default.rootData, names_1.default.data);
    	        if (opts.dynamicRef)
    	            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `{}`);
    	    });
    	}
    	function topSchemaObjCode(it) {
    	    const { schema, opts, gen } = it;
    	    validateFunction(it, () => {
    	        if (opts.$comment && schema.$comment)
    	            commentKeyword(it);
    	        checkNoDefault(it);
    	        gen.let(names_1.default.vErrors, null);
    	        gen.let(names_1.default.errors, 0);
    	        if (opts.unevaluated)
    	            resetEvaluated(it);
    	        typeAndKeywords(it);
    	        returnResults(it);
    	    });
    	    return;
    	}
    	function resetEvaluated(it) {
    	    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    	    const { gen, validateName } = it;
    	    it.evaluated = gen.const("evaluated", (0, codegen_1._) `${validateName}.evaluated`);
    	    gen.if((0, codegen_1._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._) `${it.evaluated}.props`, (0, codegen_1._) `undefined`));
    	    gen.if((0, codegen_1._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._) `${it.evaluated}.items`, (0, codegen_1._) `undefined`));
    	}
    	function funcSourceUrl(schema, opts) {
    	    const schId = typeof schema == "object" && schema[opts.schemaId];
    	    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._) `/*# sourceURL=${schId} */` : codegen_1.nil;
    	}
    	// schema compilation - this function is used recursively to generate code for sub-schemas
    	function subschemaCode(it, valid) {
    	    if (isSchemaObj(it)) {
    	        checkKeywords(it);
    	        if (schemaCxtHasRules(it)) {
    	            subSchemaObjCode(it, valid);
    	            return;
    	        }
    	    }
    	    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
    	}
    	function schemaCxtHasRules({ schema, self }) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (self.RULES.all[key])
    	            return true;
    	    return false;
    	}
    	function isSchemaObj(it) {
    	    return typeof it.schema != "boolean";
    	}
    	function subSchemaObjCode(it, valid) {
    	    const { schema, gen, opts } = it;
    	    if (opts.$comment && schema.$comment)
    	        commentKeyword(it);
    	    updateContext(it);
    	    checkAsyncSchema(it);
    	    const errsCount = gen.const("_errs", names_1.default.errors);
    	    typeAndKeywords(it, errsCount);
    	    // TODO var
    	    gen.var(valid, (0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
    	}
    	function checkKeywords(it) {
    	    (0, util_1.checkUnknownRules)(it);
    	    checkRefsAndKeywords(it);
    	}
    	function typeAndKeywords(it, errsCount) {
    	    if (it.opts.jtd)
    	        return schemaKeywords(it, [], false, errsCount);
    	    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    	    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    	    schemaKeywords(it, types, !checkedTypes, errsCount);
    	}
    	function checkRefsAndKeywords(it) {
    	    const { schema, errSchemaPath, opts, self } = it;
    	    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
    	        self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    	    }
    	}
    	function checkNoDefault(it) {
    	    const { schema, opts } = it;
    	    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
    	        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
    	    }
    	}
    	function updateContext(it) {
    	    const schId = it.schema[it.opts.schemaId];
    	    if (schId)
    	        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    	}
    	function checkAsyncSchema(it) {
    	    if (it.schema.$async && !it.schemaEnv.$async)
    	        throw new Error("async schema in sync schema");
    	}
    	function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    	    const msg = schema.$comment;
    	    if (opts.$comment === true) {
    	        gen.code((0, codegen_1._) `${names_1.default.self}.logger.log(${msg})`);
    	    }
    	    else if (typeof opts.$comment == "function") {
    	        const schemaPath = (0, codegen_1.str) `${errSchemaPath}/$comment`;
    	        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
    	        gen.code((0, codegen_1._) `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    	    }
    	}
    	function returnResults(it) {
    	    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    	    if (schemaEnv.$async) {
    	        // TODO assign unevaluated
    	        gen.if((0, codegen_1._) `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._) `new ${ValidationError}(${names_1.default.vErrors})`));
    	    }
    	    else {
    	        gen.assign((0, codegen_1._) `${validateName}.errors`, names_1.default.vErrors);
    	        if (opts.unevaluated)
    	            assignEvaluated(it);
    	        gen.return((0, codegen_1._) `${names_1.default.errors} === 0`);
    	    }
    	}
    	function assignEvaluated({ gen, evaluated, props, items }) {
    	    if (props instanceof codegen_1.Name)
    	        gen.assign((0, codegen_1._) `${evaluated}.props`, props);
    	    if (items instanceof codegen_1.Name)
    	        gen.assign((0, codegen_1._) `${evaluated}.items`, items);
    	}
    	function schemaKeywords(it, types, typeErrors, errsCount) {
    	    const { gen, schema, data, allErrors, opts, self } = it;
    	    const { RULES } = self;
    	    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
    	        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
    	        return;
    	    }
    	    if (!opts.jtd)
    	        checkStrictTypes(it, types);
    	    gen.block(() => {
    	        for (const group of RULES.rules)
    	            groupKeywords(group);
    	        groupKeywords(RULES.post);
    	    });
    	    function groupKeywords(group) {
    	        if (!(0, applicability_1.shouldUseGroup)(schema, group))
    	            return;
    	        if (group.type) {
    	            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
    	            iterateKeywords(it, group);
    	            if (types.length === 1 && types[0] === group.type && typeErrors) {
    	                gen.else();
    	                (0, dataType_2.reportTypeError)(it);
    	            }
    	            gen.endIf();
    	        }
    	        else {
    	            iterateKeywords(it, group);
    	        }
    	        // TODO make it "ok" call?
    	        if (!allErrors)
    	            gen.if((0, codegen_1._) `${names_1.default.errors} === ${errsCount || 0}`);
    	    }
    	}
    	function iterateKeywords(it, group) {
    	    const { gen, schema, opts: { useDefaults }, } = it;
    	    if (useDefaults)
    	        (0, defaults_1.assignDefaults)(it, group.type);
    	    gen.block(() => {
    	        for (const rule of group.rules) {
    	            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
    	                keywordCode(it, rule.keyword, rule.definition, group.type);
    	            }
    	        }
    	    });
    	}
    	function checkStrictTypes(it, types) {
    	    if (it.schemaEnv.meta || !it.opts.strictTypes)
    	        return;
    	    checkContextTypes(it, types);
    	    if (!it.opts.allowUnionTypes)
    	        checkMultipleTypes(it, types);
    	    checkKeywordTypes(it, it.dataTypes);
    	}
    	function checkContextTypes(it, types) {
    	    if (!types.length)
    	        return;
    	    if (!it.dataTypes.length) {
    	        it.dataTypes = types;
    	        return;
    	    }
    	    types.forEach((t) => {
    	        if (!includesType(it.dataTypes, t)) {
    	            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
    	        }
    	    });
    	    narrowSchemaTypes(it, types);
    	}
    	function checkMultipleTypes(it, ts) {
    	    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
    	        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    	    }
    	}
    	function checkKeywordTypes(it, ts) {
    	    const rules = it.self.RULES.all;
    	    for (const keyword in rules) {
    	        const rule = rules[keyword];
    	        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
    	            const { type } = rule.definition;
    	            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
    	                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
    	            }
    	        }
    	    }
    	}
    	function hasApplicableType(schTs, kwdT) {
    	    return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
    	}
    	function includesType(ts, t) {
    	    return ts.includes(t) || (t === "integer" && ts.includes("number"));
    	}
    	function narrowSchemaTypes(it, withTypes) {
    	    const ts = [];
    	    for (const t of it.dataTypes) {
    	        if (includesType(withTypes, t))
    	            ts.push(t);
    	        else if (withTypes.includes("integer") && t === "number")
    	            ts.push("integer");
    	    }
    	    it.dataTypes = ts;
    	}
    	function strictTypesError(it, msg) {
    	    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    	    msg += ` at "${schemaPath}" (strictTypes)`;
    	    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
    	}
    	class KeywordCxt {
    	    constructor(it, def, keyword) {
    	        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
    	        this.gen = it.gen;
    	        this.allErrors = it.allErrors;
    	        this.keyword = keyword;
    	        this.data = it.data;
    	        this.schema = it.schema[keyword];
    	        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
    	        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
    	        this.schemaType = def.schemaType;
    	        this.parentSchema = it.schema;
    	        this.params = {};
    	        this.it = it;
    	        this.def = def;
    	        if (this.$data) {
    	            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
    	        }
    	        else {
    	            this.schemaCode = this.schemaValue;
    	            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
    	                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
    	            }
    	        }
    	        if ("code" in def ? def.trackErrors : def.errors !== false) {
    	            this.errsCount = it.gen.const("_errs", names_1.default.errors);
    	        }
    	    }
    	    result(condition, successAction, failAction) {
    	        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    	    }
    	    failResult(condition, successAction, failAction) {
    	        this.gen.if(condition);
    	        if (failAction)
    	            failAction();
    	        else
    	            this.error();
    	        if (successAction) {
    	            this.gen.else();
    	            successAction();
    	            if (this.allErrors)
    	                this.gen.endIf();
    	        }
    	        else {
    	            if (this.allErrors)
    	                this.gen.endIf();
    	            else
    	                this.gen.else();
    	        }
    	    }
    	    pass(condition, failAction) {
    	        this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    	    }
    	    fail(condition) {
    	        if (condition === undefined) {
    	            this.error();
    	            if (!this.allErrors)
    	                this.gen.if(false); // this branch will be removed by gen.optimize
    	            return;
    	        }
    	        this.gen.if(condition);
    	        this.error();
    	        if (this.allErrors)
    	            this.gen.endIf();
    	        else
    	            this.gen.else();
    	    }
    	    fail$data(condition) {
    	        if (!this.$data)
    	            return this.fail(condition);
    	        const { schemaCode } = this;
    	        this.fail((0, codegen_1._) `${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    	    }
    	    error(append, errorParams, errorPaths) {
    	        if (errorParams) {
    	            this.setParams(errorParams);
    	            this._error(append, errorPaths);
    	            this.setParams({});
    	            return;
    	        }
    	        this._error(append, errorPaths);
    	    }
    	    _error(append, errorPaths) {
    	        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    	    }
    	    $dataError() {
    	        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    	    }
    	    reset() {
    	        if (this.errsCount === undefined)
    	            throw new Error('add "trackErrors" to keyword definition');
    	        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    	    }
    	    ok(cond) {
    	        if (!this.allErrors)
    	            this.gen.if(cond);
    	    }
    	    setParams(obj, assign) {
    	        if (assign)
    	            Object.assign(this.params, obj);
    	        else
    	            this.params = obj;
    	    }
    	    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
    	        this.gen.block(() => {
    	            this.check$data(valid, $dataValid);
    	            codeBlock();
    	        });
    	    }
    	    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
    	        if (!this.$data)
    	            return;
    	        const { gen, schemaCode, schemaType, def } = this;
    	        gen.if((0, codegen_1.or)((0, codegen_1._) `${schemaCode} === undefined`, $dataValid));
    	        if (valid !== codegen_1.nil)
    	            gen.assign(valid, true);
    	        if (schemaType.length || def.validateSchema) {
    	            gen.elseIf(this.invalid$data());
    	            this.$dataError();
    	            if (valid !== codegen_1.nil)
    	                gen.assign(valid, false);
    	        }
    	        gen.else();
    	    }
    	    invalid$data() {
    	        const { gen, schemaCode, schemaType, def, it } = this;
    	        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
    	        function wrong$DataType() {
    	            if (schemaType.length) {
    	                /* istanbul ignore if */
    	                if (!(schemaCode instanceof codegen_1.Name))
    	                    throw new Error("ajv implementation error");
    	                const st = Array.isArray(schemaType) ? schemaType : [schemaType];
    	                return (0, codegen_1._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
    	            }
    	            return codegen_1.nil;
    	        }
    	        function invalid$DataSchema() {
    	            if (def.validateSchema) {
    	                const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
    	                return (0, codegen_1._) `!${validateSchemaRef}(${schemaCode})`;
    	            }
    	            return codegen_1.nil;
    	        }
    	    }
    	    subschema(appl, valid) {
    	        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
    	        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
    	        (0, subschema_1.extendSubschemaMode)(subschema, appl);
    	        const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
    	        subschemaCode(nextContext, valid);
    	        return nextContext;
    	    }
    	    mergeEvaluated(schemaCxt, toName) {
    	        const { it, gen } = this;
    	        if (!it.opts.unevaluated)
    	            return;
    	        if (it.props !== true && schemaCxt.props !== undefined) {
    	            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
    	        }
    	        if (it.items !== true && schemaCxt.items !== undefined) {
    	            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
    	        }
    	    }
    	    mergeValidEvaluated(schemaCxt, valid) {
    	        const { it, gen } = this;
    	        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
    	            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
    	            return true;
    	        }
    	    }
    	}
    	validate$4.KeywordCxt = KeywordCxt;
    	function keywordCode(it, keyword, def, ruleType) {
    	    const cxt = new KeywordCxt(it, def, keyword);
    	    if ("code" in def) {
    	        def.code(cxt, ruleType);
    	    }
    	    else if (cxt.$data && def.validate) {
    	        (0, keyword_1.funcKeywordCode)(cxt, def);
    	    }
    	    else if ("macro" in def) {
    	        (0, keyword_1.macroKeywordCode)(cxt, def);
    	    }
    	    else if (def.compile || def.validate) {
    	        (0, keyword_1.funcKeywordCode)(cxt, def);
    	    }
    	}
    	const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    	const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    	function getData($data, { dataLevel, dataNames, dataPathArr }) {
    	    let jsonPointer;
    	    let data;
    	    if ($data === "")
    	        return names_1.default.rootData;
    	    if ($data[0] === "/") {
    	        if (!JSON_POINTER.test($data))
    	            throw new Error(`Invalid JSON-pointer: ${$data}`);
    	        jsonPointer = $data;
    	        data = names_1.default.rootData;
    	    }
    	    else {
    	        const matches = RELATIVE_JSON_POINTER.exec($data);
    	        if (!matches)
    	            throw new Error(`Invalid JSON-pointer: ${$data}`);
    	        const up = +matches[1];
    	        jsonPointer = matches[2];
    	        if (jsonPointer === "#") {
    	            if (up >= dataLevel)
    	                throw new Error(errorMsg("property/index", up));
    	            return dataPathArr[dataLevel - up];
    	        }
    	        if (up > dataLevel)
    	            throw new Error(errorMsg("data", up));
    	        data = dataNames[dataLevel - up];
    	        if (!jsonPointer)
    	            return data;
    	    }
    	    let expr = data;
    	    const segments = jsonPointer.split("/");
    	    for (const segment of segments) {
    	        if (segment) {
    	            data = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
    	            expr = (0, codegen_1._) `${expr} && ${data}`;
    	        }
    	    }
    	    return expr;
    	    function errorMsg(pointerType, up) {
    	        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    	    }
    	}
    	validate$4.getData = getData;
    	
    	return validate$4;
    }

    var validation_error$1 = {};

    var hasRequiredValidation_error$1;

    function requireValidation_error$1 () {
    	if (hasRequiredValidation_error$1) return validation_error$1;
    	hasRequiredValidation_error$1 = 1;
    	Object.defineProperty(validation_error$1, "__esModule", { value: true });
    	class ValidationError extends Error {
    	    constructor(errors) {
    	        super("validation failed");
    	        this.errors = errors;
    	        this.ajv = this.validation = true;
    	    }
    	}
    	validation_error$1.default = ValidationError;
    	
    	return validation_error$1;
    }

    var ref_error$1 = {};

    var hasRequiredRef_error$1;

    function requireRef_error$1 () {
    	if (hasRequiredRef_error$1) return ref_error$1;
    	hasRequiredRef_error$1 = 1;
    	Object.defineProperty(ref_error$1, "__esModule", { value: true });
    	const resolve_1 = requireResolve();
    	class MissingRefError extends Error {
    	    constructor(resolver, baseId, ref, msg) {
    	        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
    	        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
    	        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    	    }
    	}
    	ref_error$1.default = MissingRefError;
    	
    	return ref_error$1;
    }

    var compile$1 = {};

    var hasRequiredCompile;

    function requireCompile () {
    	if (hasRequiredCompile) return compile$1;
    	hasRequiredCompile = 1;
    	Object.defineProperty(compile$1, "__esModule", { value: true });
    	compile$1.resolveSchema = compile$1.getCompilingSchema = compile$1.resolveRef = compile$1.compileSchema = compile$1.SchemaEnv = void 0;
    	const codegen_1 = requireCodegen$1();
    	const validation_error_1 = requireValidation_error$1();
    	const names_1 = requireNames();
    	const resolve_1 = requireResolve();
    	const util_1 = requireUtil();
    	const validate_1 = requireValidate$1();
    	class SchemaEnv {
    	    constructor(env) {
    	        var _a;
    	        this.refs = {};
    	        this.dynamicAnchors = {};
    	        let schema;
    	        if (typeof env.schema == "object")
    	            schema = env.schema;
    	        this.schema = env.schema;
    	        this.schemaId = env.schemaId;
    	        this.root = env.root || this;
    	        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
    	        this.schemaPath = env.schemaPath;
    	        this.localRefs = env.localRefs;
    	        this.meta = env.meta;
    	        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
    	        this.refs = {};
    	    }
    	}
    	compile$1.SchemaEnv = SchemaEnv;
    	// let codeSize = 0
    	// let nodeCount = 0
    	// Compiles schema in SchemaEnv
    	function compileSchema(sch) {
    	    // TODO refactor - remove compilations
    	    const _sch = getCompilingSchema.call(this, sch);
    	    if (_sch)
    	        return _sch;
    	    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
    	    const { es5, lines } = this.opts.code;
    	    const { ownProperties } = this.opts;
    	    const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
    	    let _ValidationError;
    	    if (sch.$async) {
    	        _ValidationError = gen.scopeValue("Error", {
    	            ref: validation_error_1.default,
    	            code: (0, codegen_1._) `require("ajv/dist/runtime/validation_error").default`,
    	        });
    	    }
    	    const validateName = gen.scopeName("validate");
    	    sch.validateName = validateName;
    	    const schemaCxt = {
    	        gen,
    	        allErrors: this.opts.allErrors,
    	        data: names_1.default.data,
    	        parentData: names_1.default.parentData,
    	        parentDataProperty: names_1.default.parentDataProperty,
    	        dataNames: [names_1.default.data],
    	        dataPathArr: [codegen_1.nil],
    	        dataLevel: 0,
    	        dataTypes: [],
    	        definedProperties: new Set(),
    	        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
    	            ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) }
    	            : { ref: sch.schema }),
    	        validateName,
    	        ValidationError: _ValidationError,
    	        schema: sch.schema,
    	        schemaEnv: sch,
    	        rootId,
    	        baseId: sch.baseId || rootId,
    	        schemaPath: codegen_1.nil,
    	        errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
    	        errorPath: (0, codegen_1._) `""`,
    	        opts: this.opts,
    	        self: this,
    	    };
    	    let sourceCode;
    	    try {
    	        this._compilations.add(sch);
    	        (0, validate_1.validateFunctionCode)(schemaCxt);
    	        gen.optimize(this.opts.code.optimize);
    	        // gen.optimize(1)
    	        const validateCode = gen.toString();
    	        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
    	        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
    	        if (this.opts.code.process)
    	            sourceCode = this.opts.code.process(sourceCode, sch);
    	        // console.log("\n\n\n *** \n", sourceCode)
    	        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
    	        const validate = makeValidate(this, this.scope.get());
    	        this.scope.value(validateName, { ref: validate });
    	        validate.errors = null;
    	        validate.schema = sch.schema;
    	        validate.schemaEnv = sch;
    	        if (sch.$async)
    	            validate.$async = true;
    	        if (this.opts.code.source === true) {
    	            validate.source = { validateName, validateCode, scopeValues: gen._values };
    	        }
    	        if (this.opts.unevaluated) {
    	            const { props, items } = schemaCxt;
    	            validate.evaluated = {
    	                props: props instanceof codegen_1.Name ? undefined : props,
    	                items: items instanceof codegen_1.Name ? undefined : items,
    	                dynamicProps: props instanceof codegen_1.Name,
    	                dynamicItems: items instanceof codegen_1.Name,
    	            };
    	            if (validate.source)
    	                validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
    	        }
    	        sch.validate = validate;
    	        return sch;
    	    }
    	    catch (e) {
    	        delete sch.validate;
    	        delete sch.validateName;
    	        if (sourceCode)
    	            this.logger.error("Error compiling schema, function code:", sourceCode);
    	        // console.log("\n\n\n *** \n", sourceCode, this.opts)
    	        throw e;
    	    }
    	    finally {
    	        this._compilations.delete(sch);
    	    }
    	}
    	compile$1.compileSchema = compileSchema;
    	function resolveRef(root, baseId, ref) {
    	    var _a;
    	    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
    	    const schOrFunc = root.refs[ref];
    	    if (schOrFunc)
    	        return schOrFunc;
    	    let _sch = resolve.call(this, root, ref);
    	    if (_sch === undefined) {
    	        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
    	        const { schemaId } = this.opts;
    	        if (schema)
    	            _sch = new SchemaEnv({ schema, schemaId, root, baseId });
    	    }
    	    if (_sch === undefined)
    	        return;
    	    return (root.refs[ref] = inlineOrCompile.call(this, _sch));
    	}
    	compile$1.resolveRef = resolveRef;
    	function inlineOrCompile(sch) {
    	    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
    	        return sch.schema;
    	    return sch.validate ? sch : compileSchema.call(this, sch);
    	}
    	// Index of schema compilation in the currently compiled list
    	function getCompilingSchema(schEnv) {
    	    for (const sch of this._compilations) {
    	        if (sameSchemaEnv(sch, schEnv))
    	            return sch;
    	    }
    	}
    	compile$1.getCompilingSchema = getCompilingSchema;
    	function sameSchemaEnv(s1, s2) {
    	    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    	}
    	// resolve and compile the references ($ref)
    	// TODO returns AnySchemaObject (if the schema can be inlined) or validation function
    	function resolve(root, // information about the root schema for the current schema
    	ref // reference to resolve
    	) {
    	    let sch;
    	    while (typeof (sch = this.refs[ref]) == "string")
    	        ref = sch;
    	    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
    	}
    	// Resolve schema, its root and baseId
    	function resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
    	ref // reference to resolve
    	) {
    	    const p = this.opts.uriResolver.parse(ref);
    	    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
    	    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
    	    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
    	    if (Object.keys(root.schema).length > 0 && refPath === baseId) {
    	        return getJsonPointer.call(this, p, root);
    	    }
    	    const id = (0, resolve_1.normalizeId)(refPath);
    	    const schOrRef = this.refs[id] || this.schemas[id];
    	    if (typeof schOrRef == "string") {
    	        const sch = resolveSchema.call(this, root, schOrRef);
    	        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
    	            return;
    	        return getJsonPointer.call(this, p, sch);
    	    }
    	    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
    	        return;
    	    if (!schOrRef.validate)
    	        compileSchema.call(this, schOrRef);
    	    if (id === (0, resolve_1.normalizeId)(ref)) {
    	        const { schema } = schOrRef;
    	        const { schemaId } = this.opts;
    	        const schId = schema[schemaId];
    	        if (schId)
    	            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
    	        return new SchemaEnv({ schema, schemaId, root, baseId });
    	    }
    	    return getJsonPointer.call(this, p, schOrRef);
    	}
    	compile$1.resolveSchema = resolveSchema;
    	const PREVENT_SCOPE_CHANGE = new Set([
    	    "properties",
    	    "patternProperties",
    	    "enum",
    	    "dependencies",
    	    "definitions",
    	]);
    	function getJsonPointer(parsedRef, { baseId, schema, root }) {
    	    var _a;
    	    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
    	        return;
    	    for (const part of parsedRef.fragment.slice(1).split("/")) {
    	        if (typeof schema === "boolean")
    	            return;
    	        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
    	        if (partSchema === undefined)
    	            return;
    	        schema = partSchema;
    	        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
    	        const schId = typeof schema === "object" && schema[this.opts.schemaId];
    	        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
    	            baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
    	        }
    	    }
    	    let env;
    	    if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
    	        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
    	        env = resolveSchema.call(this, root, $ref);
    	    }
    	    // even though resolution failed we need to return SchemaEnv to throw exception
    	    // so that compileAsync loads missing schema.
    	    const { schemaId } = this.opts;
    	    env = env || new SchemaEnv({ schema, schemaId, root, baseId });
    	    if (env.schema !== env.root.schema)
    	        return env;
    	    return undefined;
    	}
    	
    	return compile$1;
    }

    var $id$3 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
    var description$1 = "Meta-schema for $data reference (JSON AnySchema extension proposal)";
    var type$4 = "object";
    var required$3 = [
    	"$data"
    ];
    var properties$6 = {
    	$data: {
    		type: "string",
    		anyOf: [
    			{
    				format: "relative-json-pointer"
    			},
    			{
    				format: "json-pointer"
    			}
    		]
    	}
    };
    var additionalProperties$3 = false;
    var require$$9$1 = {
    	$id: $id$3,
    	description: description$1,
    	type: type$4,
    	required: required$3,
    	properties: properties$6,
    	additionalProperties: additionalProperties$3
    };

    var uri$2 = {};

    var hasRequiredUri;

    function requireUri () {
    	if (hasRequiredUri) return uri$2;
    	hasRequiredUri = 1;
    	Object.defineProperty(uri$2, "__esModule", { value: true });
    	const uri = uri_allExports;
    	uri.code = 'require("ajv/dist/runtime/uri").default';
    	uri$2.default = uri;
    	
    	return uri$2;
    }

    var hasRequiredCore$1;

    function requireCore$1 () {
    	if (hasRequiredCore$1) return core$4;
    	hasRequiredCore$1 = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    		var validate_1 = requireValidate$1();
    		Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    		var codegen_1 = requireCodegen$1();
    		Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    		Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    		Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    		Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    		Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    		Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    		const validation_error_1 = requireValidation_error$1();
    		const ref_error_1 = requireRef_error$1();
    		const rules_1 = requireRules();
    		const compile_1 = requireCompile();
    		const codegen_2 = requireCodegen$1();
    		const resolve_1 = requireResolve();
    		const dataType_1 = requireDataType();
    		const util_1 = requireUtil();
    		const $dataRefSchema = require$$9$1;
    		const uri_1 = requireUri();
    		const defaultRegExp = (str, flags) => new RegExp(str, flags);
    		defaultRegExp.code = "new RegExp";
    		const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    		const EXT_SCOPE_NAMES = new Set([
    		    "validate",
    		    "serialize",
    		    "parse",
    		    "wrapper",
    		    "root",
    		    "schema",
    		    "keyword",
    		    "pattern",
    		    "formats",
    		    "validate$data",
    		    "func",
    		    "obj",
    		    "Error",
    		]);
    		const removedOptions = {
    		    errorDataPath: "",
    		    format: "`validateFormats: false` can be used instead.",
    		    nullable: '"nullable" keyword is supported by default.',
    		    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    		    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    		    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    		    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    		    sourceCode: "Use option `code: {source: true}`",
    		    strictDefaults: "It is default now, see option `strict`.",
    		    strictKeywords: "It is default now, see option `strict`.",
    		    uniqueItems: '"uniqueItems" keyword is always validated.',
    		    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    		    cache: "Map is used as cache, schema object as key.",
    		    serialize: "Map is used as cache, schema object as key.",
    		    ajvErrors: "It is default now.",
    		};
    		const deprecatedOptions = {
    		    ignoreKeywordsWithRef: "",
    		    jsPropertySyntax: "",
    		    unicode: '"minLength"/"maxLength" account for unicode characters by default.',
    		};
    		const MAX_EXPRESSION = 200;
    		// eslint-disable-next-line complexity
    		function requiredOptions(o) {
    		    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    		    const s = o.strict;
    		    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
    		    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    		    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
    		    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
    		    return {
    		        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
    		        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
    		        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
    		        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
    		        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
    		        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
    		        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
    		        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
    		        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
    		        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
    		        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
    		        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
    		        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
    		        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
    		        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
    		        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
    		        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
    		        uriResolver: uriResolver,
    		    };
    		}
    		class Ajv {
    		    constructor(opts = {}) {
    		        this.schemas = {};
    		        this.refs = {};
    		        this.formats = {};
    		        this._compilations = new Set();
    		        this._loading = {};
    		        this._cache = new Map();
    		        opts = this.opts = { ...opts, ...requiredOptions(opts) };
    		        const { es5, lines } = this.opts.code;
    		        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
    		        this.logger = getLogger(opts.logger);
    		        const formatOpt = opts.validateFormats;
    		        opts.validateFormats = false;
    		        this.RULES = (0, rules_1.getRules)();
    		        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
    		        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
    		        this._metaOpts = getMetaSchemaOptions.call(this);
    		        if (opts.formats)
    		            addInitialFormats.call(this);
    		        this._addVocabularies();
    		        this._addDefaultMetaSchema();
    		        if (opts.keywords)
    		            addInitialKeywords.call(this, opts.keywords);
    		        if (typeof opts.meta == "object")
    		            this.addMetaSchema(opts.meta);
    		        addInitialSchemas.call(this);
    		        opts.validateFormats = formatOpt;
    		    }
    		    _addVocabularies() {
    		        this.addKeyword("$async");
    		    }
    		    _addDefaultMetaSchema() {
    		        const { $data, meta, schemaId } = this.opts;
    		        let _dataRefSchema = $dataRefSchema;
    		        if (schemaId === "id") {
    		            _dataRefSchema = { ...$dataRefSchema };
    		            _dataRefSchema.id = _dataRefSchema.$id;
    		            delete _dataRefSchema.$id;
    		        }
    		        if (meta && $data)
    		            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    		    }
    		    defaultMeta() {
    		        const { meta, schemaId } = this.opts;
    		        return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
    		    }
    		    validate(schemaKeyRef, // key, ref or schema object
    		    data // to be validated
    		    ) {
    		        let v;
    		        if (typeof schemaKeyRef == "string") {
    		            v = this.getSchema(schemaKeyRef);
    		            if (!v)
    		                throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
    		        }
    		        else {
    		            v = this.compile(schemaKeyRef);
    		        }
    		        const valid = v(data);
    		        if (!("$async" in v))
    		            this.errors = v.errors;
    		        return valid;
    		    }
    		    compile(schema, _meta) {
    		        const sch = this._addSchema(schema, _meta);
    		        return (sch.validate || this._compileSchemaEnv(sch));
    		    }
    		    compileAsync(schema, meta) {
    		        if (typeof this.opts.loadSchema != "function") {
    		            throw new Error("options.loadSchema should be a function");
    		        }
    		        const { loadSchema } = this.opts;
    		        return runCompileAsync.call(this, schema, meta);
    		        async function runCompileAsync(_schema, _meta) {
    		            await loadMetaSchema.call(this, _schema.$schema);
    		            const sch = this._addSchema(_schema, _meta);
    		            return sch.validate || _compileAsync.call(this, sch);
    		        }
    		        async function loadMetaSchema($ref) {
    		            if ($ref && !this.getSchema($ref)) {
    		                await runCompileAsync.call(this, { $ref }, true);
    		            }
    		        }
    		        async function _compileAsync(sch) {
    		            try {
    		                return this._compileSchemaEnv(sch);
    		            }
    		            catch (e) {
    		                if (!(e instanceof ref_error_1.default))
    		                    throw e;
    		                checkLoaded.call(this, e);
    		                await loadMissingSchema.call(this, e.missingSchema);
    		                return _compileAsync.call(this, sch);
    		            }
    		        }
    		        function checkLoaded({ missingSchema: ref, missingRef }) {
    		            if (this.refs[ref]) {
    		                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
    		            }
    		        }
    		        async function loadMissingSchema(ref) {
    		            const _schema = await _loadSchema.call(this, ref);
    		            if (!this.refs[ref])
    		                await loadMetaSchema.call(this, _schema.$schema);
    		            if (!this.refs[ref])
    		                this.addSchema(_schema, ref, meta);
    		        }
    		        async function _loadSchema(ref) {
    		            const p = this._loading[ref];
    		            if (p)
    		                return p;
    		            try {
    		                return await (this._loading[ref] = loadSchema(ref));
    		            }
    		            finally {
    		                delete this._loading[ref];
    		            }
    		        }
    		    }
    		    // Adds schema to the instance
    		    addSchema(schema, // If array is passed, `key` will be ignored
    		    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
    		    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
    		    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    		    ) {
    		        if (Array.isArray(schema)) {
    		            for (const sch of schema)
    		                this.addSchema(sch, undefined, _meta, _validateSchema);
    		            return this;
    		        }
    		        let id;
    		        if (typeof schema === "object") {
    		            const { schemaId } = this.opts;
    		            id = schema[schemaId];
    		            if (id !== undefined && typeof id != "string") {
    		                throw new Error(`schema ${schemaId} must be string`);
    		            }
    		        }
    		        key = (0, resolve_1.normalizeId)(key || id);
    		        this._checkUnique(key);
    		        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
    		        return this;
    		    }
    		    // Add schema that will be used to validate other schemas
    		    // options in META_IGNORE_OPTIONS are alway set to false
    		    addMetaSchema(schema, key, // schema key
    		    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    		    ) {
    		        this.addSchema(schema, key, true, _validateSchema);
    		        return this;
    		    }
    		    //  Validate schema against its meta-schema
    		    validateSchema(schema, throwOrLogError) {
    		        if (typeof schema == "boolean")
    		            return true;
    		        let $schema;
    		        $schema = schema.$schema;
    		        if ($schema !== undefined && typeof $schema != "string") {
    		            throw new Error("$schema must be a string");
    		        }
    		        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
    		        if (!$schema) {
    		            this.logger.warn("meta-schema not available");
    		            this.errors = null;
    		            return true;
    		        }
    		        const valid = this.validate($schema, schema);
    		        if (!valid && throwOrLogError) {
    		            const message = "schema is invalid: " + this.errorsText();
    		            if (this.opts.validateSchema === "log")
    		                this.logger.error(message);
    		            else
    		                throw new Error(message);
    		        }
    		        return valid;
    		    }
    		    // Get compiled schema by `key` or `ref`.
    		    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    		    getSchema(keyRef) {
    		        let sch;
    		        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
    		            keyRef = sch;
    		        if (sch === undefined) {
    		            const { schemaId } = this.opts;
    		            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
    		            sch = compile_1.resolveSchema.call(this, root, keyRef);
    		            if (!sch)
    		                return;
    		            this.refs[keyRef] = sch;
    		        }
    		        return (sch.validate || this._compileSchemaEnv(sch));
    		    }
    		    // Remove cached schema(s).
    		    // If no parameter is passed all schemas but meta-schemas are removed.
    		    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    		    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    		    removeSchema(schemaKeyRef) {
    		        if (schemaKeyRef instanceof RegExp) {
    		            this._removeAllSchemas(this.schemas, schemaKeyRef);
    		            this._removeAllSchemas(this.refs, schemaKeyRef);
    		            return this;
    		        }
    		        switch (typeof schemaKeyRef) {
    		            case "undefined":
    		                this._removeAllSchemas(this.schemas);
    		                this._removeAllSchemas(this.refs);
    		                this._cache.clear();
    		                return this;
    		            case "string": {
    		                const sch = getSchEnv.call(this, schemaKeyRef);
    		                if (typeof sch == "object")
    		                    this._cache.delete(sch.schema);
    		                delete this.schemas[schemaKeyRef];
    		                delete this.refs[schemaKeyRef];
    		                return this;
    		            }
    		            case "object": {
    		                const cacheKey = schemaKeyRef;
    		                this._cache.delete(cacheKey);
    		                let id = schemaKeyRef[this.opts.schemaId];
    		                if (id) {
    		                    id = (0, resolve_1.normalizeId)(id);
    		                    delete this.schemas[id];
    		                    delete this.refs[id];
    		                }
    		                return this;
    		            }
    		            default:
    		                throw new Error("ajv.removeSchema: invalid parameter");
    		        }
    		    }
    		    // add "vocabulary" - a collection of keywords
    		    addVocabulary(definitions) {
    		        for (const def of definitions)
    		            this.addKeyword(def);
    		        return this;
    		    }
    		    addKeyword(kwdOrDef, def // deprecated
    		    ) {
    		        let keyword;
    		        if (typeof kwdOrDef == "string") {
    		            keyword = kwdOrDef;
    		            if (typeof def == "object") {
    		                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
    		                def.keyword = keyword;
    		            }
    		        }
    		        else if (typeof kwdOrDef == "object" && def === undefined) {
    		            def = kwdOrDef;
    		            keyword = def.keyword;
    		            if (Array.isArray(keyword) && !keyword.length) {
    		                throw new Error("addKeywords: keyword must be string or non-empty array");
    		            }
    		        }
    		        else {
    		            throw new Error("invalid addKeywords parameters");
    		        }
    		        checkKeyword.call(this, keyword, def);
    		        if (!def) {
    		            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
    		            return this;
    		        }
    		        keywordMetaschema.call(this, def);
    		        const definition = {
    		            ...def,
    		            type: (0, dataType_1.getJSONTypes)(def.type),
    		            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
    		        };
    		        (0, util_1.eachItem)(keyword, definition.type.length === 0
    		            ? (k) => addRule.call(this, k, definition)
    		            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
    		        return this;
    		    }
    		    getKeyword(keyword) {
    		        const rule = this.RULES.all[keyword];
    		        return typeof rule == "object" ? rule.definition : !!rule;
    		    }
    		    // Remove keyword
    		    removeKeyword(keyword) {
    		        // TODO return type should be Ajv
    		        const { RULES } = this;
    		        delete RULES.keywords[keyword];
    		        delete RULES.all[keyword];
    		        for (const group of RULES.rules) {
    		            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
    		            if (i >= 0)
    		                group.rules.splice(i, 1);
    		        }
    		        return this;
    		    }
    		    // Add format
    		    addFormat(name, format) {
    		        if (typeof format == "string")
    		            format = new RegExp(format);
    		        this.formats[name] = format;
    		        return this;
    		    }
    		    errorsText(errors = this.errors, // optional array of validation errors
    		    { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    		    ) {
    		        if (!errors || errors.length === 0)
    		            return "No errors";
    		        return errors
    		            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
    		            .reduce((text, msg) => text + separator + msg);
    		    }
    		    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
    		        const rules = this.RULES.all;
    		        metaSchema = JSON.parse(JSON.stringify(metaSchema));
    		        for (const jsonPointer of keywordsJsonPointers) {
    		            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
    		            let keywords = metaSchema;
    		            for (const seg of segments)
    		                keywords = keywords[seg];
    		            for (const key in rules) {
    		                const rule = rules[key];
    		                if (typeof rule != "object")
    		                    continue;
    		                const { $data } = rule.definition;
    		                const schema = keywords[key];
    		                if ($data && schema)
    		                    keywords[key] = schemaOrData(schema);
    		            }
    		        }
    		        return metaSchema;
    		    }
    		    _removeAllSchemas(schemas, regex) {
    		        for (const keyRef in schemas) {
    		            const sch = schemas[keyRef];
    		            if (!regex || regex.test(keyRef)) {
    		                if (typeof sch == "string") {
    		                    delete schemas[keyRef];
    		                }
    		                else if (sch && !sch.meta) {
    		                    this._cache.delete(sch.schema);
    		                    delete schemas[keyRef];
    		                }
    		            }
    		        }
    		    }
    		    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
    		        let id;
    		        const { schemaId } = this.opts;
    		        if (typeof schema == "object") {
    		            id = schema[schemaId];
    		        }
    		        else {
    		            if (this.opts.jtd)
    		                throw new Error("schema must be object");
    		            else if (typeof schema != "boolean")
    		                throw new Error("schema must be object or boolean");
    		        }
    		        let sch = this._cache.get(schema);
    		        if (sch !== undefined)
    		            return sch;
    		        baseId = (0, resolve_1.normalizeId)(id || baseId);
    		        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
    		        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
    		        this._cache.set(sch.schema, sch);
    		        if (addSchema && !baseId.startsWith("#")) {
    		            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
    		            if (baseId)
    		                this._checkUnique(baseId);
    		            this.refs[baseId] = sch;
    		        }
    		        if (validateSchema)
    		            this.validateSchema(schema, true);
    		        return sch;
    		    }
    		    _checkUnique(id) {
    		        if (this.schemas[id] || this.refs[id]) {
    		            throw new Error(`schema with key or id "${id}" already exists`);
    		        }
    		    }
    		    _compileSchemaEnv(sch) {
    		        if (sch.meta)
    		            this._compileMetaSchema(sch);
    		        else
    		            compile_1.compileSchema.call(this, sch);
    		        /* istanbul ignore if */
    		        if (!sch.validate)
    		            throw new Error("ajv implementation error");
    		        return sch.validate;
    		    }
    		    _compileMetaSchema(sch) {
    		        const currentOpts = this.opts;
    		        this.opts = this._metaOpts;
    		        try {
    		            compile_1.compileSchema.call(this, sch);
    		        }
    		        finally {
    		            this.opts = currentOpts;
    		        }
    		    }
    		}
    		exports.default = Ajv;
    		Ajv.ValidationError = validation_error_1.default;
    		Ajv.MissingRefError = ref_error_1.default;
    		function checkOptions(checkOpts, options, msg, log = "error") {
    		    for (const key in checkOpts) {
    		        const opt = key;
    		        if (opt in options)
    		            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    		    }
    		}
    		function getSchEnv(keyRef) {
    		    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
    		    return this.schemas[keyRef] || this.refs[keyRef];
    		}
    		function addInitialSchemas() {
    		    const optsSchemas = this.opts.schemas;
    		    if (!optsSchemas)
    		        return;
    		    if (Array.isArray(optsSchemas))
    		        this.addSchema(optsSchemas);
    		    else
    		        for (const key in optsSchemas)
    		            this.addSchema(optsSchemas[key], key);
    		}
    		function addInitialFormats() {
    		    for (const name in this.opts.formats) {
    		        const format = this.opts.formats[name];
    		        if (format)
    		            this.addFormat(name, format);
    		    }
    		}
    		function addInitialKeywords(defs) {
    		    if (Array.isArray(defs)) {
    		        this.addVocabulary(defs);
    		        return;
    		    }
    		    this.logger.warn("keywords option as map is deprecated, pass array");
    		    for (const keyword in defs) {
    		        const def = defs[keyword];
    		        if (!def.keyword)
    		            def.keyword = keyword;
    		        this.addKeyword(def);
    		    }
    		}
    		function getMetaSchemaOptions() {
    		    const metaOpts = { ...this.opts };
    		    for (const opt of META_IGNORE_OPTIONS)
    		        delete metaOpts[opt];
    		    return metaOpts;
    		}
    		const noLogs = { log() { }, warn() { }, error() { } };
    		function getLogger(logger) {
    		    if (logger === false)
    		        return noLogs;
    		    if (logger === undefined)
    		        return console;
    		    if (logger.log && logger.warn && logger.error)
    		        return logger;
    		    throw new Error("logger must implement log, warn and error methods");
    		}
    		const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    		function checkKeyword(keyword, def) {
    		    const { RULES } = this;
    		    (0, util_1.eachItem)(keyword, (kwd) => {
    		        if (RULES.keywords[kwd])
    		            throw new Error(`Keyword ${kwd} is already defined`);
    		        if (!KEYWORD_NAME.test(kwd))
    		            throw new Error(`Keyword ${kwd} has invalid name`);
    		    });
    		    if (!def)
    		        return;
    		    if (def.$data && !("code" in def || "validate" in def)) {
    		        throw new Error('$data keyword must have "code" or "validate" function');
    		    }
    		}
    		function addRule(keyword, definition, dataType) {
    		    var _a;
    		    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    		    if (dataType && post)
    		        throw new Error('keyword with "post" flag cannot have "type"');
    		    const { RULES } = this;
    		    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    		    if (!ruleGroup) {
    		        ruleGroup = { type: dataType, rules: [] };
    		        RULES.rules.push(ruleGroup);
    		    }
    		    RULES.keywords[keyword] = true;
    		    if (!definition)
    		        return;
    		    const rule = {
    		        keyword,
    		        definition: {
    		            ...definition,
    		            type: (0, dataType_1.getJSONTypes)(definition.type),
    		            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
    		        },
    		    };
    		    if (definition.before)
    		        addBeforeRule.call(this, ruleGroup, rule, definition.before);
    		    else
    		        ruleGroup.rules.push(rule);
    		    RULES.all[keyword] = rule;
    		    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    		}
    		function addBeforeRule(ruleGroup, rule, before) {
    		    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    		    if (i >= 0) {
    		        ruleGroup.rules.splice(i, 0, rule);
    		    }
    		    else {
    		        ruleGroup.rules.push(rule);
    		        this.logger.warn(`rule ${before} is not defined`);
    		    }
    		}
    		function keywordMetaschema(def) {
    		    let { metaSchema } = def;
    		    if (metaSchema === undefined)
    		        return;
    		    if (def.$data && this.opts.$data)
    		        metaSchema = schemaOrData(metaSchema);
    		    def.validateSchema = this.compile(metaSchema, true);
    		}
    		const $dataRef = {
    		    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    		};
    		function schemaOrData(schema) {
    		    return { anyOf: [schema, $dataRef] };
    		}
    		
    } (core$4));
    	return core$4;
    }

    var draft7$1 = {};

    var core$3 = {};

    var id$1 = {};

    var hasRequiredId;

    function requireId () {
    	if (hasRequiredId) return id$1;
    	hasRequiredId = 1;
    	Object.defineProperty(id$1, "__esModule", { value: true });
    	const def = {
    	    keyword: "id",
    	    code() {
    	        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
    	    },
    	};
    	id$1.default = def;
    	
    	return id$1;
    }

    var ref$2 = {};

    var hasRequiredRef;

    function requireRef () {
    	if (hasRequiredRef) return ref$2;
    	hasRequiredRef = 1;
    	Object.defineProperty(ref$2, "__esModule", { value: true });
    	ref$2.callRef = ref$2.getValidate = void 0;
    	const ref_error_1 = requireRef_error$1();
    	const code_1 = requireCode();
    	const codegen_1 = requireCodegen$1();
    	const names_1 = requireNames();
    	const compile_1 = requireCompile();
    	const util_1 = requireUtil();
    	const def = {
    	    keyword: "$ref",
    	    schemaType: "string",
    	    code(cxt) {
    	        const { gen, schema: $ref, it } = cxt;
    	        const { baseId, schemaEnv: env, validateName, opts, self } = it;
    	        const { root } = env;
    	        if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
    	            return callRootRef();
    	        const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);
    	        if (schOrEnv === undefined)
    	            throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
    	        if (schOrEnv instanceof compile_1.SchemaEnv)
    	            return callValidate(schOrEnv);
    	        return inlineRefSchema(schOrEnv);
    	        function callRootRef() {
    	            if (env === root)
    	                return callRef(cxt, validateName, env, env.$async);
    	            const rootName = gen.scopeValue("root", { ref: root });
    	            return callRef(cxt, (0, codegen_1._) `${rootName}.validate`, root, root.$async);
    	        }
    	        function callValidate(sch) {
    	            const v = getValidate(cxt, sch);
    	            callRef(cxt, v, sch, sch.$async);
    	        }
    	        function inlineRefSchema(sch) {
    	            const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1.stringify)(sch) } : { ref: sch });
    	            const valid = gen.name("valid");
    	            const schCxt = cxt.subschema({
    	                schema: sch,
    	                dataTypes: [],
    	                schemaPath: codegen_1.nil,
    	                topSchemaRef: schName,
    	                errSchemaPath: $ref,
    	            }, valid);
    	            cxt.mergeEvaluated(schCxt);
    	            cxt.ok(valid);
    	        }
    	    },
    	};
    	function getValidate(cxt, sch) {
    	    const { gen } = cxt;
    	    return sch.validate
    	        ? gen.scopeValue("validate", { ref: sch.validate })
    	        : (0, codegen_1._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    	}
    	ref$2.getValidate = getValidate;
    	function callRef(cxt, v, sch, $async) {
    	    const { gen, it } = cxt;
    	    const { allErrors, schemaEnv: env, opts } = it;
    	    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
    	    if ($async)
    	        callAsyncRef();
    	    else
    	        callSyncRef();
    	    function callAsyncRef() {
    	        if (!env.$async)
    	            throw new Error("async schema referenced by sync schema");
    	        const valid = gen.let("valid");
    	        gen.try(() => {
    	            gen.code((0, codegen_1._) `await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
    	            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
    	            if (!allErrors)
    	                gen.assign(valid, true);
    	        }, (e) => {
    	            gen.if((0, codegen_1._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
    	            addErrorsFrom(e);
    	            if (!allErrors)
    	                gen.assign(valid, false);
    	        });
    	        cxt.ok(valid);
    	    }
    	    function callSyncRef() {
    	        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
    	    }
    	    function addErrorsFrom(source) {
    	        const errs = (0, codegen_1._) `${source}.errors`;
    	        gen.assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged
    	        gen.assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
    	    }
    	    function addEvaluatedFrom(source) {
    	        var _a;
    	        if (!it.opts.unevaluated)
    	            return;
    	        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
    	        // TODO refactor
    	        if (it.props !== true) {
    	            if (schEvaluated && !schEvaluated.dynamicProps) {
    	                if (schEvaluated.props !== undefined) {
    	                    it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
    	                }
    	            }
    	            else {
    	                const props = gen.var("props", (0, codegen_1._) `${source}.evaluated.props`);
    	                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
    	            }
    	        }
    	        if (it.items !== true) {
    	            if (schEvaluated && !schEvaluated.dynamicItems) {
    	                if (schEvaluated.items !== undefined) {
    	                    it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
    	                }
    	            }
    	            else {
    	                const items = gen.var("items", (0, codegen_1._) `${source}.evaluated.items`);
    	                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
    	            }
    	        }
    	    }
    	}
    	ref$2.callRef = callRef;
    	ref$2.default = def;
    	
    	return ref$2;
    }

    var hasRequiredCore;

    function requireCore () {
    	if (hasRequiredCore) return core$3;
    	hasRequiredCore = 1;
    	Object.defineProperty(core$3, "__esModule", { value: true });
    	const id_1 = requireId();
    	const ref_1 = requireRef();
    	const core = [
    	    "$schema",
    	    "$id",
    	    "$defs",
    	    "$vocabulary",
    	    { keyword: "$comment" },
    	    "definitions",
    	    id_1.default,
    	    ref_1.default,
    	];
    	core$3.default = core;
    	
    	return core$3;
    }

    var validation$2 = {};

    var limitNumber$1 = {};

    var hasRequiredLimitNumber;

    function requireLimitNumber () {
    	if (hasRequiredLimitNumber) return limitNumber$1;
    	hasRequiredLimitNumber = 1;
    	Object.defineProperty(limitNumber$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const ops = codegen_1.operators;
    	const KWDs = {
    	    maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    	    minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    	    exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    	    exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
    	};
    	const error = {
    	    message: ({ keyword, schemaCode }) => (0, codegen_1.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,
    	    params: ({ keyword, schemaCode }) => (0, codegen_1._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: Object.keys(KWDs),
    	    type: "number",
    	    schemaType: "number",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { keyword, data, schemaCode } = cxt;
    	        cxt.fail$data((0, codegen_1._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
    	    },
    	};
    	limitNumber$1.default = def;
    	
    	return limitNumber$1;
    }

    var multipleOf$1 = {};

    var hasRequiredMultipleOf;

    function requireMultipleOf () {
    	if (hasRequiredMultipleOf) return multipleOf$1;
    	hasRequiredMultipleOf = 1;
    	Object.defineProperty(multipleOf$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const error = {
    	    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,
    	    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: "multipleOf",
    	    type: "number",
    	    schemaType: "number",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { gen, data, schemaCode, it } = cxt;
    	        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
    	        const prec = it.opts.multipleOfPrecision;
    	        const res = gen.let("res");
    	        const invalid = prec
    	            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
    	            : (0, codegen_1._) `${res} !== parseInt(${res})`;
    	        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
    	    },
    	};
    	multipleOf$1.default = def;
    	
    	return multipleOf$1;
    }

    var limitLength$1 = {};

    var ucs2length$2 = {};

    var hasRequiredUcs2length;

    function requireUcs2length () {
    	if (hasRequiredUcs2length) return ucs2length$2;
    	hasRequiredUcs2length = 1;
    	Object.defineProperty(ucs2length$2, "__esModule", { value: true });
    	// https://mathiasbynens.be/notes/javascript-encoding
    	// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
    	function ucs2length(str) {
    	    const len = str.length;
    	    let length = 0;
    	    let pos = 0;
    	    let value;
    	    while (pos < len) {
    	        length++;
    	        value = str.charCodeAt(pos++);
    	        if (value >= 0xd800 && value <= 0xdbff && pos < len) {
    	            // high surrogate, and there is a next character
    	            value = str.charCodeAt(pos);
    	            if ((value & 0xfc00) === 0xdc00)
    	                pos++; // low surrogate
    	        }
    	    }
    	    return length;
    	}
    	ucs2length$2.default = ucs2length;
    	ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
    	
    	return ucs2length$2;
    }

    var hasRequiredLimitLength;

    function requireLimitLength () {
    	if (hasRequiredLimitLength) return limitLength$1;
    	hasRequiredLimitLength = 1;
    	Object.defineProperty(limitLength$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const ucs2length_1 = requireUcs2length();
    	const error = {
    	    message({ keyword, schemaCode }) {
    	        const comp = keyword === "maxLength" ? "more" : "fewer";
    	        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;
    	    },
    	    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: ["maxLength", "minLength"],
    	    type: "string",
    	    schemaType: "number",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { keyword, data, schemaCode, it } = cxt;
    	        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
    	        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
    	        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);
    	    },
    	};
    	limitLength$1.default = def;
    	
    	return limitLength$1;
    }

    var pattern$1 = {};

    var hasRequiredPattern;

    function requirePattern () {
    	if (hasRequiredPattern) return pattern$1;
    	hasRequiredPattern = 1;
    	Object.defineProperty(pattern$1, "__esModule", { value: true });
    	const code_1 = requireCode();
    	const codegen_1 = requireCodegen$1();
    	const error = {
    	    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern "${schemaCode}"`,
    	    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: "pattern",
    	    type: "string",
    	    schemaType: "string",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { data, $data, schema, schemaCode, it } = cxt;
    	        // TODO regexp should be wrapped in try/catchs
    	        const u = it.opts.unicodeRegExp ? "u" : "";
    	        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
    	        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);
    	    },
    	};
    	pattern$1.default = def;
    	
    	return pattern$1;
    }

    var limitProperties$1 = {};

    var hasRequiredLimitProperties;

    function requireLimitProperties () {
    	if (hasRequiredLimitProperties) return limitProperties$1;
    	hasRequiredLimitProperties = 1;
    	Object.defineProperty(limitProperties$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const error = {
    	    message({ keyword, schemaCode }) {
    	        const comp = keyword === "maxProperties" ? "more" : "fewer";
    	        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} properties`;
    	    },
    	    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: ["maxProperties", "minProperties"],
    	    type: "object",
    	    schemaType: "number",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { keyword, data, schemaCode } = cxt;
    	        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
    	        cxt.fail$data((0, codegen_1._) `Object.keys(${data}).length ${op} ${schemaCode}`);
    	    },
    	};
    	limitProperties$1.default = def;
    	
    	return limitProperties$1;
    }

    var required$2 = {};

    var hasRequiredRequired;

    function requireRequired () {
    	if (hasRequiredRequired) return required$2;
    	hasRequiredRequired = 1;
    	Object.defineProperty(required$2, "__esModule", { value: true });
    	const code_1 = requireCode();
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const error = {
    	    message: ({ params: { missingProperty } }) => (0, codegen_1.str) `must have required property '${missingProperty}'`,
    	    params: ({ params: { missingProperty } }) => (0, codegen_1._) `{missingProperty: ${missingProperty}}`,
    	};
    	const def = {
    	    keyword: "required",
    	    type: "object",
    	    schemaType: "array",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { gen, schema, schemaCode, data, $data, it } = cxt;
    	        const { opts } = it;
    	        if (!$data && schema.length === 0)
    	            return;
    	        const useLoop = schema.length >= opts.loopRequired;
    	        if (it.allErrors)
    	            allErrorsMode();
    	        else
    	            exitOnErrorMode();
    	        if (opts.strictRequired) {
    	            const props = cxt.parentSchema.properties;
    	            const { definedProperties } = cxt.it;
    	            for (const requiredKey of schema) {
    	                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
    	                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    	                    const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
    	                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
    	                }
    	            }
    	        }
    	        function allErrorsMode() {
    	            if (useLoop || $data) {
    	                cxt.block$data(codegen_1.nil, loopAllRequired);
    	            }
    	            else {
    	                for (const prop of schema) {
    	                    (0, code_1.checkReportMissingProp)(cxt, prop);
    	                }
    	            }
    	        }
    	        function exitOnErrorMode() {
    	            const missing = gen.let("missing");
    	            if (useLoop || $data) {
    	                const valid = gen.let("valid", true);
    	                cxt.block$data(valid, () => loopUntilMissing(missing, valid));
    	                cxt.ok(valid);
    	            }
    	            else {
    	                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
    	                (0, code_1.reportMissingProp)(cxt, missing);
    	                gen.else();
    	            }
    	        }
    	        function loopAllRequired() {
    	            gen.forOf("prop", schemaCode, (prop) => {
    	                cxt.setParams({ missingProperty: prop });
    	                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
    	            });
    	        }
    	        function loopUntilMissing(missing, valid) {
    	            cxt.setParams({ missingProperty: missing });
    	            gen.forOf(missing, schemaCode, () => {
    	                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
    	                gen.if((0, codegen_1.not)(valid), () => {
    	                    cxt.error();
    	                    gen.break();
    	                });
    	            }, codegen_1.nil);
    	        }
    	    },
    	};
    	required$2.default = def;
    	
    	return required$2;
    }

    var limitItems$1 = {};

    var hasRequiredLimitItems;

    function requireLimitItems () {
    	if (hasRequiredLimitItems) return limitItems$1;
    	hasRequiredLimitItems = 1;
    	Object.defineProperty(limitItems$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const error = {
    	    message({ keyword, schemaCode }) {
    	        const comp = keyword === "maxItems" ? "more" : "fewer";
    	        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} items`;
    	    },
    	    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: ["maxItems", "minItems"],
    	    type: "array",
    	    schemaType: "number",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { keyword, data, schemaCode } = cxt;
    	        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
    	        cxt.fail$data((0, codegen_1._) `${data}.length ${op} ${schemaCode}`);
    	    },
    	};
    	limitItems$1.default = def;
    	
    	return limitItems$1;
    }

    var uniqueItems$1 = {};

    var equal$3 = {};

    var hasRequiredEqual;

    function requireEqual () {
    	if (hasRequiredEqual) return equal$3;
    	hasRequiredEqual = 1;
    	Object.defineProperty(equal$3, "__esModule", { value: true });
    	// https://github.com/ajv-validator/ajv/issues/889
    	const equal = fastDeepEqual;
    	equal.code = 'require("ajv/dist/runtime/equal").default';
    	equal$3.default = equal;
    	
    	return equal$3;
    }

    var hasRequiredUniqueItems;

    function requireUniqueItems () {
    	if (hasRequiredUniqueItems) return uniqueItems$1;
    	hasRequiredUniqueItems = 1;
    	Object.defineProperty(uniqueItems$1, "__esModule", { value: true });
    	const dataType_1 = requireDataType();
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const equal_1 = requireEqual();
    	const error = {
    	    message: ({ params: { i, j } }) => (0, codegen_1.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
    	    params: ({ params: { i, j } }) => (0, codegen_1._) `{i: ${i}, j: ${j}}`,
    	};
    	const def = {
    	    keyword: "uniqueItems",
    	    type: "array",
    	    schemaType: "boolean",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
    	        if (!$data && !schema)
    	            return;
    	        const valid = gen.let("valid");
    	        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
    	        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._) `${schemaCode} === false`);
    	        cxt.ok(valid);
    	        function validateUniqueItems() {
    	            const i = gen.let("i", (0, codegen_1._) `${data}.length`);
    	            const j = gen.let("j");
    	            cxt.setParams({ i, j });
    	            gen.assign(valid, true);
    	            gen.if((0, codegen_1._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
    	        }
    	        function canOptimize() {
    	            return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
    	        }
    	        function loopN(i, j) {
    	            const item = gen.name("item");
    	            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
    	            const indices = gen.const("indices", (0, codegen_1._) `{}`);
    	            gen.for((0, codegen_1._) `;${i}--;`, () => {
    	                gen.let(item, (0, codegen_1._) `${data}[${i}]`);
    	                gen.if(wrongType, (0, codegen_1._) `continue`);
    	                if (itemTypes.length > 1)
    	                    gen.if((0, codegen_1._) `typeof ${item} == "string"`, (0, codegen_1._) `${item} += "_"`);
    	                gen
    	                    .if((0, codegen_1._) `typeof ${indices}[${item}] == "number"`, () => {
    	                    gen.assign(j, (0, codegen_1._) `${indices}[${item}]`);
    	                    cxt.error();
    	                    gen.assign(valid, false).break();
    	                })
    	                    .code((0, codegen_1._) `${indices}[${item}] = ${i}`);
    	            });
    	        }
    	        function loopN2(i, j) {
    	            const eql = (0, util_1.useFunc)(gen, equal_1.default);
    	            const outer = gen.name("outer");
    	            gen.label(outer).for((0, codegen_1._) `;${i}--;`, () => gen.for((0, codegen_1._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
    	                cxt.error();
    	                gen.assign(valid, false).break(outer);
    	            })));
    	        }
    	    },
    	};
    	uniqueItems$1.default = def;
    	
    	return uniqueItems$1;
    }

    var _const$1 = {};

    var hasRequired_const;

    function require_const () {
    	if (hasRequired_const) return _const$1;
    	hasRequired_const = 1;
    	Object.defineProperty(_const$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const equal_1 = requireEqual();
    	const error = {
    	    message: "must be equal to constant",
    	    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValue: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: "const",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { gen, data, $data, schemaCode, schema } = cxt;
    	        if ($data || (schema && typeof schema == "object")) {
    	            cxt.fail$data((0, codegen_1._) `!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
    	        }
    	        else {
    	            cxt.fail((0, codegen_1._) `${schema} !== ${data}`);
    	        }
    	    },
    	};
    	_const$1.default = def;
    	
    	return _const$1;
    }

    var _enum$2 = {};

    var hasRequired_enum;

    function require_enum () {
    	if (hasRequired_enum) return _enum$2;
    	hasRequired_enum = 1;
    	Object.defineProperty(_enum$2, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const equal_1 = requireEqual();
    	const error = {
    	    message: "must be equal to one of the allowed values",
    	    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValues: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: "enum",
    	    schemaType: "array",
    	    $data: true,
    	    error,
    	    code(cxt) {
    	        const { gen, data, $data, schema, schemaCode, it } = cxt;
    	        if (!$data && schema.length === 0)
    	            throw new Error("enum must have non-empty array");
    	        const useLoop = schema.length >= it.opts.loopEnum;
    	        let eql;
    	        const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1.useFunc)(gen, equal_1.default)));
    	        let valid;
    	        if (useLoop || $data) {
    	            valid = gen.let("valid");
    	            cxt.block$data(valid, loopEnum);
    	        }
    	        else {
    	            /* istanbul ignore if */
    	            if (!Array.isArray(schema))
    	                throw new Error("ajv implementation error");
    	            const vSchema = gen.const("vSchema", schemaCode);
    	            valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
    	        }
    	        cxt.pass(valid);
    	        function loopEnum() {
    	            gen.assign(valid, false);
    	            gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
    	        }
    	        function equalCode(vSchema, i) {
    	            const sch = schema[i];
    	            return typeof sch === "object" && sch !== null
    	                ? (0, codegen_1._) `${getEql()}(${data}, ${vSchema}[${i}])`
    	                : (0, codegen_1._) `${data} === ${sch}`;
    	        }
    	    },
    	};
    	_enum$2.default = def;
    	
    	return _enum$2;
    }

    var hasRequiredValidation;

    function requireValidation () {
    	if (hasRequiredValidation) return validation$2;
    	hasRequiredValidation = 1;
    	Object.defineProperty(validation$2, "__esModule", { value: true });
    	const limitNumber_1 = requireLimitNumber();
    	const multipleOf_1 = requireMultipleOf();
    	const limitLength_1 = requireLimitLength();
    	const pattern_1 = requirePattern();
    	const limitProperties_1 = requireLimitProperties();
    	const required_1 = requireRequired();
    	const limitItems_1 = requireLimitItems();
    	const uniqueItems_1 = requireUniqueItems();
    	const const_1 = require_const();
    	const enum_1 = require_enum();
    	const validation = [
    	    // number
    	    limitNumber_1.default,
    	    multipleOf_1.default,
    	    // string
    	    limitLength_1.default,
    	    pattern_1.default,
    	    // object
    	    limitProperties_1.default,
    	    required_1.default,
    	    // array
    	    limitItems_1.default,
    	    uniqueItems_1.default,
    	    // any
    	    { keyword: "type", schemaType: ["string", "array"] },
    	    { keyword: "nullable", schemaType: "boolean" },
    	    const_1.default,
    	    enum_1.default,
    	];
    	validation$2.default = validation;
    	
    	return validation$2;
    }

    var applicator$1 = {};

    var additionalItems$1 = {};

    var hasRequiredAdditionalItems;

    function requireAdditionalItems () {
    	if (hasRequiredAdditionalItems) return additionalItems$1;
    	hasRequiredAdditionalItems = 1;
    	Object.defineProperty(additionalItems$1, "__esModule", { value: true });
    	additionalItems$1.validateAdditionalItems = void 0;
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const error = {
    	    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    	    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
    	};
    	const def = {
    	    keyword: "additionalItems",
    	    type: "array",
    	    schemaType: ["boolean", "object"],
    	    before: "uniqueItems",
    	    error,
    	    code(cxt) {
    	        const { parentSchema, it } = cxt;
    	        const { items } = parentSchema;
    	        if (!Array.isArray(items)) {
    	            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
    	            return;
    	        }
    	        validateAdditionalItems(cxt, items);
    	    },
    	};
    	function validateAdditionalItems(cxt, items) {
    	    const { gen, schema, data, keyword, it } = cxt;
    	    it.items = true;
    	    const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    	    if (schema === false) {
    	        cxt.setParams({ len: items.length });
    	        cxt.pass((0, codegen_1._) `${len} <= ${items.length}`);
    	    }
    	    else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
    	        const valid = gen.var("valid", (0, codegen_1._) `${len} <= ${items.length}`); // TODO var
    	        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
    	        cxt.ok(valid);
    	    }
    	    function validateItems(valid) {
    	        gen.forRange("i", items.length, len, (i) => {
    	            cxt.subschema({ keyword, dataProp: i, dataPropType: util_1.Type.Num }, valid);
    	            if (!it.allErrors)
    	                gen.if((0, codegen_1.not)(valid), () => gen.break());
    	        });
    	    }
    	}
    	additionalItems$1.validateAdditionalItems = validateAdditionalItems;
    	additionalItems$1.default = def;
    	
    	return additionalItems$1;
    }

    var prefixItems$1 = {};

    var items$1 = {};

    var hasRequiredItems;

    function requireItems () {
    	if (hasRequiredItems) return items$1;
    	hasRequiredItems = 1;
    	Object.defineProperty(items$1, "__esModule", { value: true });
    	items$1.validateTuple = void 0;
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const code_1 = requireCode();
    	const def = {
    	    keyword: "items",
    	    type: "array",
    	    schemaType: ["object", "array", "boolean"],
    	    before: "uniqueItems",
    	    code(cxt) {
    	        const { schema, it } = cxt;
    	        if (Array.isArray(schema))
    	            return validateTuple(cxt, "additionalItems", schema);
    	        it.items = true;
    	        if ((0, util_1.alwaysValidSchema)(it, schema))
    	            return;
    	        cxt.ok((0, code_1.validateArray)(cxt));
    	    },
    	};
    	function validateTuple(cxt, extraItems, schArr = cxt.schema) {
    	    const { gen, parentSchema, data, keyword, it } = cxt;
    	    checkStrictTuple(parentSchema);
    	    if (it.opts.unevaluated && schArr.length && it.items !== true) {
    	        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
    	    }
    	    const valid = gen.name("valid");
    	    const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    	    schArr.forEach((sch, i) => {
    	        if ((0, util_1.alwaysValidSchema)(it, sch))
    	            return;
    	        gen.if((0, codegen_1._) `${len} > ${i}`, () => cxt.subschema({
    	            keyword,
    	            schemaProp: i,
    	            dataProp: i,
    	        }, valid));
    	        cxt.ok(valid);
    	    });
    	    function checkStrictTuple(sch) {
    	        const { opts, errSchemaPath } = it;
    	        const l = schArr.length;
    	        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
    	        if (opts.strictTuples && !fullTuple) {
    	            const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
    	            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
    	        }
    	    }
    	}
    	items$1.validateTuple = validateTuple;
    	items$1.default = def;
    	
    	return items$1;
    }

    var hasRequiredPrefixItems;

    function requirePrefixItems () {
    	if (hasRequiredPrefixItems) return prefixItems$1;
    	hasRequiredPrefixItems = 1;
    	Object.defineProperty(prefixItems$1, "__esModule", { value: true });
    	const items_1 = requireItems();
    	const def = {
    	    keyword: "prefixItems",
    	    type: "array",
    	    schemaType: ["array"],
    	    before: "uniqueItems",
    	    code: (cxt) => (0, items_1.validateTuple)(cxt, "items"),
    	};
    	prefixItems$1.default = def;
    	
    	return prefixItems$1;
    }

    var items2020$1 = {};

    var hasRequiredItems2020;

    function requireItems2020 () {
    	if (hasRequiredItems2020) return items2020$1;
    	hasRequiredItems2020 = 1;
    	Object.defineProperty(items2020$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const code_1 = requireCode();
    	const additionalItems_1 = requireAdditionalItems();
    	const error = {
    	    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,
    	    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,
    	};
    	const def = {
    	    keyword: "items",
    	    type: "array",
    	    schemaType: ["object", "boolean"],
    	    before: "uniqueItems",
    	    error,
    	    code(cxt) {
    	        const { schema, parentSchema, it } = cxt;
    	        const { prefixItems } = parentSchema;
    	        it.items = true;
    	        if ((0, util_1.alwaysValidSchema)(it, schema))
    	            return;
    	        if (prefixItems)
    	            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
    	        else
    	            cxt.ok((0, code_1.validateArray)(cxt));
    	    },
    	};
    	items2020$1.default = def;
    	
    	return items2020$1;
    }

    var contains$1 = {};

    var hasRequiredContains;

    function requireContains () {
    	if (hasRequiredContains) return contains$1;
    	hasRequiredContains = 1;
    	Object.defineProperty(contains$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const error = {
    	    message: ({ params: { min, max } }) => max === undefined
    	        ? (0, codegen_1.str) `must contain at least ${min} valid item(s)`
    	        : (0, codegen_1.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
    	    params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1._) `{minContains: ${min}}` : (0, codegen_1._) `{minContains: ${min}, maxContains: ${max}}`,
    	};
    	const def = {
    	    keyword: "contains",
    	    type: "array",
    	    schemaType: ["object", "boolean"],
    	    before: "uniqueItems",
    	    trackErrors: true,
    	    error,
    	    code(cxt) {
    	        const { gen, schema, parentSchema, data, it } = cxt;
    	        let min;
    	        let max;
    	        const { minContains, maxContains } = parentSchema;
    	        if (it.opts.next) {
    	            min = minContains === undefined ? 1 : minContains;
    	            max = maxContains;
    	        }
    	        else {
    	            min = 1;
    	        }
    	        const len = gen.const("len", (0, codegen_1._) `${data}.length`);
    	        cxt.setParams({ min, max });
    	        if (max === undefined && min === 0) {
    	            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
    	            return;
    	        }
    	        if (max !== undefined && min > max) {
    	            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
    	            cxt.fail();
    	            return;
    	        }
    	        if ((0, util_1.alwaysValidSchema)(it, schema)) {
    	            let cond = (0, codegen_1._) `${len} >= ${min}`;
    	            if (max !== undefined)
    	                cond = (0, codegen_1._) `${cond} && ${len} <= ${max}`;
    	            cxt.pass(cond);
    	            return;
    	        }
    	        it.items = true;
    	        const valid = gen.name("valid");
    	        if (max === undefined && min === 1) {
    	            validateItems(valid, () => gen.if(valid, () => gen.break()));
    	        }
    	        else if (min === 0) {
    	            gen.let(valid, true);
    	            if (max !== undefined)
    	                gen.if((0, codegen_1._) `${data}.length > 0`, validateItemsWithCount);
    	        }
    	        else {
    	            gen.let(valid, false);
    	            validateItemsWithCount();
    	        }
    	        cxt.result(valid, () => cxt.reset());
    	        function validateItemsWithCount() {
    	            const schValid = gen.name("_valid");
    	            const count = gen.let("count", 0);
    	            validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
    	        }
    	        function validateItems(_valid, block) {
    	            gen.forRange("i", 0, len, (i) => {
    	                cxt.subschema({
    	                    keyword: "contains",
    	                    dataProp: i,
    	                    dataPropType: util_1.Type.Num,
    	                    compositeRule: true,
    	                }, _valid);
    	                block();
    	            });
    	        }
    	        function checkLimits(count) {
    	            gen.code((0, codegen_1._) `${count}++`);
    	            if (max === undefined) {
    	                gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
    	            }
    	            else {
    	                gen.if((0, codegen_1._) `${count} > ${max}`, () => gen.assign(valid, false).break());
    	                if (min === 1)
    	                    gen.assign(valid, true);
    	                else
    	                    gen.if((0, codegen_1._) `${count} >= ${min}`, () => gen.assign(valid, true));
    	            }
    	        }
    	    },
    	};
    	contains$1.default = def;
    	
    	return contains$1;
    }

    var dependencies$1 = {};

    var hasRequiredDependencies;

    function requireDependencies () {
    	if (hasRequiredDependencies) return dependencies$1;
    	hasRequiredDependencies = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    		const codegen_1 = requireCodegen$1();
    		const util_1 = requireUtil();
    		const code_1 = requireCode();
    		exports.error = {
    		    message: ({ params: { property, depsCount, deps } }) => {
    		        const property_ies = depsCount === 1 ? "property" : "properties";
    		        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
    		    },
    		    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
    		};
    		const def = {
    		    keyword: "dependencies",
    		    type: "object",
    		    schemaType: "object",
    		    error: exports.error,
    		    code(cxt) {
    		        const [propDeps, schDeps] = splitDependencies(cxt);
    		        validatePropertyDeps(cxt, propDeps);
    		        validateSchemaDeps(cxt, schDeps);
    		    },
    		};
    		function splitDependencies({ schema }) {
    		    const propertyDeps = {};
    		    const schemaDeps = {};
    		    for (const key in schema) {
    		        if (key === "__proto__")
    		            continue;
    		        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
    		        deps[key] = schema[key];
    		    }
    		    return [propertyDeps, schemaDeps];
    		}
    		function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    		    const { gen, data, it } = cxt;
    		    if (Object.keys(propertyDeps).length === 0)
    		        return;
    		    const missing = gen.let("missing");
    		    for (const prop in propertyDeps) {
    		        const deps = propertyDeps[prop];
    		        if (deps.length === 0)
    		            continue;
    		        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
    		        cxt.setParams({
    		            property: prop,
    		            depsCount: deps.length,
    		            deps: deps.join(", "),
    		        });
    		        if (it.allErrors) {
    		            gen.if(hasProperty, () => {
    		                for (const depProp of deps) {
    		                    (0, code_1.checkReportMissingProp)(cxt, depProp);
    		                }
    		            });
    		        }
    		        else {
    		            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
    		            (0, code_1.reportMissingProp)(cxt, missing);
    		            gen.else();
    		        }
    		    }
    		}
    		exports.validatePropertyDeps = validatePropertyDeps;
    		function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    		    const { gen, data, keyword, it } = cxt;
    		    const valid = gen.name("valid");
    		    for (const prop in schemaDeps) {
    		        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
    		            continue;
    		        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
    		            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
    		            cxt.mergeValidEvaluated(schCxt, valid);
    		        }, () => gen.var(valid, true) // TODO var
    		        );
    		        cxt.ok(valid);
    		    }
    		}
    		exports.validateSchemaDeps = validateSchemaDeps;
    		exports.default = def;
    		
    } (dependencies$1));
    	return dependencies$1;
    }

    var propertyNames$1 = {};

    var hasRequiredPropertyNames;

    function requirePropertyNames () {
    	if (hasRequiredPropertyNames) return propertyNames$1;
    	hasRequiredPropertyNames = 1;
    	Object.defineProperty(propertyNames$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const error = {
    	    message: "property name must be valid",
    	    params: ({ params }) => (0, codegen_1._) `{propertyName: ${params.propertyName}}`,
    	};
    	const def = {
    	    keyword: "propertyNames",
    	    type: "object",
    	    schemaType: ["object", "boolean"],
    	    error,
    	    code(cxt) {
    	        const { gen, schema, data, it } = cxt;
    	        if ((0, util_1.alwaysValidSchema)(it, schema))
    	            return;
    	        const valid = gen.name("valid");
    	        gen.forIn("key", data, (key) => {
    	            cxt.setParams({ propertyName: key });
    	            cxt.subschema({
    	                keyword: "propertyNames",
    	                data: key,
    	                dataTypes: ["string"],
    	                propertyName: key,
    	                compositeRule: true,
    	            }, valid);
    	            gen.if((0, codegen_1.not)(valid), () => {
    	                cxt.error(true);
    	                if (!it.allErrors)
    	                    gen.break();
    	            });
    	        });
    	        cxt.ok(valid);
    	    },
    	};
    	propertyNames$1.default = def;
    	
    	return propertyNames$1;
    }

    var additionalProperties$2 = {};

    var hasRequiredAdditionalProperties;

    function requireAdditionalProperties () {
    	if (hasRequiredAdditionalProperties) return additionalProperties$2;
    	hasRequiredAdditionalProperties = 1;
    	Object.defineProperty(additionalProperties$2, "__esModule", { value: true });
    	const code_1 = requireCode();
    	const codegen_1 = requireCodegen$1();
    	const names_1 = requireNames();
    	const util_1 = requireUtil();
    	const error = {
    	    message: "must NOT have additional properties",
    	    params: ({ params }) => (0, codegen_1._) `{additionalProperty: ${params.additionalProperty}}`,
    	};
    	const def = {
    	    keyword: "additionalProperties",
    	    type: ["object"],
    	    schemaType: ["boolean", "object"],
    	    allowUndefined: true,
    	    trackErrors: true,
    	    error,
    	    code(cxt) {
    	        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
    	        /* istanbul ignore if */
    	        if (!errsCount)
    	            throw new Error("ajv implementation error");
    	        const { allErrors, opts } = it;
    	        it.props = true;
    	        if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema))
    	            return;
    	        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
    	        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
    	        checkAdditionalProperties();
    	        cxt.ok((0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
    	        function checkAdditionalProperties() {
    	            gen.forIn("key", data, (key) => {
    	                if (!props.length && !patProps.length)
    	                    additionalPropertyCode(key);
    	                else
    	                    gen.if(isAdditional(key), () => additionalPropertyCode(key));
    	            });
    	        }
    	        function isAdditional(key) {
    	            let definedProp;
    	            if (props.length > 8) {
    	                // TODO maybe an option instead of hard-coded 8?
    	                const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
    	                definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
    	            }
    	            else if (props.length) {
    	                definedProp = (0, codegen_1.or)(...props.map((p) => (0, codegen_1._) `${key} === ${p}`));
    	            }
    	            else {
    	                definedProp = codegen_1.nil;
    	            }
    	            if (patProps.length) {
    	                definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p) => (0, codegen_1._) `${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
    	            }
    	            return (0, codegen_1.not)(definedProp);
    	        }
    	        function deleteAdditional(key) {
    	            gen.code((0, codegen_1._) `delete ${data}[${key}]`);
    	        }
    	        function additionalPropertyCode(key) {
    	            if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
    	                deleteAdditional(key);
    	                return;
    	            }
    	            if (schema === false) {
    	                cxt.setParams({ additionalProperty: key });
    	                cxt.error();
    	                if (!allErrors)
    	                    gen.break();
    	                return;
    	            }
    	            if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
    	                const valid = gen.name("valid");
    	                if (opts.removeAdditional === "failing") {
    	                    applyAdditionalSchema(key, valid, false);
    	                    gen.if((0, codegen_1.not)(valid), () => {
    	                        cxt.reset();
    	                        deleteAdditional(key);
    	                    });
    	                }
    	                else {
    	                    applyAdditionalSchema(key, valid);
    	                    if (!allErrors)
    	                        gen.if((0, codegen_1.not)(valid), () => gen.break());
    	                }
    	            }
    	        }
    	        function applyAdditionalSchema(key, valid, errors) {
    	            const subschema = {
    	                keyword: "additionalProperties",
    	                dataProp: key,
    	                dataPropType: util_1.Type.Str,
    	            };
    	            if (errors === false) {
    	                Object.assign(subschema, {
    	                    compositeRule: true,
    	                    createErrors: false,
    	                    allErrors: false,
    	                });
    	            }
    	            cxt.subschema(subschema, valid);
    	        }
    	    },
    	};
    	additionalProperties$2.default = def;
    	
    	return additionalProperties$2;
    }

    var properties$5 = {};

    var hasRequiredProperties;

    function requireProperties () {
    	if (hasRequiredProperties) return properties$5;
    	hasRequiredProperties = 1;
    	Object.defineProperty(properties$5, "__esModule", { value: true });
    	const validate_1 = requireValidate$1();
    	const code_1 = requireCode();
    	const util_1 = requireUtil();
    	const additionalProperties_1 = requireAdditionalProperties();
    	const def = {
    	    keyword: "properties",
    	    type: "object",
    	    schemaType: "object",
    	    code(cxt) {
    	        const { gen, schema, parentSchema, data, it } = cxt;
    	        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
    	            additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
    	        }
    	        const allProps = (0, code_1.allSchemaProperties)(schema);
    	        for (const prop of allProps) {
    	            it.definedProperties.add(prop);
    	        }
    	        if (it.opts.unevaluated && allProps.length && it.props !== true) {
    	            it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
    	        }
    	        const properties = allProps.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
    	        if (properties.length === 0)
    	            return;
    	        const valid = gen.name("valid");
    	        for (const prop of properties) {
    	            if (hasDefault(prop)) {
    	                applyPropertySchema(prop);
    	            }
    	            else {
    	                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
    	                applyPropertySchema(prop);
    	                if (!it.allErrors)
    	                    gen.else().var(valid, true);
    	                gen.endIf();
    	            }
    	            cxt.it.definedProperties.add(prop);
    	            cxt.ok(valid);
    	        }
    	        function hasDefault(prop) {
    	            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
    	        }
    	        function applyPropertySchema(prop) {
    	            cxt.subschema({
    	                keyword: "properties",
    	                schemaProp: prop,
    	                dataProp: prop,
    	            }, valid);
    	        }
    	    },
    	};
    	properties$5.default = def;
    	
    	return properties$5;
    }

    var patternProperties$1 = {};

    var hasRequiredPatternProperties;

    function requirePatternProperties () {
    	if (hasRequiredPatternProperties) return patternProperties$1;
    	hasRequiredPatternProperties = 1;
    	Object.defineProperty(patternProperties$1, "__esModule", { value: true });
    	const code_1 = requireCode();
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const util_2 = requireUtil();
    	const def = {
    	    keyword: "patternProperties",
    	    type: "object",
    	    schemaType: "object",
    	    code(cxt) {
    	        const { gen, schema, data, parentSchema, it } = cxt;
    	        const { opts } = it;
    	        const patterns = (0, code_1.allSchemaProperties)(schema);
    	        const alwaysValidPatterns = patterns.filter((p) => (0, util_1.alwaysValidSchema)(it, schema[p]));
    	        if (patterns.length === 0 ||
    	            (alwaysValidPatterns.length === patterns.length &&
    	                (!it.opts.unevaluated || it.props === true))) {
    	            return;
    	        }
    	        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
    	        const valid = gen.name("valid");
    	        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
    	            it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
    	        }
    	        const { props } = it;
    	        validatePatternProperties();
    	        function validatePatternProperties() {
    	            for (const pat of patterns) {
    	                if (checkProperties)
    	                    checkMatchingProperties(pat);
    	                if (it.allErrors) {
    	                    validateProperties(pat);
    	                }
    	                else {
    	                    gen.var(valid, true); // TODO var
    	                    validateProperties(pat);
    	                    gen.if(valid);
    	                }
    	            }
    	        }
    	        function checkMatchingProperties(pat) {
    	            for (const prop in checkProperties) {
    	                if (new RegExp(pat).test(prop)) {
    	                    (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
    	                }
    	            }
    	        }
    	        function validateProperties(pat) {
    	            gen.forIn("key", data, (key) => {
    	                gen.if((0, codegen_1._) `${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, () => {
    	                    const alwaysValid = alwaysValidPatterns.includes(pat);
    	                    if (!alwaysValid) {
    	                        cxt.subschema({
    	                            keyword: "patternProperties",
    	                            schemaProp: pat,
    	                            dataProp: key,
    	                            dataPropType: util_2.Type.Str,
    	                        }, valid);
    	                    }
    	                    if (it.opts.unevaluated && props !== true) {
    	                        gen.assign((0, codegen_1._) `${props}[${key}]`, true);
    	                    }
    	                    else if (!alwaysValid && !it.allErrors) {
    	                        // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
    	                        // or if all properties were evaluated (props === true)
    	                        gen.if((0, codegen_1.not)(valid), () => gen.break());
    	                    }
    	                });
    	            });
    	        }
    	    },
    	};
    	patternProperties$1.default = def;
    	
    	return patternProperties$1;
    }

    var not$1 = {};

    var hasRequiredNot;

    function requireNot () {
    	if (hasRequiredNot) return not$1;
    	hasRequiredNot = 1;
    	Object.defineProperty(not$1, "__esModule", { value: true });
    	const util_1 = requireUtil();
    	const def = {
    	    keyword: "not",
    	    schemaType: ["object", "boolean"],
    	    trackErrors: true,
    	    code(cxt) {
    	        const { gen, schema, it } = cxt;
    	        if ((0, util_1.alwaysValidSchema)(it, schema)) {
    	            cxt.fail();
    	            return;
    	        }
    	        const valid = gen.name("valid");
    	        cxt.subschema({
    	            keyword: "not",
    	            compositeRule: true,
    	            createErrors: false,
    	            allErrors: false,
    	        }, valid);
    	        cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
    	    },
    	    error: { message: "must NOT be valid" },
    	};
    	not$1.default = def;
    	
    	return not$1;
    }

    var anyOf$1 = {};

    var hasRequiredAnyOf;

    function requireAnyOf () {
    	if (hasRequiredAnyOf) return anyOf$1;
    	hasRequiredAnyOf = 1;
    	Object.defineProperty(anyOf$1, "__esModule", { value: true });
    	const code_1 = requireCode();
    	const def = {
    	    keyword: "anyOf",
    	    schemaType: "array",
    	    trackErrors: true,
    	    code: code_1.validateUnion,
    	    error: { message: "must match a schema in anyOf" },
    	};
    	anyOf$1.default = def;
    	
    	return anyOf$1;
    }

    var oneOf$1 = {};

    var hasRequiredOneOf;

    function requireOneOf () {
    	if (hasRequiredOneOf) return oneOf$1;
    	hasRequiredOneOf = 1;
    	Object.defineProperty(oneOf$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const error = {
    	    message: "must match exactly one schema in oneOf",
    	    params: ({ params }) => (0, codegen_1._) `{passingSchemas: ${params.passing}}`,
    	};
    	const def = {
    	    keyword: "oneOf",
    	    schemaType: "array",
    	    trackErrors: true,
    	    error,
    	    code(cxt) {
    	        const { gen, schema, parentSchema, it } = cxt;
    	        /* istanbul ignore if */
    	        if (!Array.isArray(schema))
    	            throw new Error("ajv implementation error");
    	        if (it.opts.discriminator && parentSchema.discriminator)
    	            return;
    	        const schArr = schema;
    	        const valid = gen.let("valid", false);
    	        const passing = gen.let("passing", null);
    	        const schValid = gen.name("_valid");
    	        cxt.setParams({ passing });
    	        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
    	        gen.block(validateOneOf);
    	        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    	        function validateOneOf() {
    	            schArr.forEach((sch, i) => {
    	                let schCxt;
    	                if ((0, util_1.alwaysValidSchema)(it, sch)) {
    	                    gen.var(schValid, true);
    	                }
    	                else {
    	                    schCxt = cxt.subschema({
    	                        keyword: "oneOf",
    	                        schemaProp: i,
    	                        compositeRule: true,
    	                    }, schValid);
    	                }
    	                if (i > 0) {
    	                    gen
    	                        .if((0, codegen_1._) `${schValid} && ${valid}`)
    	                        .assign(valid, false)
    	                        .assign(passing, (0, codegen_1._) `[${passing}, ${i}]`)
    	                        .else();
    	                }
    	                gen.if(schValid, () => {
    	                    gen.assign(valid, true);
    	                    gen.assign(passing, i);
    	                    if (schCxt)
    	                        cxt.mergeEvaluated(schCxt, codegen_1.Name);
    	                });
    	            });
    	        }
    	    },
    	};
    	oneOf$1.default = def;
    	
    	return oneOf$1;
    }

    var allOf$1 = {};

    var hasRequiredAllOf;

    function requireAllOf () {
    	if (hasRequiredAllOf) return allOf$1;
    	hasRequiredAllOf = 1;
    	Object.defineProperty(allOf$1, "__esModule", { value: true });
    	const util_1 = requireUtil();
    	const def = {
    	    keyword: "allOf",
    	    schemaType: "array",
    	    code(cxt) {
    	        const { gen, schema, it } = cxt;
    	        /* istanbul ignore if */
    	        if (!Array.isArray(schema))
    	            throw new Error("ajv implementation error");
    	        const valid = gen.name("valid");
    	        schema.forEach((sch, i) => {
    	            if ((0, util_1.alwaysValidSchema)(it, sch))
    	                return;
    	            const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
    	            cxt.ok(valid);
    	            cxt.mergeEvaluated(schCxt);
    	        });
    	    },
    	};
    	allOf$1.default = def;
    	
    	return allOf$1;
    }

    var _if$1 = {};

    var hasRequired_if;

    function require_if () {
    	if (hasRequired_if) return _if$1;
    	hasRequired_if = 1;
    	Object.defineProperty(_if$1, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const util_1 = requireUtil();
    	const error = {
    	    message: ({ params }) => (0, codegen_1.str) `must match "${params.ifClause}" schema`,
    	    params: ({ params }) => (0, codegen_1._) `{failingKeyword: ${params.ifClause}}`,
    	};
    	const def = {
    	    keyword: "if",
    	    schemaType: ["object", "boolean"],
    	    trackErrors: true,
    	    error,
    	    code(cxt) {
    	        const { gen, parentSchema, it } = cxt;
    	        if (parentSchema.then === undefined && parentSchema.else === undefined) {
    	            (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
    	        }
    	        const hasThen = hasSchema(it, "then");
    	        const hasElse = hasSchema(it, "else");
    	        if (!hasThen && !hasElse)
    	            return;
    	        const valid = gen.let("valid", true);
    	        const schValid = gen.name("_valid");
    	        validateIf();
    	        cxt.reset();
    	        if (hasThen && hasElse) {
    	            const ifClause = gen.let("ifClause");
    	            cxt.setParams({ ifClause });
    	            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
    	        }
    	        else if (hasThen) {
    	            gen.if(schValid, validateClause("then"));
    	        }
    	        else {
    	            gen.if((0, codegen_1.not)(schValid), validateClause("else"));
    	        }
    	        cxt.pass(valid, () => cxt.error(true));
    	        function validateIf() {
    	            const schCxt = cxt.subschema({
    	                keyword: "if",
    	                compositeRule: true,
    	                createErrors: false,
    	                allErrors: false,
    	            }, schValid);
    	            cxt.mergeEvaluated(schCxt);
    	        }
    	        function validateClause(keyword, ifClause) {
    	            return () => {
    	                const schCxt = cxt.subschema({ keyword }, schValid);
    	                gen.assign(valid, schValid);
    	                cxt.mergeValidEvaluated(schCxt, valid);
    	                if (ifClause)
    	                    gen.assign(ifClause, (0, codegen_1._) `${keyword}`);
    	                else
    	                    cxt.setParams({ ifClause: keyword });
    	            };
    	        }
    	    },
    	};
    	function hasSchema(it, keyword) {
    	    const schema = it.schema[keyword];
    	    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);
    	}
    	_if$1.default = def;
    	
    	return _if$1;
    }

    var thenElse$1 = {};

    var hasRequiredThenElse;

    function requireThenElse () {
    	if (hasRequiredThenElse) return thenElse$1;
    	hasRequiredThenElse = 1;
    	Object.defineProperty(thenElse$1, "__esModule", { value: true });
    	const util_1 = requireUtil();
    	const def = {
    	    keyword: ["then", "else"],
    	    schemaType: ["object", "boolean"],
    	    code({ keyword, parentSchema, it }) {
    	        if (parentSchema.if === undefined)
    	            (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
    	    },
    	};
    	thenElse$1.default = def;
    	
    	return thenElse$1;
    }

    var hasRequiredApplicator;

    function requireApplicator () {
    	if (hasRequiredApplicator) return applicator$1;
    	hasRequiredApplicator = 1;
    	Object.defineProperty(applicator$1, "__esModule", { value: true });
    	const additionalItems_1 = requireAdditionalItems();
    	const prefixItems_1 = requirePrefixItems();
    	const items_1 = requireItems();
    	const items2020_1 = requireItems2020();
    	const contains_1 = requireContains();
    	const dependencies_1 = requireDependencies();
    	const propertyNames_1 = requirePropertyNames();
    	const additionalProperties_1 = requireAdditionalProperties();
    	const properties_1 = requireProperties();
    	const patternProperties_1 = requirePatternProperties();
    	const not_1 = requireNot();
    	const anyOf_1 = requireAnyOf();
    	const oneOf_1 = requireOneOf();
    	const allOf_1 = requireAllOf();
    	const if_1 = require_if();
    	const thenElse_1 = requireThenElse();
    	function getApplicator(draft2020 = false) {
    	    const applicator = [
    	        // any
    	        not_1.default,
    	        anyOf_1.default,
    	        oneOf_1.default,
    	        allOf_1.default,
    	        if_1.default,
    	        thenElse_1.default,
    	        // object
    	        propertyNames_1.default,
    	        additionalProperties_1.default,
    	        dependencies_1.default,
    	        properties_1.default,
    	        patternProperties_1.default,
    	    ];
    	    // array
    	    if (draft2020)
    	        applicator.push(prefixItems_1.default, items2020_1.default);
    	    else
    	        applicator.push(additionalItems_1.default, items_1.default);
    	    applicator.push(contains_1.default);
    	    return applicator;
    	}
    	applicator$1.default = getApplicator;
    	
    	return applicator$1;
    }

    var format$4 = {};

    var format$3 = {};

    var hasRequiredFormat$1;

    function requireFormat$1 () {
    	if (hasRequiredFormat$1) return format$3;
    	hasRequiredFormat$1 = 1;
    	Object.defineProperty(format$3, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const error = {
    	    message: ({ schemaCode }) => (0, codegen_1.str) `must match format "${schemaCode}"`,
    	    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,
    	};
    	const def = {
    	    keyword: "format",
    	    type: ["number", "string"],
    	    schemaType: "string",
    	    $data: true,
    	    error,
    	    code(cxt, ruleType) {
    	        const { gen, data, $data, schema, schemaCode, it } = cxt;
    	        const { opts, errSchemaPath, schemaEnv, self } = it;
    	        if (!opts.validateFormats)
    	            return;
    	        if ($data)
    	            validate$DataFormat();
    	        else
    	            validateFormat();
    	        function validate$DataFormat() {
    	            const fmts = gen.scopeValue("formats", {
    	                ref: self.formats,
    	                code: opts.code.formats,
    	            });
    	            const fDef = gen.const("fDef", (0, codegen_1._) `${fmts}[${schemaCode}]`);
    	            const fType = gen.let("fType");
    	            const format = gen.let("format");
    	            // TODO simplify
    	            gen.if((0, codegen_1._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || "string"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `"string"`).assign(format, fDef));
    	            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
    	            function unknownFmt() {
    	                if (opts.strictSchema === false)
    	                    return codegen_1.nil;
    	                return (0, codegen_1._) `${schemaCode} && !${format}`;
    	            }
    	            function invalidFmt() {
    	                const callFormat = schemaEnv.$async
    	                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
    	                    : (0, codegen_1._) `${format}(${data})`;
    	                const validData = (0, codegen_1._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
    	                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
    	            }
    	        }
    	        function validateFormat() {
    	            const formatDef = self.formats[schema];
    	            if (!formatDef) {
    	                unknownFormat();
    	                return;
    	            }
    	            if (formatDef === true)
    	                return;
    	            const [fmtType, format, fmtRef] = getFormat(formatDef);
    	            if (fmtType === ruleType)
    	                cxt.pass(validCondition());
    	            function unknownFormat() {
    	                if (opts.strictSchema === false) {
    	                    self.logger.warn(unknownMsg());
    	                    return;
    	                }
    	                throw new Error(unknownMsg());
    	                function unknownMsg() {
    	                    return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
    	                }
    	            }
    	            function getFormat(fmtDef) {
    	                const code = fmtDef instanceof RegExp
    	                    ? (0, codegen_1.regexpCode)(fmtDef)
    	                    : opts.code.formats
    	                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`
    	                        : undefined;
    	                const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
    	                if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
    	                    return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];
    	                }
    	                return ["string", fmtDef, fmt];
    	            }
    	            function validCondition() {
    	                if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
    	                    if (!schemaEnv.$async)
    	                        throw new Error("async format in sync schema");
    	                    return (0, codegen_1._) `await ${fmtRef}(${data})`;
    	                }
    	                return typeof format == "function" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;
    	            }
    	        }
    	    },
    	};
    	format$3.default = def;
    	
    	return format$3;
    }

    var hasRequiredFormat;

    function requireFormat () {
    	if (hasRequiredFormat) return format$4;
    	hasRequiredFormat = 1;
    	Object.defineProperty(format$4, "__esModule", { value: true });
    	const format_1 = requireFormat$1();
    	const format = [format_1.default];
    	format$4.default = format;
    	
    	return format$4;
    }

    var metadata$2 = {};

    var hasRequiredMetadata;

    function requireMetadata () {
    	if (hasRequiredMetadata) return metadata$2;
    	hasRequiredMetadata = 1;
    	Object.defineProperty(metadata$2, "__esModule", { value: true });
    	metadata$2.contentVocabulary = metadata$2.metadataVocabulary = void 0;
    	metadata$2.metadataVocabulary = [
    	    "title",
    	    "description",
    	    "default",
    	    "deprecated",
    	    "readOnly",
    	    "writeOnly",
    	    "examples",
    	];
    	metadata$2.contentVocabulary = [
    	    "contentMediaType",
    	    "contentEncoding",
    	    "contentSchema",
    	];
    	
    	return metadata$2;
    }

    var hasRequiredDraft7;

    function requireDraft7 () {
    	if (hasRequiredDraft7) return draft7$1;
    	hasRequiredDraft7 = 1;
    	Object.defineProperty(draft7$1, "__esModule", { value: true });
    	const core_1 = requireCore();
    	const validation_1 = requireValidation();
    	const applicator_1 = requireApplicator();
    	const format_1 = requireFormat();
    	const metadata_1 = requireMetadata();
    	const draft7Vocabularies = [
    	    core_1.default,
    	    validation_1.default,
    	    (0, applicator_1.default)(),
    	    format_1.default,
    	    metadata_1.metadataVocabulary,
    	    metadata_1.contentVocabulary,
    	];
    	draft7$1.default = draft7Vocabularies;
    	
    	return draft7$1;
    }

    var discriminator$2 = {};

    var types$7 = {};

    var hasRequiredTypes;

    function requireTypes () {
    	if (hasRequiredTypes) return types$7;
    	hasRequiredTypes = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.DiscrError = void 0;
    		(function (DiscrError) {
    		    DiscrError["Tag"] = "tag";
    		    DiscrError["Mapping"] = "mapping";
    		})(exports.DiscrError || (exports.DiscrError = {}));
    		
    } (types$7));
    	return types$7;
    }

    var hasRequiredDiscriminator;

    function requireDiscriminator () {
    	if (hasRequiredDiscriminator) return discriminator$2;
    	hasRequiredDiscriminator = 1;
    	Object.defineProperty(discriminator$2, "__esModule", { value: true });
    	const codegen_1 = requireCodegen$1();
    	const types_1 = requireTypes();
    	const compile_1 = requireCompile();
    	const util_1 = requireUtil();
    	const error = {
    	    message: ({ params: { discrError, tagName } }) => discrError === types_1.DiscrError.Tag
    	        ? `tag "${tagName}" must be string`
    	        : `value of tag "${tagName}" must be in oneOf`,
    	    params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
    	};
    	const def = {
    	    keyword: "discriminator",
    	    type: "object",
    	    schemaType: "object",
    	    error,
    	    code(cxt) {
    	        const { gen, data, schema, parentSchema, it } = cxt;
    	        const { oneOf } = parentSchema;
    	        if (!it.opts.discriminator) {
    	            throw new Error("discriminator: requires discriminator option");
    	        }
    	        const tagName = schema.propertyName;
    	        if (typeof tagName != "string")
    	            throw new Error("discriminator: requires propertyName");
    	        if (schema.mapping)
    	            throw new Error("discriminator: mapping is not supported");
    	        if (!oneOf)
    	            throw new Error("discriminator: requires oneOf keyword");
    	        const valid = gen.let("valid", false);
    	        const tag = gen.const("tag", (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(tagName)}`);
    	        gen.if((0, codegen_1._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1.DiscrError.Tag, tag, tagName }));
    	        cxt.ok(valid);
    	        function validateMapping() {
    	            const mapping = getMapping();
    	            gen.if(false);
    	            for (const tagValue in mapping) {
    	                gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);
    	                gen.assign(valid, applyTagSchema(mapping[tagValue]));
    	            }
    	            gen.else();
    	            cxt.error(false, { discrError: types_1.DiscrError.Mapping, tag, tagName });
    	            gen.endIf();
    	        }
    	        function applyTagSchema(schemaProp) {
    	            const _valid = gen.name("valid");
    	            const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
    	            cxt.mergeEvaluated(schCxt, codegen_1.Name);
    	            return _valid;
    	        }
    	        function getMapping() {
    	            var _a;
    	            const oneOfMapping = {};
    	            const topRequired = hasRequired(parentSchema);
    	            let tagRequired = true;
    	            for (let i = 0; i < oneOf.length; i++) {
    	                let sch = oneOf[i];
    	                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
    	                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
    	                    if (sch instanceof compile_1.SchemaEnv)
    	                        sch = sch.schema;
    	                }
    	                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
    	                if (typeof propSch != "object") {
    	                    throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
    	                }
    	                tagRequired = tagRequired && (topRequired || hasRequired(sch));
    	                addMappings(propSch, i);
    	            }
    	            if (!tagRequired)
    	                throw new Error(`discriminator: "${tagName}" must be required`);
    	            return oneOfMapping;
    	            function hasRequired({ required }) {
    	                return Array.isArray(required) && required.includes(tagName);
    	            }
    	            function addMappings(sch, i) {
    	                if (sch.const) {
    	                    addMapping(sch.const, i);
    	                }
    	                else if (sch.enum) {
    	                    for (const tagValue of sch.enum) {
    	                        addMapping(tagValue, i);
    	                    }
    	                }
    	                else {
    	                    throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
    	                }
    	            }
    	            function addMapping(tagValue, i) {
    	                if (typeof tagValue != "string" || tagValue in oneOfMapping) {
    	                    throw new Error(`discriminator: "${tagName}" values must be unique strings`);
    	                }
    	                oneOfMapping[tagValue] = i;
    	            }
    	        }
    	    },
    	};
    	discriminator$2.default = def;
    	
    	return discriminator$2;
    }

    var $schema$1 = "http://json-schema.org/draft-07/schema#";
    var $id$2 = "http://json-schema.org/draft-07/schema#";
    var title$1 = "Core schema meta-schema";
    var definitions$1 = {
    	schemaArray: {
    		type: "array",
    		minItems: 1,
    		items: {
    			$ref: "#"
    		}
    	},
    	nonNegativeInteger: {
    		type: "integer",
    		minimum: 0
    	},
    	nonNegativeIntegerDefault0: {
    		allOf: [
    			{
    				$ref: "#/definitions/nonNegativeInteger"
    			},
    			{
    				"default": 0
    			}
    		]
    	},
    	simpleTypes: {
    		"enum": [
    			"array",
    			"boolean",
    			"integer",
    			"null",
    			"number",
    			"object",
    			"string"
    		]
    	},
    	stringArray: {
    		type: "array",
    		items: {
    			type: "string"
    		},
    		uniqueItems: true,
    		"default": [
    		]
    	}
    };
    var type$3 = [
    	"object",
    	"boolean"
    ];
    var properties$4 = {
    	$id: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$schema: {
    		type: "string",
    		format: "uri"
    	},
    	$ref: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$comment: {
    		type: "string"
    	},
    	title: {
    		type: "string"
    	},
    	description: {
    		type: "string"
    	},
    	"default": true,
    	readOnly: {
    		type: "boolean",
    		"default": false
    	},
    	examples: {
    		type: "array",
    		items: true
    	},
    	multipleOf: {
    		type: "number",
    		exclusiveMinimum: 0
    	},
    	maximum: {
    		type: "number"
    	},
    	exclusiveMaximum: {
    		type: "number"
    	},
    	minimum: {
    		type: "number"
    	},
    	exclusiveMinimum: {
    		type: "number"
    	},
    	maxLength: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minLength: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	pattern: {
    		type: "string",
    		format: "regex"
    	},
    	additionalItems: {
    		$ref: "#"
    	},
    	items: {
    		anyOf: [
    			{
    				$ref: "#"
    			},
    			{
    				$ref: "#/definitions/schemaArray"
    			}
    		],
    		"default": true
    	},
    	maxItems: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minItems: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	uniqueItems: {
    		type: "boolean",
    		"default": false
    	},
    	contains: {
    		$ref: "#"
    	},
    	maxProperties: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minProperties: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	required: {
    		$ref: "#/definitions/stringArray"
    	},
    	additionalProperties: {
    		$ref: "#"
    	},
    	definitions: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	properties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	patternProperties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		propertyNames: {
    			format: "regex"
    		},
    		"default": {
    		}
    	},
    	dependencies: {
    		type: "object",
    		additionalProperties: {
    			anyOf: [
    				{
    					$ref: "#"
    				},
    				{
    					$ref: "#/definitions/stringArray"
    				}
    			]
    		}
    	},
    	propertyNames: {
    		$ref: "#"
    	},
    	"const": true,
    	"enum": {
    		type: "array",
    		items: true,
    		minItems: 1,
    		uniqueItems: true
    	},
    	type: {
    		anyOf: [
    			{
    				$ref: "#/definitions/simpleTypes"
    			},
    			{
    				type: "array",
    				items: {
    					$ref: "#/definitions/simpleTypes"
    				},
    				minItems: 1,
    				uniqueItems: true
    			}
    		]
    	},
    	format: {
    		type: "string"
    	},
    	contentMediaType: {
    		type: "string"
    	},
    	contentEncoding: {
    		type: "string"
    	},
    	"if": {
    		$ref: "#"
    	},
    	then: {
    		$ref: "#"
    	},
    	"else": {
    		$ref: "#"
    	},
    	allOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	anyOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	oneOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	not: {
    		$ref: "#"
    	}
    };
    var require$$3$1 = {
    	$schema: $schema$1,
    	$id: $id$2,
    	title: title$1,
    	definitions: definitions$1,
    	type: type$3,
    	properties: properties$4,
    	"default": true
    };

    var hasRequiredAjv;

    function requireAjv () {
    	if (hasRequiredAjv) return ajvExports$1;
    	hasRequiredAjv = 1;
    	(function (module, exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    		const core_1 = requireCore$1();
    		const draft7_1 = requireDraft7();
    		const discriminator_1 = requireDiscriminator();
    		const draft7MetaSchema = require$$3$1;
    		const META_SUPPORT_DATA = ["/properties"];
    		const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    		class Ajv extends core_1.default {
    		    _addVocabularies() {
    		        super._addVocabularies();
    		        draft7_1.default.forEach((v) => this.addVocabulary(v));
    		        if (this.opts.discriminator)
    		            this.addKeyword(discriminator_1.default);
    		    }
    		    _addDefaultMetaSchema() {
    		        super._addDefaultMetaSchema();
    		        if (!this.opts.meta)
    		            return;
    		        const metaSchema = this.opts.$data
    		            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
    		            : draft7MetaSchema;
    		        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
    		        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    		    }
    		    defaultMeta() {
    		        return (this.opts.defaultMeta =
    		            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    		    }
    		}
    		module.exports = exports = Ajv;
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.default = Ajv;
    		var validate_1 = requireValidate$1();
    		Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    		var codegen_1 = requireCodegen$1();
    		Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    		Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    		Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    		Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    		Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    		Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    		var validation_error_1 = requireValidation_error$1();
    		Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return validation_error_1.default; } });
    		var ref_error_1 = requireRef_error$1();
    		Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function () { return ref_error_1.default; } });
    		
    } (ajv$1, ajvExports$1));
    	return ajvExports$1;
    }

    var hasRequiredLimit;

    function requireLimit () {
    	if (hasRequiredLimit) return limit;
    	hasRequiredLimit = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.formatLimitDefinition = void 0;
    		const ajv_1 = requireAjv();
    		const codegen_1 = requireCodegen$1();
    		const ops = codegen_1.operators;
    		const KWDs = {
    		    formatMaximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
    		    formatMinimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
    		    formatExclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
    		    formatExclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
    		};
    		const error = {
    		    message: ({ keyword, schemaCode }) => codegen_1.str `should be ${KWDs[keyword].okStr} ${schemaCode}`,
    		    params: ({ keyword, schemaCode }) => codegen_1._ `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
    		};
    		exports.formatLimitDefinition = {
    		    keyword: Object.keys(KWDs),
    		    type: "string",
    		    schemaType: "string",
    		    $data: true,
    		    error,
    		    code(cxt) {
    		        const { gen, data, schemaCode, keyword, it } = cxt;
    		        const { opts, self } = it;
    		        if (!opts.validateFormats)
    		            return;
    		        const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, "format");
    		        if (fCxt.$data)
    		            validate$DataFormat();
    		        else
    		            validateFormat();
    		        function validate$DataFormat() {
    		            const fmts = gen.scopeValue("formats", {
    		                ref: self.formats,
    		                code: opts.code.formats,
    		            });
    		            const fmt = gen.const("fmt", codegen_1._ `${fmts}[${fCxt.schemaCode}]`);
    		            cxt.fail$data(codegen_1.or(codegen_1._ `typeof ${fmt} != "object"`, codegen_1._ `${fmt} instanceof RegExp`, codegen_1._ `typeof ${fmt}.compare != "function"`, compareCode(fmt)));
    		        }
    		        function validateFormat() {
    		            const format = fCxt.schema;
    		            const fmtDef = self.formats[format];
    		            if (!fmtDef || fmtDef === true)
    		                return;
    		            if (typeof fmtDef != "object" ||
    		                fmtDef instanceof RegExp ||
    		                typeof fmtDef.compare != "function") {
    		                throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
    		            }
    		            const fmt = gen.scopeValue("formats", {
    		                key: format,
    		                ref: fmtDef,
    		                code: opts.code.formats ? codegen_1._ `${opts.code.formats}${codegen_1.getProperty(format)}` : undefined,
    		            });
    		            cxt.fail$data(compareCode(fmt));
    		        }
    		        function compareCode(fmt) {
    		            return codegen_1._ `${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
    		        }
    		    },
    		    dependencies: ["format"],
    		};
    		const formatLimitPlugin = (ajv) => {
    		    ajv.addKeyword(exports.formatLimitDefinition);
    		    return ajv;
    		};
    		exports.default = formatLimitPlugin;
    		
    } (limit));
    	return limit;
    }

    var hasRequiredDist;

    function requireDist () {
    	if (hasRequiredDist) return distExports;
    	hasRequiredDist = 1;
    	(function (module, exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		const formats_1 = formats;
    		const limit_1 = requireLimit();
    		const codegen_1 = requireCodegen$1();
    		const fullName = new codegen_1.Name("fullFormats");
    		const fastName = new codegen_1.Name("fastFormats");
    		const formatsPlugin = (ajv, opts = { keywords: true }) => {
    		    if (Array.isArray(opts)) {
    		        addFormats(ajv, opts, formats_1.fullFormats, fullName);
    		        return ajv;
    		    }
    		    const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
    		    const list = opts.formats || formats_1.formatNames;
    		    addFormats(ajv, list, formats, exportName);
    		    if (opts.keywords)
    		        limit_1.default(ajv);
    		    return ajv;
    		};
    		formatsPlugin.get = (name, mode = "full") => {
    		    const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
    		    const f = formats[name];
    		    if (!f)
    		        throw new Error(`Unknown format "${name}"`);
    		    return f;
    		};
    		function addFormats(ajv, list, fs, exportName) {
    		    var _a;
    		    var _b;
    		    (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : (_b.formats = codegen_1._ `require("ajv-formats/dist/formats").${exportName}`);
    		    for (const f of list)
    		        ajv.addFormat(f, fs[f]);
    		}
    		module.exports = exports = formatsPlugin;
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.default = formatsPlugin;
    		
    } (dist, distExports));
    	return distExports;
    }

    const Ajv$1 = ajvExports$2;
    const fastUri$1 = fastUriExports;
    const ajvFormats = requireDist();
    const clone$1 = rfdc_1({ proto: true });

    let Validator$1 = class Validator {
      constructor (ajvOptions) {
        this.ajv = new Ajv$1({
          ...ajvOptions,
          strictSchema: false,
          validateSchema: false,
          allowUnionTypes: true,
          uriResolver: fastUri$1
        });

        ajvFormats(this.ajv);

        this.ajv.addKeyword({
          keyword: 'fjs_type',
          type: 'object',
          errors: false,
          validate: (type, date) => {
            return date instanceof Date
          }
        });
      }

      addSchema (schema, schemaName) {
        let schemaKey = schema.$id || schemaName;
        if (schema.$id !== undefined && schema.$id[0] === '#') {
          schemaKey = schemaName + schema.$id; // relative URI
        }

        if (
          this.ajv.refs[schemaKey] === undefined &&
          this.ajv.schemas[schemaKey] === undefined
        ) {
          const ajvSchema = clone$1(schema);
          this.convertSchemaToAjvFormat(ajvSchema);
          this.ajv.addSchema(ajvSchema, schemaKey);
        }
      }

      validate (schemaRef, data) {
        return this.ajv.validate(schemaRef, data)
      }

      // Ajv does not support js date format. In order to properly validate objects containing a date,
      // it needs to replace all occurrences of the string date format with a custom keyword fjs_type.
      // (see https://github.com/fastify/fast-json-stringify/pull/441)
      convertSchemaToAjvFormat (schema) {
        if (schema === null) return

        if (schema.type === 'string') {
          schema.fjs_type = 'string';
          schema.type = ['string', 'object'];
        } else if (
          Array.isArray(schema.type) &&
          schema.type.includes('string') &&
          !schema.type.includes('object')
        ) {
          schema.fjs_type = 'string';
          schema.type.push('object');
        }
        for (const property in schema) {
          if (typeof schema[property] === 'object') {
            this.convertSchemaToAjvFormat(schema[property]);
          }
        }
      }
    };

    var validator = Validator$1;

    const deepEqual$1 = fastDeepEqual;

    let RefResolver$1 = class RefResolver {
      constructor () {
        this.schemas = {};
      }

      addSchema (schema, schemaId) {
        if (schema.$id !== undefined && schema.$id.charAt(0) !== '#') {
          schemaId = schema.$id;
        }
        if (this.getSchema(schemaId) === undefined) {
          this.insertSchemaBySchemaId(schema, schemaId);
          this.insertSchemaSubschemas(schema, schemaId);
        }
      }

      getSchema (schemaId, jsonPointer = '#') {
        const schema = this.schemas[schemaId];
        if (schema === undefined) {
          return undefined
        }
        if (schema.anchors[jsonPointer] !== undefined) {
          return schema.anchors[jsonPointer]
        }
        return getDataByJSONPointer(schema.schema, jsonPointer)
      }

      getSchemaDependencies (schemaId, dependencies = {}) {
        const schema = this.schemas[schemaId];

        for (const dependencySchemaId of schema.dependencies) {
          if (dependencies[dependencySchemaId] !== undefined) continue
          dependencies[dependencySchemaId] = this.getSchema(dependencySchemaId);
          this.getSchemaDependencies(dependencySchemaId, dependencies);
        }

        return dependencies
      }

      insertSchemaBySchemaId (schema, schemaId) {
        if (
          this.schemas[schemaId] !== undefined &&
          !deepEqual$1(schema, this.schemas[schemaId].schema)
        ) {
          throw new Error(`There is already another schema with id ${schemaId}`)
        }
        this.schemas[schemaId] = { schema, anchors: {}, dependencies: [] };
      }

      insertSchemaByAnchor (schema, schemaId, anchor) {
        const { anchors } = this.schemas[schemaId];
        if (
          anchors[anchor] !== undefined &&
          !deepEqual$1(schema, anchors[anchor])
        ) {
          throw new Error(`There is already another schema with id ${schemaId}#${anchor}`)
        }
        anchors[anchor] = schema;
      }

      insertSchemaSubschemas (schema, rootSchemaId) {
        const schemaId = schema.$id;
        if (schemaId !== undefined && typeof schemaId === 'string') {
          if (schemaId.charAt(0) === '#') {
            this.insertSchemaByAnchor(schema, rootSchemaId, schemaId);
          } else {
            this.insertSchemaBySchemaId(schema, schemaId);
            rootSchemaId = schemaId;
          }
        }

        const ref = schema.$ref;
        if (ref !== undefined && typeof ref === 'string') {
          if (ref.charAt(0) !== '#') {
            const dependencySchemaId = ref.split('#')[0];
            this.schemas[rootSchemaId].dependencies.push(dependencySchemaId);
          }
        }

        for (const key in schema) {
          if (typeof schema[key] === 'object' && schema[key] !== null) {
            this.insertSchemaSubschemas(schema[key], rootSchemaId);
          }
        }
      }
    };

    function getDataByJSONPointer (data, jsonPointer) {
      const parts = jsonPointer.split('/');
      let current = data;
      for (const part of parts) {
        if (part === '' || part === '#') continue
        if (typeof current !== 'object' || current === null) {
          return undefined
        }
        current = current[part];
      }
      return current
    }

    var refResolver$1 = RefResolver$1;

    let Location$1 = class Location {
      constructor (schema, schemaId, jsonPointer = '#') {
        this.schema = schema;
        this.schemaId = schemaId;
        this.jsonPointer = jsonPointer;
        this.mergedSchemaId = null;
      }

      getPropertyLocation (propertyName) {
        const propertyLocation = new Location(
          this.schema[propertyName],
          this.schemaId,
          this.jsonPointer + '/' + propertyName
        );

        if (this.mergedSchemaId !== null) {
          propertyLocation.addMergedSchema(
            this.schema[propertyName],
            this.mergedSchemaId,
            this.jsonPointer + '/' + propertyName
          );
        }

        return propertyLocation
      }

      // Use this method to get current schema location.
      // Use it when you need to create reference to the current location.
      getSchemaId () {
        return this.mergedSchemaId || this.schemaId
      }

      // Use this method to get original schema id for resolving user schema $refs
      // Don't join it with a JSON pointer to get the current location.
      getOriginSchemaId () {
        return this.schemaId
      }

      getSchemaRef () {
        const schemaId = this.getSchemaId();
        return schemaId + this.jsonPointer
      }

      addMergedSchema (mergedSchema, schemaId, jsonPointer = '#') {
        this.schema = mergedSchema;
        this.mergedSchemaId = schemaId;
        this.jsonPointer = jsonPointer;
      }
    };

    var location = Location$1;

    var standalone$3;
    var hasRequiredStandalone$2;

    function requireStandalone$2 () {
    	if (hasRequiredStandalone$2) return standalone$3;
    	hasRequiredStandalone$2 = 1;
    	const fs = require$$0$4;
    	const path = require$$3$3;

    	function buildStandaloneCode (options, validator, isValidatorUsed, contextFunctionCode) {
    	  const serializerCode = fs.readFileSync(path.join(__dirname, 'serializer.js')).toString();
    	  let buildAjvCode = '';
    	  let ajvSchemasCode = '';

    	  if (isValidatorUsed) {
    	    let defaultAjvSchema = '';
    	    // we need to export the custom json schema
    	    const defaultMeta = validator.ajv.defaultMeta();
    	    if (typeof defaultMeta === 'string') {
    	      defaultAjvSchema = defaultMeta;
    	    } else {
    	      defaultAjvSchema = defaultMeta.$id || defaultMeta.id;
    	    }

    	    ajvSchemasCode += `const validator = new Validator(${JSON.stringify(options.ajv || {})})\n`;
    	    for (const [id, schema] of Object.entries(validator.ajv.schemas)) {
    	      // should skip ajv default schema
    	      if (id === defaultAjvSchema) continue
    	      ajvSchemasCode += `validator.ajv.addSchema(${JSON.stringify(schema.schema)}, "${id}")\n`;
    	    }
    	    buildAjvCode = fs.readFileSync(path.join(__dirname, 'validator.js')).toString();
    	    buildAjvCode = buildAjvCode.replace("'use strict'", '').replace('module.exports = SchemaValidator', '');
    	  }
    	  return `
  'use strict'

  ${serializerCode.replace("'use strict'", '').replace('module.exports = ', '')}
  ${buildAjvCode}

  const serializer = new Serializer(${JSON.stringify(options || {})})
  ${ajvSchemasCode}

  ${contextFunctionCode.replace('return main', '')}

  module.exports = main
      `
    	}

    	standalone$3 = buildStandaloneCode;
    	return standalone$3;
    }

    /* eslint no-prototype-builtins: 0 */

    const merge = deepmergeExports();
    const clone = rfdc_1({ proto: true });
    const { randomUUID } = require$$2$3;

    const validate$3 = schemaValidatorExports;
    const Serializer = serializer;
    const Validator = validator;
    const RefResolver = refResolver$1;
    const Location = location;

    let largeArraySize = 2e4;
    let largeArrayMechanism = 'default';
    const validLargeArrayMechanisms = [
      'default',
      'json-stringify'
    ];

    const addComma$1 = `
  if (addComma) {
    json += ','
  } else {
    addComma = true
  }
`;

    function isValidSchema (schema, name) {
      if (!validate$3(schema)) {
        if (name) {
          name = `"${name}" `;
        } else {
          name = '';
        }
        const first = validate$3.errors[0];
        const err = new Error(`${name}schema is invalid: data${first.instancePath} ${first.message}`);
        err.errors = isValidSchema.errors;
        throw err
      }
    }

    function resolveRef$1 (location, ref) {
      let hashIndex = ref.indexOf('#');
      if (hashIndex === -1) {
        hashIndex = ref.length;
      }

      const schemaId = ref.slice(0, hashIndex) || location.getOriginSchemaId();
      const jsonPointer = ref.slice(hashIndex) || '#';

      const schema = refResolver.getSchema(schemaId, jsonPointer);

      if (schema === undefined) {
        throw new Error(`Cannot find reference "${ref}"`)
      }

      const newLocation = new Location(schema, schemaId, jsonPointer);
      if (schema.$ref !== undefined) {
        return resolveRef$1(newLocation, schema.$ref)
      }

      return newLocation
    }

    const contextFunctionsNamesBySchema = new Map();

    let rootSchemaId = null;
    let refResolver = null;
    let contextFunctions = null;
    let validatorSchemasIds = null;

    function build (schema, options) {
      contextFunctionsNamesBySchema.clear();

      contextFunctions = [];
      validatorSchemasIds = new Set();
      options = options || {};

      refResolver = new RefResolver();

      rootSchemaId = schema.$id || randomUUID();

      isValidSchema(schema);
      refResolver.addSchema(schema, rootSchemaId);

      if (options.schema) {
        for (const key of Object.keys(options.schema)) {
          isValidSchema(options.schema[key], key);
          refResolver.addSchema(options.schema[key], key);
        }
      }

      if (options.rounding) {
        if (!['floor', 'ceil', 'round'].includes(options.rounding)) {
          throw new Error(`Unsupported integer rounding method ${options.rounding}`)
        }
      }

      if (options.largeArrayMechanism) {
        if (validLargeArrayMechanisms.includes(options.largeArrayMechanism)) {
          largeArrayMechanism = options.largeArrayMechanism;
        } else {
          throw new Error(`Unsupported large array mechanism ${options.largeArrayMechanism}`)
        }
      }

      if (options.largeArraySize) {
        if (!Number.isNaN(Number.parseInt(options.largeArraySize, 10))) {
          largeArraySize = options.largeArraySize;
        } else {
          throw new Error(`Unsupported large array size. Expected integer-like, got ${options.largeArraySize}`)
        }
      }

      const location = new Location(schema, rootSchemaId);
      const code = buildValue(location, 'input');

      const contextFunctionCode = `
    function main (input) {
      let json = ''
      ${code}
      return json
    }
    ${contextFunctions.join('\n')}
    return main
  `;

      const serializer = new Serializer(options);
      const validator = new Validator(options.ajv);

      for (const schemaId of validatorSchemasIds) {
        const schema = refResolver.getSchema(schemaId);
        validator.addSchema(schema, schemaId);

        const dependencies = refResolver.getSchemaDependencies(schemaId);
        for (const [schemaId, schema] of Object.entries(dependencies)) {
          validator.addSchema(schema, schemaId);
        }
      }

      const dependenciesName = ['validator', 'serializer', contextFunctionCode];

      if (options.debugMode) {
        options.mode = 'debug';
      }

      if (options.mode === 'debug') {
        return {
          validator,
          serializer,
          code: dependenciesName.join('\n'),
          ajv: validator.ajv
        }
      }

      if (options.mode === 'standalone') {
        // lazy load
        const isValidatorUsed = validatorSchemasIds.size > 0;
        const buildStandaloneCode = requireStandalone$2();
        return buildStandaloneCode(options, validator, isValidatorUsed, contextFunctionCode)
      }

      /* eslint no-new-func: "off" */
      const contextFunc = new Function('validator', 'serializer', contextFunctionCode);
      const stringifyFunc = contextFunc(validator, serializer);

      refResolver = null;
      rootSchemaId = null;
      contextFunctions = null;
      validatorSchemasIds = null;
      contextFunctionsNamesBySchema.clear();

      return stringifyFunc
    }

    const objectKeywords = [
      'maxProperties',
      'minProperties',
      'required',
      'properties',
      'patternProperties',
      'additionalProperties',
      'dependencies'
    ];

    const arrayKeywords = [
      'items',
      'additionalItems',
      'maxItems',
      'minItems',
      'uniqueItems',
      'contains'
    ];

    const stringKeywords = [
      'maxLength',
      'minLength',
      'pattern'
    ];

    const numberKeywords = [
      'multipleOf',
      'maximum',
      'exclusiveMaximum',
      'minimum',
      'exclusiveMinimum'
    ];

    /**
     * Infer type based on keyword in order to generate optimized code
     * https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6
     */
    function inferTypeByKeyword (schema) {
      // eslint-disable-next-line
      for (var keyword of objectKeywords) {
        if (keyword in schema) return 'object'
      }
      // eslint-disable-next-line
      for (var keyword of arrayKeywords) {
        if (keyword in schema) return 'array'
      }
      // eslint-disable-next-line
      for (var keyword of stringKeywords) {
        if (keyword in schema) return 'string'
      }
      // eslint-disable-next-line
      for (var keyword of numberKeywords) {
        if (keyword in schema) return 'number'
      }
      return schema.type
    }

    function buildExtraObjectPropertiesSerializer (location) {
      const schema = location.schema;
      const propertiesKeys = Object.keys(schema.properties || {});

      let code = `
    const propertiesKeys = ${JSON.stringify(propertiesKeys)}
    for (const [key, value] of Object.entries(obj)) {
      if (
        propertiesKeys.includes(key) ||
        value === undefined ||
        typeof value === 'function' ||
        typeof value === 'symbol'
      ) continue
  `;

      const patternPropertiesLocation = location.getPropertyLocation('patternProperties');
      const patternPropertiesSchema = patternPropertiesLocation.schema;

      if (patternPropertiesSchema !== undefined) {
        for (const propertyKey in patternPropertiesSchema) {
          const propertyLocation = patternPropertiesLocation.getPropertyLocation(propertyKey);

          try {
            RegExp(propertyKey);
          } catch (err) {
            const jsonPointer = propertyLocation.getSchemaRef();
            throw new Error(`${err.message}. Invalid pattern property regexp key ${propertyKey} at ${jsonPointer}`)
          }

          code += `
        if (/${propertyKey.replace(/\\*\//g, '\\/')}/.test(key)) {
          ${addComma$1}
          json += serializer.asString(key) + ':'
          ${buildValue(propertyLocation, 'value')}
          continue
        }
      `;
        }
      }

      const additionalPropertiesLocation = location.getPropertyLocation('additionalProperties');
      const additionalPropertiesSchema = additionalPropertiesLocation.schema;

      if (additionalPropertiesSchema !== undefined) {
        if (additionalPropertiesSchema === true) {
          code += `
        ${addComma$1}
        json += serializer.asString(key) + ':' + JSON.stringify(value)
      `;
        } else {
          const propertyLocation = location.getPropertyLocation('additionalProperties');
          code += `
        ${addComma$1}
        json += serializer.asString(key) + ':'
        ${buildValue(propertyLocation, 'value')}
      `;
        }
      }

      code += `
    }
  `;
      return code
    }

    function buildInnerObject (location) {
      const schema = location.schema;
      const required = schema.required || [];

      let code = '';

      const propertiesLocation = location.getPropertyLocation('properties');
      Object.keys(schema.properties || {}).forEach((key) => {
        let propertyLocation = propertiesLocation.getPropertyLocation(key);
        if (propertyLocation.schema.$ref) {
          propertyLocation = resolveRef$1(location, propertyLocation.schema.$ref);
        }

        const sanitized = JSON.stringify(key);
        const asString = JSON.stringify(sanitized);

        // Using obj['key'] !== undefined instead of obj.hasOwnProperty(prop) for perf reasons,
        // see https://github.com/mcollina/fast-json-stringify/pull/3 for discussion.

        code += `
      if (obj[${sanitized}] !== undefined) {
        ${addComma$1}
        json += ${asString} + ':'
      `;

        code += buildValue(propertyLocation, `obj[${JSON.stringify(key)}]`);

        const defaultValue = propertyLocation.schema.default;
        if (defaultValue !== undefined) {
          code += `
      } else {
        ${addComma$1}
        json += ${asString} + ':' + ${JSON.stringify(JSON.stringify(defaultValue))}
      `;
        } else if (required.includes(key)) {
          code += `
      } else {
        throw new Error('${sanitized} is required!')
      `;
        }

        code += `
      }
    `;
      });

      for (const requiredProperty of required) {
        if (schema.properties && schema.properties[requiredProperty] !== undefined) continue
        code += `if (obj['${requiredProperty}'] === undefined) throw new Error('"${requiredProperty}" is required!')\n`;
      }

      if (schema.patternProperties || schema.additionalProperties) {
        code += buildExtraObjectPropertiesSerializer(location);
      }

      return code
    }

    function mergeAllOfSchema (location, schema, mergedSchema) {
      const allOfLocation = location.getPropertyLocation('allOf');

      for (let i = 0; i < schema.allOf.length; i++) {
        let allOfSchema = schema.allOf[i];

        if (allOfSchema.$ref) {
          const allOfSchemaLocation = allOfLocation.getPropertyLocation(i);
          allOfSchema = resolveRef$1(allOfSchemaLocation, allOfSchema.$ref).schema;
        }

        let allOfSchemaType = allOfSchema.type;
        if (allOfSchemaType === undefined) {
          allOfSchemaType = inferTypeByKeyword(allOfSchema);
        }

        if (allOfSchemaType !== undefined) {
          if (
            mergedSchema.type !== undefined &&
            mergedSchema.type !== allOfSchemaType
          ) {
            throw new Error('allOf schemas have different type values')
          }
          mergedSchema.type = allOfSchemaType;
        }

        if (allOfSchema.format !== undefined) {
          if (
            mergedSchema.format !== undefined &&
            mergedSchema.format !== allOfSchema.format
          ) {
            throw new Error('allOf schemas have different format values')
          }
          mergedSchema.format = allOfSchema.format;
        }

        if (allOfSchema.nullable !== undefined) {
          if (
            mergedSchema.nullable !== undefined &&
            mergedSchema.nullable !== allOfSchema.nullable
          ) {
            throw new Error('allOf schemas have different nullable values')
          }
          mergedSchema.nullable = allOfSchema.nullable;
        }

        if (allOfSchema.properties !== undefined) {
          if (mergedSchema.properties === undefined) {
            mergedSchema.properties = {};
          }
          Object.assign(mergedSchema.properties, allOfSchema.properties);
        }

        if (allOfSchema.additionalProperties !== undefined) {
          if (mergedSchema.additionalProperties === undefined) {
            mergedSchema.additionalProperties = {};
          }
          Object.assign(mergedSchema.additionalProperties, allOfSchema.additionalProperties);
        }

        if (allOfSchema.patternProperties !== undefined) {
          if (mergedSchema.patternProperties === undefined) {
            mergedSchema.patternProperties = {};
          }
          Object.assign(mergedSchema.patternProperties, allOfSchema.patternProperties);
        }

        if (allOfSchema.required !== undefined) {
          if (mergedSchema.required === undefined) {
            mergedSchema.required = [];
          }
          mergedSchema.required.push(...allOfSchema.required);
        }

        if (allOfSchema.oneOf !== undefined) {
          if (mergedSchema.oneOf === undefined) {
            mergedSchema.oneOf = [];
          }
          mergedSchema.oneOf.push(...allOfSchema.oneOf);
        }

        if (allOfSchema.anyOf !== undefined) {
          if (mergedSchema.anyOf === undefined) {
            mergedSchema.anyOf = [];
          }
          mergedSchema.anyOf.push(...allOfSchema.anyOf);
        }

        if (allOfSchema.allOf !== undefined) {
          mergeAllOfSchema(location, allOfSchema, mergedSchema);
        }
      }
      delete mergedSchema.allOf;

      mergedSchema.$id = `merged_${randomUUID()}`;
      refResolver.addSchema(mergedSchema);
      location.addMergedSchema(mergedSchema, mergedSchema.$id);
    }

    function addIfThenElse (location, input) {
      validatorSchemasIds.add(location.getSchemaId());

      const schema = merge({}, location.schema);
      const thenSchema = schema.then;
      const elseSchema = schema.else || { additionalProperties: true };

      delete schema.if;
      delete schema.then;
      delete schema.else;

      const ifLocation = location.getPropertyLocation('if');
      const ifSchemaRef = ifLocation.getSchemaRef();

      const thenLocation = location.getPropertyLocation('then');
      thenLocation.schema = merge(schema, thenSchema);

      const elseLocation = location.getPropertyLocation('else');
      elseLocation.schema = merge(schema, elseSchema);

      return `
    if (validator.validate("${ifSchemaRef}", ${input})) {
      ${buildValue(thenLocation, input)}
    } else {
      ${buildValue(elseLocation, input)}
    }
  `
    }

    function toJSON (variableName) {
      return `(${variableName} && typeof ${variableName}.toJSON === 'function')
    ? ${variableName}.toJSON()
    : ${variableName}
  `
    }

    function buildObject (location) {
      const schema = location.schema;

      if (contextFunctionsNamesBySchema.has(schema)) {
        return contextFunctionsNamesBySchema.get(schema)
      }

      const functionName = generateFuncName();
      contextFunctionsNamesBySchema.set(schema, functionName);

      let schemaRef = location.getSchemaRef();
      if (schemaRef.startsWith(rootSchemaId)) {
        schemaRef = schemaRef.replace(rootSchemaId, '');
      }

      let functionCode = `
    function ${functionName} (input) {
      // ${schemaRef}
  `;

      functionCode += `
      var obj = ${toJSON('input')}
      var json = '{'
      var addComma = false
  `;

      functionCode += buildInnerObject(location);
      functionCode += `
      json += '}'
      return json
    }
  `;

      contextFunctions.push(functionCode);
      return functionName
    }

    function buildArray (location) {
      const schema = location.schema;

      let itemsLocation = location.getPropertyLocation('items');
      itemsLocation.schema = itemsLocation.schema || {};

      if (itemsLocation.schema.$ref) {
        itemsLocation = resolveRef$1(itemsLocation, itemsLocation.schema.$ref);
      }

      const itemsSchema = itemsLocation.schema;

      if (contextFunctionsNamesBySchema.has(schema)) {
        return contextFunctionsNamesBySchema.get(schema)
      }

      const functionName = generateFuncName();
      contextFunctionsNamesBySchema.set(schema, functionName);

      let schemaRef = location.getSchemaRef();
      if (schemaRef.startsWith(rootSchemaId)) {
        schemaRef = schemaRef.replace(rootSchemaId, '');
      }

      let functionCode = `
    function ${functionName} (obj) {
      // ${schemaRef}
  `;

      functionCode += `
    if (!Array.isArray(obj)) {
      throw new TypeError(\`The value '$\{obj}' does not match schema definition.\`)
    }
    const arrayLength = obj.length
  `;

      if (!schema.additionalItems) {
        functionCode += `
      if (arrayLength > ${itemsSchema.length}) {
        throw new Error(\`Item at ${itemsSchema.length} does not match schema definition.\`)
      }
    `;
      }

      if (largeArrayMechanism !== 'default') {
        if (largeArrayMechanism === 'json-stringify') {
          functionCode += `if (arrayLength && arrayLength >= ${largeArraySize}) return JSON.stringify(obj)\n`;
        } else {
          throw new Error(`Unsupported large array mechanism ${largeArrayMechanism}`)
        }
      }

      functionCode += `
    let jsonOutput = ''
  `;

      if (Array.isArray(itemsSchema)) {
        for (let i = 0; i < itemsSchema.length; i++) {
          const item = itemsSchema[i];
          const tmpRes = buildValue(itemsLocation.getPropertyLocation(i), `obj[${i}]`);
          functionCode += `
        if (${i} < arrayLength) {
          if (${buildArrayTypeCondition(item.type, `[${i}]`)}) {
            let json = ''
            ${tmpRes}
            jsonOutput += json
            if (${i} < arrayLength - 1) {
              jsonOutput += ','
            }
          } else {
            throw new Error(\`Item at ${i} does not match schema definition.\`)
          }
        }
        `;
        }

        if (schema.additionalItems) {
          functionCode += `
        for (let i = ${itemsSchema.length}; i < arrayLength; i++) {
          let json = JSON.stringify(obj[i])
          jsonOutput += json
          if (i < arrayLength - 1) {
            jsonOutput += ','
          }
        }`;
        }
      } else {
        const code = buildValue(itemsLocation, 'obj[i]');
        functionCode += `
      for (let i = 0; i < arrayLength; i++) {
        let json = ''
        ${code}
        jsonOutput += json
        if (i < arrayLength - 1) {
          jsonOutput += ','
        }
      }`;
      }

      functionCode += `
    return \`[\${jsonOutput}]\`
  }`;

      contextFunctions.push(functionCode);
      return functionName
    }

    function buildArrayTypeCondition (type, accessor) {
      let condition;
      switch (type) {
        case 'null':
          condition = `obj${accessor} === null`;
          break
        case 'string':
          condition = `typeof obj${accessor} === 'string'`;
          break
        case 'integer':
          condition = `Number.isInteger(obj${accessor})`;
          break
        case 'number':
          condition = `Number.isFinite(obj${accessor})`;
          break
        case 'boolean':
          condition = `typeof obj${accessor} === 'boolean'`;
          break
        case 'object':
          condition = `obj${accessor} && typeof obj${accessor} === 'object' && obj${accessor}.constructor === Object`;
          break
        case 'array':
          condition = `Array.isArray(obj${accessor})`;
          break
        default:
          if (Array.isArray(type)) {
            const conditions = type.map((subType) => {
              return buildArrayTypeCondition(subType, accessor)
            });
            condition = `(${conditions.join(' || ')})`;
          } else {
            throw new Error(`${type} unsupported`)
          }
      }
      return condition
    }

    let genFuncNameCounter = 0;
    function generateFuncName () {
      return 'anonymous' + genFuncNameCounter++
    }

    function buildMultiTypeSerializer (location, input) {
      const schema = location.schema;
      const types = schema.type.sort(t1 => t1 === 'null' ? -1 : 1);

      let code = '';

      types.forEach((type, index) => {
        location.schema = { ...location.schema, type };
        const nestedResult = buildSingleTypeSerializer(location, input);

        const statement = index === 0 ? 'if' : 'else if';
        switch (type) {
          case 'null':
            code += `
          ${statement} (${input} === null)
            ${nestedResult}
          `;
            break
          case 'string': {
            code += `
          ${statement}(
            typeof ${input} === "string" ||
            ${input} === null ||
            ${input} instanceof Date ||
            ${input} instanceof RegExp ||
            (
              typeof ${input} === "object" &&
              typeof ${input}.toString === "function" &&
              ${input}.toString !== Object.prototype.toString &&
              !(${input} instanceof Date)
            )
          )
            ${nestedResult}
        `;
            break
          }
          case 'array': {
            code += `
          ${statement}(Array.isArray(${input}))
            ${nestedResult}
        `;
            break
          }
          case 'integer': {
            code += `
          ${statement}(Number.isInteger(${input}) || ${input} === null)
            ${nestedResult}
        `;
            break
          }
          default: {
            code += `
          ${statement}(typeof ${input} === "${type}" || ${input} === null)
            ${nestedResult}
        `;
            break
          }
        }
      });
      code += `
    else throw new Error(\`The value $\{JSON.stringify(${input})} does not match schema definition.\`)
  `;

      return code
    }

    function buildSingleTypeSerializer (location, input) {
      const schema = location.schema;

      switch (schema.type) {
        case 'null':
          return 'json += \'null\''
        case 'string': {
          if (schema.format === 'date-time') {
            return `json += serializer.asDateTime(${input})`
          } else if (schema.format === 'date') {
            return `json += serializer.asDate(${input})`
          } else if (schema.format === 'time') {
            return `json += serializer.asTime(${input})`
          } else {
            return `json += serializer.asString(${input})`
          }
        }
        case 'integer':
          return `json += serializer.asInteger(${input})`
        case 'number':
          return `json += serializer.asNumber(${input})`
        case 'boolean':
          return `json += serializer.asBoolean(${input})`
        case 'object': {
          const funcName = buildObject(location);
          return `json += ${funcName}(${input})`
        }
        case 'array': {
          const funcName = buildArray(location);
          return `json += ${funcName}(${input})`
        }
        case undefined:
          return `json += JSON.stringify(${input})`
        default:
          throw new Error(`${schema.type} unsupported`)
      }
    }

    function buildConstSerializer (location, input) {
      const schema = location.schema;
      const type = schema.type;

      const hasNullType = Array.isArray(type) && type.includes('null');

      let code = '';

      if (hasNullType) {
        code += `
      if (${input} === null) {
        json += 'null'
      } else {
    `;
      }

      code += `json += '${JSON.stringify(schema.const)}'`;

      if (hasNullType) {
        code += `
      }
    `;
      }

      return code
    }

    function buildValue (location, input) {
      let schema = location.schema;

      if (typeof schema === 'boolean') {
        return `json += JSON.stringify(${input})`
      }

      if (schema.$ref) {
        location = resolveRef$1(location, schema.$ref);
        schema = location.schema;
      }

      if (schema.type === undefined) {
        const inferredType = inferTypeByKeyword(schema);
        if (inferredType) {
          schema.type = inferredType;
        }
      }

      if (schema.if && schema.then) {
        return addIfThenElse(location, input)
      }

      if (schema.allOf) {
        mergeAllOfSchema(location, schema, clone(schema));
        schema = location.schema;
      }

      const type = schema.type;

      let code = '';

      if (type === undefined && (schema.anyOf || schema.oneOf)) {
        validatorSchemasIds.add(location.getSchemaId());

        const type = schema.anyOf ? 'anyOf' : 'oneOf';
        const anyOfLocation = location.getPropertyLocation(type);

        for (let index = 0; index < location.schema[type].length; index++) {
          const optionLocation = anyOfLocation.getPropertyLocation(index);
          const schemaRef = optionLocation.getSchemaRef();
          const nestedResult = buildValue(optionLocation, input);
          code += `
        ${index === 0 ? 'if' : 'else if'}(validator.validate("${schemaRef}", ${input}))
          ${nestedResult}
      `;
        }

        code += `
      else throw new Error(\`The value $\{JSON.stringify(${input})} does not match schema definition.\`)
    `;
        return code
      }

      const nullable = schema.nullable === true;
      if (nullable) {
        code += `
      if (${input} === null) {
        json += 'null'
      } else {
    `;
      }

      if (schema.const !== undefined) {
        code += buildConstSerializer(location, input);
      } else if (Array.isArray(type)) {
        code += buildMultiTypeSerializer(location, input);
      } else {
        code += buildSingleTypeSerializer(location, input);
      }

      if (nullable) {
        code += `
      }
    `;
      }

      return code
    }

    fastJsonStringify.exports = build;
    fastJsonStringifyExports.default = build;
    fastJsonStringifyExports.build = build;

    fastJsonStringifyExports.validLargeArrayMechanisms = validLargeArrayMechanisms;

    fastJsonStringifyExports.restore = function ({ code, validator, serializer }) {
      // eslint-disable-next-line
      return (Function.apply(null, ['validator', 'serializer', code])
        .apply(null, [validator, serializer]))
    };

    var standaloneExports$1 = {};
    var standalone$2 = {
      get exports(){ return standaloneExports$1; },
      set exports(v){ standaloneExports$1 = v; },
    };

    var hasRequiredStandalone$1;

    function requireStandalone$1 () {
    	if (hasRequiredStandalone$1) return standaloneExports$1;
    	hasRequiredStandalone$1 = 1;

    	const SerializerSelector = requireFastJsonStringifyCompiler();

    	function StandaloneSerializer (options = { readMode: true }) {
    	  if (options.readMode === true && typeof options.restoreFunction !== 'function') {
    	    throw new Error('You must provide a function for the restoreFunction-option when readMode ON')
    	  }

    	  if (options.readMode !== true && typeof options.storeFunction !== 'function') {
    	    throw new Error('You must provide a function for the storeFunction-option when readMode OFF')
    	  }

    	  if (options.readMode === true) {
    	    // READ MODE: it behalf only in the restore function provided by the user
    	    return function wrapper () {
    	      return function (opts) {
    	        return options.restoreFunction(opts)
    	      }
    	    }
    	  }

    	  // WRITE MODE: it behalf on the default SerializerSelector, wrapping the API to run the Ajv Standalone code generation
    	  const factory = SerializerSelector();
    	  return function wrapper (externalSchemas, serializerOpts = {}) {
    	    // to generate the serialization source code, this option is mandatory
    	    serializerOpts.mode = 'standalone';

    	    const compiler = factory(externalSchemas, serializerOpts);
    	    return function (opts) { // { schema/*, method, url, httpPart */ }
    	      const serializeFuncCode = compiler(opts);

    	      options.storeFunction(opts, serializeFuncCode);

    	      // eslint-disable-next-line no-new-func
    	      return new Function(serializeFuncCode)
    	    }
    	  }
    	}

    	standalone$2.exports = StandaloneSerializer;
    	standaloneExports$1.default = StandaloneSerializer;
    	return standaloneExports$1;
    }

    var hasRequiredFastJsonStringifyCompiler;

    function requireFastJsonStringifyCompiler () {
    	if (hasRequiredFastJsonStringifyCompiler) return fastJsonStringifyCompilerExports;
    	hasRequiredFastJsonStringifyCompiler = 1;

    	const fastJsonStringify = fastJsonStringifyExports;

    	function SerializerSelector () {
    	  return function buildSerializerFactory (externalSchemas, serializerOpts) {
    	    const fjsOpts = Object.assign({}, serializerOpts, { schema: externalSchemas });
    	    return responseSchemaCompiler.bind(null, fjsOpts)
    	  }
    	}

    	function responseSchemaCompiler (fjsOpts, { schema /* method, url, httpStatus */ }) {
    	  if (fjsOpts.schema && schema.$id && fjsOpts.schema[schema.$id]) {
    	    fjsOpts.schema = { ...fjsOpts.schema };
    	    delete fjsOpts.schema[schema.$id];
    	  }
    	  return fastJsonStringify(schema, fjsOpts)
    	}

    	fastJsonStringifyCompiler.exports = SerializerSelector;
    	fastJsonStringifyCompilerExports.default = SerializerSelector;
    	fastJsonStringifyCompilerExports.SerializerSelector = SerializerSelector;
    	fastJsonStringifyCompilerExports.StandaloneSerializer = requireStandalone$1();
    	return fastJsonStringifyCompilerExports;
    }

    var ajvCompilerExports = {};
    var ajvCompiler = {
      get exports(){ return ajvCompilerExports; },
      set exports(v){ ajvCompilerExports = v; },
    };

    var ajvExports = {};
    var ajv = {
      get exports(){ return ajvExports; },
      set exports(v){ ajvExports = v; },
    };

    var core$2 = {};

    var validate$2 = {};

    var boolSchema = {};

    var errors = {};

    var codegen = {};

    var code$1 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
    	class _CodeOrName {
    	}
    	exports._CodeOrName = _CodeOrName;
    	exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    	class Name extends _CodeOrName {
    	    constructor(s) {
    	        super();
    	        if (!exports.IDENTIFIER.test(s))
    	            throw new Error("CodeGen: name must be a valid identifier");
    	        this.str = s;
    	    }
    	    toString() {
    	        return this.str;
    	    }
    	    emptyStr() {
    	        return false;
    	    }
    	    get names() {
    	        return { [this.str]: 1 };
    	    }
    	}
    	exports.Name = Name;
    	class _Code extends _CodeOrName {
    	    constructor(code) {
    	        super();
    	        this._items = typeof code === "string" ? [code] : code;
    	    }
    	    toString() {
    	        return this.str;
    	    }
    	    emptyStr() {
    	        if (this._items.length > 1)
    	            return false;
    	        const item = this._items[0];
    	        return item === "" || item === '""';
    	    }
    	    get str() {
    	        var _a;
    	        return ((_a = this._str) !== null && _a !== void 0 ? _a : (this._str = this._items.reduce((s, c) => `${s}${c}`, "")));
    	    }
    	    get names() {
    	        var _a;
    	        return ((_a = this._names) !== null && _a !== void 0 ? _a : (this._names = this._items.reduce((names, c) => {
    	            if (c instanceof Name)
    	                names[c.str] = (names[c.str] || 0) + 1;
    	            return names;
    	        }, {})));
    	    }
    	}
    	exports._Code = _Code;
    	exports.nil = new _Code("");
    	function _(strs, ...args) {
    	    const code = [strs[0]];
    	    let i = 0;
    	    while (i < args.length) {
    	        addCodeArg(code, args[i]);
    	        code.push(strs[++i]);
    	    }
    	    return new _Code(code);
    	}
    	exports._ = _;
    	const plus = new _Code("+");
    	function str(strs, ...args) {
    	    const expr = [safeStringify(strs[0])];
    	    let i = 0;
    	    while (i < args.length) {
    	        expr.push(plus);
    	        addCodeArg(expr, args[i]);
    	        expr.push(plus, safeStringify(strs[++i]));
    	    }
    	    optimize(expr);
    	    return new _Code(expr);
    	}
    	exports.str = str;
    	function addCodeArg(code, arg) {
    	    if (arg instanceof _Code)
    	        code.push(...arg._items);
    	    else if (arg instanceof Name)
    	        code.push(arg);
    	    else
    	        code.push(interpolate(arg));
    	}
    	exports.addCodeArg = addCodeArg;
    	function optimize(expr) {
    	    let i = 1;
    	    while (i < expr.length - 1) {
    	        if (expr[i] === plus) {
    	            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
    	            if (res !== undefined) {
    	                expr.splice(i - 1, 3, res);
    	                continue;
    	            }
    	            expr[i++] = "+";
    	        }
    	        i++;
    	    }
    	}
    	function mergeExprItems(a, b) {
    	    if (b === '""')
    	        return a;
    	    if (a === '""')
    	        return b;
    	    if (typeof a == "string") {
    	        if (b instanceof Name || a[a.length - 1] !== '"')
    	            return;
    	        if (typeof b != "string")
    	            return `${a.slice(0, -1)}${b}"`;
    	        if (b[0] === '"')
    	            return a.slice(0, -1) + b.slice(1);
    	        return;
    	    }
    	    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name))
    	        return `"${a}${b.slice(1)}`;
    	    return;
    	}
    	function strConcat(c1, c2) {
    	    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str `${c1}${c2}`;
    	}
    	exports.strConcat = strConcat;
    	// TODO do not allow arrays here
    	function interpolate(x) {
    	    return typeof x == "number" || typeof x == "boolean" || x === null
    	        ? x
    	        : safeStringify(Array.isArray(x) ? x.join(",") : x);
    	}
    	function stringify(x) {
    	    return new _Code(safeStringify(x));
    	}
    	exports.stringify = stringify;
    	function safeStringify(x) {
    	    return JSON.stringify(x)
    	        .replace(/\u2028/g, "\\u2028")
    	        .replace(/\u2029/g, "\\u2029");
    	}
    	exports.safeStringify = safeStringify;
    	function getProperty(key) {
    	    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _ `[${key}]`;
    	}
    	exports.getProperty = getProperty;
    	//Does best effort to format the name properly
    	function getEsmExportName(key) {
    	    if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
    	        return new _Code(`${key}`);
    	    }
    	    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
    	}
    	exports.getEsmExportName = getEsmExportName;
    	function regexpCode(rx) {
    	    return new _Code(rx.toString());
    	}
    	exports.regexpCode = regexpCode;
    	
    } (code$1));

    var scope = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
    	const code_1 = code$1;
    	class ValueError extends Error {
    	    constructor(name) {
    	        super(`CodeGen: "code" for ${name} not defined`);
    	        this.value = name.value;
    	    }
    	}
    	var UsedValueState;
    	(function (UsedValueState) {
    	    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    	    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
    	})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
    	exports.varKinds = {
    	    const: new code_1.Name("const"),
    	    let: new code_1.Name("let"),
    	    var: new code_1.Name("var"),
    	};
    	class Scope {
    	    constructor({ prefixes, parent } = {}) {
    	        this._names = {};
    	        this._prefixes = prefixes;
    	        this._parent = parent;
    	    }
    	    toName(nameOrPrefix) {
    	        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    	    }
    	    name(prefix) {
    	        return new code_1.Name(this._newName(prefix));
    	    }
    	    _newName(prefix) {
    	        const ng = this._names[prefix] || this._nameGroup(prefix);
    	        return `${prefix}${ng.index++}`;
    	    }
    	    _nameGroup(prefix) {
    	        var _a, _b;
    	        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || (this._prefixes && !this._prefixes.has(prefix))) {
    	            throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
    	        }
    	        return (this._names[prefix] = { prefix, index: 0 });
    	    }
    	}
    	exports.Scope = Scope;
    	class ValueScopeName extends code_1.Name {
    	    constructor(prefix, nameStr) {
    	        super(nameStr);
    	        this.prefix = prefix;
    	    }
    	    setValue(value, { property, itemIndex }) {
    	        this.value = value;
    	        this.scopePath = (0, code_1._) `.${new code_1.Name(property)}[${itemIndex}]`;
    	    }
    	}
    	exports.ValueScopeName = ValueScopeName;
    	const line = (0, code_1._) `\n`;
    	class ValueScope extends Scope {
    	    constructor(opts) {
    	        super(opts);
    	        this._values = {};
    	        this._scope = opts.scope;
    	        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
    	    }
    	    get() {
    	        return this._scope;
    	    }
    	    name(prefix) {
    	        return new ValueScopeName(prefix, this._newName(prefix));
    	    }
    	    value(nameOrPrefix, value) {
    	        var _a;
    	        if (value.ref === undefined)
    	            throw new Error("CodeGen: ref must be passed in value");
    	        const name = this.toName(nameOrPrefix);
    	        const { prefix } = name;
    	        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
    	        let vs = this._values[prefix];
    	        if (vs) {
    	            const _name = vs.get(valueKey);
    	            if (_name)
    	                return _name;
    	        }
    	        else {
    	            vs = this._values[prefix] = new Map();
    	        }
    	        vs.set(valueKey, name);
    	        const s = this._scope[prefix] || (this._scope[prefix] = []);
    	        const itemIndex = s.length;
    	        s[itemIndex] = value.ref;
    	        name.setValue(value, { property: prefix, itemIndex });
    	        return name;
    	    }
    	    getValue(prefix, keyOrRef) {
    	        const vs = this._values[prefix];
    	        if (!vs)
    	            return;
    	        return vs.get(keyOrRef);
    	    }
    	    scopeRefs(scopeName, values = this._values) {
    	        return this._reduceValues(values, (name) => {
    	            if (name.scopePath === undefined)
    	                throw new Error(`CodeGen: name "${name}" has no value`);
    	            return (0, code_1._) `${scopeName}${name.scopePath}`;
    	        });
    	    }
    	    scopeCode(values = this._values, usedValues, getCode) {
    	        return this._reduceValues(values, (name) => {
    	            if (name.value === undefined)
    	                throw new Error(`CodeGen: name "${name}" has no value`);
    	            return name.value.code;
    	        }, usedValues, getCode);
    	    }
    	    _reduceValues(values, valueCode, usedValues = {}, getCode) {
    	        let code = code_1.nil;
    	        for (const prefix in values) {
    	            const vs = values[prefix];
    	            if (!vs)
    	                continue;
    	            const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map());
    	            vs.forEach((name) => {
    	                if (nameSet.has(name))
    	                    return;
    	                nameSet.set(name, UsedValueState.Started);
    	                let c = valueCode(name);
    	                if (c) {
    	                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
    	                    code = (0, code_1._) `${code}${def} ${name} = ${c};${this.opts._n}`;
    	                }
    	                else if ((c = getCode === null || getCode === void 0 ? void 0 : getCode(name))) {
    	                    code = (0, code_1._) `${code}${c}${this.opts._n}`;
    	                }
    	                else {
    	                    throw new ValueError(name);
    	                }
    	                nameSet.set(name, UsedValueState.Completed);
    	            });
    	        }
    	        return code;
    	    }
    	}
    	exports.ValueScope = ValueScope;
    	
    } (scope));

    var hasRequiredCodegen;

    function requireCodegen () {
    	if (hasRequiredCodegen) return codegen;
    	hasRequiredCodegen = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
    		const code_1 = code$1;
    		const scope_1 = scope;
    		var code_2 = code$1;
    		Object.defineProperty(exports, "_", { enumerable: true, get: function () { return code_2._; } });
    		Object.defineProperty(exports, "str", { enumerable: true, get: function () { return code_2.str; } });
    		Object.defineProperty(exports, "strConcat", { enumerable: true, get: function () { return code_2.strConcat; } });
    		Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return code_2.nil; } });
    		Object.defineProperty(exports, "getProperty", { enumerable: true, get: function () { return code_2.getProperty; } });
    		Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return code_2.stringify; } });
    		Object.defineProperty(exports, "regexpCode", { enumerable: true, get: function () { return code_2.regexpCode; } });
    		Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return code_2.Name; } });
    		var scope_2 = scope;
    		Object.defineProperty(exports, "Scope", { enumerable: true, get: function () { return scope_2.Scope; } });
    		Object.defineProperty(exports, "ValueScope", { enumerable: true, get: function () { return scope_2.ValueScope; } });
    		Object.defineProperty(exports, "ValueScopeName", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });
    		Object.defineProperty(exports, "varKinds", { enumerable: true, get: function () { return scope_2.varKinds; } });
    		exports.operators = {
    		    GT: new code_1._Code(">"),
    		    GTE: new code_1._Code(">="),
    		    LT: new code_1._Code("<"),
    		    LTE: new code_1._Code("<="),
    		    EQ: new code_1._Code("==="),
    		    NEQ: new code_1._Code("!=="),
    		    NOT: new code_1._Code("!"),
    		    OR: new code_1._Code("||"),
    		    AND: new code_1._Code("&&"),
    		    ADD: new code_1._Code("+"),
    		};
    		class Node {
    		    optimizeNodes() {
    		        return this;
    		    }
    		    optimizeNames(_names, _constants) {
    		        return this;
    		    }
    		}
    		class Def extends Node {
    		    constructor(varKind, name, rhs) {
    		        super();
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.rhs = rhs;
    		    }
    		    render({ es5, _n }) {
    		        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
    		        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
    		        return `${varKind} ${this.name}${rhs};` + _n;
    		    }
    		    optimizeNames(names, constants) {
    		        if (!names[this.name.str])
    		            return;
    		        if (this.rhs)
    		            this.rhs = optimizeExpr(this.rhs, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    		    }
    		}
    		class Assign extends Node {
    		    constructor(lhs, rhs, sideEffects) {
    		        super();
    		        this.lhs = lhs;
    		        this.rhs = rhs;
    		        this.sideEffects = sideEffects;
    		    }
    		    render({ _n }) {
    		        return `${this.lhs} = ${this.rhs};` + _n;
    		    }
    		    optimizeNames(names, constants) {
    		        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)
    		            return;
    		        this.rhs = optimizeExpr(this.rhs, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
    		        return addExprNames(names, this.rhs);
    		    }
    		}
    		class AssignOp extends Assign {
    		    constructor(lhs, op, rhs, sideEffects) {
    		        super(lhs, rhs, sideEffects);
    		        this.op = op;
    		    }
    		    render({ _n }) {
    		        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    		    }
    		}
    		class Label extends Node {
    		    constructor(label) {
    		        super();
    		        this.label = label;
    		        this.names = {};
    		    }
    		    render({ _n }) {
    		        return `${this.label}:` + _n;
    		    }
    		}
    		class Break extends Node {
    		    constructor(label) {
    		        super();
    		        this.label = label;
    		        this.names = {};
    		    }
    		    render({ _n }) {
    		        const label = this.label ? ` ${this.label}` : "";
    		        return `break${label};` + _n;
    		    }
    		}
    		class Throw extends Node {
    		    constructor(error) {
    		        super();
    		        this.error = error;
    		    }
    		    render({ _n }) {
    		        return `throw ${this.error};` + _n;
    		    }
    		    get names() {
    		        return this.error.names;
    		    }
    		}
    		class AnyCode extends Node {
    		    constructor(code) {
    		        super();
    		        this.code = code;
    		    }
    		    render({ _n }) {
    		        return `${this.code};` + _n;
    		    }
    		    optimizeNodes() {
    		        return `${this.code}` ? this : undefined;
    		    }
    		    optimizeNames(names, constants) {
    		        this.code = optimizeExpr(this.code, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    		    }
    		}
    		class ParentNode extends Node {
    		    constructor(nodes = []) {
    		        super();
    		        this.nodes = nodes;
    		    }
    		    render(opts) {
    		        return this.nodes.reduce((code, n) => code + n.render(opts), "");
    		    }
    		    optimizeNodes() {
    		        const { nodes } = this;
    		        let i = nodes.length;
    		        while (i--) {
    		            const n = nodes[i].optimizeNodes();
    		            if (Array.isArray(n))
    		                nodes.splice(i, 1, ...n);
    		            else if (n)
    		                nodes[i] = n;
    		            else
    		                nodes.splice(i, 1);
    		        }
    		        return nodes.length > 0 ? this : undefined;
    		    }
    		    optimizeNames(names, constants) {
    		        const { nodes } = this;
    		        let i = nodes.length;
    		        while (i--) {
    		            // iterating backwards improves 1-pass optimization
    		            const n = nodes[i];
    		            if (n.optimizeNames(names, constants))
    		                continue;
    		            subtractNames(names, n.names);
    		            nodes.splice(i, 1);
    		        }
    		        return nodes.length > 0 ? this : undefined;
    		    }
    		    get names() {
    		        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
    		    }
    		}
    		class BlockNode extends ParentNode {
    		    render(opts) {
    		        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    		    }
    		}
    		class Root extends ParentNode {
    		}
    		class Else extends BlockNode {
    		}
    		Else.kind = "else";
    		class If extends BlockNode {
    		    constructor(condition, nodes) {
    		        super(nodes);
    		        this.condition = condition;
    		    }
    		    render(opts) {
    		        let code = `if(${this.condition})` + super.render(opts);
    		        if (this.else)
    		            code += "else " + this.else.render(opts);
    		        return code;
    		    }
    		    optimizeNodes() {
    		        super.optimizeNodes();
    		        const cond = this.condition;
    		        if (cond === true)
    		            return this.nodes; // else is ignored here
    		        let e = this.else;
    		        if (e) {
    		            const ns = e.optimizeNodes();
    		            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
    		        }
    		        if (e) {
    		            if (cond === false)
    		                return e instanceof If ? e : e.nodes;
    		            if (this.nodes.length)
    		                return this;
    		            return new If(not(cond), e instanceof If ? [e] : e.nodes);
    		        }
    		        if (cond === false || !this.nodes.length)
    		            return undefined;
    		        return this;
    		    }
    		    optimizeNames(names, constants) {
    		        var _a;
    		        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    		        if (!(super.optimizeNames(names, constants) || this.else))
    		            return;
    		        this.condition = optimizeExpr(this.condition, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = super.names;
    		        addExprNames(names, this.condition);
    		        if (this.else)
    		            addNames(names, this.else.names);
    		        return names;
    		    }
    		}
    		If.kind = "if";
    		class For extends BlockNode {
    		}
    		For.kind = "for";
    		class ForLoop extends For {
    		    constructor(iteration) {
    		        super();
    		        this.iteration = iteration;
    		    }
    		    render(opts) {
    		        return `for(${this.iteration})` + super.render(opts);
    		    }
    		    optimizeNames(names, constants) {
    		        if (!super.optimizeNames(names, constants))
    		            return;
    		        this.iteration = optimizeExpr(this.iteration, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return addNames(super.names, this.iteration.names);
    		    }
    		}
    		class ForRange extends For {
    		    constructor(varKind, name, from, to) {
    		        super();
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.from = from;
    		        this.to = to;
    		    }
    		    render(opts) {
    		        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
    		        const { name, from, to } = this;
    		        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    		    }
    		    get names() {
    		        const names = addExprNames(super.names, this.from);
    		        return addExprNames(names, this.to);
    		    }
    		}
    		class ForIter extends For {
    		    constructor(loop, varKind, name, iterable) {
    		        super();
    		        this.loop = loop;
    		        this.varKind = varKind;
    		        this.name = name;
    		        this.iterable = iterable;
    		    }
    		    render(opts) {
    		        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    		    }
    		    optimizeNames(names, constants) {
    		        if (!super.optimizeNames(names, constants))
    		            return;
    		        this.iterable = optimizeExpr(this.iterable, names, constants);
    		        return this;
    		    }
    		    get names() {
    		        return addNames(super.names, this.iterable.names);
    		    }
    		}
    		class Func extends BlockNode {
    		    constructor(name, args, async) {
    		        super();
    		        this.name = name;
    		        this.args = args;
    		        this.async = async;
    		    }
    		    render(opts) {
    		        const _async = this.async ? "async " : "";
    		        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    		    }
    		}
    		Func.kind = "func";
    		class Return extends ParentNode {
    		    render(opts) {
    		        return "return " + super.render(opts);
    		    }
    		}
    		Return.kind = "return";
    		class Try extends BlockNode {
    		    render(opts) {
    		        let code = "try" + super.render(opts);
    		        if (this.catch)
    		            code += this.catch.render(opts);
    		        if (this.finally)
    		            code += this.finally.render(opts);
    		        return code;
    		    }
    		    optimizeNodes() {
    		        var _a, _b;
    		        super.optimizeNodes();
    		        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
    		        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
    		        return this;
    		    }
    		    optimizeNames(names, constants) {
    		        var _a, _b;
    		        super.optimizeNames(names, constants);
    		        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
    		        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
    		        return this;
    		    }
    		    get names() {
    		        const names = super.names;
    		        if (this.catch)
    		            addNames(names, this.catch.names);
    		        if (this.finally)
    		            addNames(names, this.finally.names);
    		        return names;
    		    }
    		}
    		class Catch extends BlockNode {
    		    constructor(error) {
    		        super();
    		        this.error = error;
    		    }
    		    render(opts) {
    		        return `catch(${this.error})` + super.render(opts);
    		    }
    		}
    		Catch.kind = "catch";
    		class Finally extends BlockNode {
    		    render(opts) {
    		        return "finally" + super.render(opts);
    		    }
    		}
    		Finally.kind = "finally";
    		class CodeGen {
    		    constructor(extScope, opts = {}) {
    		        this._values = {};
    		        this._blockStarts = [];
    		        this._constants = {};
    		        this.opts = { ...opts, _n: opts.lines ? "\n" : "" };
    		        this._extScope = extScope;
    		        this._scope = new scope_1.Scope({ parent: extScope });
    		        this._nodes = [new Root()];
    		    }
    		    toString() {
    		        return this._root.render(this.opts);
    		    }
    		    // returns unique name in the internal scope
    		    name(prefix) {
    		        return this._scope.name(prefix);
    		    }
    		    // reserves unique name in the external scope
    		    scopeName(prefix) {
    		        return this._extScope.name(prefix);
    		    }
    		    // reserves unique name in the external scope and assigns value to it
    		    scopeValue(prefixOrName, value) {
    		        const name = this._extScope.value(prefixOrName, value);
    		        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
    		        vs.add(name);
    		        return name;
    		    }
    		    getScopeValue(prefix, keyOrRef) {
    		        return this._extScope.getValue(prefix, keyOrRef);
    		    }
    		    // return code that assigns values in the external scope to the names that are used internally
    		    // (same names that were returned by gen.scopeName or gen.scopeValue)
    		    scopeRefs(scopeName) {
    		        return this._extScope.scopeRefs(scopeName, this._values);
    		    }
    		    scopeCode() {
    		        return this._extScope.scopeCode(this._values);
    		    }
    		    _def(varKind, nameOrPrefix, rhs, constant) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        if (rhs !== undefined && constant)
    		            this._constants[name.str] = rhs;
    		        this._leafNode(new Def(varKind, name, rhs));
    		        return name;
    		    }
    		    // `const` declaration (`var` in es5 mode)
    		    const(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    		    }
    		    // `let` declaration with optional assignment (`var` in es5 mode)
    		    let(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    		    }
    		    // `var` declaration with optional assignment
    		    var(nameOrPrefix, rhs, _constant) {
    		        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    		    }
    		    // assignment code
    		    assign(lhs, rhs, sideEffects) {
    		        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    		    }
    		    // `+=` code
    		    add(lhs, rhs) {
    		        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    		    }
    		    // appends passed SafeExpr to code or executes Block
    		    code(c) {
    		        if (typeof c == "function")
    		            c();
    		        else if (c !== code_1.nil)
    		            this._leafNode(new AnyCode(c));
    		        return this;
    		    }
    		    // returns code for object literal for the passed argument list of key-value pairs
    		    object(...keyValues) {
    		        const code = ["{"];
    		        for (const [key, value] of keyValues) {
    		            if (code.length > 1)
    		                code.push(",");
    		            code.push(key);
    		            if (key !== value || this.opts.es5) {
    		                code.push(":");
    		                (0, code_1.addCodeArg)(code, value);
    		            }
    		        }
    		        code.push("}");
    		        return new code_1._Code(code);
    		    }
    		    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    		    if(condition, thenBody, elseBody) {
    		        this._blockNode(new If(condition));
    		        if (thenBody && elseBody) {
    		            this.code(thenBody).else().code(elseBody).endIf();
    		        }
    		        else if (thenBody) {
    		            this.code(thenBody).endIf();
    		        }
    		        else if (elseBody) {
    		            throw new Error('CodeGen: "else" body without "then" body');
    		        }
    		        return this;
    		    }
    		    // `else if` clause - invalid without `if` or after `else` clauses
    		    elseIf(condition) {
    		        return this._elseNode(new If(condition));
    		    }
    		    // `else` clause - only valid after `if` or `else if` clauses
    		    else() {
    		        return this._elseNode(new Else());
    		    }
    		    // end `if` statement (needed if gen.if was used only with condition)
    		    endIf() {
    		        return this._endBlockNode(If, Else);
    		    }
    		    _for(node, forBody) {
    		        this._blockNode(node);
    		        if (forBody)
    		            this.code(forBody).endFor();
    		        return this;
    		    }
    		    // a generic `for` clause (or statement if `forBody` is passed)
    		    for(iteration, forBody) {
    		        return this._for(new ForLoop(iteration), forBody);
    		    }
    		    // `for` statement for a range of values
    		    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
    		    }
    		    // `for-of` statement (in es5 mode replace with a normal for loop)
    		    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
    		        const name = this._scope.toName(nameOrPrefix);
    		        if (this.opts.es5) {
    		            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
    		            return this.forRange("_i", 0, (0, code_1._) `${arr}.length`, (i) => {
    		                this.var(name, (0, code_1._) `${arr}[${i}]`);
    		                forBody(name);
    		            });
    		        }
    		        return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
    		    }
    		    // `for-in` statement.
    		    // With option `ownProperties` replaced with a `for-of` loop for object keys
    		    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
    		        if (this.opts.ownProperties) {
    		            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);
    		        }
    		        const name = this._scope.toName(nameOrPrefix);
    		        return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
    		    }
    		    // end `for` loop
    		    endFor() {
    		        return this._endBlockNode(For);
    		    }
    		    // `label` statement
    		    label(label) {
    		        return this._leafNode(new Label(label));
    		    }
    		    // `break` statement
    		    break(label) {
    		        return this._leafNode(new Break(label));
    		    }
    		    // `return` statement
    		    return(value) {
    		        const node = new Return();
    		        this._blockNode(node);
    		        this.code(value);
    		        if (node.nodes.length !== 1)
    		            throw new Error('CodeGen: "return" should have one node');
    		        return this._endBlockNode(Return);
    		    }
    		    // `try` statement
    		    try(tryBody, catchCode, finallyCode) {
    		        if (!catchCode && !finallyCode)
    		            throw new Error('CodeGen: "try" without "catch" and "finally"');
    		        const node = new Try();
    		        this._blockNode(node);
    		        this.code(tryBody);
    		        if (catchCode) {
    		            const error = this.name("e");
    		            this._currNode = node.catch = new Catch(error);
    		            catchCode(error);
    		        }
    		        if (finallyCode) {
    		            this._currNode = node.finally = new Finally();
    		            this.code(finallyCode);
    		        }
    		        return this._endBlockNode(Catch, Finally);
    		    }
    		    // `throw` statement
    		    throw(error) {
    		        return this._leafNode(new Throw(error));
    		    }
    		    // start self-balancing block
    		    block(body, nodeCount) {
    		        this._blockStarts.push(this._nodes.length);
    		        if (body)
    		            this.code(body).endBlock(nodeCount);
    		        return this;
    		    }
    		    // end the current self-balancing block
    		    endBlock(nodeCount) {
    		        const len = this._blockStarts.pop();
    		        if (len === undefined)
    		            throw new Error("CodeGen: not in self-balancing block");
    		        const toClose = this._nodes.length - len;
    		        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {
    		            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
    		        }
    		        this._nodes.length = len;
    		        return this;
    		    }
    		    // `function` heading (or definition if funcBody is passed)
    		    func(name, args = code_1.nil, async, funcBody) {
    		        this._blockNode(new Func(name, args, async));
    		        if (funcBody)
    		            this.code(funcBody).endFunc();
    		        return this;
    		    }
    		    // end function definition
    		    endFunc() {
    		        return this._endBlockNode(Func);
    		    }
    		    optimize(n = 1) {
    		        while (n-- > 0) {
    		            this._root.optimizeNodes();
    		            this._root.optimizeNames(this._root.names, this._constants);
    		        }
    		    }
    		    _leafNode(node) {
    		        this._currNode.nodes.push(node);
    		        return this;
    		    }
    		    _blockNode(node) {
    		        this._currNode.nodes.push(node);
    		        this._nodes.push(node);
    		    }
    		    _endBlockNode(N1, N2) {
    		        const n = this._currNode;
    		        if (n instanceof N1 || (N2 && n instanceof N2)) {
    		            this._nodes.pop();
    		            return this;
    		        }
    		        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    		    }
    		    _elseNode(node) {
    		        const n = this._currNode;
    		        if (!(n instanceof If)) {
    		            throw new Error('CodeGen: "else" without "if"');
    		        }
    		        this._currNode = n.else = node;
    		        return this;
    		    }
    		    get _root() {
    		        return this._nodes[0];
    		    }
    		    get _currNode() {
    		        const ns = this._nodes;
    		        return ns[ns.length - 1];
    		    }
    		    set _currNode(node) {
    		        const ns = this._nodes;
    		        ns[ns.length - 1] = node;
    		    }
    		}
    		exports.CodeGen = CodeGen;
    		function addNames(names, from) {
    		    for (const n in from)
    		        names[n] = (names[n] || 0) + (from[n] || 0);
    		    return names;
    		}
    		function addExprNames(names, from) {
    		    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
    		}
    		function optimizeExpr(expr, names, constants) {
    		    if (expr instanceof code_1.Name)
    		        return replaceName(expr);
    		    if (!canOptimize(expr))
    		        return expr;
    		    return new code_1._Code(expr._items.reduce((items, c) => {
    		        if (c instanceof code_1.Name)
    		            c = replaceName(c);
    		        if (c instanceof code_1._Code)
    		            items.push(...c._items);
    		        else
    		            items.push(c);
    		        return items;
    		    }, []));
    		    function replaceName(n) {
    		        const c = constants[n.str];
    		        if (c === undefined || names[n.str] !== 1)
    		            return n;
    		        delete names[n.str];
    		        return c;
    		    }
    		    function canOptimize(e) {
    		        return (e instanceof code_1._Code &&
    		            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));
    		    }
    		}
    		function subtractNames(names, from) {
    		    for (const n in from)
    		        names[n] = (names[n] || 0) - (from[n] || 0);
    		}
    		function not(x) {
    		    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._) `!${par(x)}`;
    		}
    		exports.not = not;
    		const andCode = mappend(exports.operators.AND);
    		// boolean AND (&&) expression with the passed arguments
    		function and(...args) {
    		    return args.reduce(andCode);
    		}
    		exports.and = and;
    		const orCode = mappend(exports.operators.OR);
    		// boolean OR (||) expression with the passed arguments
    		function or(...args) {
    		    return args.reduce(orCode);
    		}
    		exports.or = or;
    		function mappend(op) {
    		    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);
    		}
    		function par(x) {
    		    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;
    		}
    		
    } (codegen));
    	return codegen;
    }

    var util$6 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
    	const codegen_1 = requireCodegen();
    	const code_1 = code$1;
    	// TODO refactor to use Set
    	function toHash(arr) {
    	    const hash = {};
    	    for (const item of arr)
    	        hash[item] = true;
    	    return hash;
    	}
    	exports.toHash = toHash;
    	function alwaysValidSchema(it, schema) {
    	    if (typeof schema == "boolean")
    	        return schema;
    	    if (Object.keys(schema).length === 0)
    	        return true;
    	    checkUnknownRules(it, schema);
    	    return !schemaHasRules(schema, it.self.RULES.all);
    	}
    	exports.alwaysValidSchema = alwaysValidSchema;
    	function checkUnknownRules(it, schema = it.schema) {
    	    const { opts, self } = it;
    	    if (!opts.strictSchema)
    	        return;
    	    if (typeof schema === "boolean")
    	        return;
    	    const rules = self.RULES.keywords;
    	    for (const key in schema) {
    	        if (!rules[key])
    	            checkStrictMode(it, `unknown keyword: "${key}"`);
    	    }
    	}
    	exports.checkUnknownRules = checkUnknownRules;
    	function schemaHasRules(schema, rules) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (rules[key])
    	            return true;
    	    return false;
    	}
    	exports.schemaHasRules = schemaHasRules;
    	function schemaHasRulesButRef(schema, RULES) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (key !== "$ref" && RULES.all[key])
    	            return true;
    	    return false;
    	}
    	exports.schemaHasRulesButRef = schemaHasRulesButRef;
    	function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    	    if (!$data) {
    	        if (typeof schema == "number" || typeof schema == "boolean")
    	            return schema;
    	        if (typeof schema == "string")
    	            return (0, codegen_1._) `${schema}`;
    	    }
    	    return (0, codegen_1._) `${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
    	}
    	exports.schemaRefOrVal = schemaRefOrVal;
    	function unescapeFragment(str) {
    	    return unescapeJsonPointer(decodeURIComponent(str));
    	}
    	exports.unescapeFragment = unescapeFragment;
    	function escapeFragment(str) {
    	    return encodeURIComponent(escapeJsonPointer(str));
    	}
    	exports.escapeFragment = escapeFragment;
    	function escapeJsonPointer(str) {
    	    if (typeof str == "number")
    	        return `${str}`;
    	    return str.replace(/~/g, "~0").replace(/\//g, "~1");
    	}
    	exports.escapeJsonPointer = escapeJsonPointer;
    	function unescapeJsonPointer(str) {
    	    return str.replace(/~1/g, "/").replace(/~0/g, "~");
    	}
    	exports.unescapeJsonPointer = unescapeJsonPointer;
    	function eachItem(xs, f) {
    	    if (Array.isArray(xs)) {
    	        for (const x of xs)
    	            f(x);
    	    }
    	    else {
    	        f(xs);
    	    }
    	}
    	exports.eachItem = eachItem;
    	function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName, }) {
    	    return (gen, from, to, toName) => {
    	        const res = to === undefined
    	            ? from
    	            : to instanceof codegen_1.Name
    	                ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to)
    	                : from instanceof codegen_1.Name
    	                    ? (mergeToName(gen, to, from), from)
    	                    : mergeValues(from, to);
    	        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    	    };
    	}
    	exports.mergeEvaluated = {
    	    props: makeMergeEvaluated({
    	        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => {
    	            gen.if((0, codegen_1._) `${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._) `${to} || {}`).code((0, codegen_1._) `Object.assign(${to}, ${from})`));
    	        }),
    	        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => {
    	            if (from === true) {
    	                gen.assign(to, true);
    	            }
    	            else {
    	                gen.assign(to, (0, codegen_1._) `${to} || {}`);
    	                setEvaluated(gen, to, from);
    	            }
    	        }),
    	        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
    	        resultToName: evaluatedPropsToName,
    	    }),
    	    items: makeMergeEvaluated({
    	        mergeNames: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._) `${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
    	        mergeToName: (gen, from, to) => gen.if((0, codegen_1._) `${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._) `${to} > ${from} ? ${to} : ${from}`)),
    	        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
    	        resultToName: (gen, items) => gen.var("items", items),
    	    }),
    	};
    	function evaluatedPropsToName(gen, ps) {
    	    if (ps === true)
    	        return gen.var("props", true);
    	    const props = gen.var("props", (0, codegen_1._) `{}`);
    	    if (ps !== undefined)
    	        setEvaluated(gen, props, ps);
    	    return props;
    	}
    	exports.evaluatedPropsToName = evaluatedPropsToName;
    	function setEvaluated(gen, props, ps) {
    	    Object.keys(ps).forEach((p) => gen.assign((0, codegen_1._) `${props}${(0, codegen_1.getProperty)(p)}`, true));
    	}
    	exports.setEvaluated = setEvaluated;
    	const snippets = {};
    	function useFunc(gen, f) {
    	    return gen.scopeValue("func", {
    	        ref: f,
    	        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
    	    });
    	}
    	exports.useFunc = useFunc;
    	var Type;
    	(function (Type) {
    	    Type[Type["Num"] = 0] = "Num";
    	    Type[Type["Str"] = 1] = "Str";
    	})(Type = exports.Type || (exports.Type = {}));
    	function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    	    // let path
    	    if (dataProp instanceof codegen_1.Name) {
    	        const isNumber = dataPropType === Type.Num;
    	        return jsPropertySyntax
    	            ? isNumber
    	                ? (0, codegen_1._) `"[" + ${dataProp} + "]"`
    	                : (0, codegen_1._) `"['" + ${dataProp} + "']"`
    	            : isNumber
    	                ? (0, codegen_1._) `"/" + ${dataProp}`
    	                : (0, codegen_1._) `"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    	    }
    	    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
    	}
    	exports.getErrorPath = getErrorPath;
    	function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    	    if (!mode)
    	        return;
    	    msg = `strict mode: ${msg}`;
    	    if (mode === true)
    	        throw new Error(msg);
    	    it.self.logger.warn(msg);
    	}
    	exports.checkStrictMode = checkStrictMode;
    	
    } (util$6));

    var names$1 = {};

    Object.defineProperty(names$1, "__esModule", { value: true });
    const codegen_1$x = requireCodegen();
    const names = {
        // validation function arguments
        data: new codegen_1$x.Name("data"),
        // args passed from referencing schema
        valCxt: new codegen_1$x.Name("valCxt"),
        instancePath: new codegen_1$x.Name("instancePath"),
        parentData: new codegen_1$x.Name("parentData"),
        parentDataProperty: new codegen_1$x.Name("parentDataProperty"),
        rootData: new codegen_1$x.Name("rootData"),
        dynamicAnchors: new codegen_1$x.Name("dynamicAnchors"),
        // function scoped variables
        vErrors: new codegen_1$x.Name("vErrors"),
        errors: new codegen_1$x.Name("errors"),
        this: new codegen_1$x.Name("this"),
        // "globals"
        self: new codegen_1$x.Name("self"),
        scope: new codegen_1$x.Name("scope"),
        // JTD serialize/parse name for JSON string and position
        json: new codegen_1$x.Name("json"),
        jsonPos: new codegen_1$x.Name("jsonPos"),
        jsonLen: new codegen_1$x.Name("jsonLen"),
        jsonPart: new codegen_1$x.Name("jsonPart"),
    };
    names$1.default = names;

    var hasRequiredErrors;

    function requireErrors () {
    	if (hasRequiredErrors) return errors;
    	hasRequiredErrors = 1;
    	(function (exports) {
    		Object.defineProperty(exports, "__esModule", { value: true });
    		exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
    		const codegen_1 = requireCodegen();
    		const util_1 = util$6;
    		const names_1 = names$1;
    		exports.keywordError = {
    		    message: ({ keyword }) => (0, codegen_1.str) `must pass "${keyword}" keyword validation`,
    		};
    		exports.keyword$DataError = {
    		    message: ({ keyword, schemaType }) => schemaType
    		        ? (0, codegen_1.str) `"${keyword}" keyword must be ${schemaType} ($data)`
    		        : (0, codegen_1.str) `"${keyword}" keyword is invalid ($data)`,
    		};
    		function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    		    const { it } = cxt;
    		    const { gen, compositeRule, allErrors } = it;
    		    const errObj = errorObjectCode(cxt, error, errorPaths);
    		    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {
    		        addError(gen, errObj);
    		    }
    		    else {
    		        returnErrors(it, (0, codegen_1._) `[${errObj}]`);
    		    }
    		}
    		exports.reportError = reportError;
    		function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    		    const { it } = cxt;
    		    const { gen, compositeRule, allErrors } = it;
    		    const errObj = errorObjectCode(cxt, error, errorPaths);
    		    addError(gen, errObj);
    		    if (!(compositeRule || allErrors)) {
    		        returnErrors(it, names_1.default.vErrors);
    		    }
    		}
    		exports.reportExtraError = reportExtraError;
    		function resetErrorsCount(gen, errsCount) {
    		    gen.assign(names_1.default.errors, errsCount);
    		    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
    		}
    		exports.resetErrorsCount = resetErrorsCount;
    		function extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {
    		    /* istanbul ignore if */
    		    if (errsCount === undefined)
    		        throw new Error("ajv implementation error");
    		    const err = gen.name("err");
    		    gen.forRange("i", errsCount, names_1.default.errors, (i) => {
    		        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);
    		        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
    		        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);
    		        if (it.opts.verbose) {
    		            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);
    		            gen.assign((0, codegen_1._) `${err}.data`, data);
    		        }
    		    });
    		}
    		exports.extendErrors = extendErrors;
    		function addError(gen, errObj) {
    		    const err = gen.const("err", errObj);
    		    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);
    		    gen.code((0, codegen_1._) `${names_1.default.errors}++`);
    		}
    		function returnErrors(it, errs) {
    		    const { gen, validateName, schemaEnv } = it;
    		    if (schemaEnv.$async) {
    		        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);
    		    }
    		    else {
    		        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);
    		        gen.return(false);
    		    }
    		}
    		const E = {
    		    keyword: new codegen_1.Name("keyword"),
    		    schemaPath: new codegen_1.Name("schemaPath"),
    		    params: new codegen_1.Name("params"),
    		    propertyName: new codegen_1.Name("propertyName"),
    		    message: new codegen_1.Name("message"),
    		    schema: new codegen_1.Name("schema"),
    		    parentSchema: new codegen_1.Name("parentSchema"),
    		};
    		function errorObjectCode(cxt, error, errorPaths) {
    		    const { createErrors } = cxt.it;
    		    if (createErrors === false)
    		        return (0, codegen_1._) `{}`;
    		    return errorObject(cxt, error, errorPaths);
    		}
    		function errorObject(cxt, error, errorPaths = {}) {
    		    const { gen, it } = cxt;
    		    const keyValues = [
    		        errorInstancePath(it, errorPaths),
    		        errorSchemaPath(cxt, errorPaths),
    		    ];
    		    extraErrorProps(cxt, error, keyValues);
    		    return gen.object(...keyValues);
    		}
    		function errorInstancePath({ errorPath }, { instancePath }) {
    		    const instPath = instancePath
    		        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`
    		        : errorPath;
    		    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
    		}
    		function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    		    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;
    		    if (schemaPath) {
    		        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    		    }
    		    return [E.schemaPath, schPath];
    		}
    		function extraErrorProps(cxt, { params, message }, keyValues) {
    		    const { keyword, data, schemaValue, it } = cxt;
    		    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    		    keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._) `{}`]);
    		    if (opts.messages) {
    		        keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
    		    }
    		    if (opts.verbose) {
    		        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
    		    }
    		    if (propertyName)
    		        keyValues.push([E.propertyName, propertyName]);
    		}
    		
    } (errors));
    	return errors;
    }

    var hasRequiredBoolSchema;

    function requireBoolSchema () {
    	if (hasRequiredBoolSchema) return boolSchema;
    	hasRequiredBoolSchema = 1;
    	Object.defineProperty(boolSchema, "__esModule", { value: true });
    	boolSchema.boolOrEmptySchema = boolSchema.topBoolOrEmptySchema = void 0;
    	const errors_1 = requireErrors();
    	const codegen_1 = requireCodegen();
    	const names_1 = names$1;
    	const boolError = {
    	    message: "boolean schema is false",
    	};
    	function topBoolOrEmptySchema(it) {
    	    const { gen, schema, validateName } = it;
    	    if (schema === false) {
    	        falseSchemaError(it, false);
    	    }
    	    else if (typeof schema == "object" && schema.$async === true) {
    	        gen.return(names_1.default.data);
    	    }
    	    else {
    	        gen.assign((0, codegen_1._) `${validateName}.errors`, null);
    	        gen.return(true);
    	    }
    	}
    	boolSchema.topBoolOrEmptySchema = topBoolOrEmptySchema;
    	function boolOrEmptySchema(it, valid) {
    	    const { gen, schema } = it;
    	    if (schema === false) {
    	        gen.var(valid, false); // TODO var
    	        falseSchemaError(it);
    	    }
    	    else {
    	        gen.var(valid, true); // TODO var
    	    }
    	}
    	boolSchema.boolOrEmptySchema = boolOrEmptySchema;
    	function falseSchemaError(it, overrideAllErrors) {
    	    const { gen, data } = it;
    	    // TODO maybe some other interface should be used for non-keyword validation errors...
    	    const cxt = {
    	        gen,
    	        keyword: "false schema",
    	        data,
    	        schema: false,
    	        schemaCode: false,
    	        schemaValue: false,
    	        params: {},
    	        it,
    	    };
    	    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
    	}
    	
    	return boolSchema;
    }

    var dataType = {};

    var rules = {};

    Object.defineProperty(rules, "__esModule", { value: true });
    rules.getRules = rules.isJSONType = void 0;
    const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
    const jsonTypes = new Set(_jsonTypes);
    function isJSONType(x) {
        return typeof x == "string" && jsonTypes.has(x);
    }
    rules.isJSONType = isJSONType;
    function getRules() {
        const groups = {
            number: { type: "number", rules: [] },
            string: { type: "string", rules: [] },
            array: { type: "array", rules: [] },
            object: { type: "object", rules: [] },
        };
        return {
            types: { ...groups, integer: true, boolean: true, null: true },
            rules: [{ rules: [] }, groups.number, groups.string, groups.array, groups.object],
            post: { rules: [] },
            all: {},
            keywords: {},
        };
    }
    rules.getRules = getRules;

    var applicability = {};

    var hasRequiredApplicability;

    function requireApplicability () {
    	if (hasRequiredApplicability) return applicability;
    	hasRequiredApplicability = 1;
    	Object.defineProperty(applicability, "__esModule", { value: true });
    	applicability.shouldUseRule = applicability.shouldUseGroup = applicability.schemaHasRulesForType = void 0;
    	function schemaHasRulesForType({ schema, self }, type) {
    	    const group = self.RULES.types[type];
    	    return group && group !== true && shouldUseGroup(schema, group);
    	}
    	applicability.schemaHasRulesForType = schemaHasRulesForType;
    	function shouldUseGroup(schema, group) {
    	    return group.rules.some((rule) => shouldUseRule(schema, rule));
    	}
    	applicability.shouldUseGroup = shouldUseGroup;
    	function shouldUseRule(schema, rule) {
    	    var _a;
    	    return (schema[rule.keyword] !== undefined ||
    	        ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd) => schema[kwd] !== undefined)));
    	}
    	applicability.shouldUseRule = shouldUseRule;
    	
    	return applicability;
    }

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
    	const rules_1 = rules;
    	const applicability_1 = requireApplicability();
    	const errors_1 = requireErrors();
    	const codegen_1 = requireCodegen();
    	const util_1 = util$6;
    	var DataType;
    	(function (DataType) {
    	    DataType[DataType["Correct"] = 0] = "Correct";
    	    DataType[DataType["Wrong"] = 1] = "Wrong";
    	})(DataType = exports.DataType || (exports.DataType = {}));
    	function getSchemaTypes(schema) {
    	    const types = getJSONTypes(schema.type);
    	    const hasNull = types.includes("null");
    	    if (hasNull) {
    	        if (schema.nullable === false)
    	            throw new Error("type: null contradicts nullable: false");
    	    }
    	    else {
    	        if (!types.length && schema.nullable !== undefined) {
    	            throw new Error('"nullable" cannot be used without "type"');
    	        }
    	        if (schema.nullable === true)
    	            types.push("null");
    	    }
    	    return types;
    	}
    	exports.getSchemaTypes = getSchemaTypes;
    	function getJSONTypes(ts) {
    	    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
    	    if (types.every(rules_1.isJSONType))
    	        return types;
    	    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
    	}
    	exports.getJSONTypes = getJSONTypes;
    	function coerceAndCheckDataType(it, types) {
    	    const { gen, data, opts } = it;
    	    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    	    const checkTypes = types.length > 0 &&
    	        !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    	    if (checkTypes) {
    	        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
    	        gen.if(wrongType, () => {
    	            if (coerceTo.length)
    	                coerceData(it, types, coerceTo);
    	            else
    	                reportTypeError(it);
    	        });
    	    }
    	    return checkTypes;
    	}
    	exports.coerceAndCheckDataType = coerceAndCheckDataType;
    	const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
    	function coerceToTypes(types, coerceTypes) {
    	    return coerceTypes
    	        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === "array" && t === "array"))
    	        : [];
    	}
    	function coerceData(it, types, coerceTo) {
    	    const { gen, data, opts } = it;
    	    const dataType = gen.let("dataType", (0, codegen_1._) `typeof ${data}`);
    	    const coerced = gen.let("coerced", (0, codegen_1._) `undefined`);
    	    if (opts.coerceTypes === "array") {
    	        gen.if((0, codegen_1._) `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen
    	            .assign(data, (0, codegen_1._) `${data}[0]`)
    	            .assign(dataType, (0, codegen_1._) `typeof ${data}`)
    	            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
    	    }
    	    gen.if((0, codegen_1._) `${coerced} !== undefined`);
    	    for (const t of coerceTo) {
    	        if (COERCIBLE.has(t) || (t === "array" && opts.coerceTypes === "array")) {
    	            coerceSpecificType(t);
    	        }
    	    }
    	    gen.else();
    	    reportTypeError(it);
    	    gen.endIf();
    	    gen.if((0, codegen_1._) `${coerced} !== undefined`, () => {
    	        gen.assign(data, coerced);
    	        assignParentData(it, coerced);
    	    });
    	    function coerceSpecificType(t) {
    	        switch (t) {
    	            case "string":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} == "number" || ${dataType} == "boolean"`)
    	                    .assign(coerced, (0, codegen_1._) `"" + ${data}`)
    	                    .elseIf((0, codegen_1._) `${data} === null`)
    	                    .assign(coerced, (0, codegen_1._) `""`);
    	                return;
    	            case "number":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`)
    	                    .assign(coerced, (0, codegen_1._) `+${data}`);
    	                return;
    	            case "integer":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`)
    	                    .assign(coerced, (0, codegen_1._) `+${data}`);
    	                return;
    	            case "boolean":
    	                gen
    	                    .elseIf((0, codegen_1._) `${data} === "false" || ${data} === 0 || ${data} === null`)
    	                    .assign(coerced, false)
    	                    .elseIf((0, codegen_1._) `${data} === "true" || ${data} === 1`)
    	                    .assign(coerced, true);
    	                return;
    	            case "null":
    	                gen.elseIf((0, codegen_1._) `${data} === "" || ${data} === 0 || ${data} === false`);
    	                gen.assign(coerced, null);
    	                return;
    	            case "array":
    	                gen
    	                    .elseIf((0, codegen_1._) `${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`)
    	                    .assign(coerced, (0, codegen_1._) `[${data}]`);
    	        }
    	    }
    	}
    	function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    	    // TODO use gen.property
    	    gen.if((0, codegen_1._) `${parentData} !== undefined`, () => gen.assign((0, codegen_1._) `${parentData}[${parentDataProperty}]`, expr));
    	}
    	function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    	    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    	    let cond;
    	    switch (dataType) {
    	        case "null":
    	            return (0, codegen_1._) `${data} ${EQ} null`;
    	        case "array":
    	            cond = (0, codegen_1._) `Array.isArray(${data})`;
    	            break;
    	        case "object":
    	            cond = (0, codegen_1._) `${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
    	            break;
    	        case "integer":
    	            cond = numCond((0, codegen_1._) `!(${data} % 1) && !isNaN(${data})`);
    	            break;
    	        case "number":
    	            cond = numCond();
    	            break;
    	        default:
    	            return (0, codegen_1._) `typeof ${data} ${EQ} ${dataType}`;
    	    }
    	    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    	    function numCond(_cond = codegen_1.nil) {
    	        return (0, codegen_1.and)((0, codegen_1._) `typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._) `isFinite(${data})` : codegen_1.nil);
    	    }
    	}
    	exports.checkDataType = checkDataType;
    	function checkDataTypes(dataTypes, data, strictNums, correct) {
    	    if (dataTypes.length === 1) {
    	        return checkDataType(dataTypes[0], data, strictNums, correct);
    	    }
    	    let cond;
    	    const types = (0, util_1.toHash)(dataTypes);
    	    if (types.array && types.object) {
    	        const notObj = (0, codegen_1._) `typeof ${data} != "object"`;
    	        cond = types.null ? notObj : (0, codegen_1._) `!${data} || ${notObj}`;
    	        delete types.null;
    	        delete types.array;
    	        delete types.object;
    	    }
    	    else {
    	        cond = codegen_1.nil;
    	    }
    	    if (types.number)
    	        delete types.integer;
    	    for (const t in types)
    	        cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    	    return cond;
    	}
    	exports.checkDataTypes = checkDataTypes;
    	const typeError = {
    	    message: ({ schema }) => `must be ${schema}`,
    	    params: ({ schema, schemaValue }) => typeof schema == "string" ? (0, codegen_1._) `{type: ${schema}}` : (0, codegen_1._) `{type: ${schemaValue}}`,
    	};
    	function reportTypeError(it) {
    	    const cxt = getTypeErrorContext(it);
    	    (0, errors_1.reportError)(cxt, typeError);
    	}
    	exports.reportTypeError = reportTypeError;
    	function getTypeErrorContext(it) {
    	    const { gen, data, schema } = it;
    	    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    	    return {
    	        gen,
    	        keyword: "type",
    	        data,
    	        schema: schema.type,
    	        schemaCode,
    	        schemaValue: schemaCode,
    	        parentSchema: schema,
    	        params: {},
    	        it,
    	    };
    	}
    	
    } (dataType));

    var defaults = {};

    var hasRequiredDefaults;

    function requireDefaults () {
    	if (hasRequiredDefaults) return defaults;
    	hasRequiredDefaults = 1;
    	Object.defineProperty(defaults, "__esModule", { value: true });
    	defaults.assignDefaults = void 0;
    	const codegen_1 = requireCodegen();
    	const util_1 = util$6;
    	function assignDefaults(it, ty) {
    	    const { properties, items } = it.schema;
    	    if (ty === "object" && properties) {
    	        for (const key in properties) {
    	            assignDefault(it, key, properties[key].default);
    	        }
    	    }
    	    else if (ty === "array" && Array.isArray(items)) {
    	        items.forEach((sch, i) => assignDefault(it, i, sch.default));
    	    }
    	}
    	defaults.assignDefaults = assignDefaults;
    	function assignDefault(it, prop, defaultValue) {
    	    const { gen, compositeRule, data, opts } = it;
    	    if (defaultValue === undefined)
    	        return;
    	    const childData = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)(prop)}`;
    	    if (compositeRule) {
    	        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
    	        return;
    	    }
    	    let condition = (0, codegen_1._) `${childData} === undefined`;
    	    if (opts.useDefaults === "empty") {
    	        condition = (0, codegen_1._) `${condition} || ${childData} === null || ${childData} === ""`;
    	    }
    	    // `${childData} === undefined` +
    	    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    	    gen.if(condition, (0, codegen_1._) `${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
    	}
    	
    	return defaults;
    }

    var keyword = {};

    var code = {};

    Object.defineProperty(code, "__esModule", { value: true });
    code.validateUnion = code.validateArray = code.usePattern = code.callValidateCode = code.schemaProperties = code.allSchemaProperties = code.noPropertyInData = code.propertyInData = code.isOwnProperty = code.hasPropFunc = code.reportMissingProp = code.checkMissingProp = code.checkReportMissingProp = void 0;
    const codegen_1$w = requireCodegen();
    const util_1$r = util$6;
    const names_1$6 = names$1;
    const util_2$1 = util$6;
    function checkReportMissingProp(cxt, prop) {
        const { gen, data, it } = cxt;
        gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
            cxt.setParams({ missingProperty: (0, codegen_1$w._) `${prop}` }, true);
            cxt.error();
        });
    }
    code.checkReportMissingProp = checkReportMissingProp;
    function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
        return (0, codegen_1$w.or)(...properties.map((prop) => (0, codegen_1$w.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1$w._) `${missing} = ${prop}`)));
    }
    code.checkMissingProp = checkMissingProp;
    function reportMissingProp(cxt, missing) {
        cxt.setParams({ missingProperty: missing }, true);
        cxt.error();
    }
    code.reportMissingProp = reportMissingProp;
    function hasPropFunc(gen) {
        return gen.scopeValue("func", {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            ref: Object.prototype.hasOwnProperty,
            code: (0, codegen_1$w._) `Object.prototype.hasOwnProperty`,
        });
    }
    code.hasPropFunc = hasPropFunc;
    function isOwnProperty(gen, data, property) {
        return (0, codegen_1$w._) `${hasPropFunc(gen)}.call(${data}, ${property})`;
    }
    code.isOwnProperty = isOwnProperty;
    function propertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1$w._) `${data}${(0, codegen_1$w.getProperty)(property)} !== undefined`;
        return ownProperties ? (0, codegen_1$w._) `${cond} && ${isOwnProperty(gen, data, property)}` : cond;
    }
    code.propertyInData = propertyInData;
    function noPropertyInData(gen, data, property, ownProperties) {
        const cond = (0, codegen_1$w._) `${data}${(0, codegen_1$w.getProperty)(property)} === undefined`;
        return ownProperties ? (0, codegen_1$w.or)(cond, (0, codegen_1$w.not)(isOwnProperty(gen, data, property))) : cond;
    }
    code.noPropertyInData = noPropertyInData;
    function allSchemaProperties(schemaMap) {
        return schemaMap ? Object.keys(schemaMap).filter((p) => p !== "__proto__") : [];
    }
    code.allSchemaProperties = allSchemaProperties;
    function schemaProperties(it, schemaMap) {
        return allSchemaProperties(schemaMap).filter((p) => !(0, util_1$r.alwaysValidSchema)(it, schemaMap[p]));
    }
    code.schemaProperties = schemaProperties;
    function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
        const dataAndSchema = passSchema ? (0, codegen_1$w._) `${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
        const valCxt = [
            [names_1$6.default.instancePath, (0, codegen_1$w.strConcat)(names_1$6.default.instancePath, errorPath)],
            [names_1$6.default.parentData, it.parentData],
            [names_1$6.default.parentDataProperty, it.parentDataProperty],
            [names_1$6.default.rootData, names_1$6.default.rootData],
        ];
        if (it.opts.dynamicRef)
            valCxt.push([names_1$6.default.dynamicAnchors, names_1$6.default.dynamicAnchors]);
        const args = (0, codegen_1$w._) `${dataAndSchema}, ${gen.object(...valCxt)}`;
        return context !== codegen_1$w.nil ? (0, codegen_1$w._) `${func}.call(${context}, ${args})` : (0, codegen_1$w._) `${func}(${args})`;
    }
    code.callValidateCode = callValidateCode;
    const newRegExp = (0, codegen_1$w._) `new RegExp`;
    function usePattern({ gen, it: { opts } }, pattern) {
        const u = opts.unicodeRegExp ? "u" : "";
        const { regExp } = opts.code;
        const rx = regExp(pattern, u);
        return gen.scopeValue("pattern", {
            key: rx.toString(),
            ref: rx,
            code: (0, codegen_1$w._) `${regExp.code === "new RegExp" ? newRegExp : (0, util_2$1.useFunc)(gen, regExp)}(${pattern}, ${u})`,
        });
    }
    code.usePattern = usePattern;
    function validateArray(cxt) {
        const { gen, data, keyword, it } = cxt;
        const valid = gen.name("valid");
        if (it.allErrors) {
            const validArr = gen.let("valid", true);
            validateItems(() => gen.assign(validArr, false));
            return validArr;
        }
        gen.var(valid, true);
        validateItems(() => gen.break());
        return valid;
        function validateItems(notValid) {
            const len = gen.const("len", (0, codegen_1$w._) `${data}.length`);
            gen.forRange("i", 0, len, (i) => {
                cxt.subschema({
                    keyword,
                    dataProp: i,
                    dataPropType: util_1$r.Type.Num,
                }, valid);
                gen.if((0, codegen_1$w.not)(valid), notValid);
            });
        }
    }
    code.validateArray = validateArray;
    function validateUnion(cxt) {
        const { gen, schema, keyword, it } = cxt;
        /* istanbul ignore if */
        if (!Array.isArray(schema))
            throw new Error("ajv implementation error");
        const alwaysValid = schema.some((sch) => (0, util_1$r.alwaysValidSchema)(it, sch));
        if (alwaysValid && !it.opts.unevaluated)
            return;
        const valid = gen.let("valid", false);
        const schValid = gen.name("_valid");
        gen.block(() => schema.forEach((_sch, i) => {
            const schCxt = cxt.subschema({
                keyword,
                schemaProp: i,
                compositeRule: true,
            }, schValid);
            gen.assign(valid, (0, codegen_1$w._) `${valid} || ${schValid}`);
            const merged = cxt.mergeValidEvaluated(schCxt, schValid);
            // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
            // or if all properties and items were evaluated (it.props === true && it.items === true)
            if (!merged)
                gen.if((0, codegen_1$w.not)(valid));
        }));
        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
    }
    code.validateUnion = validateUnion;

    var hasRequiredKeyword;

    function requireKeyword () {
    	if (hasRequiredKeyword) return keyword;
    	hasRequiredKeyword = 1;
    	Object.defineProperty(keyword, "__esModule", { value: true });
    	keyword.validateKeywordUsage = keyword.validSchemaType = keyword.funcKeywordCode = keyword.macroKeywordCode = void 0;
    	const codegen_1 = requireCodegen();
    	const names_1 = names$1;
    	const code_1 = code;
    	const errors_1 = requireErrors();
    	function macroKeywordCode(cxt, def) {
    	    const { gen, keyword, schema, parentSchema, it } = cxt;
    	    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    	    const schemaRef = useKeyword(gen, keyword, macroSchema);
    	    if (it.opts.validateSchema !== false)
    	        it.self.validateSchema(macroSchema, true);
    	    const valid = gen.name("valid");
    	    cxt.subschema({
    	        schema: macroSchema,
    	        schemaPath: codegen_1.nil,
    	        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    	        topSchemaRef: schemaRef,
    	        compositeRule: true,
    	    }, valid);
    	    cxt.pass(valid, () => cxt.error(true));
    	}
    	keyword.macroKeywordCode = macroKeywordCode;
    	function funcKeywordCode(cxt, def) {
    	    var _a;
    	    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    	    checkAsyncKeyword(it, def);
    	    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    	    const validateRef = useKeyword(gen, keyword, validate);
    	    const valid = gen.let("valid");
    	    cxt.block$data(valid, validateKeyword);
    	    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    	    function validateKeyword() {
    	        if (def.errors === false) {
    	            assignValid();
    	            if (def.modifying)
    	                modifyData(cxt);
    	            reportErrs(() => cxt.error());
    	        }
    	        else {
    	            const ruleErrs = def.async ? validateAsync() : validateSync();
    	            if (def.modifying)
    	                modifyData(cxt);
    	            reportErrs(() => addErrs(cxt, ruleErrs));
    	        }
    	    }
    	    function validateAsync() {
    	        const ruleErrs = gen.let("ruleErrs", null);
    	        gen.try(() => assignValid((0, codegen_1._) `await `), (e) => gen.assign(valid, false).if((0, codegen_1._) `${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._) `${e}.errors`), () => gen.throw(e)));
    	        return ruleErrs;
    	    }
    	    function validateSync() {
    	        const validateErrs = (0, codegen_1._) `${validateRef}.errors`;
    	        gen.assign(validateErrs, null);
    	        assignValid(codegen_1.nil);
    	        return validateErrs;
    	    }
    	    function assignValid(_await = def.async ? (0, codegen_1._) `await ` : codegen_1.nil) {
    	        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
    	        const passSchema = !(("compile" in def && !$data) || def.schema === false);
    	        gen.assign(valid, (0, codegen_1._) `${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    	    }
    	    function reportErrs(errors) {
    	        var _a;
    	        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    	    }
    	}
    	keyword.funcKeywordCode = funcKeywordCode;
    	function modifyData(cxt) {
    	    const { gen, data, it } = cxt;
    	    gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._) `${it.parentData}[${it.parentDataProperty}]`));
    	}
    	function addErrs(cxt, errs) {
    	    const { gen } = cxt;
    	    gen.if((0, codegen_1._) `Array.isArray(${errs})`, () => {
    	        gen
    	            .assign(names_1.default.vErrors, (0, codegen_1._) `${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`)
    	            .assign(names_1.default.errors, (0, codegen_1._) `${names_1.default.vErrors}.length`);
    	        (0, errors_1.extendErrors)(cxt);
    	    }, () => cxt.error());
    	}
    	function checkAsyncKeyword({ schemaEnv }, def) {
    	    if (def.async && !schemaEnv.$async)
    	        throw new Error("async keyword in sync schema");
    	}
    	function useKeyword(gen, keyword, result) {
    	    if (result === undefined)
    	        throw new Error(`keyword "${keyword}" failed to compile`);
    	    return gen.scopeValue("keyword", typeof result == "function" ? { ref: result } : { ref: result, code: (0, codegen_1.stringify)(result) });
    	}
    	function validSchemaType(schema, schemaType, allowUndefined = false) {
    	    // TODO add tests
    	    return (!schemaType.length ||
    	        schemaType.some((st) => st === "array"
    	            ? Array.isArray(schema)
    	            : st === "object"
    	                ? schema && typeof schema == "object" && !Array.isArray(schema)
    	                : typeof schema == st || (allowUndefined && typeof schema == "undefined")));
    	}
    	keyword.validSchemaType = validSchemaType;
    	function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    	    /* istanbul ignore if */
    	    if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
    	        throw new Error("ajv implementation error");
    	    }
    	    const deps = def.dependencies;
    	    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
    	        throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    	    }
    	    if (def.validateSchema) {
    	        const valid = def.validateSchema(schema[keyword]);
    	        if (!valid) {
    	            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
    	                self.errorsText(def.validateSchema.errors);
    	            if (opts.validateSchema === "log")
    	                self.logger.error(msg);
    	            else
    	                throw new Error(msg);
    	        }
    	    }
    	}
    	keyword.validateKeywordUsage = validateKeywordUsage;
    	
    	return keyword;
    }

    var subschema = {};

    var hasRequiredSubschema;

    function requireSubschema () {
    	if (hasRequiredSubschema) return subschema;
    	hasRequiredSubschema = 1;
    	Object.defineProperty(subschema, "__esModule", { value: true });
    	subschema.extendSubschemaMode = subschema.extendSubschemaData = subschema.getSubschema = void 0;
    	const codegen_1 = requireCodegen();
    	const util_1 = util$6;
    	function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    	    if (keyword !== undefined && schema !== undefined) {
    	        throw new Error('both "keyword" and "schema" passed, only one allowed');
    	    }
    	    if (keyword !== undefined) {
    	        const sch = it.schema[keyword];
    	        return schemaProp === undefined
    	            ? {
    	                schema: sch,
    	                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
    	                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
    	            }
    	            : {
    	                schema: sch[schemaProp],
    	                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
    	                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,
    	            };
    	    }
    	    if (schema !== undefined) {
    	        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
    	            throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
    	        }
    	        return {
    	            schema,
    	            schemaPath,
    	            topSchemaRef,
    	            errSchemaPath,
    	        };
    	    }
    	    throw new Error('either "keyword" or "schema" must be passed');
    	}
    	subschema.getSubschema = getSubschema;
    	function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    	    if (data !== undefined && dataProp !== undefined) {
    	        throw new Error('both "data" and "dataProp" passed, only one allowed');
    	    }
    	    const { gen } = it;
    	    if (dataProp !== undefined) {
    	        const { errorPath, dataPathArr, opts } = it;
    	        const nextData = gen.let("data", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
    	        dataContextProps(nextData);
    	        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
    	        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;
    	        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
    	    }
    	    if (data !== undefined) {
    	        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
    	        dataContextProps(nextData);
    	        if (propertyName !== undefined)
    	            subschema.propertyName = propertyName;
    	        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    	    }
    	    if (dataTypes)
    	        subschema.dataTypes = dataTypes;
    	    function dataContextProps(_nextData) {
    	        subschema.data = _nextData;
    	        subschema.dataLevel = it.dataLevel + 1;
    	        subschema.dataTypes = [];
    	        it.definedProperties = new Set();
    	        subschema.parentData = it.data;
    	        subschema.dataNames = [...it.dataNames, _nextData];
    	    }
    	}
    	subschema.extendSubschemaData = extendSubschemaData;
    	function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    	    if (compositeRule !== undefined)
    	        subschema.compositeRule = compositeRule;
    	    if (createErrors !== undefined)
    	        subschema.createErrors = createErrors;
    	    if (allErrors !== undefined)
    	        subschema.allErrors = allErrors;
    	    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    	    subschema.jtdMetadata = jtdMetadata; // not inherited
    	}
    	subschema.extendSubschemaMode = extendSubschemaMode;
    	
    	return subschema;
    }

    var resolve$1 = {};

    var jsonSchemaTraverseExports = {};
    var jsonSchemaTraverse = {
      get exports(){ return jsonSchemaTraverseExports; },
      set exports(v){ jsonSchemaTraverseExports = v; },
    };

    var traverse$1 = jsonSchemaTraverse.exports = function (schema, opts, cb) {
      // Legacy support for v0.3.1 and earlier.
      if (typeof opts == 'function') {
        cb = opts;
        opts = {};
      }

      cb = opts.cb || cb;
      var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
      var post = cb.post || function() {};

      _traverse(opts, pre, post, schema, '', schema);
    };


    traverse$1.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true
    };

    traverse$1.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true
    };

    traverse$1.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true
    };

    traverse$1.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true
    };


    function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse$1.arrayKeywords) {
              for (var i=0; i<sch.length; i++)
                _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
            }
          } else if (key in traverse$1.propsKeywords) {
            if (sch && typeof sch == 'object') {
              for (var prop in sch)
                _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          } else if (key in traverse$1.keywords || (opts.allKeys && !(key in traverse$1.skipKeywords))) {
            _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
          }
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      }
    }


    function escapeJsonPtr(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }

    Object.defineProperty(resolve$1, "__esModule", { value: true });
    resolve$1.getSchemaRefs = resolve$1.resolveUrl = resolve$1.normalizeId = resolve$1._getFullPath = resolve$1.getFullPath = resolve$1.inlineRef = void 0;
    const util_1$q = util$6;
    const equal$2 = fastDeepEqual;
    const traverse = jsonSchemaTraverseExports;
    // TODO refactor to use keyword definitions
    const SIMPLE_INLINED = new Set([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum",
        "const",
    ]);
    function inlineRef(schema, limit = true) {
        if (typeof schema == "boolean")
            return true;
        if (limit === true)
            return !hasRef$1(schema);
        if (!limit)
            return false;
        return countKeys(schema) <= limit;
    }
    resolve$1.inlineRef = inlineRef;
    const REF_KEYWORDS = new Set([
        "$ref",
        "$recursiveRef",
        "$recursiveAnchor",
        "$dynamicRef",
        "$dynamicAnchor",
    ]);
    function hasRef$1(schema) {
        for (const key in schema) {
            if (REF_KEYWORDS.has(key))
                return true;
            const sch = schema[key];
            if (Array.isArray(sch) && sch.some(hasRef$1))
                return true;
            if (typeof sch == "object" && hasRef$1(sch))
                return true;
        }
        return false;
    }
    function countKeys(schema) {
        let count = 0;
        for (const key in schema) {
            if (key === "$ref")
                return Infinity;
            count++;
            if (SIMPLE_INLINED.has(key))
                continue;
            if (typeof schema[key] == "object") {
                (0, util_1$q.eachItem)(schema[key], (sch) => (count += countKeys(sch)));
            }
            if (count === Infinity)
                return Infinity;
        }
        return count;
    }
    function getFullPath(resolver, id = "", normalize) {
        if (normalize !== false)
            id = normalizeId(id);
        const p = resolver.parse(id);
        return _getFullPath(resolver, p);
    }
    resolve$1.getFullPath = getFullPath;
    function _getFullPath(resolver, p) {
        const serialized = resolver.serialize(p);
        return serialized.split("#")[0] + "#";
    }
    resolve$1._getFullPath = _getFullPath;
    const TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
    }
    resolve$1.normalizeId = normalizeId;
    function resolveUrl(resolver, baseId, id) {
        id = normalizeId(id);
        return resolver.resolve(baseId, id);
    }
    resolve$1.resolveUrl = resolveUrl;
    const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs(schema, baseId) {
        if (typeof schema == "boolean")
            return {};
        const { schemaId, uriResolver } = this.opts;
        const schId = normalizeId(schema[schemaId] || baseId);
        const baseIds = { "": schId };
        const pathPrefix = getFullPath(uriResolver, schId, false);
        const localRefs = {};
        const schemaRefs = new Set();
        traverse(schema, { allKeys: true }, (sch, jsonPtr, _, parentJsonPtr) => {
            if (parentJsonPtr === undefined)
                return;
            const fullPath = pathPrefix + jsonPtr;
            let baseId = baseIds[parentJsonPtr];
            if (typeof sch[schemaId] == "string")
                baseId = addRef.call(this, sch[schemaId]);
            addAnchor.call(this, sch.$anchor);
            addAnchor.call(this, sch.$dynamicAnchor);
            baseIds[jsonPtr] = baseId;
            function addRef(ref) {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                const _resolve = this.opts.uriResolver.resolve;
                ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);
                if (schemaRefs.has(ref))
                    throw ambiguos(ref);
                schemaRefs.add(ref);
                let schOrRef = this.refs[ref];
                if (typeof schOrRef == "string")
                    schOrRef = this.refs[schOrRef];
                if (typeof schOrRef == "object") {
                    checkAmbiguosRef(sch, schOrRef.schema, ref);
                }
                else if (ref !== normalizeId(fullPath)) {
                    if (ref[0] === "#") {
                        checkAmbiguosRef(sch, localRefs[ref], ref);
                        localRefs[ref] = sch;
                    }
                    else {
                        this.refs[ref] = fullPath;
                    }
                }
                return ref;
            }
            function addAnchor(anchor) {
                if (typeof anchor == "string") {
                    if (!ANCHOR.test(anchor))
                        throw new Error(`invalid anchor "${anchor}"`);
                    addRef.call(this, `#${anchor}`);
                }
            }
        });
        return localRefs;
        function checkAmbiguosRef(sch1, sch2, ref) {
            if (sch2 !== undefined && !equal$2(sch1, sch2))
                throw ambiguos(ref);
        }
        function ambiguos(ref) {
            return new Error(`reference "${ref}" resolves to more than one schema`);
        }
    }
    resolve$1.getSchemaRefs = getSchemaRefs;

    var hasRequiredValidate;

    function requireValidate () {
    	if (hasRequiredValidate) return validate$2;
    	hasRequiredValidate = 1;
    	Object.defineProperty(validate$2, "__esModule", { value: true });
    	validate$2.getData = validate$2.KeywordCxt = validate$2.validateFunctionCode = void 0;
    	const boolSchema_1 = requireBoolSchema();
    	const dataType_1 = dataType;
    	const applicability_1 = requireApplicability();
    	const dataType_2 = dataType;
    	const defaults_1 = requireDefaults();
    	const keyword_1 = requireKeyword();
    	const subschema_1 = requireSubschema();
    	const codegen_1 = requireCodegen();
    	const names_1 = names$1;
    	const resolve_1 = resolve$1;
    	const util_1 = util$6;
    	const errors_1 = requireErrors();
    	// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
    	function validateFunctionCode(it) {
    	    if (isSchemaObj(it)) {
    	        checkKeywords(it);
    	        if (schemaCxtHasRules(it)) {
    	            topSchemaObjCode(it);
    	            return;
    	        }
    	    }
    	    validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    	}
    	validate$2.validateFunctionCode = validateFunctionCode;
    	function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    	    if (opts.code.es5) {
    	        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
    	            gen.code((0, codegen_1._) `"use strict"; ${funcSourceUrl(schema, opts)}`);
    	            destructureValCxtES5(gen, opts);
    	            gen.code(body);
    	        });
    	    }
    	    else {
    	        gen.func(validateName, (0, codegen_1._) `${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
    	    }
    	}
    	function destructureValCxt(opts) {
    	    return (0, codegen_1._) `{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._) `, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
    	}
    	function destructureValCxtES5(gen, opts) {
    	    gen.if(names_1.default.valCxt, () => {
    	        gen.var(names_1.default.instancePath, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.instancePath}`);
    	        gen.var(names_1.default.parentData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentData}`);
    	        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
    	        gen.var(names_1.default.rootData, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.rootData}`);
    	        if (opts.dynamicRef)
    	            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    	    }, () => {
    	        gen.var(names_1.default.instancePath, (0, codegen_1._) `""`);
    	        gen.var(names_1.default.parentData, (0, codegen_1._) `undefined`);
    	        gen.var(names_1.default.parentDataProperty, (0, codegen_1._) `undefined`);
    	        gen.var(names_1.default.rootData, names_1.default.data);
    	        if (opts.dynamicRef)
    	            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._) `{}`);
    	    });
    	}
    	function topSchemaObjCode(it) {
    	    const { schema, opts, gen } = it;
    	    validateFunction(it, () => {
    	        if (opts.$comment && schema.$comment)
    	            commentKeyword(it);
    	        checkNoDefault(it);
    	        gen.let(names_1.default.vErrors, null);
    	        gen.let(names_1.default.errors, 0);
    	        if (opts.unevaluated)
    	            resetEvaluated(it);
    	        typeAndKeywords(it);
    	        returnResults(it);
    	    });
    	    return;
    	}
    	function resetEvaluated(it) {
    	    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    	    const { gen, validateName } = it;
    	    it.evaluated = gen.const("evaluated", (0, codegen_1._) `${validateName}.evaluated`);
    	    gen.if((0, codegen_1._) `${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._) `${it.evaluated}.props`, (0, codegen_1._) `undefined`));
    	    gen.if((0, codegen_1._) `${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._) `${it.evaluated}.items`, (0, codegen_1._) `undefined`));
    	}
    	function funcSourceUrl(schema, opts) {
    	    const schId = typeof schema == "object" && schema[opts.schemaId];
    	    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._) `/*# sourceURL=${schId} */` : codegen_1.nil;
    	}
    	// schema compilation - this function is used recursively to generate code for sub-schemas
    	function subschemaCode(it, valid) {
    	    if (isSchemaObj(it)) {
    	        checkKeywords(it);
    	        if (schemaCxtHasRules(it)) {
    	            subSchemaObjCode(it, valid);
    	            return;
    	        }
    	    }
    	    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
    	}
    	function schemaCxtHasRules({ schema, self }) {
    	    if (typeof schema == "boolean")
    	        return !schema;
    	    for (const key in schema)
    	        if (self.RULES.all[key])
    	            return true;
    	    return false;
    	}
    	function isSchemaObj(it) {
    	    return typeof it.schema != "boolean";
    	}
    	function subSchemaObjCode(it, valid) {
    	    const { schema, gen, opts } = it;
    	    if (opts.$comment && schema.$comment)
    	        commentKeyword(it);
    	    updateContext(it);
    	    checkAsyncSchema(it);
    	    const errsCount = gen.const("_errs", names_1.default.errors);
    	    typeAndKeywords(it, errsCount);
    	    // TODO var
    	    gen.var(valid, (0, codegen_1._) `${errsCount} === ${names_1.default.errors}`);
    	}
    	function checkKeywords(it) {
    	    (0, util_1.checkUnknownRules)(it);
    	    checkRefsAndKeywords(it);
    	}
    	function typeAndKeywords(it, errsCount) {
    	    if (it.opts.jtd)
    	        return schemaKeywords(it, [], false, errsCount);
    	    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    	    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    	    schemaKeywords(it, types, !checkedTypes, errsCount);
    	}
    	function checkRefsAndKeywords(it) {
    	    const { schema, errSchemaPath, opts, self } = it;
    	    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
    	        self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
    	    }
    	}
    	function checkNoDefault(it) {
    	    const { schema, opts } = it;
    	    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
    	        (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
    	    }
    	}
    	function updateContext(it) {
    	    const schId = it.schema[it.opts.schemaId];
    	    if (schId)
    	        it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
    	}
    	function checkAsyncSchema(it) {
    	    if (it.schema.$async && !it.schemaEnv.$async)
    	        throw new Error("async schema in sync schema");
    	}
    	function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    	    const msg = schema.$comment;
    	    if (opts.$comment === true) {
    	        gen.code((0, codegen_1._) `${names_1.default.self}.logger.log(${msg})`);
    	    }
    	    else if (typeof opts.$comment == "function") {
    	        const schemaPath = (0, codegen_1.str) `${errSchemaPath}/$comment`;
    	        const rootName = gen.scopeValue("root", { ref: schemaEnv.root });
    	        gen.code((0, codegen_1._) `${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    	    }
    	}
    	function returnResults(it) {
    	    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    	    if (schemaEnv.$async) {
    	        // TODO assign unevaluated
    	        gen.if((0, codegen_1._) `${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._) `new ${ValidationError}(${names_1.default.vErrors})`));
    	    }
    	    else {
    	        gen.assign((0, codegen_1._) `${validateName}.errors`, names_1.default.vErrors);
    	        if (opts.unevaluated)
    	            assignEvaluated(it);
    	        gen.return((0, codegen_1._) `${names_1.default.errors} === 0`);
    	    }
    	}
    	function assignEvaluated({ gen, evaluated, props, items }) {
    	    if (props instanceof codegen_1.Name)
    	        gen.assign((0, codegen_1._) `${evaluated}.props`, props);
    	    if (items instanceof codegen_1.Name)
    	        gen.assign((0, codegen_1._) `${evaluated}.items`, items);
    	}
    	function schemaKeywords(it, types, typeErrors, errsCount) {
    	    const { gen, schema, data, allErrors, opts, self } = it;
    	    const { RULES } = self;
    	    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
    	        gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
    	        return;
    	    }
    	    if (!opts.jtd)
    	        checkStrictTypes(it, types);
    	    gen.block(() => {
    	        for (const group of RULES.rules)
    	            groupKeywords(group);
    	        groupKeywords(RULES.post);
    	    });
    	    function groupKeywords(group) {
    	        if (!(0, applicability_1.shouldUseGroup)(schema, group))
    	            return;
    	        if (group.type) {
    	            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
    	            iterateKeywords(it, group);
    	            if (types.length === 1 && types[0] === group.type && typeErrors) {
    	                gen.else();
    	                (0, dataType_2.reportTypeError)(it);
    	            }
    	            gen.endIf();
    	        }
    	        else {
    	            iterateKeywords(it, group);
    	        }
    	        // TODO make it "ok" call?
    	        if (!allErrors)
    	            gen.if((0, codegen_1._) `${names_1.default.errors} === ${errsCount || 0}`);
    	    }
    	}
    	function iterateKeywords(it, group) {
    	    const { gen, schema, opts: { useDefaults }, } = it;
    	    if (useDefaults)
    	        (0, defaults_1.assignDefaults)(it, group.type);
    	    gen.block(() => {
    	        for (const rule of group.rules) {
    	            if ((0, applicability_1.shouldUseRule)(schema, rule)) {
    	                keywordCode(it, rule.keyword, rule.definition, group.type);
    	            }
    	        }
    	    });
    	}
    	function checkStrictTypes(it, types) {
    	    if (it.schemaEnv.meta || !it.opts.strictTypes)
    	        return;
    	    checkContextTypes(it, types);
    	    if (!it.opts.allowUnionTypes)
    	        checkMultipleTypes(it, types);
    	    checkKeywordTypes(it, it.dataTypes);
    	}
    	function checkContextTypes(it, types) {
    	    if (!types.length)
    	        return;
    	    if (!it.dataTypes.length) {
    	        it.dataTypes = types;
    	        return;
    	    }
    	    types.forEach((t) => {
    	        if (!includesType(it.dataTypes, t)) {
    	            strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
    	        }
    	    });
    	    narrowSchemaTypes(it, types);
    	}
    	function checkMultipleTypes(it, ts) {
    	    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
    	        strictTypesError(it, "use allowUnionTypes to allow union type keyword");
    	    }
    	}
    	function checkKeywordTypes(it, ts) {
    	    const rules = it.self.RULES.all;
    	    for (const keyword in rules) {
    	        const rule = rules[keyword];
    	        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
    	            const { type } = rule.definition;
    	            if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
    	                strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
    	            }
    	        }
    	    }
    	}
    	function hasApplicableType(schTs, kwdT) {
    	    return schTs.includes(kwdT) || (kwdT === "number" && schTs.includes("integer"));
    	}
    	function includesType(ts, t) {
    	    return ts.includes(t) || (t === "integer" && ts.includes("number"));
    	}
    	function narrowSchemaTypes(it, withTypes) {
    	    const ts = [];
    	    for (const t of it.dataTypes) {
    	        if (includesType(withTypes, t))
    	            ts.push(t);
    	        else if (withTypes.includes("integer") && t === "number")
    	            ts.push("integer");
    	    }
    	    it.dataTypes = ts;
    	}
    	function strictTypesError(it, msg) {
    	    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    	    msg += ` at "${schemaPath}" (strictTypes)`;
    	    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
    	}
    	class KeywordCxt {
    	    constructor(it, def, keyword) {
    	        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
    	        this.gen = it.gen;
    	        this.allErrors = it.allErrors;
    	        this.keyword = keyword;
    	        this.data = it.data;
    	        this.schema = it.schema[keyword];
    	        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
    	        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
    	        this.schemaType = def.schemaType;
    	        this.parentSchema = it.schema;
    	        this.params = {};
    	        this.it = it;
    	        this.def = def;
    	        if (this.$data) {
    	            this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
    	        }
    	        else {
    	            this.schemaCode = this.schemaValue;
    	            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
    	                throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
    	            }
    	        }
    	        if ("code" in def ? def.trackErrors : def.errors !== false) {
    	            this.errsCount = it.gen.const("_errs", names_1.default.errors);
    	        }
    	    }
    	    result(condition, successAction, failAction) {
    	        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    	    }
    	    failResult(condition, successAction, failAction) {
    	        this.gen.if(condition);
    	        if (failAction)
    	            failAction();
    	        else
    	            this.error();
    	        if (successAction) {
    	            this.gen.else();
    	            successAction();
    	            if (this.allErrors)
    	                this.gen.endIf();
    	        }
    	        else {
    	            if (this.allErrors)
    	                this.gen.endIf();
    	            else
    	                this.gen.else();
    	        }
    	    }
    	    pass(condition, failAction) {
    	        this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    	    }
    	    fail(condition) {
    	        if (condition === undefined) {
    	            this.error();
    	            if (!this.allErrors)
    	                this.gen.if(false); // this branch will be removed by gen.optimize
    	            return;
    	        }
    	        this.gen.if(condition);
    	        this.error();
    	        if (this.allErrors)
    	            this.gen.endIf();
    	        else
    	            this.gen.else();
    	    }
    	    fail$data(condition) {
    	        if (!this.$data)
    	            return this.fail(condition);
    	        const { schemaCode } = this;
    	        this.fail((0, codegen_1._) `${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    	    }
    	    error(append, errorParams, errorPaths) {
    	        if (errorParams) {
    	            this.setParams(errorParams);
    	            this._error(append, errorPaths);
    	            this.setParams({});
    	            return;
    	        }
    	        this._error(append, errorPaths);
    	    }
    	    _error(append, errorPaths) {
    	        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    	    }
    	    $dataError() {
    	        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    	    }
    	    reset() {
    	        if (this.errsCount === undefined)
    	            throw new Error('add "trackErrors" to keyword definition');
    	        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    	    }
    	    ok(cond) {
    	        if (!this.allErrors)
    	            this.gen.if(cond);
    	    }
    	    setParams(obj, assign) {
    	        if (assign)
    	            Object.assign(this.params, obj);
    	        else
    	            this.params = obj;
    	    }
    	    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
    	        this.gen.block(() => {
    	            this.check$data(valid, $dataValid);
    	            codeBlock();
    	        });
    	    }
    	    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
    	        if (!this.$data)
    	            return;
    	        const { gen, schemaCode, schemaType, def } = this;
    	        gen.if((0, codegen_1.or)((0, codegen_1._) `${schemaCode} === undefined`, $dataValid));
    	        if (valid !== codegen_1.nil)
    	            gen.assign(valid, true);
    	        if (schemaType.length || def.validateSchema) {
    	            gen.elseIf(this.invalid$data());
    	            this.$dataError();
    	            if (valid !== codegen_1.nil)
    	                gen.assign(valid, false);
    	        }
    	        gen.else();
    	    }
    	    invalid$data() {
    	        const { gen, schemaCode, schemaType, def, it } = this;
    	        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
    	        function wrong$DataType() {
    	            if (schemaType.length) {
    	                /* istanbul ignore if */
    	                if (!(schemaCode instanceof codegen_1.Name))
    	                    throw new Error("ajv implementation error");
    	                const st = Array.isArray(schemaType) ? schemaType : [schemaType];
    	                return (0, codegen_1._) `${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
    	            }
    	            return codegen_1.nil;
    	        }
    	        function invalid$DataSchema() {
    	            if (def.validateSchema) {
    	                const validateSchemaRef = gen.scopeValue("validate$data", { ref: def.validateSchema }); // TODO value.code for standalone
    	                return (0, codegen_1._) `!${validateSchemaRef}(${schemaCode})`;
    	            }
    	            return codegen_1.nil;
    	        }
    	    }
    	    subschema(appl, valid) {
    	        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
    	        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
    	        (0, subschema_1.extendSubschemaMode)(subschema, appl);
    	        const nextContext = { ...this.it, ...subschema, items: undefined, props: undefined };
    	        subschemaCode(nextContext, valid);
    	        return nextContext;
    	    }
    	    mergeEvaluated(schemaCxt, toName) {
    	        const { it, gen } = this;
    	        if (!it.opts.unevaluated)
    	            return;
    	        if (it.props !== true && schemaCxt.props !== undefined) {
    	            it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
    	        }
    	        if (it.items !== true && schemaCxt.items !== undefined) {
    	            it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
    	        }
    	    }
    	    mergeValidEvaluated(schemaCxt, valid) {
    	        const { it, gen } = this;
    	        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
    	            gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
    	            return true;
    	        }
    	    }
    	}
    	validate$2.KeywordCxt = KeywordCxt;
    	function keywordCode(it, keyword, def, ruleType) {
    	    const cxt = new KeywordCxt(it, def, keyword);
    	    if ("code" in def) {
    	        def.code(cxt, ruleType);
    	    }
    	    else if (cxt.$data && def.validate) {
    	        (0, keyword_1.funcKeywordCode)(cxt, def);
    	    }
    	    else if ("macro" in def) {
    	        (0, keyword_1.macroKeywordCode)(cxt, def);
    	    }
    	    else if (def.compile || def.validate) {
    	        (0, keyword_1.funcKeywordCode)(cxt, def);
    	    }
    	}
    	const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    	const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    	function getData($data, { dataLevel, dataNames, dataPathArr }) {
    	    let jsonPointer;
    	    let data;
    	    if ($data === "")
    	        return names_1.default.rootData;
    	    if ($data[0] === "/") {
    	        if (!JSON_POINTER.test($data))
    	            throw new Error(`Invalid JSON-pointer: ${$data}`);
    	        jsonPointer = $data;
    	        data = names_1.default.rootData;
    	    }
    	    else {
    	        const matches = RELATIVE_JSON_POINTER.exec($data);
    	        if (!matches)
    	            throw new Error(`Invalid JSON-pointer: ${$data}`);
    	        const up = +matches[1];
    	        jsonPointer = matches[2];
    	        if (jsonPointer === "#") {
    	            if (up >= dataLevel)
    	                throw new Error(errorMsg("property/index", up));
    	            return dataPathArr[dataLevel - up];
    	        }
    	        if (up > dataLevel)
    	            throw new Error(errorMsg("data", up));
    	        data = dataNames[dataLevel - up];
    	        if (!jsonPointer)
    	            return data;
    	    }
    	    let expr = data;
    	    const segments = jsonPointer.split("/");
    	    for (const segment of segments) {
    	        if (segment) {
    	            data = (0, codegen_1._) `${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
    	            expr = (0, codegen_1._) `${expr} && ${data}`;
    	        }
    	    }
    	    return expr;
    	    function errorMsg(pointerType, up) {
    	        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    	    }
    	}
    	validate$2.getData = getData;
    	
    	return validate$2;
    }

    var validation_error = {};

    var hasRequiredValidation_error;

    function requireValidation_error () {
    	if (hasRequiredValidation_error) return validation_error;
    	hasRequiredValidation_error = 1;
    	Object.defineProperty(validation_error, "__esModule", { value: true });
    	class ValidationError extends Error {
    	    constructor(errors) {
    	        super("validation failed");
    	        this.errors = errors;
    	        this.ajv = this.validation = true;
    	    }
    	}
    	validation_error.default = ValidationError;
    	
    	return validation_error;
    }

    var ref_error = {};

    var hasRequiredRef_error;

    function requireRef_error () {
    	if (hasRequiredRef_error) return ref_error;
    	hasRequiredRef_error = 1;
    	Object.defineProperty(ref_error, "__esModule", { value: true });
    	const resolve_1 = resolve$1;
    	class MissingRefError extends Error {
    	    constructor(resolver, baseId, ref, msg) {
    	        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
    	        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
    	        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    	    }
    	}
    	ref_error.default = MissingRefError;
    	
    	return ref_error;
    }

    var compile = {};

    Object.defineProperty(compile, "__esModule", { value: true });
    compile.resolveSchema = compile.getCompilingSchema = compile.resolveRef = compile.compileSchema = compile.SchemaEnv = void 0;
    const codegen_1$v = requireCodegen();
    const validation_error_1 = requireValidation_error();
    const names_1$5 = names$1;
    const resolve_1 = resolve$1;
    const util_1$p = util$6;
    const validate_1$1 = requireValidate();
    class SchemaEnv {
        constructor(env) {
            var _a;
            this.refs = {};
            this.dynamicAnchors = {};
            let schema;
            if (typeof env.schema == "object")
                schema = env.schema;
            this.schema = env.schema;
            this.schemaId = env.schemaId;
            this.root = env.root || this;
            this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
            this.schemaPath = env.schemaPath;
            this.localRefs = env.localRefs;
            this.meta = env.meta;
            this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
            this.refs = {};
        }
    }
    compile.SchemaEnv = SchemaEnv;
    // let codeSize = 0
    // let nodeCount = 0
    // Compiles schema in SchemaEnv
    function compileSchema(sch) {
        // TODO refactor - remove compilations
        const _sch = getCompilingSchema.call(this, sch);
        if (_sch)
            return _sch;
        const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1$v.CodeGen(this.scope, { es5, lines, ownProperties });
        let _ValidationError;
        if (sch.$async) {
            _ValidationError = gen.scopeValue("Error", {
                ref: validation_error_1.default,
                code: (0, codegen_1$v._) `require("ajv/dist/runtime/validation_error").default`,
            });
        }
        const validateName = gen.scopeName("validate");
        sch.validateName = validateName;
        const schemaCxt = {
            gen,
            allErrors: this.opts.allErrors,
            data: names_1$5.default.data,
            parentData: names_1$5.default.parentData,
            parentDataProperty: names_1$5.default.parentDataProperty,
            dataNames: [names_1$5.default.data],
            dataPathArr: [codegen_1$v.nil],
            dataLevel: 0,
            dataTypes: [],
            definedProperties: new Set(),
            topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true
                ? { ref: sch.schema, code: (0, codegen_1$v.stringify)(sch.schema) }
                : { ref: sch.schema }),
            validateName,
            ValidationError: _ValidationError,
            schema: sch.schema,
            schemaEnv: sch,
            rootId,
            baseId: sch.baseId || rootId,
            schemaPath: codegen_1$v.nil,
            errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
            errorPath: (0, codegen_1$v._) `""`,
            opts: this.opts,
            self: this,
        };
        let sourceCode;
        try {
            this._compilations.add(sch);
            (0, validate_1$1.validateFunctionCode)(schemaCxt);
            gen.optimize(this.opts.code.optimize);
            // gen.optimize(1)
            const validateCode = gen.toString();
            sourceCode = `${gen.scopeRefs(names_1$5.default.scope)}return ${validateCode}`;
            // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
            if (this.opts.code.process)
                sourceCode = this.opts.code.process(sourceCode, sch);
            // console.log("\n\n\n *** \n", sourceCode)
            const makeValidate = new Function(`${names_1$5.default.self}`, `${names_1$5.default.scope}`, sourceCode);
            const validate = makeValidate(this, this.scope.get());
            this.scope.value(validateName, { ref: validate });
            validate.errors = null;
            validate.schema = sch.schema;
            validate.schemaEnv = sch;
            if (sch.$async)
                validate.$async = true;
            if (this.opts.code.source === true) {
                validate.source = { validateName, validateCode, scopeValues: gen._values };
            }
            if (this.opts.unevaluated) {
                const { props, items } = schemaCxt;
                validate.evaluated = {
                    props: props instanceof codegen_1$v.Name ? undefined : props,
                    items: items instanceof codegen_1$v.Name ? undefined : items,
                    dynamicProps: props instanceof codegen_1$v.Name,
                    dynamicItems: items instanceof codegen_1$v.Name,
                };
                if (validate.source)
                    validate.source.evaluated = (0, codegen_1$v.stringify)(validate.evaluated);
            }
            sch.validate = validate;
            return sch;
        }
        catch (e) {
            delete sch.validate;
            delete sch.validateName;
            if (sourceCode)
                this.logger.error("Error compiling schema, function code:", sourceCode);
            // console.log("\n\n\n *** \n", sourceCode, this.opts)
            throw e;
        }
        finally {
            this._compilations.delete(sch);
        }
    }
    compile.compileSchema = compileSchema;
    function resolveRef(root, baseId, ref) {
        var _a;
        ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
        const schOrFunc = root.refs[ref];
        if (schOrFunc)
            return schOrFunc;
        let _sch = resolve.call(this, root, ref);
        if (_sch === undefined) {
            const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
            const { schemaId } = this.opts;
            if (schema)
                _sch = new SchemaEnv({ schema, schemaId, root, baseId });
        }
        if (_sch === undefined)
            return;
        return (root.refs[ref] = inlineOrCompile.call(this, _sch));
    }
    compile.resolveRef = resolveRef;
    function inlineOrCompile(sch) {
        if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
            return sch.schema;
        return sch.validate ? sch : compileSchema.call(this, sch);
    }
    // Index of schema compilation in the currently compiled list
    function getCompilingSchema(schEnv) {
        for (const sch of this._compilations) {
            if (sameSchemaEnv(sch, schEnv))
                return sch;
        }
    }
    compile.getCompilingSchema = getCompilingSchema;
    function sameSchemaEnv(s1, s2) {
        return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
    }
    // resolve and compile the references ($ref)
    // TODO returns AnySchemaObject (if the schema can be inlined) or validation function
    function resolve(root, // information about the root schema for the current schema
    ref // reference to resolve
    ) {
        let sch;
        while (typeof (sch = this.refs[ref]) == "string")
            ref = sch;
        return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
    }
    // Resolve schema, its root and baseId
    function resolveSchema(root, // root object with properties schema, refs TODO below SchemaEnv is assigned to it
    ref // reference to resolve
    ) {
        const p = this.opts.uriResolver.parse(ref);
        const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
        let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
        // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
        if (Object.keys(root.schema).length > 0 && refPath === baseId) {
            return getJsonPointer.call(this, p, root);
        }
        const id = (0, resolve_1.normalizeId)(refPath);
        const schOrRef = this.refs[id] || this.schemas[id];
        if (typeof schOrRef == "string") {
            const sch = resolveSchema.call(this, root, schOrRef);
            if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object")
                return;
            return getJsonPointer.call(this, p, sch);
        }
        if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object")
            return;
        if (!schOrRef.validate)
            compileSchema.call(this, schOrRef);
        if (id === (0, resolve_1.normalizeId)(ref)) {
            const { schema } = schOrRef;
            const { schemaId } = this.opts;
            const schId = schema[schemaId];
            if (schId)
                baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
            return new SchemaEnv({ schema, schemaId, root, baseId });
        }
        return getJsonPointer.call(this, p, schOrRef);
    }
    compile.resolveSchema = resolveSchema;
    const PREVENT_SCOPE_CHANGE = new Set([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions",
    ]);
    function getJsonPointer(parsedRef, { baseId, schema, root }) {
        var _a;
        if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/")
            return;
        for (const part of parsedRef.fragment.slice(1).split("/")) {
            if (typeof schema === "boolean")
                return;
            const partSchema = schema[(0, util_1$p.unescapeFragment)(part)];
            if (partSchema === undefined)
                return;
            schema = partSchema;
            // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
            const schId = typeof schema === "object" && schema[this.opts.schemaId];
            if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
                baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
            }
        }
        let env;
        if (typeof schema != "boolean" && schema.$ref && !(0, util_1$p.schemaHasRulesButRef)(schema, this.RULES)) {
            const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
            env = resolveSchema.call(this, root, $ref);
        }
        // even though resolution failed we need to return SchemaEnv to throw exception
        // so that compileAsync loads missing schema.
        const { schemaId } = this.opts;
        env = env || new SchemaEnv({ schema, schemaId, root, baseId });
        if (env.schema !== env.root.schema)
            return env;
        return undefined;
    }

    var $id$1 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
    var description = "Meta-schema for $data reference (JSON AnySchema extension proposal)";
    var type$2 = "object";
    var required$1 = [
    	"$data"
    ];
    var properties$3 = {
    	$data: {
    		type: "string",
    		anyOf: [
    			{
    				format: "relative-json-pointer"
    			},
    			{
    				format: "json-pointer"
    			}
    		]
    	}
    };
    var additionalProperties$1 = false;
    var require$$9 = {
    	$id: $id$1,
    	description: description,
    	type: type$2,
    	required: required$1,
    	properties: properties$3,
    	additionalProperties: additionalProperties$1
    };

    var uri$1 = {};

    Object.defineProperty(uri$1, "__esModule", { value: true });
    const uri = uri_allExports;
    uri.code = 'require("ajv/dist/runtime/uri").default';
    uri$1.default = uri;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    	var validate_1 = requireValidate();
    	Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    	var codegen_1 = requireCodegen();
    	Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    	Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    	Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    	Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    	Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    	Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    	const validation_error_1 = requireValidation_error();
    	const ref_error_1 = requireRef_error();
    	const rules_1 = rules;
    	const compile_1 = compile;
    	const codegen_2 = requireCodegen();
    	const resolve_1 = resolve$1;
    	const dataType_1 = dataType;
    	const util_1 = util$6;
    	const $dataRefSchema = require$$9;
    	const uri_1 = uri$1;
    	const defaultRegExp = (str, flags) => new RegExp(str, flags);
    	defaultRegExp.code = "new RegExp";
    	const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
    	const EXT_SCOPE_NAMES = new Set([
    	    "validate",
    	    "serialize",
    	    "parse",
    	    "wrapper",
    	    "root",
    	    "schema",
    	    "keyword",
    	    "pattern",
    	    "formats",
    	    "validate$data",
    	    "func",
    	    "obj",
    	    "Error",
    	]);
    	const removedOptions = {
    	    errorDataPath: "",
    	    format: "`validateFormats: false` can be used instead.",
    	    nullable: '"nullable" keyword is supported by default.',
    	    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    	    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    	    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    	    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    	    sourceCode: "Use option `code: {source: true}`",
    	    strictDefaults: "It is default now, see option `strict`.",
    	    strictKeywords: "It is default now, see option `strict`.",
    	    uniqueItems: '"uniqueItems" keyword is always validated.',
    	    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    	    cache: "Map is used as cache, schema object as key.",
    	    serialize: "Map is used as cache, schema object as key.",
    	    ajvErrors: "It is default now.",
    	};
    	const deprecatedOptions = {
    	    ignoreKeywordsWithRef: "",
    	    jsPropertySyntax: "",
    	    unicode: '"minLength"/"maxLength" account for unicode characters by default.',
    	};
    	const MAX_EXPRESSION = 200;
    	// eslint-disable-next-line complexity
    	function requiredOptions(o) {
    	    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    	    const s = o.strict;
    	    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
    	    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    	    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
    	    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
    	    return {
    	        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
    	        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
    	        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
    	        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
    	        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
    	        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
    	        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
    	        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
    	        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
    	        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
    	        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
    	        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
    	        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
    	        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
    	        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
    	        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
    	        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
    	        uriResolver: uriResolver,
    	    };
    	}
    	class Ajv {
    	    constructor(opts = {}) {
    	        this.schemas = {};
    	        this.refs = {};
    	        this.formats = {};
    	        this._compilations = new Set();
    	        this._loading = {};
    	        this._cache = new Map();
    	        opts = this.opts = { ...opts, ...requiredOptions(opts) };
    	        const { es5, lines } = this.opts.code;
    	        this.scope = new codegen_2.ValueScope({ scope: {}, prefixes: EXT_SCOPE_NAMES, es5, lines });
    	        this.logger = getLogger(opts.logger);
    	        const formatOpt = opts.validateFormats;
    	        opts.validateFormats = false;
    	        this.RULES = (0, rules_1.getRules)();
    	        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
    	        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
    	        this._metaOpts = getMetaSchemaOptions.call(this);
    	        if (opts.formats)
    	            addInitialFormats.call(this);
    	        this._addVocabularies();
    	        this._addDefaultMetaSchema();
    	        if (opts.keywords)
    	            addInitialKeywords.call(this, opts.keywords);
    	        if (typeof opts.meta == "object")
    	            this.addMetaSchema(opts.meta);
    	        addInitialSchemas.call(this);
    	        opts.validateFormats = formatOpt;
    	    }
    	    _addVocabularies() {
    	        this.addKeyword("$async");
    	    }
    	    _addDefaultMetaSchema() {
    	        const { $data, meta, schemaId } = this.opts;
    	        let _dataRefSchema = $dataRefSchema;
    	        if (schemaId === "id") {
    	            _dataRefSchema = { ...$dataRefSchema };
    	            _dataRefSchema.id = _dataRefSchema.$id;
    	            delete _dataRefSchema.$id;
    	        }
    	        if (meta && $data)
    	            this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    	    }
    	    defaultMeta() {
    	        const { meta, schemaId } = this.opts;
    	        return (this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined);
    	    }
    	    validate(schemaKeyRef, // key, ref or schema object
    	    data // to be validated
    	    ) {
    	        let v;
    	        if (typeof schemaKeyRef == "string") {
    	            v = this.getSchema(schemaKeyRef);
    	            if (!v)
    	                throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
    	        }
    	        else {
    	            v = this.compile(schemaKeyRef);
    	        }
    	        const valid = v(data);
    	        if (!("$async" in v))
    	            this.errors = v.errors;
    	        return valid;
    	    }
    	    compile(schema, _meta) {
    	        const sch = this._addSchema(schema, _meta);
    	        return (sch.validate || this._compileSchemaEnv(sch));
    	    }
    	    compileAsync(schema, meta) {
    	        if (typeof this.opts.loadSchema != "function") {
    	            throw new Error("options.loadSchema should be a function");
    	        }
    	        const { loadSchema } = this.opts;
    	        return runCompileAsync.call(this, schema, meta);
    	        async function runCompileAsync(_schema, _meta) {
    	            await loadMetaSchema.call(this, _schema.$schema);
    	            const sch = this._addSchema(_schema, _meta);
    	            return sch.validate || _compileAsync.call(this, sch);
    	        }
    	        async function loadMetaSchema($ref) {
    	            if ($ref && !this.getSchema($ref)) {
    	                await runCompileAsync.call(this, { $ref }, true);
    	            }
    	        }
    	        async function _compileAsync(sch) {
    	            try {
    	                return this._compileSchemaEnv(sch);
    	            }
    	            catch (e) {
    	                if (!(e instanceof ref_error_1.default))
    	                    throw e;
    	                checkLoaded.call(this, e);
    	                await loadMissingSchema.call(this, e.missingSchema);
    	                return _compileAsync.call(this, sch);
    	            }
    	        }
    	        function checkLoaded({ missingSchema: ref, missingRef }) {
    	            if (this.refs[ref]) {
    	                throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
    	            }
    	        }
    	        async function loadMissingSchema(ref) {
    	            const _schema = await _loadSchema.call(this, ref);
    	            if (!this.refs[ref])
    	                await loadMetaSchema.call(this, _schema.$schema);
    	            if (!this.refs[ref])
    	                this.addSchema(_schema, ref, meta);
    	        }
    	        async function _loadSchema(ref) {
    	            const p = this._loading[ref];
    	            if (p)
    	                return p;
    	            try {
    	                return await (this._loading[ref] = loadSchema(ref));
    	            }
    	            finally {
    	                delete this._loading[ref];
    	            }
    	        }
    	    }
    	    // Adds schema to the instance
    	    addSchema(schema, // If array is passed, `key` will be ignored
    	    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
    	    _meta, // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
    	    _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    	    ) {
    	        if (Array.isArray(schema)) {
    	            for (const sch of schema)
    	                this.addSchema(sch, undefined, _meta, _validateSchema);
    	            return this;
    	        }
    	        let id;
    	        if (typeof schema === "object") {
    	            const { schemaId } = this.opts;
    	            id = schema[schemaId];
    	            if (id !== undefined && typeof id != "string") {
    	                throw new Error(`schema ${schemaId} must be string`);
    	            }
    	        }
    	        key = (0, resolve_1.normalizeId)(key || id);
    	        this._checkUnique(key);
    	        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
    	        return this;
    	    }
    	    // Add schema that will be used to validate other schemas
    	    // options in META_IGNORE_OPTIONS are alway set to false
    	    addMetaSchema(schema, key, // schema key
    	    _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    	    ) {
    	        this.addSchema(schema, key, true, _validateSchema);
    	        return this;
    	    }
    	    //  Validate schema against its meta-schema
    	    validateSchema(schema, throwOrLogError) {
    	        if (typeof schema == "boolean")
    	            return true;
    	        let $schema;
    	        $schema = schema.$schema;
    	        if ($schema !== undefined && typeof $schema != "string") {
    	            throw new Error("$schema must be a string");
    	        }
    	        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
    	        if (!$schema) {
    	            this.logger.warn("meta-schema not available");
    	            this.errors = null;
    	            return true;
    	        }
    	        const valid = this.validate($schema, schema);
    	        if (!valid && throwOrLogError) {
    	            const message = "schema is invalid: " + this.errorsText();
    	            if (this.opts.validateSchema === "log")
    	                this.logger.error(message);
    	            else
    	                throw new Error(message);
    	        }
    	        return valid;
    	    }
    	    // Get compiled schema by `key` or `ref`.
    	    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    	    getSchema(keyRef) {
    	        let sch;
    	        while (typeof (sch = getSchEnv.call(this, keyRef)) == "string")
    	            keyRef = sch;
    	        if (sch === undefined) {
    	            const { schemaId } = this.opts;
    	            const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
    	            sch = compile_1.resolveSchema.call(this, root, keyRef);
    	            if (!sch)
    	                return;
    	            this.refs[keyRef] = sch;
    	        }
    	        return (sch.validate || this._compileSchemaEnv(sch));
    	    }
    	    // Remove cached schema(s).
    	    // If no parameter is passed all schemas but meta-schemas are removed.
    	    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    	    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    	    removeSchema(schemaKeyRef) {
    	        if (schemaKeyRef instanceof RegExp) {
    	            this._removeAllSchemas(this.schemas, schemaKeyRef);
    	            this._removeAllSchemas(this.refs, schemaKeyRef);
    	            return this;
    	        }
    	        switch (typeof schemaKeyRef) {
    	            case "undefined":
    	                this._removeAllSchemas(this.schemas);
    	                this._removeAllSchemas(this.refs);
    	                this._cache.clear();
    	                return this;
    	            case "string": {
    	                const sch = getSchEnv.call(this, schemaKeyRef);
    	                if (typeof sch == "object")
    	                    this._cache.delete(sch.schema);
    	                delete this.schemas[schemaKeyRef];
    	                delete this.refs[schemaKeyRef];
    	                return this;
    	            }
    	            case "object": {
    	                const cacheKey = schemaKeyRef;
    	                this._cache.delete(cacheKey);
    	                let id = schemaKeyRef[this.opts.schemaId];
    	                if (id) {
    	                    id = (0, resolve_1.normalizeId)(id);
    	                    delete this.schemas[id];
    	                    delete this.refs[id];
    	                }
    	                return this;
    	            }
    	            default:
    	                throw new Error("ajv.removeSchema: invalid parameter");
    	        }
    	    }
    	    // add "vocabulary" - a collection of keywords
    	    addVocabulary(definitions) {
    	        for (const def of definitions)
    	            this.addKeyword(def);
    	        return this;
    	    }
    	    addKeyword(kwdOrDef, def // deprecated
    	    ) {
    	        let keyword;
    	        if (typeof kwdOrDef == "string") {
    	            keyword = kwdOrDef;
    	            if (typeof def == "object") {
    	                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
    	                def.keyword = keyword;
    	            }
    	        }
    	        else if (typeof kwdOrDef == "object" && def === undefined) {
    	            def = kwdOrDef;
    	            keyword = def.keyword;
    	            if (Array.isArray(keyword) && !keyword.length) {
    	                throw new Error("addKeywords: keyword must be string or non-empty array");
    	            }
    	        }
    	        else {
    	            throw new Error("invalid addKeywords parameters");
    	        }
    	        checkKeyword.call(this, keyword, def);
    	        if (!def) {
    	            (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
    	            return this;
    	        }
    	        keywordMetaschema.call(this, def);
    	        const definition = {
    	            ...def,
    	            type: (0, dataType_1.getJSONTypes)(def.type),
    	            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
    	        };
    	        (0, util_1.eachItem)(keyword, definition.type.length === 0
    	            ? (k) => addRule.call(this, k, definition)
    	            : (k) => definition.type.forEach((t) => addRule.call(this, k, definition, t)));
    	        return this;
    	    }
    	    getKeyword(keyword) {
    	        const rule = this.RULES.all[keyword];
    	        return typeof rule == "object" ? rule.definition : !!rule;
    	    }
    	    // Remove keyword
    	    removeKeyword(keyword) {
    	        // TODO return type should be Ajv
    	        const { RULES } = this;
    	        delete RULES.keywords[keyword];
    	        delete RULES.all[keyword];
    	        for (const group of RULES.rules) {
    	            const i = group.rules.findIndex((rule) => rule.keyword === keyword);
    	            if (i >= 0)
    	                group.rules.splice(i, 1);
    	        }
    	        return this;
    	    }
    	    // Add format
    	    addFormat(name, format) {
    	        if (typeof format == "string")
    	            format = new RegExp(format);
    	        this.formats[name] = format;
    	        return this;
    	    }
    	    errorsText(errors = this.errors, // optional array of validation errors
    	    { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    	    ) {
    	        if (!errors || errors.length === 0)
    	            return "No errors";
    	        return errors
    	            .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
    	            .reduce((text, msg) => text + separator + msg);
    	    }
    	    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
    	        const rules = this.RULES.all;
    	        metaSchema = JSON.parse(JSON.stringify(metaSchema));
    	        for (const jsonPointer of keywordsJsonPointers) {
    	            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
    	            let keywords = metaSchema;
    	            for (const seg of segments)
    	                keywords = keywords[seg];
    	            for (const key in rules) {
    	                const rule = rules[key];
    	                if (typeof rule != "object")
    	                    continue;
    	                const { $data } = rule.definition;
    	                const schema = keywords[key];
    	                if ($data && schema)
    	                    keywords[key] = schemaOrData(schema);
    	            }
    	        }
    	        return metaSchema;
    	    }
    	    _removeAllSchemas(schemas, regex) {
    	        for (const keyRef in schemas) {
    	            const sch = schemas[keyRef];
    	            if (!regex || regex.test(keyRef)) {
    	                if (typeof sch == "string") {
    	                    delete schemas[keyRef];
    	                }
    	                else if (sch && !sch.meta) {
    	                    this._cache.delete(sch.schema);
    	                    delete schemas[keyRef];
    	                }
    	            }
    	        }
    	    }
    	    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
    	        let id;
    	        const { schemaId } = this.opts;
    	        if (typeof schema == "object") {
    	            id = schema[schemaId];
    	        }
    	        else {
    	            if (this.opts.jtd)
    	                throw new Error("schema must be object");
    	            else if (typeof schema != "boolean")
    	                throw new Error("schema must be object or boolean");
    	        }
    	        let sch = this._cache.get(schema);
    	        if (sch !== undefined)
    	            return sch;
    	        baseId = (0, resolve_1.normalizeId)(id || baseId);
    	        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
    	        sch = new compile_1.SchemaEnv({ schema, schemaId, meta, baseId, localRefs });
    	        this._cache.set(sch.schema, sch);
    	        if (addSchema && !baseId.startsWith("#")) {
    	            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
    	            if (baseId)
    	                this._checkUnique(baseId);
    	            this.refs[baseId] = sch;
    	        }
    	        if (validateSchema)
    	            this.validateSchema(schema, true);
    	        return sch;
    	    }
    	    _checkUnique(id) {
    	        if (this.schemas[id] || this.refs[id]) {
    	            throw new Error(`schema with key or id "${id}" already exists`);
    	        }
    	    }
    	    _compileSchemaEnv(sch) {
    	        if (sch.meta)
    	            this._compileMetaSchema(sch);
    	        else
    	            compile_1.compileSchema.call(this, sch);
    	        /* istanbul ignore if */
    	        if (!sch.validate)
    	            throw new Error("ajv implementation error");
    	        return sch.validate;
    	    }
    	    _compileMetaSchema(sch) {
    	        const currentOpts = this.opts;
    	        this.opts = this._metaOpts;
    	        try {
    	            compile_1.compileSchema.call(this, sch);
    	        }
    	        finally {
    	            this.opts = currentOpts;
    	        }
    	    }
    	}
    	exports.default = Ajv;
    	Ajv.ValidationError = validation_error_1.default;
    	Ajv.MissingRefError = ref_error_1.default;
    	function checkOptions(checkOpts, options, msg, log = "error") {
    	    for (const key in checkOpts) {
    	        const opt = key;
    	        if (opt in options)
    	            this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    	    }
    	}
    	function getSchEnv(keyRef) {
    	    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
    	    return this.schemas[keyRef] || this.refs[keyRef];
    	}
    	function addInitialSchemas() {
    	    const optsSchemas = this.opts.schemas;
    	    if (!optsSchemas)
    	        return;
    	    if (Array.isArray(optsSchemas))
    	        this.addSchema(optsSchemas);
    	    else
    	        for (const key in optsSchemas)
    	            this.addSchema(optsSchemas[key], key);
    	}
    	function addInitialFormats() {
    	    for (const name in this.opts.formats) {
    	        const format = this.opts.formats[name];
    	        if (format)
    	            this.addFormat(name, format);
    	    }
    	}
    	function addInitialKeywords(defs) {
    	    if (Array.isArray(defs)) {
    	        this.addVocabulary(defs);
    	        return;
    	    }
    	    this.logger.warn("keywords option as map is deprecated, pass array");
    	    for (const keyword in defs) {
    	        const def = defs[keyword];
    	        if (!def.keyword)
    	            def.keyword = keyword;
    	        this.addKeyword(def);
    	    }
    	}
    	function getMetaSchemaOptions() {
    	    const metaOpts = { ...this.opts };
    	    for (const opt of META_IGNORE_OPTIONS)
    	        delete metaOpts[opt];
    	    return metaOpts;
    	}
    	const noLogs = { log() { }, warn() { }, error() { } };
    	function getLogger(logger) {
    	    if (logger === false)
    	        return noLogs;
    	    if (logger === undefined)
    	        return console;
    	    if (logger.log && logger.warn && logger.error)
    	        return logger;
    	    throw new Error("logger must implement log, warn and error methods");
    	}
    	const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    	function checkKeyword(keyword, def) {
    	    const { RULES } = this;
    	    (0, util_1.eachItem)(keyword, (kwd) => {
    	        if (RULES.keywords[kwd])
    	            throw new Error(`Keyword ${kwd} is already defined`);
    	        if (!KEYWORD_NAME.test(kwd))
    	            throw new Error(`Keyword ${kwd} has invalid name`);
    	    });
    	    if (!def)
    	        return;
    	    if (def.$data && !("code" in def || "validate" in def)) {
    	        throw new Error('$data keyword must have "code" or "validate" function');
    	    }
    	}
    	function addRule(keyword, definition, dataType) {
    	    var _a;
    	    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    	    if (dataType && post)
    	        throw new Error('keyword with "post" flag cannot have "type"');
    	    const { RULES } = this;
    	    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t }) => t === dataType);
    	    if (!ruleGroup) {
    	        ruleGroup = { type: dataType, rules: [] };
    	        RULES.rules.push(ruleGroup);
    	    }
    	    RULES.keywords[keyword] = true;
    	    if (!definition)
    	        return;
    	    const rule = {
    	        keyword,
    	        definition: {
    	            ...definition,
    	            type: (0, dataType_1.getJSONTypes)(definition.type),
    	            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
    	        },
    	    };
    	    if (definition.before)
    	        addBeforeRule.call(this, ruleGroup, rule, definition.before);
    	    else
    	        ruleGroup.rules.push(rule);
    	    RULES.all[keyword] = rule;
    	    (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd) => this.addKeyword(kwd));
    	}
    	function addBeforeRule(ruleGroup, rule, before) {
    	    const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
    	    if (i >= 0) {
    	        ruleGroup.rules.splice(i, 0, rule);
    	    }
    	    else {
    	        ruleGroup.rules.push(rule);
    	        this.logger.warn(`rule ${before} is not defined`);
    	    }
    	}
    	function keywordMetaschema(def) {
    	    let { metaSchema } = def;
    	    if (metaSchema === undefined)
    	        return;
    	    if (def.$data && this.opts.$data)
    	        metaSchema = schemaOrData(metaSchema);
    	    def.validateSchema = this.compile(metaSchema, true);
    	}
    	const $dataRef = {
    	    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    	};
    	function schemaOrData(schema) {
    	    return { anyOf: [schema, $dataRef] };
    	}
    	
    } (core$2));

    var draft7 = {};

    var core$1 = {};

    var id = {};

    Object.defineProperty(id, "__esModule", { value: true });
    const def$A = {
        keyword: "id",
        code() {
            throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
        },
    };
    id.default = def$A;

    var ref$1 = {};

    Object.defineProperty(ref$1, "__esModule", { value: true });
    ref$1.callRef = ref$1.getValidate = void 0;
    const ref_error_1$3 = requireRef_error();
    const code_1$c = code;
    const codegen_1$u = requireCodegen();
    const names_1$4 = names$1;
    const compile_1$2 = compile;
    const util_1$o = util$6;
    const def$z = {
        keyword: "$ref",
        schemaType: "string",
        code(cxt) {
            const { gen, schema: $ref, it } = cxt;
            const { baseId, schemaEnv: env, validateName, opts, self } = it;
            const { root } = env;
            if (($ref === "#" || $ref === "#/") && baseId === root.baseId)
                return callRootRef();
            const schOrEnv = compile_1$2.resolveRef.call(self, root, baseId, $ref);
            if (schOrEnv === undefined)
                throw new ref_error_1$3.default(it.opts.uriResolver, baseId, $ref);
            if (schOrEnv instanceof compile_1$2.SchemaEnv)
                return callValidate(schOrEnv);
            return inlineRefSchema(schOrEnv);
            function callRootRef() {
                if (env === root)
                    return callRef(cxt, validateName, env, env.$async);
                const rootName = gen.scopeValue("root", { ref: root });
                return callRef(cxt, (0, codegen_1$u._) `${rootName}.validate`, root, root.$async);
            }
            function callValidate(sch) {
                const v = getValidate(cxt, sch);
                callRef(cxt, v, sch, sch.$async);
            }
            function inlineRefSchema(sch) {
                const schName = gen.scopeValue("schema", opts.code.source === true ? { ref: sch, code: (0, codegen_1$u.stringify)(sch) } : { ref: sch });
                const valid = gen.name("valid");
                const schCxt = cxt.subschema({
                    schema: sch,
                    dataTypes: [],
                    schemaPath: codegen_1$u.nil,
                    topSchemaRef: schName,
                    errSchemaPath: $ref,
                }, valid);
                cxt.mergeEvaluated(schCxt);
                cxt.ok(valid);
            }
        },
    };
    function getValidate(cxt, sch) {
        const { gen } = cxt;
        return sch.validate
            ? gen.scopeValue("validate", { ref: sch.validate })
            : (0, codegen_1$u._) `${gen.scopeValue("wrapper", { ref: sch })}.validate`;
    }
    ref$1.getValidate = getValidate;
    function callRef(cxt, v, sch, $async) {
        const { gen, it } = cxt;
        const { allErrors, schemaEnv: env, opts } = it;
        const passCxt = opts.passContext ? names_1$4.default.this : codegen_1$u.nil;
        if ($async)
            callAsyncRef();
        else
            callSyncRef();
        function callAsyncRef() {
            if (!env.$async)
                throw new Error("async schema referenced by sync schema");
            const valid = gen.let("valid");
            gen.try(() => {
                gen.code((0, codegen_1$u._) `await ${(0, code_1$c.callValidateCode)(cxt, v, passCxt)}`);
                addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
                if (!allErrors)
                    gen.assign(valid, true);
            }, (e) => {
                gen.if((0, codegen_1$u._) `!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
                addErrorsFrom(e);
                if (!allErrors)
                    gen.assign(valid, false);
            });
            cxt.ok(valid);
        }
        function callSyncRef() {
            cxt.result((0, code_1$c.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
        }
        function addErrorsFrom(source) {
            const errs = (0, codegen_1$u._) `${source}.errors`;
            gen.assign(names_1$4.default.vErrors, (0, codegen_1$u._) `${names_1$4.default.vErrors} === null ? ${errs} : ${names_1$4.default.vErrors}.concat(${errs})`); // TODO tagged
            gen.assign(names_1$4.default.errors, (0, codegen_1$u._) `${names_1$4.default.vErrors}.length`);
        }
        function addEvaluatedFrom(source) {
            var _a;
            if (!it.opts.unevaluated)
                return;
            const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
            // TODO refactor
            if (it.props !== true) {
                if (schEvaluated && !schEvaluated.dynamicProps) {
                    if (schEvaluated.props !== undefined) {
                        it.props = util_1$o.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                    }
                }
                else {
                    const props = gen.var("props", (0, codegen_1$u._) `${source}.evaluated.props`);
                    it.props = util_1$o.mergeEvaluated.props(gen, props, it.props, codegen_1$u.Name);
                }
            }
            if (it.items !== true) {
                if (schEvaluated && !schEvaluated.dynamicItems) {
                    if (schEvaluated.items !== undefined) {
                        it.items = util_1$o.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                    }
                }
                else {
                    const items = gen.var("items", (0, codegen_1$u._) `${source}.evaluated.items`);
                    it.items = util_1$o.mergeEvaluated.items(gen, items, it.items, codegen_1$u.Name);
                }
            }
        }
    }
    ref$1.callRef = callRef;
    ref$1.default = def$z;

    Object.defineProperty(core$1, "__esModule", { value: true });
    const id_1 = id;
    const ref_1$4 = ref$1;
    const core = [
        "$schema",
        "$id",
        "$defs",
        "$vocabulary",
        { keyword: "$comment" },
        "definitions",
        id_1.default,
        ref_1$4.default,
    ];
    core$1.default = core;

    var validation$1 = {};

    var limitNumber = {};

    Object.defineProperty(limitNumber, "__esModule", { value: true });
    const codegen_1$t = requireCodegen();
    const ops = codegen_1$t.operators;
    const KWDs = {
        maximum: { okStr: "<=", ok: ops.LTE, fail: ops.GT },
        minimum: { okStr: ">=", ok: ops.GTE, fail: ops.LT },
        exclusiveMaximum: { okStr: "<", ok: ops.LT, fail: ops.GTE },
        exclusiveMinimum: { okStr: ">", ok: ops.GT, fail: ops.LTE },
    };
    const error$l = {
        message: ({ keyword, schemaCode }) => (0, codegen_1$t.str) `must be ${KWDs[keyword].okStr} ${schemaCode}`,
        params: ({ keyword, schemaCode }) => (0, codegen_1$t._) `{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
    };
    const def$y = {
        keyword: Object.keys(KWDs),
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$l,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            cxt.fail$data((0, codegen_1$t._) `${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
        },
    };
    limitNumber.default = def$y;

    var multipleOf = {};

    Object.defineProperty(multipleOf, "__esModule", { value: true });
    const codegen_1$s = requireCodegen();
    const error$k = {
        message: ({ schemaCode }) => (0, codegen_1$s.str) `must be multiple of ${schemaCode}`,
        params: ({ schemaCode }) => (0, codegen_1$s._) `{multipleOf: ${schemaCode}}`,
    };
    const def$x = {
        keyword: "multipleOf",
        type: "number",
        schemaType: "number",
        $data: true,
        error: error$k,
        code(cxt) {
            const { gen, data, schemaCode, it } = cxt;
            // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
            const prec = it.opts.multipleOfPrecision;
            const res = gen.let("res");
            const invalid = prec
                ? (0, codegen_1$s._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
                : (0, codegen_1$s._) `${res} !== parseInt(${res})`;
            cxt.fail$data((0, codegen_1$s._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
        },
    };
    multipleOf.default = def$x;

    var limitLength = {};

    var ucs2length$1 = {};

    Object.defineProperty(ucs2length$1, "__esModule", { value: true });
    // https://mathiasbynens.be/notes/javascript-encoding
    // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
    function ucs2length(str) {
        const len = str.length;
        let length = 0;
        let pos = 0;
        let value;
        while (pos < len) {
            length++;
            value = str.charCodeAt(pos++);
            if (value >= 0xd800 && value <= 0xdbff && pos < len) {
                // high surrogate, and there is a next character
                value = str.charCodeAt(pos);
                if ((value & 0xfc00) === 0xdc00)
                    pos++; // low surrogate
            }
        }
        return length;
    }
    ucs2length$1.default = ucs2length;
    ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';

    Object.defineProperty(limitLength, "__esModule", { value: true });
    const codegen_1$r = requireCodegen();
    const util_1$n = util$6;
    const ucs2length_1 = ucs2length$1;
    const error$j = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxLength" ? "more" : "fewer";
            return (0, codegen_1$r.str) `must NOT have ${comp} than ${schemaCode} characters`;
        },
        params: ({ schemaCode }) => (0, codegen_1$r._) `{limit: ${schemaCode}}`,
    };
    const def$w = {
        keyword: ["maxLength", "minLength"],
        type: "string",
        schemaType: "number",
        $data: true,
        error: error$j,
        code(cxt) {
            const { keyword, data, schemaCode, it } = cxt;
            const op = keyword === "maxLength" ? codegen_1$r.operators.GT : codegen_1$r.operators.LT;
            const len = it.opts.unicode === false ? (0, codegen_1$r._) `${data}.length` : (0, codegen_1$r._) `${(0, util_1$n.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
            cxt.fail$data((0, codegen_1$r._) `${len} ${op} ${schemaCode}`);
        },
    };
    limitLength.default = def$w;

    var pattern = {};

    Object.defineProperty(pattern, "__esModule", { value: true });
    const code_1$b = code;
    const codegen_1$q = requireCodegen();
    const error$i = {
        message: ({ schemaCode }) => (0, codegen_1$q.str) `must match pattern "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$q._) `{pattern: ${schemaCode}}`,
    };
    const def$v = {
        keyword: "pattern",
        type: "string",
        schemaType: "string",
        $data: true,
        error: error$i,
        code(cxt) {
            const { data, $data, schema, schemaCode, it } = cxt;
            // TODO regexp should be wrapped in try/catchs
            const u = it.opts.unicodeRegExp ? "u" : "";
            const regExp = $data ? (0, codegen_1$q._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1$b.usePattern)(cxt, schema);
            cxt.fail$data((0, codegen_1$q._) `!${regExp}.test(${data})`);
        },
    };
    pattern.default = def$v;

    var limitProperties = {};

    Object.defineProperty(limitProperties, "__esModule", { value: true });
    const codegen_1$p = requireCodegen();
    const error$h = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxProperties" ? "more" : "fewer";
            return (0, codegen_1$p.str) `must NOT have ${comp} than ${schemaCode} properties`;
        },
        params: ({ schemaCode }) => (0, codegen_1$p._) `{limit: ${schemaCode}}`,
    };
    const def$u = {
        keyword: ["maxProperties", "minProperties"],
        type: "object",
        schemaType: "number",
        $data: true,
        error: error$h,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxProperties" ? codegen_1$p.operators.GT : codegen_1$p.operators.LT;
            cxt.fail$data((0, codegen_1$p._) `Object.keys(${data}).length ${op} ${schemaCode}`);
        },
    };
    limitProperties.default = def$u;

    var required = {};

    Object.defineProperty(required, "__esModule", { value: true });
    const code_1$a = code;
    const codegen_1$o = requireCodegen();
    const util_1$m = util$6;
    const error$g = {
        message: ({ params: { missingProperty } }) => (0, codegen_1$o.str) `must have required property '${missingProperty}'`,
        params: ({ params: { missingProperty } }) => (0, codegen_1$o._) `{missingProperty: ${missingProperty}}`,
    };
    const def$t = {
        keyword: "required",
        type: "object",
        schemaType: "array",
        $data: true,
        error: error$g,
        code(cxt) {
            const { gen, schema, schemaCode, data, $data, it } = cxt;
            const { opts } = it;
            if (!$data && schema.length === 0)
                return;
            const useLoop = schema.length >= opts.loopRequired;
            if (it.allErrors)
                allErrorsMode();
            else
                exitOnErrorMode();
            if (opts.strictRequired) {
                const props = cxt.parentSchema.properties;
                const { definedProperties } = cxt.it;
                for (const requiredKey of schema) {
                    if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                        const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                        const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                        (0, util_1$m.checkStrictMode)(it, msg, it.opts.strictRequired);
                    }
                }
            }
            function allErrorsMode() {
                if (useLoop || $data) {
                    cxt.block$data(codegen_1$o.nil, loopAllRequired);
                }
                else {
                    for (const prop of schema) {
                        (0, code_1$a.checkReportMissingProp)(cxt, prop);
                    }
                }
            }
            function exitOnErrorMode() {
                const missing = gen.let("missing");
                if (useLoop || $data) {
                    const valid = gen.let("valid", true);
                    cxt.block$data(valid, () => loopUntilMissing(missing, valid));
                    cxt.ok(valid);
                }
                else {
                    gen.if((0, code_1$a.checkMissingProp)(cxt, schema, missing));
                    (0, code_1$a.reportMissingProp)(cxt, missing);
                    gen.else();
                }
            }
            function loopAllRequired() {
                gen.forOf("prop", schemaCode, (prop) => {
                    cxt.setParams({ missingProperty: prop });
                    gen.if((0, code_1$a.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
                });
            }
            function loopUntilMissing(missing, valid) {
                cxt.setParams({ missingProperty: missing });
                gen.forOf(missing, schemaCode, () => {
                    gen.assign(valid, (0, code_1$a.propertyInData)(gen, data, missing, opts.ownProperties));
                    gen.if((0, codegen_1$o.not)(valid), () => {
                        cxt.error();
                        gen.break();
                    });
                }, codegen_1$o.nil);
            }
        },
    };
    required.default = def$t;

    var limitItems = {};

    Object.defineProperty(limitItems, "__esModule", { value: true });
    const codegen_1$n = requireCodegen();
    const error$f = {
        message({ keyword, schemaCode }) {
            const comp = keyword === "maxItems" ? "more" : "fewer";
            return (0, codegen_1$n.str) `must NOT have ${comp} than ${schemaCode} items`;
        },
        params: ({ schemaCode }) => (0, codegen_1$n._) `{limit: ${schemaCode}}`,
    };
    const def$s = {
        keyword: ["maxItems", "minItems"],
        type: "array",
        schemaType: "number",
        $data: true,
        error: error$f,
        code(cxt) {
            const { keyword, data, schemaCode } = cxt;
            const op = keyword === "maxItems" ? codegen_1$n.operators.GT : codegen_1$n.operators.LT;
            cxt.fail$data((0, codegen_1$n._) `${data}.length ${op} ${schemaCode}`);
        },
    };
    limitItems.default = def$s;

    var uniqueItems = {};

    var equal$1 = {};

    Object.defineProperty(equal$1, "__esModule", { value: true });
    // https://github.com/ajv-validator/ajv/issues/889
    const equal = fastDeepEqual;
    equal.code = 'require("ajv/dist/runtime/equal").default';
    equal$1.default = equal;

    Object.defineProperty(uniqueItems, "__esModule", { value: true });
    const dataType_1 = dataType;
    const codegen_1$m = requireCodegen();
    const util_1$l = util$6;
    const equal_1$2 = equal$1;
    const error$e = {
        message: ({ params: { i, j } }) => (0, codegen_1$m.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
        params: ({ params: { i, j } }) => (0, codegen_1$m._) `{i: ${i}, j: ${j}}`,
    };
    const def$r = {
        keyword: "uniqueItems",
        type: "array",
        schemaType: "boolean",
        $data: true,
        error: error$e,
        code(cxt) {
            const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
            if (!$data && !schema)
                return;
            const valid = gen.let("valid");
            const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
            cxt.block$data(valid, validateUniqueItems, (0, codegen_1$m._) `${schemaCode} === false`);
            cxt.ok(valid);
            function validateUniqueItems() {
                const i = gen.let("i", (0, codegen_1$m._) `${data}.length`);
                const j = gen.let("j");
                cxt.setParams({ i, j });
                gen.assign(valid, true);
                gen.if((0, codegen_1$m._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
            }
            function canOptimize() {
                return itemTypes.length > 0 && !itemTypes.some((t) => t === "object" || t === "array");
            }
            function loopN(i, j) {
                const item = gen.name("item");
                const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
                const indices = gen.const("indices", (0, codegen_1$m._) `{}`);
                gen.for((0, codegen_1$m._) `;${i}--;`, () => {
                    gen.let(item, (0, codegen_1$m._) `${data}[${i}]`);
                    gen.if(wrongType, (0, codegen_1$m._) `continue`);
                    if (itemTypes.length > 1)
                        gen.if((0, codegen_1$m._) `typeof ${item} == "string"`, (0, codegen_1$m._) `${item} += "_"`);
                    gen
                        .if((0, codegen_1$m._) `typeof ${indices}[${item}] == "number"`, () => {
                        gen.assign(j, (0, codegen_1$m._) `${indices}[${item}]`);
                        cxt.error();
                        gen.assign(valid, false).break();
                    })
                        .code((0, codegen_1$m._) `${indices}[${item}] = ${i}`);
                });
            }
            function loopN2(i, j) {
                const eql = (0, util_1$l.useFunc)(gen, equal_1$2.default);
                const outer = gen.name("outer");
                gen.label(outer).for((0, codegen_1$m._) `;${i}--;`, () => gen.for((0, codegen_1$m._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1$m._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {
                    cxt.error();
                    gen.assign(valid, false).break(outer);
                })));
            }
        },
    };
    uniqueItems.default = def$r;

    var _const = {};

    Object.defineProperty(_const, "__esModule", { value: true });
    const codegen_1$l = requireCodegen();
    const util_1$k = util$6;
    const equal_1$1 = equal$1;
    const error$d = {
        message: "must be equal to constant",
        params: ({ schemaCode }) => (0, codegen_1$l._) `{allowedValue: ${schemaCode}}`,
    };
    const def$q = {
        keyword: "const",
        $data: true,
        error: error$d,
        code(cxt) {
            const { gen, data, $data, schemaCode, schema } = cxt;
            if ($data || (schema && typeof schema == "object")) {
                cxt.fail$data((0, codegen_1$l._) `!${(0, util_1$k.useFunc)(gen, equal_1$1.default)}(${data}, ${schemaCode})`);
            }
            else {
                cxt.fail((0, codegen_1$l._) `${schema} !== ${data}`);
            }
        },
    };
    _const.default = def$q;

    var _enum$1 = {};

    Object.defineProperty(_enum$1, "__esModule", { value: true });
    const codegen_1$k = requireCodegen();
    const util_1$j = util$6;
    const equal_1 = equal$1;
    const error$c = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1$k._) `{allowedValues: ${schemaCode}}`,
    };
    const def$p = {
        keyword: "enum",
        schemaType: "array",
        $data: true,
        error: error$c,
        code(cxt) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            if (!$data && schema.length === 0)
                throw new Error("enum must have non-empty array");
            const useLoop = schema.length >= it.opts.loopEnum;
            let eql;
            const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1$j.useFunc)(gen, equal_1.default)));
            let valid;
            if (useLoop || $data) {
                valid = gen.let("valid");
                cxt.block$data(valid, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                const vSchema = gen.const("vSchema", schemaCode);
                valid = (0, codegen_1$k.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.assign(valid, false);
                gen.forOf("v", schemaCode, (v) => gen.if((0, codegen_1$k._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
            }
            function equalCode(vSchema, i) {
                const sch = schema[i];
                return typeof sch === "object" && sch !== null
                    ? (0, codegen_1$k._) `${getEql()}(${data}, ${vSchema}[${i}])`
                    : (0, codegen_1$k._) `${data} === ${sch}`;
            }
        },
    };
    _enum$1.default = def$p;

    Object.defineProperty(validation$1, "__esModule", { value: true });
    const limitNumber_1 = limitNumber;
    const multipleOf_1 = multipleOf;
    const limitLength_1 = limitLength;
    const pattern_1 = pattern;
    const limitProperties_1 = limitProperties;
    const required_1 = required;
    const limitItems_1 = limitItems;
    const uniqueItems_1 = uniqueItems;
    const const_1 = _const;
    const enum_1$1 = _enum$1;
    const validation = [
        // number
        limitNumber_1.default,
        multipleOf_1.default,
        // string
        limitLength_1.default,
        pattern_1.default,
        // object
        limitProperties_1.default,
        required_1.default,
        // array
        limitItems_1.default,
        uniqueItems_1.default,
        // any
        { keyword: "type", schemaType: ["string", "array"] },
        { keyword: "nullable", schemaType: "boolean" },
        const_1.default,
        enum_1$1.default,
    ];
    validation$1.default = validation;

    var applicator = {};

    var additionalItems = {};

    Object.defineProperty(additionalItems, "__esModule", { value: true });
    additionalItems.validateAdditionalItems = void 0;
    const codegen_1$j = requireCodegen();
    const util_1$i = util$6;
    const error$b = {
        message: ({ params: { len } }) => (0, codegen_1$j.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$j._) `{limit: ${len}}`,
    };
    const def$o = {
        keyword: "additionalItems",
        type: "array",
        schemaType: ["boolean", "object"],
        before: "uniqueItems",
        error: error$b,
        code(cxt) {
            const { parentSchema, it } = cxt;
            const { items } = parentSchema;
            if (!Array.isArray(items)) {
                (0, util_1$i.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
                return;
            }
            validateAdditionalItems(cxt, items);
        },
    };
    function validateAdditionalItems(cxt, items) {
        const { gen, schema, data, keyword, it } = cxt;
        it.items = true;
        const len = gen.const("len", (0, codegen_1$j._) `${data}.length`);
        if (schema === false) {
            cxt.setParams({ len: items.length });
            cxt.pass((0, codegen_1$j._) `${len} <= ${items.length}`);
        }
        else if (typeof schema == "object" && !(0, util_1$i.alwaysValidSchema)(it, schema)) {
            const valid = gen.var("valid", (0, codegen_1$j._) `${len} <= ${items.length}`); // TODO var
            gen.if((0, codegen_1$j.not)(valid), () => validateItems(valid));
            cxt.ok(valid);
        }
        function validateItems(valid) {
            gen.forRange("i", items.length, len, (i) => {
                cxt.subschema({ keyword, dataProp: i, dataPropType: util_1$i.Type.Num }, valid);
                if (!it.allErrors)
                    gen.if((0, codegen_1$j.not)(valid), () => gen.break());
            });
        }
    }
    additionalItems.validateAdditionalItems = validateAdditionalItems;
    additionalItems.default = def$o;

    var prefixItems = {};

    var items = {};

    Object.defineProperty(items, "__esModule", { value: true });
    items.validateTuple = void 0;
    const codegen_1$i = requireCodegen();
    const util_1$h = util$6;
    const code_1$9 = code;
    const def$n = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "array", "boolean"],
        before: "uniqueItems",
        code(cxt) {
            const { schema, it } = cxt;
            if (Array.isArray(schema))
                return validateTuple(cxt, "additionalItems", schema);
            it.items = true;
            if ((0, util_1$h.alwaysValidSchema)(it, schema))
                return;
            cxt.ok((0, code_1$9.validateArray)(cxt));
        },
    };
    function validateTuple(cxt, extraItems, schArr = cxt.schema) {
        const { gen, parentSchema, data, keyword, it } = cxt;
        checkStrictTuple(parentSchema);
        if (it.opts.unevaluated && schArr.length && it.items !== true) {
            it.items = util_1$h.mergeEvaluated.items(gen, schArr.length, it.items);
        }
        const valid = gen.name("valid");
        const len = gen.const("len", (0, codegen_1$i._) `${data}.length`);
        schArr.forEach((sch, i) => {
            if ((0, util_1$h.alwaysValidSchema)(it, sch))
                return;
            gen.if((0, codegen_1$i._) `${len} > ${i}`, () => cxt.subschema({
                keyword,
                schemaProp: i,
                dataProp: i,
            }, valid));
            cxt.ok(valid);
        });
        function checkStrictTuple(sch) {
            const { opts, errSchemaPath } = it;
            const l = schArr.length;
            const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
            if (opts.strictTuples && !fullTuple) {
                const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
                (0, util_1$h.checkStrictMode)(it, msg, opts.strictTuples);
            }
        }
    }
    items.validateTuple = validateTuple;
    items.default = def$n;

    Object.defineProperty(prefixItems, "__esModule", { value: true });
    const items_1$1 = items;
    const def$m = {
        keyword: "prefixItems",
        type: "array",
        schemaType: ["array"],
        before: "uniqueItems",
        code: (cxt) => (0, items_1$1.validateTuple)(cxt, "items"),
    };
    prefixItems.default = def$m;

    var items2020 = {};

    Object.defineProperty(items2020, "__esModule", { value: true });
    const codegen_1$h = requireCodegen();
    const util_1$g = util$6;
    const code_1$8 = code;
    const additionalItems_1$1 = additionalItems;
    const error$a = {
        message: ({ params: { len } }) => (0, codegen_1$h.str) `must NOT have more than ${len} items`,
        params: ({ params: { len } }) => (0, codegen_1$h._) `{limit: ${len}}`,
    };
    const def$l = {
        keyword: "items",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        error: error$a,
        code(cxt) {
            const { schema, parentSchema, it } = cxt;
            const { prefixItems } = parentSchema;
            it.items = true;
            if ((0, util_1$g.alwaysValidSchema)(it, schema))
                return;
            if (prefixItems)
                (0, additionalItems_1$1.validateAdditionalItems)(cxt, prefixItems);
            else
                cxt.ok((0, code_1$8.validateArray)(cxt));
        },
    };
    items2020.default = def$l;

    var contains = {};

    Object.defineProperty(contains, "__esModule", { value: true });
    const codegen_1$g = requireCodegen();
    const util_1$f = util$6;
    const error$9 = {
        message: ({ params: { min, max } }) => max === undefined
            ? (0, codegen_1$g.str) `must contain at least ${min} valid item(s)`
            : (0, codegen_1$g.str) `must contain at least ${min} and no more than ${max} valid item(s)`,
        params: ({ params: { min, max } }) => max === undefined ? (0, codegen_1$g._) `{minContains: ${min}}` : (0, codegen_1$g._) `{minContains: ${min}, maxContains: ${max}}`,
    };
    const def$k = {
        keyword: "contains",
        type: "array",
        schemaType: ["object", "boolean"],
        before: "uniqueItems",
        trackErrors: true,
        error: error$9,
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            let min;
            let max;
            const { minContains, maxContains } = parentSchema;
            if (it.opts.next) {
                min = minContains === undefined ? 1 : minContains;
                max = maxContains;
            }
            else {
                min = 1;
            }
            const len = gen.const("len", (0, codegen_1$g._) `${data}.length`);
            cxt.setParams({ min, max });
            if (max === undefined && min === 0) {
                (0, util_1$f.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
                return;
            }
            if (max !== undefined && min > max) {
                (0, util_1$f.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
                cxt.fail();
                return;
            }
            if ((0, util_1$f.alwaysValidSchema)(it, schema)) {
                let cond = (0, codegen_1$g._) `${len} >= ${min}`;
                if (max !== undefined)
                    cond = (0, codegen_1$g._) `${cond} && ${len} <= ${max}`;
                cxt.pass(cond);
                return;
            }
            it.items = true;
            const valid = gen.name("valid");
            if (max === undefined && min === 1) {
                validateItems(valid, () => gen.if(valid, () => gen.break()));
            }
            else if (min === 0) {
                gen.let(valid, true);
                if (max !== undefined)
                    gen.if((0, codegen_1$g._) `${data}.length > 0`, validateItemsWithCount);
            }
            else {
                gen.let(valid, false);
                validateItemsWithCount();
            }
            cxt.result(valid, () => cxt.reset());
            function validateItemsWithCount() {
                const schValid = gen.name("_valid");
                const count = gen.let("count", 0);
                validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
            }
            function validateItems(_valid, block) {
                gen.forRange("i", 0, len, (i) => {
                    cxt.subschema({
                        keyword: "contains",
                        dataProp: i,
                        dataPropType: util_1$f.Type.Num,
                        compositeRule: true,
                    }, _valid);
                    block();
                });
            }
            function checkLimits(count) {
                gen.code((0, codegen_1$g._) `${count}++`);
                if (max === undefined) {
                    gen.if((0, codegen_1$g._) `${count} >= ${min}`, () => gen.assign(valid, true).break());
                }
                else {
                    gen.if((0, codegen_1$g._) `${count} > ${max}`, () => gen.assign(valid, false).break());
                    if (min === 1)
                        gen.assign(valid, true);
                    else
                        gen.if((0, codegen_1$g._) `${count} >= ${min}`, () => gen.assign(valid, true));
                }
            }
        },
    };
    contains.default = def$k;

    var dependencies = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
    	const codegen_1 = requireCodegen();
    	const util_1 = util$6;
    	const code_1 = code;
    	exports.error = {
    	    message: ({ params: { property, depsCount, deps } }) => {
    	        const property_ies = depsCount === 1 ? "property" : "properties";
    	        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;
    	    },
    	    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`, // TODO change to reference
    	};
    	const def = {
    	    keyword: "dependencies",
    	    type: "object",
    	    schemaType: "object",
    	    error: exports.error,
    	    code(cxt) {
    	        const [propDeps, schDeps] = splitDependencies(cxt);
    	        validatePropertyDeps(cxt, propDeps);
    	        validateSchemaDeps(cxt, schDeps);
    	    },
    	};
    	function splitDependencies({ schema }) {
    	    const propertyDeps = {};
    	    const schemaDeps = {};
    	    for (const key in schema) {
    	        if (key === "__proto__")
    	            continue;
    	        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
    	        deps[key] = schema[key];
    	    }
    	    return [propertyDeps, schemaDeps];
    	}
    	function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    	    const { gen, data, it } = cxt;
    	    if (Object.keys(propertyDeps).length === 0)
    	        return;
    	    const missing = gen.let("missing");
    	    for (const prop in propertyDeps) {
    	        const deps = propertyDeps[prop];
    	        if (deps.length === 0)
    	            continue;
    	        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
    	        cxt.setParams({
    	            property: prop,
    	            depsCount: deps.length,
    	            deps: deps.join(", "),
    	        });
    	        if (it.allErrors) {
    	            gen.if(hasProperty, () => {
    	                for (const depProp of deps) {
    	                    (0, code_1.checkReportMissingProp)(cxt, depProp);
    	                }
    	            });
    	        }
    	        else {
    	            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
    	            (0, code_1.reportMissingProp)(cxt, missing);
    	            gen.else();
    	        }
    	    }
    	}
    	exports.validatePropertyDeps = validatePropertyDeps;
    	function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    	    const { gen, data, keyword, it } = cxt;
    	    const valid = gen.name("valid");
    	    for (const prop in schemaDeps) {
    	        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))
    	            continue;
    	        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
    	            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
    	            cxt.mergeValidEvaluated(schCxt, valid);
    	        }, () => gen.var(valid, true) // TODO var
    	        );
    	        cxt.ok(valid);
    	    }
    	}
    	exports.validateSchemaDeps = validateSchemaDeps;
    	exports.default = def;
    	
    } (dependencies));

    var propertyNames = {};

    Object.defineProperty(propertyNames, "__esModule", { value: true });
    const codegen_1$f = requireCodegen();
    const util_1$e = util$6;
    const error$8 = {
        message: "property name must be valid",
        params: ({ params }) => (0, codegen_1$f._) `{propertyName: ${params.propertyName}}`,
    };
    const def$j = {
        keyword: "propertyNames",
        type: "object",
        schemaType: ["object", "boolean"],
        error: error$8,
        code(cxt) {
            const { gen, schema, data, it } = cxt;
            if ((0, util_1$e.alwaysValidSchema)(it, schema))
                return;
            const valid = gen.name("valid");
            gen.forIn("key", data, (key) => {
                cxt.setParams({ propertyName: key });
                cxt.subschema({
                    keyword: "propertyNames",
                    data: key,
                    dataTypes: ["string"],
                    propertyName: key,
                    compositeRule: true,
                }, valid);
                gen.if((0, codegen_1$f.not)(valid), () => {
                    cxt.error(true);
                    if (!it.allErrors)
                        gen.break();
                });
            });
            cxt.ok(valid);
        },
    };
    propertyNames.default = def$j;

    var additionalProperties = {};

    Object.defineProperty(additionalProperties, "__esModule", { value: true });
    const code_1$7 = code;
    const codegen_1$e = requireCodegen();
    const names_1$3 = names$1;
    const util_1$d = util$6;
    const error$7 = {
        message: "must NOT have additional properties",
        params: ({ params }) => (0, codegen_1$e._) `{additionalProperty: ${params.additionalProperty}}`,
    };
    const def$i = {
        keyword: "additionalProperties",
        type: ["object"],
        schemaType: ["boolean", "object"],
        allowUndefined: true,
        trackErrors: true,
        error: error$7,
        code(cxt) {
            const { gen, schema, parentSchema, data, errsCount, it } = cxt;
            /* istanbul ignore if */
            if (!errsCount)
                throw new Error("ajv implementation error");
            const { allErrors, opts } = it;
            it.props = true;
            if (opts.removeAdditional !== "all" && (0, util_1$d.alwaysValidSchema)(it, schema))
                return;
            const props = (0, code_1$7.allSchemaProperties)(parentSchema.properties);
            const patProps = (0, code_1$7.allSchemaProperties)(parentSchema.patternProperties);
            checkAdditionalProperties();
            cxt.ok((0, codegen_1$e._) `${errsCount} === ${names_1$3.default.errors}`);
            function checkAdditionalProperties() {
                gen.forIn("key", data, (key) => {
                    if (!props.length && !patProps.length)
                        additionalPropertyCode(key);
                    else
                        gen.if(isAdditional(key), () => additionalPropertyCode(key));
                });
            }
            function isAdditional(key) {
                let definedProp;
                if (props.length > 8) {
                    // TODO maybe an option instead of hard-coded 8?
                    const propsSchema = (0, util_1$d.schemaRefOrVal)(it, parentSchema.properties, "properties");
                    definedProp = (0, code_1$7.isOwnProperty)(gen, propsSchema, key);
                }
                else if (props.length) {
                    definedProp = (0, codegen_1$e.or)(...props.map((p) => (0, codegen_1$e._) `${key} === ${p}`));
                }
                else {
                    definedProp = codegen_1$e.nil;
                }
                if (patProps.length) {
                    definedProp = (0, codegen_1$e.or)(definedProp, ...patProps.map((p) => (0, codegen_1$e._) `${(0, code_1$7.usePattern)(cxt, p)}.test(${key})`));
                }
                return (0, codegen_1$e.not)(definedProp);
            }
            function deleteAdditional(key) {
                gen.code((0, codegen_1$e._) `delete ${data}[${key}]`);
            }
            function additionalPropertyCode(key) {
                if (opts.removeAdditional === "all" || (opts.removeAdditional && schema === false)) {
                    deleteAdditional(key);
                    return;
                }
                if (schema === false) {
                    cxt.setParams({ additionalProperty: key });
                    cxt.error();
                    if (!allErrors)
                        gen.break();
                    return;
                }
                if (typeof schema == "object" && !(0, util_1$d.alwaysValidSchema)(it, schema)) {
                    const valid = gen.name("valid");
                    if (opts.removeAdditional === "failing") {
                        applyAdditionalSchema(key, valid, false);
                        gen.if((0, codegen_1$e.not)(valid), () => {
                            cxt.reset();
                            deleteAdditional(key);
                        });
                    }
                    else {
                        applyAdditionalSchema(key, valid);
                        if (!allErrors)
                            gen.if((0, codegen_1$e.not)(valid), () => gen.break());
                    }
                }
            }
            function applyAdditionalSchema(key, valid, errors) {
                const subschema = {
                    keyword: "additionalProperties",
                    dataProp: key,
                    dataPropType: util_1$d.Type.Str,
                };
                if (errors === false) {
                    Object.assign(subschema, {
                        compositeRule: true,
                        createErrors: false,
                        allErrors: false,
                    });
                }
                cxt.subschema(subschema, valid);
            }
        },
    };
    additionalProperties.default = def$i;

    var properties$2 = {};

    Object.defineProperty(properties$2, "__esModule", { value: true });
    const validate_1 = requireValidate();
    const code_1$6 = code;
    const util_1$c = util$6;
    const additionalProperties_1$1 = additionalProperties;
    const def$h = {
        keyword: "properties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, parentSchema, data, it } = cxt;
            if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
                additionalProperties_1$1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1$1.default, "additionalProperties"));
            }
            const allProps = (0, code_1$6.allSchemaProperties)(schema);
            for (const prop of allProps) {
                it.definedProperties.add(prop);
            }
            if (it.opts.unevaluated && allProps.length && it.props !== true) {
                it.props = util_1$c.mergeEvaluated.props(gen, (0, util_1$c.toHash)(allProps), it.props);
            }
            const properties = allProps.filter((p) => !(0, util_1$c.alwaysValidSchema)(it, schema[p]));
            if (properties.length === 0)
                return;
            const valid = gen.name("valid");
            for (const prop of properties) {
                if (hasDefault(prop)) {
                    applyPropertySchema(prop);
                }
                else {
                    gen.if((0, code_1$6.propertyInData)(gen, data, prop, it.opts.ownProperties));
                    applyPropertySchema(prop);
                    if (!it.allErrors)
                        gen.else().var(valid, true);
                    gen.endIf();
                }
                cxt.it.definedProperties.add(prop);
                cxt.ok(valid);
            }
            function hasDefault(prop) {
                return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
            }
            function applyPropertySchema(prop) {
                cxt.subschema({
                    keyword: "properties",
                    schemaProp: prop,
                    dataProp: prop,
                }, valid);
            }
        },
    };
    properties$2.default = def$h;

    var patternProperties = {};

    Object.defineProperty(patternProperties, "__esModule", { value: true });
    const code_1$5 = code;
    const codegen_1$d = requireCodegen();
    const util_1$b = util$6;
    const util_2 = util$6;
    const def$g = {
        keyword: "patternProperties",
        type: "object",
        schemaType: "object",
        code(cxt) {
            const { gen, schema, data, parentSchema, it } = cxt;
            const { opts } = it;
            const patterns = (0, code_1$5.allSchemaProperties)(schema);
            const alwaysValidPatterns = patterns.filter((p) => (0, util_1$b.alwaysValidSchema)(it, schema[p]));
            if (patterns.length === 0 ||
                (alwaysValidPatterns.length === patterns.length &&
                    (!it.opts.unevaluated || it.props === true))) {
                return;
            }
            const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
            const valid = gen.name("valid");
            if (it.props !== true && !(it.props instanceof codegen_1$d.Name)) {
                it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
            }
            const { props } = it;
            validatePatternProperties();
            function validatePatternProperties() {
                for (const pat of patterns) {
                    if (checkProperties)
                        checkMatchingProperties(pat);
                    if (it.allErrors) {
                        validateProperties(pat);
                    }
                    else {
                        gen.var(valid, true); // TODO var
                        validateProperties(pat);
                        gen.if(valid);
                    }
                }
            }
            function checkMatchingProperties(pat) {
                for (const prop in checkProperties) {
                    if (new RegExp(pat).test(prop)) {
                        (0, util_1$b.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                    }
                }
            }
            function validateProperties(pat) {
                gen.forIn("key", data, (key) => {
                    gen.if((0, codegen_1$d._) `${(0, code_1$5.usePattern)(cxt, pat)}.test(${key})`, () => {
                        const alwaysValid = alwaysValidPatterns.includes(pat);
                        if (!alwaysValid) {
                            cxt.subschema({
                                keyword: "patternProperties",
                                schemaProp: pat,
                                dataProp: key,
                                dataPropType: util_2.Type.Str,
                            }, valid);
                        }
                        if (it.opts.unevaluated && props !== true) {
                            gen.assign((0, codegen_1$d._) `${props}[${key}]`, true);
                        }
                        else if (!alwaysValid && !it.allErrors) {
                            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                            // or if all properties were evaluated (props === true)
                            gen.if((0, codegen_1$d.not)(valid), () => gen.break());
                        }
                    });
                });
            }
        },
    };
    patternProperties.default = def$g;

    var not = {};

    Object.defineProperty(not, "__esModule", { value: true });
    const util_1$a = util$6;
    const def$f = {
        keyword: "not",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        code(cxt) {
            const { gen, schema, it } = cxt;
            if ((0, util_1$a.alwaysValidSchema)(it, schema)) {
                cxt.fail();
                return;
            }
            const valid = gen.name("valid");
            cxt.subschema({
                keyword: "not",
                compositeRule: true,
                createErrors: false,
                allErrors: false,
            }, valid);
            cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
        },
        error: { message: "must NOT be valid" },
    };
    not.default = def$f;

    var anyOf = {};

    Object.defineProperty(anyOf, "__esModule", { value: true });
    const code_1$4 = code;
    const def$e = {
        keyword: "anyOf",
        schemaType: "array",
        trackErrors: true,
        code: code_1$4.validateUnion,
        error: { message: "must match a schema in anyOf" },
    };
    anyOf.default = def$e;

    var oneOf = {};

    Object.defineProperty(oneOf, "__esModule", { value: true });
    const codegen_1$c = requireCodegen();
    const util_1$9 = util$6;
    const error$6 = {
        message: "must match exactly one schema in oneOf",
        params: ({ params }) => (0, codegen_1$c._) `{passingSchemas: ${params.passing}}`,
    };
    const def$d = {
        keyword: "oneOf",
        schemaType: "array",
        trackErrors: true,
        error: error$6,
        code(cxt) {
            const { gen, schema, parentSchema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            if (it.opts.discriminator && parentSchema.discriminator)
                return;
            const schArr = schema;
            const valid = gen.let("valid", false);
            const passing = gen.let("passing", null);
            const schValid = gen.name("_valid");
            cxt.setParams({ passing });
            // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
            gen.block(validateOneOf);
            cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
            function validateOneOf() {
                schArr.forEach((sch, i) => {
                    let schCxt;
                    if ((0, util_1$9.alwaysValidSchema)(it, sch)) {
                        gen.var(schValid, true);
                    }
                    else {
                        schCxt = cxt.subschema({
                            keyword: "oneOf",
                            schemaProp: i,
                            compositeRule: true,
                        }, schValid);
                    }
                    if (i > 0) {
                        gen
                            .if((0, codegen_1$c._) `${schValid} && ${valid}`)
                            .assign(valid, false)
                            .assign(passing, (0, codegen_1$c._) `[${passing}, ${i}]`)
                            .else();
                    }
                    gen.if(schValid, () => {
                        gen.assign(valid, true);
                        gen.assign(passing, i);
                        if (schCxt)
                            cxt.mergeEvaluated(schCxt, codegen_1$c.Name);
                    });
                });
            }
        },
    };
    oneOf.default = def$d;

    var allOf = {};

    Object.defineProperty(allOf, "__esModule", { value: true });
    const util_1$8 = util$6;
    const def$c = {
        keyword: "allOf",
        schemaType: "array",
        code(cxt) {
            const { gen, schema, it } = cxt;
            /* istanbul ignore if */
            if (!Array.isArray(schema))
                throw new Error("ajv implementation error");
            const valid = gen.name("valid");
            schema.forEach((sch, i) => {
                if ((0, util_1$8.alwaysValidSchema)(it, sch))
                    return;
                const schCxt = cxt.subschema({ keyword: "allOf", schemaProp: i }, valid);
                cxt.ok(valid);
                cxt.mergeEvaluated(schCxt);
            });
        },
    };
    allOf.default = def$c;

    var _if = {};

    Object.defineProperty(_if, "__esModule", { value: true });
    const codegen_1$b = requireCodegen();
    const util_1$7 = util$6;
    const error$5 = {
        message: ({ params }) => (0, codegen_1$b.str) `must match "${params.ifClause}" schema`,
        params: ({ params }) => (0, codegen_1$b._) `{failingKeyword: ${params.ifClause}}`,
    };
    const def$b = {
        keyword: "if",
        schemaType: ["object", "boolean"],
        trackErrors: true,
        error: error$5,
        code(cxt) {
            const { gen, parentSchema, it } = cxt;
            if (parentSchema.then === undefined && parentSchema.else === undefined) {
                (0, util_1$7.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
            }
            const hasThen = hasSchema(it, "then");
            const hasElse = hasSchema(it, "else");
            if (!hasThen && !hasElse)
                return;
            const valid = gen.let("valid", true);
            const schValid = gen.name("_valid");
            validateIf();
            cxt.reset();
            if (hasThen && hasElse) {
                const ifClause = gen.let("ifClause");
                cxt.setParams({ ifClause });
                gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
            }
            else if (hasThen) {
                gen.if(schValid, validateClause("then"));
            }
            else {
                gen.if((0, codegen_1$b.not)(schValid), validateClause("else"));
            }
            cxt.pass(valid, () => cxt.error(true));
            function validateIf() {
                const schCxt = cxt.subschema({
                    keyword: "if",
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false,
                }, schValid);
                cxt.mergeEvaluated(schCxt);
            }
            function validateClause(keyword, ifClause) {
                return () => {
                    const schCxt = cxt.subschema({ keyword }, schValid);
                    gen.assign(valid, schValid);
                    cxt.mergeValidEvaluated(schCxt, valid);
                    if (ifClause)
                        gen.assign(ifClause, (0, codegen_1$b._) `${keyword}`);
                    else
                        cxt.setParams({ ifClause: keyword });
                };
            }
        },
    };
    function hasSchema(it, keyword) {
        const schema = it.schema[keyword];
        return schema !== undefined && !(0, util_1$7.alwaysValidSchema)(it, schema);
    }
    _if.default = def$b;

    var thenElse = {};

    Object.defineProperty(thenElse, "__esModule", { value: true });
    const util_1$6 = util$6;
    const def$a = {
        keyword: ["then", "else"],
        schemaType: ["object", "boolean"],
        code({ keyword, parentSchema, it }) {
            if (parentSchema.if === undefined)
                (0, util_1$6.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
        },
    };
    thenElse.default = def$a;

    Object.defineProperty(applicator, "__esModule", { value: true });
    const additionalItems_1 = additionalItems;
    const prefixItems_1 = prefixItems;
    const items_1 = items;
    const items2020_1 = items2020;
    const contains_1 = contains;
    const dependencies_1 = dependencies;
    const propertyNames_1 = propertyNames;
    const additionalProperties_1 = additionalProperties;
    const properties_1$2 = properties$2;
    const patternProperties_1 = patternProperties;
    const not_1 = not;
    const anyOf_1 = anyOf;
    const oneOf_1 = oneOf;
    const allOf_1 = allOf;
    const if_1 = _if;
    const thenElse_1 = thenElse;
    function getApplicator(draft2020 = false) {
        const applicator = [
            // any
            not_1.default,
            anyOf_1.default,
            oneOf_1.default,
            allOf_1.default,
            if_1.default,
            thenElse_1.default,
            // object
            propertyNames_1.default,
            additionalProperties_1.default,
            dependencies_1.default,
            properties_1$2.default,
            patternProperties_1.default,
        ];
        // array
        if (draft2020)
            applicator.push(prefixItems_1.default, items2020_1.default);
        else
            applicator.push(additionalItems_1.default, items_1.default);
        applicator.push(contains_1.default);
        return applicator;
    }
    applicator.default = getApplicator;

    var format$2 = {};

    var format$1 = {};

    Object.defineProperty(format$1, "__esModule", { value: true });
    const codegen_1$a = requireCodegen();
    const error$4 = {
        message: ({ schemaCode }) => (0, codegen_1$a.str) `must match format "${schemaCode}"`,
        params: ({ schemaCode }) => (0, codegen_1$a._) `{format: ${schemaCode}}`,
    };
    const def$9 = {
        keyword: "format",
        type: ["number", "string"],
        schemaType: "string",
        $data: true,
        error: error$4,
        code(cxt, ruleType) {
            const { gen, data, $data, schema, schemaCode, it } = cxt;
            const { opts, errSchemaPath, schemaEnv, self } = it;
            if (!opts.validateFormats)
                return;
            if ($data)
                validate$DataFormat();
            else
                validateFormat();
            function validate$DataFormat() {
                const fmts = gen.scopeValue("formats", {
                    ref: self.formats,
                    code: opts.code.formats,
                });
                const fDef = gen.const("fDef", (0, codegen_1$a._) `${fmts}[${schemaCode}]`);
                const fType = gen.let("fType");
                const format = gen.let("format");
                // TODO simplify
                gen.if((0, codegen_1$a._) `typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1$a._) `${fDef}.type || "string"`).assign(format, (0, codegen_1$a._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1$a._) `"string"`).assign(format, fDef));
                cxt.fail$data((0, codegen_1$a.or)(unknownFmt(), invalidFmt()));
                function unknownFmt() {
                    if (opts.strictSchema === false)
                        return codegen_1$a.nil;
                    return (0, codegen_1$a._) `${schemaCode} && !${format}`;
                }
                function invalidFmt() {
                    const callFormat = schemaEnv.$async
                        ? (0, codegen_1$a._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
                        : (0, codegen_1$a._) `${format}(${data})`;
                    const validData = (0, codegen_1$a._) `(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                    return (0, codegen_1$a._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
                }
            }
            function validateFormat() {
                const formatDef = self.formats[schema];
                if (!formatDef) {
                    unknownFormat();
                    return;
                }
                if (formatDef === true)
                    return;
                const [fmtType, format, fmtRef] = getFormat(formatDef);
                if (fmtType === ruleType)
                    cxt.pass(validCondition());
                function unknownFormat() {
                    if (opts.strictSchema === false) {
                        self.logger.warn(unknownMsg());
                        return;
                    }
                    throw new Error(unknownMsg());
                    function unknownMsg() {
                        return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                    }
                }
                function getFormat(fmtDef) {
                    const code = fmtDef instanceof RegExp
                        ? (0, codegen_1$a.regexpCode)(fmtDef)
                        : opts.code.formats
                            ? (0, codegen_1$a._) `${opts.code.formats}${(0, codegen_1$a.getProperty)(schema)}`
                            : undefined;
                    const fmt = gen.scopeValue("formats", { key: schema, ref: fmtDef, code });
                    if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                        return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1$a._) `${fmt}.validate`];
                    }
                    return ["string", fmtDef, fmt];
                }
                function validCondition() {
                    if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                        if (!schemaEnv.$async)
                            throw new Error("async format in sync schema");
                        return (0, codegen_1$a._) `await ${fmtRef}(${data})`;
                    }
                    return typeof format == "function" ? (0, codegen_1$a._) `${fmtRef}(${data})` : (0, codegen_1$a._) `${fmtRef}.test(${data})`;
                }
            }
        },
    };
    format$1.default = def$9;

    Object.defineProperty(format$2, "__esModule", { value: true });
    const format_1$1 = format$1;
    const format = [format_1$1.default];
    format$2.default = format;

    var metadata$1 = {};

    Object.defineProperty(metadata$1, "__esModule", { value: true });
    metadata$1.contentVocabulary = metadata$1.metadataVocabulary = void 0;
    metadata$1.metadataVocabulary = [
        "title",
        "description",
        "default",
        "deprecated",
        "readOnly",
        "writeOnly",
        "examples",
    ];
    metadata$1.contentVocabulary = [
        "contentMediaType",
        "contentEncoding",
        "contentSchema",
    ];

    Object.defineProperty(draft7, "__esModule", { value: true });
    const core_1 = core$1;
    const validation_1 = validation$1;
    const applicator_1 = applicator;
    const format_1 = format$2;
    const metadata_1$6 = metadata$1;
    const draft7Vocabularies = [
        core_1.default,
        validation_1.default,
        (0, applicator_1.default)(),
        format_1.default,
        metadata_1$6.metadataVocabulary,
        metadata_1$6.contentVocabulary,
    ];
    draft7.default = draft7Vocabularies;

    var discriminator$1 = {};

    var types$6 = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.DiscrError = void 0;
    	(function (DiscrError) {
    	    DiscrError["Tag"] = "tag";
    	    DiscrError["Mapping"] = "mapping";
    	})(exports.DiscrError || (exports.DiscrError = {}));
    	
    } (types$6));

    Object.defineProperty(discriminator$1, "__esModule", { value: true });
    const codegen_1$9 = requireCodegen();
    const types_1$3 = types$6;
    const compile_1$1 = compile;
    const util_1$5 = util$6;
    const error$3 = {
        message: ({ params: { discrError, tagName } }) => discrError === types_1$3.DiscrError.Tag
            ? `tag "${tagName}" must be string`
            : `value of tag "${tagName}" must be in oneOf`,
        params: ({ params: { discrError, tag, tagName } }) => (0, codegen_1$9._) `{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
    };
    const def$8 = {
        keyword: "discriminator",
        type: "object",
        schemaType: "object",
        error: error$3,
        code(cxt) {
            const { gen, data, schema, parentSchema, it } = cxt;
            const { oneOf } = parentSchema;
            if (!it.opts.discriminator) {
                throw new Error("discriminator: requires discriminator option");
            }
            const tagName = schema.propertyName;
            if (typeof tagName != "string")
                throw new Error("discriminator: requires propertyName");
            if (schema.mapping)
                throw new Error("discriminator: mapping is not supported");
            if (!oneOf)
                throw new Error("discriminator: requires oneOf keyword");
            const valid = gen.let("valid", false);
            const tag = gen.const("tag", (0, codegen_1$9._) `${data}${(0, codegen_1$9.getProperty)(tagName)}`);
            gen.if((0, codegen_1$9._) `typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, { discrError: types_1$3.DiscrError.Tag, tag, tagName }));
            cxt.ok(valid);
            function validateMapping() {
                const mapping = getMapping();
                gen.if(false);
                for (const tagValue in mapping) {
                    gen.elseIf((0, codegen_1$9._) `${tag} === ${tagValue}`);
                    gen.assign(valid, applyTagSchema(mapping[tagValue]));
                }
                gen.else();
                cxt.error(false, { discrError: types_1$3.DiscrError.Mapping, tag, tagName });
                gen.endIf();
            }
            function applyTagSchema(schemaProp) {
                const _valid = gen.name("valid");
                const schCxt = cxt.subschema({ keyword: "oneOf", schemaProp }, _valid);
                cxt.mergeEvaluated(schCxt, codegen_1$9.Name);
                return _valid;
            }
            function getMapping() {
                var _a;
                const oneOfMapping = {};
                const topRequired = hasRequired(parentSchema);
                let tagRequired = true;
                for (let i = 0; i < oneOf.length; i++) {
                    let sch = oneOf[i];
                    if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1$5.schemaHasRulesButRef)(sch, it.self.RULES)) {
                        sch = compile_1$1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
                        if (sch instanceof compile_1$1.SchemaEnv)
                            sch = sch.schema;
                    }
                    const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                    if (typeof propSch != "object") {
                        throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                    }
                    tagRequired = tagRequired && (topRequired || hasRequired(sch));
                    addMappings(propSch, i);
                }
                if (!tagRequired)
                    throw new Error(`discriminator: "${tagName}" must be required`);
                return oneOfMapping;
                function hasRequired({ required }) {
                    return Array.isArray(required) && required.includes(tagName);
                }
                function addMappings(sch, i) {
                    if (sch.const) {
                        addMapping(sch.const, i);
                    }
                    else if (sch.enum) {
                        for (const tagValue of sch.enum) {
                            addMapping(tagValue, i);
                        }
                    }
                    else {
                        throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                    }
                }
                function addMapping(tagValue, i) {
                    if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                        throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                    }
                    oneOfMapping[tagValue] = i;
                }
            }
        },
    };
    discriminator$1.default = def$8;

    var $schema = "http://json-schema.org/draft-07/schema#";
    var $id = "http://json-schema.org/draft-07/schema#";
    var title = "Core schema meta-schema";
    var definitions = {
    	schemaArray: {
    		type: "array",
    		minItems: 1,
    		items: {
    			$ref: "#"
    		}
    	},
    	nonNegativeInteger: {
    		type: "integer",
    		minimum: 0
    	},
    	nonNegativeIntegerDefault0: {
    		allOf: [
    			{
    				$ref: "#/definitions/nonNegativeInteger"
    			},
    			{
    				"default": 0
    			}
    		]
    	},
    	simpleTypes: {
    		"enum": [
    			"array",
    			"boolean",
    			"integer",
    			"null",
    			"number",
    			"object",
    			"string"
    		]
    	},
    	stringArray: {
    		type: "array",
    		items: {
    			type: "string"
    		},
    		uniqueItems: true,
    		"default": [
    		]
    	}
    };
    var type$1 = [
    	"object",
    	"boolean"
    ];
    var properties$1 = {
    	$id: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$schema: {
    		type: "string",
    		format: "uri"
    	},
    	$ref: {
    		type: "string",
    		format: "uri-reference"
    	},
    	$comment: {
    		type: "string"
    	},
    	title: {
    		type: "string"
    	},
    	description: {
    		type: "string"
    	},
    	"default": true,
    	readOnly: {
    		type: "boolean",
    		"default": false
    	},
    	examples: {
    		type: "array",
    		items: true
    	},
    	multipleOf: {
    		type: "number",
    		exclusiveMinimum: 0
    	},
    	maximum: {
    		type: "number"
    	},
    	exclusiveMaximum: {
    		type: "number"
    	},
    	minimum: {
    		type: "number"
    	},
    	exclusiveMinimum: {
    		type: "number"
    	},
    	maxLength: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minLength: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	pattern: {
    		type: "string",
    		format: "regex"
    	},
    	additionalItems: {
    		$ref: "#"
    	},
    	items: {
    		anyOf: [
    			{
    				$ref: "#"
    			},
    			{
    				$ref: "#/definitions/schemaArray"
    			}
    		],
    		"default": true
    	},
    	maxItems: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minItems: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	uniqueItems: {
    		type: "boolean",
    		"default": false
    	},
    	contains: {
    		$ref: "#"
    	},
    	maxProperties: {
    		$ref: "#/definitions/nonNegativeInteger"
    	},
    	minProperties: {
    		$ref: "#/definitions/nonNegativeIntegerDefault0"
    	},
    	required: {
    		$ref: "#/definitions/stringArray"
    	},
    	additionalProperties: {
    		$ref: "#"
    	},
    	definitions: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	properties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		"default": {
    		}
    	},
    	patternProperties: {
    		type: "object",
    		additionalProperties: {
    			$ref: "#"
    		},
    		propertyNames: {
    			format: "regex"
    		},
    		"default": {
    		}
    	},
    	dependencies: {
    		type: "object",
    		additionalProperties: {
    			anyOf: [
    				{
    					$ref: "#"
    				},
    				{
    					$ref: "#/definitions/stringArray"
    				}
    			]
    		}
    	},
    	propertyNames: {
    		$ref: "#"
    	},
    	"const": true,
    	"enum": {
    		type: "array",
    		items: true,
    		minItems: 1,
    		uniqueItems: true
    	},
    	type: {
    		anyOf: [
    			{
    				$ref: "#/definitions/simpleTypes"
    			},
    			{
    				type: "array",
    				items: {
    					$ref: "#/definitions/simpleTypes"
    				},
    				minItems: 1,
    				uniqueItems: true
    			}
    		]
    	},
    	format: {
    		type: "string"
    	},
    	contentMediaType: {
    		type: "string"
    	},
    	contentEncoding: {
    		type: "string"
    	},
    	"if": {
    		$ref: "#"
    	},
    	then: {
    		$ref: "#"
    	},
    	"else": {
    		$ref: "#"
    	},
    	allOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	anyOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	oneOf: {
    		$ref: "#/definitions/schemaArray"
    	},
    	not: {
    		$ref: "#"
    	}
    };
    var require$$3 = {
    	$schema: $schema,
    	$id: $id,
    	title: title,
    	definitions: definitions,
    	type: type$1,
    	properties: properties$1,
    	"default": true
    };

    (function (module, exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    	const core_1 = core$2;
    	const draft7_1 = draft7;
    	const discriminator_1 = discriminator$1;
    	const draft7MetaSchema = require$$3;
    	const META_SUPPORT_DATA = ["/properties"];
    	const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
    	class Ajv extends core_1.default {
    	    _addVocabularies() {
    	        super._addVocabularies();
    	        draft7_1.default.forEach((v) => this.addVocabulary(v));
    	        if (this.opts.discriminator)
    	            this.addKeyword(discriminator_1.default);
    	    }
    	    _addDefaultMetaSchema() {
    	        super._addDefaultMetaSchema();
    	        if (!this.opts.meta)
    	            return;
    	        const metaSchema = this.opts.$data
    	            ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
    	            : draft7MetaSchema;
    	        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
    	        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    	    }
    	    defaultMeta() {
    	        return (this.opts.defaultMeta =
    	            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    	    }
    	}
    	module.exports = exports = Ajv;
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.default = Ajv;
    	var validate_1 = requireValidate();
    	Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    	var codegen_1 = requireCodegen();
    	Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    	Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    	Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    	Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    	Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    	Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    	var validation_error_1 = requireValidation_error();
    	Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return validation_error_1.default; } });
    	var ref_error_1 = requireRef_error();
    	Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function () { return ref_error_1.default; } });
    	
    } (ajv, ajvExports));

    var jtdExports = {};
    var jtd$1 = {
      get exports(){ return jtdExports; },
      set exports(v){ jtdExports = v; },
    };

    var jtd = {};

    var ref = {};

    var metadata = {};

    Object.defineProperty(metadata, "__esModule", { value: true });
    metadata.checkMetadata = void 0;
    const util_1$4 = util$6;
    const def$7 = {
        keyword: "metadata",
        schemaType: "object",
        code(cxt) {
            checkMetadata(cxt);
            const { gen, schema, it } = cxt;
            if ((0, util_1$4.alwaysValidSchema)(it, schema))
                return;
            const valid = gen.name("valid");
            cxt.subschema({ keyword: "metadata", jtdMetadata: true }, valid);
            cxt.ok(valid);
        },
    };
    function checkMetadata({ it, keyword }, metadata) {
        if (it.jtdMetadata !== metadata) {
            throw new Error(`JTD: "${keyword}" cannot be used in this schema location`);
        }
    }
    metadata.checkMetadata = checkMetadata;
    metadata.default = def$7;

    Object.defineProperty(ref, "__esModule", { value: true });
    ref.hasRef = void 0;
    const compile_1 = compile;
    const codegen_1$8 = requireCodegen();
    const ref_error_1$2 = requireRef_error();
    const names_1$2 = names$1;
    const ref_1$3 = ref$1;
    const metadata_1$5 = metadata;
    const def$6 = {
        keyword: "ref",
        schemaType: "string",
        code(cxt) {
            (0, metadata_1$5.checkMetadata)(cxt);
            const { gen, data, schema: ref, parentSchema, it } = cxt;
            const { schemaEnv: { root }, } = it;
            const valid = gen.name("valid");
            if (parentSchema.nullable) {
                gen.var(valid, (0, codegen_1$8._) `${data} === null`);
                gen.if((0, codegen_1$8.not)(valid), validateJtdRef);
            }
            else {
                gen.var(valid, false);
                validateJtdRef();
            }
            cxt.ok(valid);
            function validateJtdRef() {
                var _a;
                const refSchema = (_a = root.schema.definitions) === null || _a === void 0 ? void 0 : _a[ref];
                if (!refSchema) {
                    throw new ref_error_1$2.default(it.opts.uriResolver, "", ref, `No definition ${ref}`);
                }
                if (hasRef(refSchema) || !it.opts.inlineRefs)
                    callValidate(refSchema);
                else
                    inlineRefSchema(refSchema);
            }
            function callValidate(schema) {
                const sch = compile_1.compileSchema.call(it.self, new compile_1.SchemaEnv({ schema, root, schemaPath: `/definitions/${ref}` }));
                const v = (0, ref_1$3.getValidate)(cxt, sch);
                const errsCount = gen.const("_errs", names_1$2.default.errors);
                (0, ref_1$3.callRef)(cxt, v, sch, sch.$async);
                gen.assign(valid, (0, codegen_1$8._) `${errsCount} === ${names_1$2.default.errors}`);
            }
            function inlineRefSchema(schema) {
                const schName = gen.scopeValue("schema", it.opts.code.source === true ? { ref: schema, code: (0, codegen_1$8.stringify)(schema) } : { ref: schema });
                cxt.subschema({
                    schema,
                    dataTypes: [],
                    schemaPath: codegen_1$8.nil,
                    topSchemaRef: schName,
                    errSchemaPath: `/definitions/${ref}`,
                }, valid);
            }
        },
    };
    function hasRef(schema) {
        for (const key in schema) {
            let sch;
            if (key === "ref" || (typeof (sch = schema[key]) == "object" && hasRef(sch)))
                return true;
        }
        return false;
    }
    ref.hasRef = hasRef;
    ref.default = def$6;

    var type = {};

    var timestamp = {};

    Object.defineProperty(timestamp, "__esModule", { value: true });
    const DT_SEPARATOR = /t|\s/i;
    const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    const TIME = /^(\d\d):(\d\d):(\d\d)(?:\.\d+)?(?:z|([+-]\d\d)(?::?(\d\d))?)$/i;
    const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    function validTimestamp(str, allowDate) {
        // http://tools.ietf.org/html/rfc3339#section-5.6
        const dt = str.split(DT_SEPARATOR);
        return ((dt.length === 2 && validDate(dt[0]) && validTime(dt[1])) ||
            (allowDate && dt.length === 1 && validDate(dt[0])));
    }
    timestamp.default = validTimestamp;
    function validDate(str) {
        const matches = DATE.exec(str);
        if (!matches)
            return false;
        const y = +matches[1];
        const m = +matches[2];
        const d = +matches[3];
        return (m >= 1 &&
            m <= 12 &&
            d >= 1 &&
            (d <= DAYS[m] ||
                // leap year: https://tools.ietf.org/html/rfc3339#appendix-C
                (m === 2 && d === 29 && (y % 100 === 0 ? y % 400 === 0 : y % 4 === 0))));
    }
    function validTime(str) {
        const matches = TIME.exec(str);
        if (!matches)
            return false;
        const hr = +matches[1];
        const min = +matches[2];
        const sec = +matches[3];
        const tzH = +(matches[4] || 0);
        const tzM = +(matches[5] || 0);
        return ((hr <= 23 && min <= 59 && sec <= 59) ||
            // leap second
            (hr - tzH === 23 && min - tzM === 59 && sec === 60));
    }
    validTimestamp.code = 'require("ajv/dist/runtime/timestamp").default';

    var error$2 = {};

    Object.defineProperty(error$2, "__esModule", { value: true });
    error$2.typeErrorParams = error$2.typeErrorMessage = error$2.typeError = void 0;
    const codegen_1$7 = requireCodegen();
    function typeError$1(t) {
        return {
            message: (cxt) => typeErrorMessage(cxt, t),
            params: (cxt) => typeErrorParams(cxt, t),
        };
    }
    error$2.typeError = typeError$1;
    function typeErrorMessage({ parentSchema }, t) {
        return (parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.nullable) ? `must be ${t} or null` : `must be ${t}`;
    }
    error$2.typeErrorMessage = typeErrorMessage;
    function typeErrorParams({ parentSchema }, t) {
        return (0, codegen_1$7._) `{type: ${t}, nullable: ${!!(parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.nullable)}}`;
    }
    error$2.typeErrorParams = typeErrorParams;

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.intRange = void 0;
    	const codegen_1 = requireCodegen();
    	const timestamp_1 = timestamp;
    	const util_1 = util$6;
    	const metadata_1 = metadata;
    	const error_1 = error$2;
    	exports.intRange = {
    	    int8: [-128, 127, 3],
    	    uint8: [0, 255, 3],
    	    int16: [-32768, 32767, 5],
    	    uint16: [0, 65535, 5],
    	    int32: [-2147483648, 2147483647, 10],
    	    uint32: [0, 4294967295, 10],
    	};
    	const error = {
    	    message: (cxt) => (0, error_1.typeErrorMessage)(cxt, cxt.schema),
    	    params: (cxt) => (0, error_1.typeErrorParams)(cxt, cxt.schema),
    	};
    	function timestampCode(cxt) {
    	    const { gen, data, it } = cxt;
    	    const { timestamp, allowDate } = it.opts;
    	    if (timestamp === "date")
    	        return (0, codegen_1._) `${data} instanceof Date `;
    	    const vts = (0, util_1.useFunc)(gen, timestamp_1.default);
    	    const allowDateArg = allowDate ? (0, codegen_1._) `, true` : codegen_1.nil;
    	    const validString = (0, codegen_1._) `typeof ${data} == "string" && ${vts}(${data}${allowDateArg})`;
    	    return timestamp === "string" ? validString : (0, codegen_1.or)((0, codegen_1._) `${data} instanceof Date`, validString);
    	}
    	const def = {
    	    keyword: "type",
    	    schemaType: "string",
    	    error,
    	    code(cxt) {
    	        (0, metadata_1.checkMetadata)(cxt);
    	        const { data, schema, parentSchema, it } = cxt;
    	        let cond;
    	        switch (schema) {
    	            case "boolean":
    	            case "string":
    	                cond = (0, codegen_1._) `typeof ${data} == ${schema}`;
    	                break;
    	            case "timestamp": {
    	                cond = timestampCode(cxt);
    	                break;
    	            }
    	            case "float32":
    	            case "float64":
    	                cond = (0, codegen_1._) `typeof ${data} == "number"`;
    	                break;
    	            default: {
    	                const sch = schema;
    	                cond = (0, codegen_1._) `typeof ${data} == "number" && isFinite(${data}) && !(${data} % 1)`;
    	                if (!it.opts.int32range && (sch === "int32" || sch === "uint32")) {
    	                    if (sch === "uint32")
    	                        cond = (0, codegen_1._) `${cond} && ${data} >= 0`;
    	                }
    	                else {
    	                    const [min, max] = exports.intRange[sch];
    	                    cond = (0, codegen_1._) `${cond} && ${data} >= ${min} && ${data} <= ${max}`;
    	                }
    	            }
    	        }
    	        cxt.pass(parentSchema.nullable ? (0, codegen_1.or)((0, codegen_1._) `${data} === null`, cond) : cond);
    	    },
    	};
    	exports.default = def;
    	
    } (type));

    var _enum = {};

    var nullable = {};

    Object.defineProperty(nullable, "__esModule", { value: true });
    nullable.checkNullableObject = nullable.checkNullable = void 0;
    const codegen_1$6 = requireCodegen();
    function checkNullable({ gen, data, parentSchema }, cond = codegen_1$6.nil) {
        const valid = gen.name("valid");
        if (parentSchema.nullable) {
            gen.let(valid, (0, codegen_1$6._) `${data} === null`);
            cond = (0, codegen_1$6.not)(valid);
        }
        else {
            gen.let(valid, false);
        }
        return [valid, cond];
    }
    nullable.checkNullable = checkNullable;
    function checkNullableObject(cxt, cond) {
        const [valid, cond_] = checkNullable(cxt, cond);
        return [valid, (0, codegen_1$6._) `${cond_} && typeof ${cxt.data} == "object" && !Array.isArray(${cxt.data})`];
    }
    nullable.checkNullableObject = checkNullableObject;

    Object.defineProperty(_enum, "__esModule", { value: true });
    const codegen_1$5 = requireCodegen();
    const metadata_1$4 = metadata;
    const nullable_1$3 = nullable;
    const error$1 = {
        message: "must be equal to one of the allowed values",
        params: ({ schemaCode }) => (0, codegen_1$5._) `{allowedValues: ${schemaCode}}`,
    };
    const def$5 = {
        keyword: "enum",
        schemaType: "array",
        error: error$1,
        code(cxt) {
            (0, metadata_1$4.checkMetadata)(cxt);
            const { gen, data, schema, schemaValue, parentSchema, it } = cxt;
            if (schema.length === 0)
                throw new Error("enum must have non-empty array");
            if (schema.length !== new Set(schema).size)
                throw new Error("enum items must be unique");
            let valid;
            const isString = (0, codegen_1$5._) `typeof ${data} == "string"`;
            if (schema.length >= it.opts.loopEnum) {
                let cond;
                [valid, cond] = (0, nullable_1$3.checkNullable)(cxt, isString);
                gen.if(cond, loopEnum);
            }
            else {
                /* istanbul ignore if */
                if (!Array.isArray(schema))
                    throw new Error("ajv implementation error");
                valid = (0, codegen_1$5.and)(isString, (0, codegen_1$5.or)(...schema.map((value) => (0, codegen_1$5._) `${data} === ${value}`)));
                if (parentSchema.nullable)
                    valid = (0, codegen_1$5.or)((0, codegen_1$5._) `${data} === null`, valid);
            }
            cxt.pass(valid);
            function loopEnum() {
                gen.forOf("v", schemaValue, (v) => gen.if((0, codegen_1$5._) `${valid} = ${data} === ${v}`, () => gen.break()));
            }
        },
    };
    _enum.default = def$5;

    var elements = {};

    Object.defineProperty(elements, "__esModule", { value: true });
    const util_1$3 = util$6;
    const code_1$3 = code;
    const codegen_1$4 = requireCodegen();
    const metadata_1$3 = metadata;
    const nullable_1$2 = nullable;
    const error_1$2 = error$2;
    const def$4 = {
        keyword: "elements",
        schemaType: "object",
        error: (0, error_1$2.typeError)("array"),
        code(cxt) {
            (0, metadata_1$3.checkMetadata)(cxt);
            const { gen, data, schema, it } = cxt;
            if ((0, util_1$3.alwaysValidSchema)(it, schema))
                return;
            const [valid] = (0, nullable_1$2.checkNullable)(cxt);
            gen.if((0, codegen_1$4.not)(valid), () => gen.if((0, codegen_1$4._) `Array.isArray(${data})`, () => gen.assign(valid, (0, code_1$3.validateArray)(cxt)), () => cxt.error()));
            cxt.ok(valid);
        },
    };
    elements.default = def$4;

    var properties = {};

    (function (exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.validateProperties = exports.error = void 0;
    	const code_1 = code;
    	const util_1 = util$6;
    	const codegen_1 = requireCodegen();
    	const metadata_1 = metadata;
    	const nullable_1 = nullable;
    	const error_1 = error$2;
    	var PropError;
    	(function (PropError) {
    	    PropError["Additional"] = "additional";
    	    PropError["Missing"] = "missing";
    	})(PropError || (PropError = {}));
    	exports.error = {
    	    message: (cxt) => {
    	        const { params } = cxt;
    	        return params.propError
    	            ? params.propError === PropError.Additional
    	                ? "must NOT have additional properties"
    	                : `must have property '${params.missingProperty}'`
    	            : (0, error_1.typeErrorMessage)(cxt, "object");
    	    },
    	    params: (cxt) => {
    	        const { params } = cxt;
    	        return params.propError
    	            ? params.propError === PropError.Additional
    	                ? (0, codegen_1._) `{error: ${params.propError}, additionalProperty: ${params.additionalProperty}}`
    	                : (0, codegen_1._) `{error: ${params.propError}, missingProperty: ${params.missingProperty}}`
    	            : (0, error_1.typeErrorParams)(cxt, "object");
    	    },
    	};
    	const def = {
    	    keyword: "properties",
    	    schemaType: "object",
    	    error: exports.error,
    	    code: validateProperties,
    	};
    	// const error: KeywordErrorDefinition = {
    	//   message: "should NOT have additional properties",
    	//   params: ({params}) => _`{additionalProperty: ${params.additionalProperty}}`,
    	// }
    	function validateProperties(cxt) {
    	    (0, metadata_1.checkMetadata)(cxt);
    	    const { gen, data, parentSchema, it } = cxt;
    	    const { additionalProperties, nullable } = parentSchema;
    	    if (it.jtdDiscriminator && nullable)
    	        throw new Error("JTD: nullable inside discriminator mapping");
    	    if (commonProperties()) {
    	        throw new Error("JTD: properties and optionalProperties have common members");
    	    }
    	    const [allProps, properties] = schemaProperties("properties");
    	    const [allOptProps, optProperties] = schemaProperties("optionalProperties");
    	    if (properties.length === 0 && optProperties.length === 0 && additionalProperties) {
    	        return;
    	    }
    	    const [valid, cond] = it.jtdDiscriminator === undefined
    	        ? (0, nullable_1.checkNullableObject)(cxt, data)
    	        : [gen.let("valid", false), true];
    	    gen.if(cond, () => gen.assign(valid, true).block(() => {
    	        validateProps(properties, "properties", true);
    	        validateProps(optProperties, "optionalProperties");
    	        if (!additionalProperties)
    	            validateAdditional();
    	    }));
    	    cxt.pass(valid);
    	    function commonProperties() {
    	        const props = parentSchema.properties;
    	        const optProps = parentSchema.optionalProperties;
    	        if (!(props && optProps))
    	            return false;
    	        for (const p in props) {
    	            if (Object.prototype.hasOwnProperty.call(optProps, p))
    	                return true;
    	        }
    	        return false;
    	    }
    	    function schemaProperties(keyword) {
    	        const schema = parentSchema[keyword];
    	        const allPs = schema ? (0, code_1.allSchemaProperties)(schema) : [];
    	        if (it.jtdDiscriminator && allPs.some((p) => p === it.jtdDiscriminator)) {
    	            throw new Error(`JTD: discriminator tag used in ${keyword}`);
    	        }
    	        const ps = allPs.filter((p) => !(0, util_1.alwaysValidSchema)(it, schema[p]));
    	        return [allPs, ps];
    	    }
    	    function validateProps(props, keyword, required) {
    	        const _valid = gen.var("valid");
    	        for (const prop of props) {
    	            gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => applyPropertySchema(prop, keyword, _valid), () => missingProperty(prop));
    	            cxt.ok(_valid);
    	        }
    	        function missingProperty(prop) {
    	            if (required) {
    	                gen.assign(_valid, false);
    	                cxt.error(false, { propError: PropError.Missing, missingProperty: prop }, { schemaPath: prop });
    	            }
    	            else {
    	                gen.assign(_valid, true);
    	            }
    	        }
    	    }
    	    function applyPropertySchema(prop, keyword, _valid) {
    	        cxt.subschema({
    	            keyword,
    	            schemaProp: prop,
    	            dataProp: prop,
    	        }, _valid);
    	    }
    	    function validateAdditional() {
    	        gen.forIn("key", data, (key) => {
    	            const addProp = isAdditional(key, allProps, "properties", it.jtdDiscriminator);
    	            const addOptProp = isAdditional(key, allOptProps, "optionalProperties");
    	            const extra = addProp === true ? addOptProp : addOptProp === true ? addProp : (0, codegen_1.and)(addProp, addOptProp);
    	            gen.if(extra, () => {
    	                if (it.opts.removeAdditional) {
    	                    gen.code((0, codegen_1._) `delete ${data}[${key}]`);
    	                }
    	                else {
    	                    cxt.error(false, { propError: PropError.Additional, additionalProperty: key }, { instancePath: key, parentSchema: true });
    	                    if (!it.opts.allErrors)
    	                        gen.break();
    	                }
    	            });
    	        });
    	    }
    	    function isAdditional(key, props, keyword, jtdDiscriminator) {
    	        let additional;
    	        if (props.length > 8) {
    	            // TODO maybe an option instead of hard-coded 8?
    	            const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema[keyword], keyword);
    	            additional = (0, codegen_1.not)((0, code_1.isOwnProperty)(gen, propsSchema, key));
    	            if (jtdDiscriminator !== undefined) {
    	                additional = (0, codegen_1.and)(additional, (0, codegen_1._) `${key} !== ${jtdDiscriminator}`);
    	            }
    	        }
    	        else if (props.length || jtdDiscriminator !== undefined) {
    	            const ps = jtdDiscriminator === undefined ? props : [jtdDiscriminator].concat(props);
    	            additional = (0, codegen_1.and)(...ps.map((p) => (0, codegen_1._) `${key} !== ${p}`));
    	        }
    	        else {
    	            additional = true;
    	        }
    	        return additional;
    	    }
    	}
    	exports.validateProperties = validateProperties;
    	exports.default = def;
    	
    } (properties));

    var optionalProperties = {};

    Object.defineProperty(optionalProperties, "__esModule", { value: true });
    const properties_1$1 = properties;
    const def$3 = {
        keyword: "optionalProperties",
        schemaType: "object",
        error: properties_1$1.error,
        code(cxt) {
            if (cxt.parentSchema.properties)
                return;
            (0, properties_1$1.validateProperties)(cxt);
        },
    };
    optionalProperties.default = def$3;

    var discriminator = {};

    Object.defineProperty(discriminator, "__esModule", { value: true });
    const codegen_1$3 = requireCodegen();
    const metadata_1$2 = metadata;
    const nullable_1$1 = nullable;
    const error_1$1 = error$2;
    const types_1$2 = types$6;
    const error = {
        message: (cxt) => {
            const { schema, params } = cxt;
            return params.discrError
                ? params.discrError === types_1$2.DiscrError.Tag
                    ? `tag "${schema}" must be string`
                    : `value of tag "${schema}" must be in mapping`
                : (0, error_1$1.typeErrorMessage)(cxt, "object");
        },
        params: (cxt) => {
            const { schema, params } = cxt;
            return params.discrError
                ? (0, codegen_1$3._) `{error: ${params.discrError}, tag: ${schema}, tagValue: ${params.tag}}`
                : (0, error_1$1.typeErrorParams)(cxt, "object");
        },
    };
    const def$2 = {
        keyword: "discriminator",
        schemaType: "string",
        implements: ["mapping"],
        error,
        code(cxt) {
            (0, metadata_1$2.checkMetadata)(cxt);
            const { gen, data, schema, parentSchema } = cxt;
            const [valid, cond] = (0, nullable_1$1.checkNullableObject)(cxt, data);
            gen.if(cond);
            validateDiscriminator();
            gen.elseIf((0, codegen_1$3.not)(valid));
            cxt.error();
            gen.endIf();
            cxt.ok(valid);
            function validateDiscriminator() {
                const tag = gen.const("tag", (0, codegen_1$3._) `${data}${(0, codegen_1$3.getProperty)(schema)}`);
                gen.if((0, codegen_1$3._) `${tag} === undefined`);
                cxt.error(false, { discrError: types_1$2.DiscrError.Tag, tag });
                gen.elseIf((0, codegen_1$3._) `typeof ${tag} == "string"`);
                validateMapping(tag);
                gen.else();
                cxt.error(false, { discrError: types_1$2.DiscrError.Tag, tag }, { instancePath: schema });
                gen.endIf();
            }
            function validateMapping(tag) {
                gen.if(false);
                for (const tagValue in parentSchema.mapping) {
                    gen.elseIf((0, codegen_1$3._) `${tag} === ${tagValue}`);
                    gen.assign(valid, applyTagSchema(tagValue));
                }
                gen.else();
                cxt.error(false, { discrError: types_1$2.DiscrError.Mapping, tag }, { instancePath: schema, schemaPath: "mapping", parentSchema: true });
                gen.endIf();
            }
            function applyTagSchema(schemaProp) {
                const _valid = gen.name("valid");
                cxt.subschema({
                    keyword: "mapping",
                    schemaProp,
                    jtdDiscriminator: schema,
                }, _valid);
                return _valid;
            }
        },
    };
    discriminator.default = def$2;

    var values = {};

    Object.defineProperty(values, "__esModule", { value: true });
    const util_1$2 = util$6;
    const codegen_1$2 = requireCodegen();
    const metadata_1$1 = metadata;
    const nullable_1 = nullable;
    const error_1 = error$2;
    const def$1 = {
        keyword: "values",
        schemaType: "object",
        error: (0, error_1.typeError)("object"),
        code(cxt) {
            (0, metadata_1$1.checkMetadata)(cxt);
            const { gen, data, schema, it } = cxt;
            const [valid, cond] = (0, nullable_1.checkNullableObject)(cxt, data);
            if ((0, util_1$2.alwaysValidSchema)(it, schema)) {
                gen.if((0, codegen_1$2.not)((0, codegen_1$2.or)(cond, valid)), () => cxt.error());
            }
            else {
                gen.if(cond);
                gen.assign(valid, validateMap());
                gen.elseIf((0, codegen_1$2.not)(valid));
                cxt.error();
                gen.endIf();
            }
            cxt.ok(valid);
            function validateMap() {
                const _valid = gen.name("valid");
                if (it.allErrors) {
                    const validMap = gen.let("valid", true);
                    validateValues(() => gen.assign(validMap, false));
                    return validMap;
                }
                gen.var(_valid, true);
                validateValues(() => gen.break());
                return _valid;
                function validateValues(notValid) {
                    gen.forIn("key", data, (key) => {
                        cxt.subschema({
                            keyword: "values",
                            dataProp: key,
                            dataPropType: util_1$2.Type.Str,
                        }, _valid);
                        gen.if((0, codegen_1$2.not)(_valid), notValid);
                    });
                }
            }
        },
    };
    values.default = def$1;

    var union = {};

    Object.defineProperty(union, "__esModule", { value: true });
    const code_1$2 = code;
    const def = {
        keyword: "union",
        schemaType: "array",
        trackErrors: true,
        code: code_1$2.validateUnion,
        error: { message: "must match a schema in union" },
    };
    union.default = def;

    Object.defineProperty(jtd, "__esModule", { value: true });
    const ref_1$2 = ref;
    const type_1$1 = type;
    const enum_1 = _enum;
    const elements_1 = elements;
    const properties_1 = properties;
    const optionalProperties_1 = optionalProperties;
    const discriminator_1 = discriminator;
    const values_1 = values;
    const union_1 = union;
    const metadata_1 = metadata;
    const jtdVocabulary = [
        "definitions",
        ref_1$2.default,
        type_1$1.default,
        enum_1.default,
        elements_1.default,
        properties_1.default,
        optionalProperties_1.default,
        discriminator_1.default,
        values_1.default,
        union_1.default,
        metadata_1.default,
        { keyword: "additionalProperties", schemaType: "boolean" },
        { keyword: "nullable", schemaType: "boolean" },
    ];
    jtd.default = jtdVocabulary;

    var jtdSchema = {};

    Object.defineProperty(jtdSchema, "__esModule", { value: true });
    const shared = (root) => {
        const sch = {
            nullable: { type: "boolean" },
            metadata: {
                optionalProperties: {
                    union: { elements: { ref: "schema" } },
                },
                additionalProperties: true,
            },
        };
        if (root)
            sch.definitions = { values: { ref: "schema" } };
        return sch;
    };
    const emptyForm = (root) => ({
        optionalProperties: shared(root),
    });
    const refForm = (root) => ({
        properties: {
            ref: { type: "string" },
        },
        optionalProperties: shared(root),
    });
    const typeForm = (root) => ({
        properties: {
            type: {
                enum: [
                    "boolean",
                    "timestamp",
                    "string",
                    "float32",
                    "float64",
                    "int8",
                    "uint8",
                    "int16",
                    "uint16",
                    "int32",
                    "uint32",
                ],
            },
        },
        optionalProperties: shared(root),
    });
    const enumForm = (root) => ({
        properties: {
            enum: { elements: { type: "string" } },
        },
        optionalProperties: shared(root),
    });
    const elementsForm = (root) => ({
        properties: {
            elements: { ref: "schema" },
        },
        optionalProperties: shared(root),
    });
    const propertiesForm = (root) => ({
        properties: {
            properties: { values: { ref: "schema" } },
        },
        optionalProperties: {
            optionalProperties: { values: { ref: "schema" } },
            additionalProperties: { type: "boolean" },
            ...shared(root),
        },
    });
    const optionalPropertiesForm = (root) => ({
        properties: {
            optionalProperties: { values: { ref: "schema" } },
        },
        optionalProperties: {
            additionalProperties: { type: "boolean" },
            ...shared(root),
        },
    });
    const discriminatorForm = (root) => ({
        properties: {
            discriminator: { type: "string" },
            mapping: {
                values: {
                    metadata: {
                        union: [propertiesForm(false), optionalPropertiesForm(false)],
                    },
                },
            },
        },
        optionalProperties: shared(root),
    });
    const valuesForm = (root) => ({
        properties: {
            values: { ref: "schema" },
        },
        optionalProperties: shared(root),
    });
    const schema = (root) => ({
        metadata: {
            union: [
                emptyForm,
                refForm,
                typeForm,
                enumForm,
                elementsForm,
                propertiesForm,
                optionalPropertiesForm,
                discriminatorForm,
                valuesForm,
            ].map((s) => s(root)),
        },
    });
    const jtdMetaSchema = {
        definitions: {
            schema: schema(false),
        },
        ...schema(true),
    };
    jtdSchema.default = jtdMetaSchema;

    var serialize = {};

    var types$5 = {};

    Object.defineProperty(types$5, "__esModule", { value: true });
    types$5.jtdForms = void 0;
    types$5.jtdForms = [
        "elements",
        "values",
        "discriminator",
        "properties",
        "optionalProperties",
        "enum",
        "type",
        "ref",
    ];

    var quote$1 = {};

    Object.defineProperty(quote$1, "__esModule", { value: true });
    const rxEscapable = 
    // eslint-disable-next-line no-control-regex, no-misleading-character-class
    /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    const escaped = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\",
    };
    function quote(s) {
        rxEscapable.lastIndex = 0;
        return ('"' +
            (rxEscapable.test(s)
                ? s.replace(rxEscapable, (a) => {
                    const c = escaped[a];
                    return typeof c === "string"
                        ? c
                        : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                })
                : s) +
            '"');
    }
    quote$1.default = quote;
    quote.code = 'require("ajv/dist/runtime/quote").default';

    Object.defineProperty(serialize, "__esModule", { value: true });
    const types_1$1 = types$5;
    const __1$1 = compile;
    const codegen_1$1 = requireCodegen();
    const ref_error_1$1 = requireRef_error();
    const names_1$1 = names$1;
    const code_1$1 = code;
    const ref_1$1 = ref;
    const util_1$1 = util$6;
    const quote_1 = quote$1;
    const genSerialize = {
        elements: serializeElements,
        values: serializeValues,
        discriminator: serializeDiscriminator,
        properties: serializeProperties,
        optionalProperties: serializeProperties,
        enum: serializeString,
        type: serializeType,
        ref: serializeRef,
    };
    function compileSerializer(sch, definitions) {
        const _sch = __1$1.getCompilingSchema.call(this, sch);
        if (_sch)
            return _sch;
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1$1.CodeGen(this.scope, { es5, lines, ownProperties });
        const serializeName = gen.scopeName("serialize");
        const cxt = {
            self: this,
            gen,
            schema: sch.schema,
            schemaEnv: sch,
            definitions,
            data: names_1$1.default.data,
        };
        let sourceCode;
        try {
            this._compilations.add(sch);
            sch.serializeName = serializeName;
            gen.func(serializeName, names_1$1.default.data, false, () => {
                gen.let(names_1$1.default.json, (0, codegen_1$1.str) ``);
                serializeCode(cxt);
                gen.return(names_1$1.default.json);
            });
            gen.optimize(this.opts.code.optimize);
            const serializeFuncCode = gen.toString();
            sourceCode = `${gen.scopeRefs(names_1$1.default.scope)}return ${serializeFuncCode}`;
            const makeSerialize = new Function(`${names_1$1.default.scope}`, sourceCode);
            const serialize = makeSerialize(this.scope.get());
            this.scope.value(serializeName, { ref: serialize });
            sch.serialize = serialize;
        }
        catch (e) {
            if (sourceCode)
                this.logger.error("Error compiling serializer, function code:", sourceCode);
            delete sch.serialize;
            delete sch.serializeName;
            throw e;
        }
        finally {
            this._compilations.delete(sch);
        }
        return sch;
    }
    serialize.default = compileSerializer;
    function serializeCode(cxt) {
        let form;
        for (const key of types_1$1.jtdForms) {
            if (key in cxt.schema) {
                form = key;
                break;
            }
        }
        serializeNullable(cxt, form ? genSerialize[form] : serializeEmpty);
    }
    function serializeNullable(cxt, serializeForm) {
        const { gen, schema, data } = cxt;
        if (!schema.nullable)
            return serializeForm(cxt);
        gen.if((0, codegen_1$1._) `${data} === undefined || ${data} === null`, () => gen.add(names_1$1.default.json, (0, codegen_1$1._) `"null"`), () => serializeForm(cxt));
    }
    function serializeElements(cxt) {
        const { gen, schema, data } = cxt;
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `[`);
        const first = gen.let("first", true);
        gen.forOf("el", data, (el) => {
            addComma(cxt, first);
            serializeCode({ ...cxt, schema: schema.elements, data: el });
        });
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `]`);
    }
    function serializeValues(cxt) {
        const { gen, schema, data } = cxt;
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `{`);
        const first = gen.let("first", true);
        gen.forIn("key", data, (key) => serializeKeyValue(cxt, key, schema.values, first));
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `}`);
    }
    function serializeKeyValue(cxt, key, schema, first) {
        const { gen, data } = cxt;
        addComma(cxt, first);
        serializeString({ ...cxt, data: key });
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `:`);
        const value = gen.const("value", (0, codegen_1$1._) `${data}${(0, codegen_1$1.getProperty)(key)}`);
        serializeCode({ ...cxt, schema, data: value });
    }
    function serializeDiscriminator(cxt) {
        const { gen, schema, data } = cxt;
        const { discriminator } = schema;
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `{${JSON.stringify(discriminator)}:`);
        const tag = gen.const("tag", (0, codegen_1$1._) `${data}${(0, codegen_1$1.getProperty)(discriminator)}`);
        serializeString({ ...cxt, data: tag });
        gen.if(false);
        for (const tagValue in schema.mapping) {
            gen.elseIf((0, codegen_1$1._) `${tag} === ${tagValue}`);
            const sch = schema.mapping[tagValue];
            serializeSchemaProperties({ ...cxt, schema: sch }, discriminator);
        }
        gen.endIf();
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `}`);
    }
    function serializeProperties(cxt) {
        const { gen } = cxt;
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `{`);
        serializeSchemaProperties(cxt);
        gen.add(names_1$1.default.json, (0, codegen_1$1.str) `}`);
    }
    function serializeSchemaProperties(cxt, discriminator) {
        const { gen, schema, data } = cxt;
        const { properties, optionalProperties } = schema;
        const props = keys(properties);
        const optProps = keys(optionalProperties);
        const allProps = allProperties(props.concat(optProps));
        let first = !discriminator;
        let firstProp;
        for (const key of props) {
            if (first)
                first = false;
            else
                gen.add(names_1$1.default.json, (0, codegen_1$1.str) `,`);
            serializeProperty(key, properties[key], keyValue(key));
        }
        if (first)
            firstProp = gen.let("first", true);
        for (const key of optProps) {
            const value = keyValue(key);
            gen.if((0, codegen_1$1.and)((0, codegen_1$1._) `${value} !== undefined`, (0, code_1$1.isOwnProperty)(gen, data, key)), () => {
                addComma(cxt, firstProp);
                serializeProperty(key, optionalProperties[key], value);
            });
        }
        if (schema.additionalProperties) {
            gen.forIn("key", data, (key) => gen.if(isAdditional(key, allProps), () => serializeKeyValue(cxt, key, {}, firstProp)));
        }
        function keys(ps) {
            return ps ? Object.keys(ps) : [];
        }
        function allProperties(ps) {
            if (discriminator)
                ps.push(discriminator);
            if (new Set(ps).size !== ps.length) {
                throw new Error("JTD: properties/optionalProperties/disciminator overlap");
            }
            return ps;
        }
        function keyValue(key) {
            return gen.const("value", (0, codegen_1$1._) `${data}${(0, codegen_1$1.getProperty)(key)}`);
        }
        function serializeProperty(key, propSchema, value) {
            gen.add(names_1$1.default.json, (0, codegen_1$1.str) `${JSON.stringify(key)}:`);
            serializeCode({ ...cxt, schema: propSchema, data: value });
        }
        function isAdditional(key, ps) {
            return ps.length ? (0, codegen_1$1.and)(...ps.map((p) => (0, codegen_1$1._) `${key} !== ${p}`)) : true;
        }
    }
    function serializeType(cxt) {
        const { gen, schema, data } = cxt;
        switch (schema.type) {
            case "boolean":
                gen.add(names_1$1.default.json, (0, codegen_1$1._) `${data} ? "true" : "false"`);
                break;
            case "string":
                serializeString(cxt);
                break;
            case "timestamp":
                gen.if((0, codegen_1$1._) `${data} instanceof Date`, () => gen.add(names_1$1.default.json, (0, codegen_1$1._) `'"' + ${data}.toISOString() + '"'`), () => serializeString(cxt));
                break;
            default:
                serializeNumber(cxt);
        }
    }
    function serializeString({ gen, data }) {
        gen.add(names_1$1.default.json, (0, codegen_1$1._) `${(0, util_1$1.useFunc)(gen, quote_1.default)}(${data})`);
    }
    function serializeNumber({ gen, data }) {
        gen.add(names_1$1.default.json, (0, codegen_1$1._) `"" + ${data}`);
    }
    function serializeRef(cxt) {
        const { gen, self, data, definitions, schema, schemaEnv } = cxt;
        const { ref } = schema;
        const refSchema = definitions[ref];
        if (!refSchema)
            throw new ref_error_1$1.default(self.opts.uriResolver, "", ref, `No definition ${ref}`);
        if (!(0, ref_1$1.hasRef)(refSchema))
            return serializeCode({ ...cxt, schema: refSchema });
        const { root } = schemaEnv;
        const sch = compileSerializer.call(self, new __1$1.SchemaEnv({ schema: refSchema, root }), definitions);
        gen.add(names_1$1.default.json, (0, codegen_1$1._) `${getSerialize(gen, sch)}(${data})`);
    }
    function getSerialize(gen, sch) {
        return sch.serialize
            ? gen.scopeValue("serialize", { ref: sch.serialize })
            : (0, codegen_1$1._) `${gen.scopeValue("wrapper", { ref: sch })}.serialize`;
    }
    function serializeEmpty({ gen, data }) {
        gen.add(names_1$1.default.json, (0, codegen_1$1._) `JSON.stringify(${data})`);
    }
    function addComma({ gen }, first) {
        if (first) {
            gen.if(first, () => gen.assign(first, false), () => gen.add(names_1$1.default.json, (0, codegen_1$1.str) `,`));
        }
        else {
            gen.add(names_1$1.default.json, (0, codegen_1$1.str) `,`);
        }
    }

    var parse$3 = {};

    var parseJson$1 = {};

    Object.defineProperty(parseJson$1, "__esModule", { value: true });
    parseJson$1.parseJsonString = parseJson$1.parseJsonNumber = parseJson$1.parseJson = void 0;
    const rxParseJson = /position\s(\d+)$/;
    function parseJson(s, pos) {
        let endPos;
        parseJson.message = undefined;
        let matches;
        if (pos)
            s = s.slice(pos);
        try {
            parseJson.position = pos + s.length;
            return JSON.parse(s);
        }
        catch (e) {
            matches = rxParseJson.exec(e.message);
            if (!matches) {
                parseJson.message = "unexpected end";
                return undefined;
            }
            endPos = +matches[1];
            const c = s[endPos];
            s = s.slice(0, endPos);
            parseJson.position = pos + endPos;
            try {
                return JSON.parse(s);
            }
            catch (e1) {
                parseJson.message = `unexpected token ${c}`;
                return undefined;
            }
        }
    }
    parseJson$1.parseJson = parseJson;
    parseJson.message = undefined;
    parseJson.position = 0;
    parseJson.code = 'require("ajv/dist/runtime/parseJson").parseJson';
    function parseJsonNumber(s, pos, maxDigits) {
        let numStr = "";
        let c;
        parseJsonNumber.message = undefined;
        if (s[pos] === "-") {
            numStr += "-";
            pos++;
        }
        if (s[pos] === "0") {
            numStr += "0";
            pos++;
        }
        else {
            if (!parseDigits(maxDigits)) {
                errorMessage();
                return undefined;
            }
        }
        if (maxDigits) {
            parseJsonNumber.position = pos;
            return +numStr;
        }
        if (s[pos] === ".") {
            numStr += ".";
            pos++;
            if (!parseDigits()) {
                errorMessage();
                return undefined;
            }
        }
        if (((c = s[pos]), c === "e" || c === "E")) {
            numStr += "e";
            pos++;
            if (((c = s[pos]), c === "+" || c === "-")) {
                numStr += c;
                pos++;
            }
            if (!parseDigits()) {
                errorMessage();
                return undefined;
            }
        }
        parseJsonNumber.position = pos;
        return +numStr;
        function parseDigits(maxLen) {
            let digit = false;
            while (((c = s[pos]), c >= "0" && c <= "9" && (maxLen === undefined || maxLen-- > 0))) {
                digit = true;
                numStr += c;
                pos++;
            }
            return digit;
        }
        function errorMessage() {
            parseJsonNumber.position = pos;
            parseJsonNumber.message = pos < s.length ? `unexpected token ${s[pos]}` : "unexpected end";
        }
    }
    parseJson$1.parseJsonNumber = parseJsonNumber;
    parseJsonNumber.message = undefined;
    parseJsonNumber.position = 0;
    parseJsonNumber.code = 'require("ajv/dist/runtime/parseJson").parseJsonNumber';
    const escapedChars = {
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "\t",
        '"': '"',
        "/": "/",
        "\\": "\\",
    };
    const CODE_A = "a".charCodeAt(0);
    const CODE_0 = "0".charCodeAt(0);
    function parseJsonString(s, pos) {
        let str = "";
        let c;
        parseJsonString.message = undefined;
        // eslint-disable-next-line no-constant-condition, @typescript-eslint/no-unnecessary-condition
        while (true) {
            c = s[pos++];
            if (c === '"')
                break;
            if (c === "\\") {
                c = s[pos];
                if (c in escapedChars) {
                    str += escapedChars[c];
                    pos++;
                }
                else if (c === "u") {
                    pos++;
                    let count = 4;
                    let code = 0;
                    while (count--) {
                        code <<= 4;
                        c = s[pos];
                        if (c === undefined) {
                            errorMessage("unexpected end");
                            return undefined;
                        }
                        c = c.toLowerCase();
                        if (c >= "a" && c <= "f") {
                            code += c.charCodeAt(0) - CODE_A + 10;
                        }
                        else if (c >= "0" && c <= "9") {
                            code += c.charCodeAt(0) - CODE_0;
                        }
                        else {
                            errorMessage(`unexpected token ${c}`);
                            return undefined;
                        }
                        pos++;
                    }
                    str += String.fromCharCode(code);
                }
                else {
                    errorMessage(`unexpected token ${c}`);
                    return undefined;
                }
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            }
            else if (c === undefined) {
                errorMessage("unexpected end");
                return undefined;
            }
            else {
                if (c.charCodeAt(0) >= 0x20) {
                    str += c;
                }
                else {
                    errorMessage(`unexpected token ${c}`);
                    return undefined;
                }
            }
        }
        parseJsonString.position = pos;
        return str;
        function errorMessage(msg) {
            parseJsonString.position = pos;
            parseJsonString.message = msg;
        }
    }
    parseJson$1.parseJsonString = parseJsonString;
    parseJsonString.message = undefined;
    parseJsonString.position = 0;
    parseJsonString.code = 'require("ajv/dist/runtime/parseJson").parseJsonString';

    Object.defineProperty(parse$3, "__esModule", { value: true });
    const types_1 = types$5;
    const __1 = compile;
    const codegen_1 = requireCodegen();
    const ref_error_1 = requireRef_error();
    const names_1 = names$1;
    const code_1 = code;
    const ref_1 = ref;
    const type_1 = type;
    const parseJson_1 = parseJson$1;
    const util_1 = util$6;
    const timestamp_1 = timestamp;
    const genParse = {
        elements: parseElements,
        values: parseValues,
        discriminator: parseDiscriminator,
        properties: parseProperties,
        optionalProperties: parseProperties,
        enum: parseEnum,
        type: parseType,
        ref: parseRef,
    };
    function compileParser(sch, definitions) {
        const _sch = __1.getCompilingSchema.call(this, sch);
        if (_sch)
            return _sch;
        const { es5, lines } = this.opts.code;
        const { ownProperties } = this.opts;
        const gen = new codegen_1.CodeGen(this.scope, { es5, lines, ownProperties });
        const parseName = gen.scopeName("parse");
        const cxt = {
            self: this,
            gen,
            schema: sch.schema,
            schemaEnv: sch,
            definitions,
            data: names_1.default.data,
            parseName,
            char: gen.name("c"),
        };
        let sourceCode;
        try {
            this._compilations.add(sch);
            sch.parseName = parseName;
            parserFunction(cxt);
            gen.optimize(this.opts.code.optimize);
            const parseFuncCode = gen.toString();
            sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${parseFuncCode}`;
            const makeParse = new Function(`${names_1.default.scope}`, sourceCode);
            const parse = makeParse(this.scope.get());
            this.scope.value(parseName, { ref: parse });
            sch.parse = parse;
        }
        catch (e) {
            if (sourceCode)
                this.logger.error("Error compiling parser, function code:", sourceCode);
            delete sch.parse;
            delete sch.parseName;
            throw e;
        }
        finally {
            this._compilations.delete(sch);
        }
        return sch;
    }
    parse$3.default = compileParser;
    const undef = (0, codegen_1._) `undefined`;
    function parserFunction(cxt) {
        const { gen, parseName, char } = cxt;
        gen.func(parseName, (0, codegen_1._) `${names_1.default.json}, ${names_1.default.jsonPos}, ${names_1.default.jsonPart}`, false, () => {
            gen.let(names_1.default.data);
            gen.let(char);
            gen.assign((0, codegen_1._) `${parseName}.message`, undef);
            gen.assign((0, codegen_1._) `${parseName}.position`, undef);
            gen.assign(names_1.default.jsonPos, (0, codegen_1._) `${names_1.default.jsonPos} || 0`);
            gen.const(names_1.default.jsonLen, (0, codegen_1._) `${names_1.default.json}.length`);
            parseCode(cxt);
            skipWhitespace(cxt);
            gen.if(names_1.default.jsonPart, () => {
                gen.assign((0, codegen_1._) `${parseName}.position`, names_1.default.jsonPos);
                gen.return(names_1.default.data);
            });
            gen.if((0, codegen_1._) `${names_1.default.jsonPos} === ${names_1.default.jsonLen}`, () => gen.return(names_1.default.data));
            jsonSyntaxError(cxt);
        });
    }
    function parseCode(cxt) {
        let form;
        for (const key of types_1.jtdForms) {
            if (key in cxt.schema) {
                form = key;
                break;
            }
        }
        if (form)
            parseNullable(cxt, genParse[form]);
        else
            parseEmpty(cxt);
    }
    const parseBoolean = parseBooleanToken(true, parseBooleanToken(false, jsonSyntaxError));
    function parseNullable(cxt, parseForm) {
        const { gen, schema, data } = cxt;
        if (!schema.nullable)
            return parseForm(cxt);
        tryParseToken(cxt, "null", parseForm, () => gen.assign(data, null));
    }
    function parseElements(cxt) {
        const { gen, schema, data } = cxt;
        parseToken(cxt, "[");
        const ix = gen.let("i", 0);
        gen.assign(data, (0, codegen_1._) `[]`);
        parseItems(cxt, "]", () => {
            const el = gen.let("el");
            parseCode({ ...cxt, schema: schema.elements, data: el });
            gen.assign((0, codegen_1._) `${data}[${ix}++]`, el);
        });
    }
    function parseValues(cxt) {
        const { gen, schema, data } = cxt;
        parseToken(cxt, "{");
        gen.assign(data, (0, codegen_1._) `{}`);
        parseItems(cxt, "}", () => parseKeyValue(cxt, schema.values));
    }
    function parseItems(cxt, endToken, block) {
        tryParseItems(cxt, endToken, block);
        parseToken(cxt, endToken);
    }
    function tryParseItems(cxt, endToken, block) {
        const { gen } = cxt;
        gen.for((0, codegen_1._) `;${names_1.default.jsonPos}<${names_1.default.jsonLen} && ${jsonSlice(1)}!==${endToken};`, () => {
            block();
            tryParseToken(cxt, ",", () => gen.break(), hasItem);
        });
        function hasItem() {
            tryParseToken(cxt, endToken, () => { }, jsonSyntaxError);
        }
    }
    function parseKeyValue(cxt, schema) {
        const { gen } = cxt;
        const key = gen.let("key");
        parseString({ ...cxt, data: key });
        parseToken(cxt, ":");
        parsePropertyValue(cxt, key, schema);
    }
    function parseDiscriminator(cxt) {
        const { gen, data, schema } = cxt;
        const { discriminator, mapping } = schema;
        parseToken(cxt, "{");
        gen.assign(data, (0, codegen_1._) `{}`);
        const startPos = gen.const("pos", names_1.default.jsonPos);
        const value = gen.let("value");
        const tag = gen.let("tag");
        tryParseItems(cxt, "}", () => {
            const key = gen.let("key");
            parseString({ ...cxt, data: key });
            parseToken(cxt, ":");
            gen.if((0, codegen_1._) `${key} === ${discriminator}`, () => {
                parseString({ ...cxt, data: tag });
                gen.assign((0, codegen_1._) `${data}[${key}]`, tag);
                gen.break();
            }, () => parseEmpty({ ...cxt, data: value }) // can be discarded/skipped
            );
        });
        gen.assign(names_1.default.jsonPos, startPos);
        gen.if((0, codegen_1._) `${tag} === undefined`);
        parsingError(cxt, (0, codegen_1.str) `discriminator tag not found`);
        for (const tagValue in mapping) {
            gen.elseIf((0, codegen_1._) `${tag} === ${tagValue}`);
            parseSchemaProperties({ ...cxt, schema: mapping[tagValue] }, discriminator);
        }
        gen.else();
        parsingError(cxt, (0, codegen_1.str) `discriminator value not in schema`);
        gen.endIf();
    }
    function parseProperties(cxt) {
        const { gen, data } = cxt;
        parseToken(cxt, "{");
        gen.assign(data, (0, codegen_1._) `{}`);
        parseSchemaProperties(cxt);
    }
    function parseSchemaProperties(cxt, discriminator) {
        const { gen, schema, data } = cxt;
        const { properties, optionalProperties, additionalProperties } = schema;
        parseItems(cxt, "}", () => {
            const key = gen.let("key");
            parseString({ ...cxt, data: key });
            parseToken(cxt, ":");
            gen.if(false);
            parseDefinedProperty(cxt, key, properties);
            parseDefinedProperty(cxt, key, optionalProperties);
            if (discriminator) {
                gen.elseIf((0, codegen_1._) `${key} === ${discriminator}`);
                const tag = gen.let("tag");
                parseString({ ...cxt, data: tag }); // can be discarded, it is already assigned
            }
            gen.else();
            if (additionalProperties) {
                parseEmpty({ ...cxt, data: (0, codegen_1._) `${data}[${key}]` });
            }
            else {
                parsingError(cxt, (0, codegen_1.str) `property ${key} not allowed`);
            }
            gen.endIf();
        });
        if (properties) {
            const hasProp = (0, code_1.hasPropFunc)(gen);
            const allProps = (0, codegen_1.and)(...Object.keys(properties).map((p) => (0, codegen_1._) `${hasProp}.call(${data}, ${p})`));
            gen.if((0, codegen_1.not)(allProps), () => parsingError(cxt, (0, codegen_1.str) `missing required properties`));
        }
    }
    function parseDefinedProperty(cxt, key, schemas = {}) {
        const { gen } = cxt;
        for (const prop in schemas) {
            gen.elseIf((0, codegen_1._) `${key} === ${prop}`);
            parsePropertyValue(cxt, key, schemas[prop]);
        }
    }
    function parsePropertyValue(cxt, key, schema) {
        parseCode({ ...cxt, schema, data: (0, codegen_1._) `${cxt.data}[${key}]` });
    }
    function parseType(cxt) {
        const { gen, schema, data, self } = cxt;
        switch (schema.type) {
            case "boolean":
                parseBoolean(cxt);
                break;
            case "string":
                parseString(cxt);
                break;
            case "timestamp": {
                parseString(cxt);
                const vts = (0, util_1.useFunc)(gen, timestamp_1.default);
                const { allowDate, parseDate } = self.opts;
                const notValid = allowDate ? (0, codegen_1._) `!${vts}(${data}, true)` : (0, codegen_1._) `!${vts}(${data})`;
                const fail = parseDate
                    ? (0, codegen_1.or)(notValid, (0, codegen_1._) `(${data} = new Date(${data}), false)`, (0, codegen_1._) `isNaN(${data}.valueOf())`)
                    : notValid;
                gen.if(fail, () => parsingError(cxt, (0, codegen_1.str) `invalid timestamp`));
                break;
            }
            case "float32":
            case "float64":
                parseNumber(cxt);
                break;
            default: {
                const t = schema.type;
                if (!self.opts.int32range && (t === "int32" || t === "uint32")) {
                    parseNumber(cxt, 16); // 2 ** 53 - max safe integer
                    if (t === "uint32") {
                        gen.if((0, codegen_1._) `${data} < 0`, () => parsingError(cxt, (0, codegen_1.str) `integer out of range`));
                    }
                }
                else {
                    const [min, max, maxDigits] = type_1.intRange[t];
                    parseNumber(cxt, maxDigits);
                    gen.if((0, codegen_1._) `${data} < ${min} || ${data} > ${max}`, () => parsingError(cxt, (0, codegen_1.str) `integer out of range`));
                }
            }
        }
    }
    function parseString(cxt) {
        parseToken(cxt, '"');
        parseWith(cxt, parseJson_1.parseJsonString);
    }
    function parseEnum(cxt) {
        const { gen, data, schema } = cxt;
        const enumSch = schema.enum;
        parseToken(cxt, '"');
        // TODO loopEnum
        gen.if(false);
        for (const value of enumSch) {
            const valueStr = JSON.stringify(value).slice(1); // remove starting quote
            gen.elseIf((0, codegen_1._) `${jsonSlice(valueStr.length)} === ${valueStr}`);
            gen.assign(data, (0, codegen_1.str) `${value}`);
            gen.add(names_1.default.jsonPos, valueStr.length);
        }
        gen.else();
        jsonSyntaxError(cxt);
        gen.endIf();
    }
    function parseNumber(cxt, maxDigits) {
        const { gen } = cxt;
        skipWhitespace(cxt);
        gen.if((0, codegen_1._) `"-0123456789".indexOf(${jsonSlice(1)}) < 0`, () => jsonSyntaxError(cxt), () => parseWith(cxt, parseJson_1.parseJsonNumber, maxDigits));
    }
    function parseBooleanToken(bool, fail) {
        return (cxt) => {
            const { gen, data } = cxt;
            tryParseToken(cxt, `${bool}`, () => fail(cxt), () => gen.assign(data, bool));
        };
    }
    function parseRef(cxt) {
        const { gen, self, definitions, schema, schemaEnv } = cxt;
        const { ref } = schema;
        const refSchema = definitions[ref];
        if (!refSchema)
            throw new ref_error_1.default(self.opts.uriResolver, "", ref, `No definition ${ref}`);
        if (!(0, ref_1.hasRef)(refSchema))
            return parseCode({ ...cxt, schema: refSchema });
        const { root } = schemaEnv;
        const sch = compileParser.call(self, new __1.SchemaEnv({ schema: refSchema, root }), definitions);
        partialParse(cxt, getParser(gen, sch), true);
    }
    function getParser(gen, sch) {
        return sch.parse
            ? gen.scopeValue("parse", { ref: sch.parse })
            : (0, codegen_1._) `${gen.scopeValue("wrapper", { ref: sch })}.parse`;
    }
    function parseEmpty(cxt) {
        parseWith(cxt, parseJson_1.parseJson);
    }
    function parseWith(cxt, parseFunc, args) {
        partialParse(cxt, (0, util_1.useFunc)(cxt.gen, parseFunc), args);
    }
    function partialParse(cxt, parseFunc, args) {
        const { gen, data } = cxt;
        gen.assign(data, (0, codegen_1._) `${parseFunc}(${names_1.default.json}, ${names_1.default.jsonPos}${args ? (0, codegen_1._) `, ${args}` : codegen_1.nil})`);
        gen.assign(names_1.default.jsonPos, (0, codegen_1._) `${parseFunc}.position`);
        gen.if((0, codegen_1._) `${data} === undefined`, () => parsingError(cxt, (0, codegen_1._) `${parseFunc}.message`));
    }
    function parseToken(cxt, tok) {
        tryParseToken(cxt, tok, jsonSyntaxError);
    }
    function tryParseToken(cxt, tok, fail, success) {
        const { gen } = cxt;
        const n = tok.length;
        skipWhitespace(cxt);
        gen.if((0, codegen_1._) `${jsonSlice(n)} === ${tok}`, () => {
            gen.add(names_1.default.jsonPos, n);
            success === null || success === void 0 ? void 0 : success(cxt);
        }, () => fail(cxt));
    }
    function skipWhitespace({ gen, char: c }) {
        gen.code((0, codegen_1._) `while((${c}=${names_1.default.json}[${names_1.default.jsonPos}],${c}===" "||${c}==="\\n"||${c}==="\\r"||${c}==="\\t"))${names_1.default.jsonPos}++;`);
    }
    function jsonSlice(len) {
        return len === 1
            ? (0, codegen_1._) `${names_1.default.json}[${names_1.default.jsonPos}]`
            : (0, codegen_1._) `${names_1.default.json}.slice(${names_1.default.jsonPos}, ${names_1.default.jsonPos}+${len})`;
    }
    function jsonSyntaxError(cxt) {
        parsingError(cxt, (0, codegen_1._) `"unexpected token " + ${names_1.default.json}[${names_1.default.jsonPos}]`);
    }
    function parsingError({ gen, parseName }, msg) {
        gen.assign((0, codegen_1._) `${parseName}.message`, msg);
        gen.assign((0, codegen_1._) `${parseName}.position`, names_1.default.jsonPos);
        gen.return(undef);
    }

    (function (module, exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
    	const core_1 = core$2;
    	const jtd_1 = jtd;
    	const jtd_schema_1 = jtdSchema;
    	const serialize_1 = serialize;
    	const parse_1 = parse$3;
    	const META_SCHEMA_ID = "JTD-meta-schema";
    	class Ajv extends core_1.default {
    	    constructor(opts = {}) {
    	        super({
    	            ...opts,
    	            jtd: true,
    	        });
    	    }
    	    _addVocabularies() {
    	        super._addVocabularies();
    	        this.addVocabulary(jtd_1.default);
    	    }
    	    _addDefaultMetaSchema() {
    	        super._addDefaultMetaSchema();
    	        if (!this.opts.meta)
    	            return;
    	        this.addMetaSchema(jtd_schema_1.default, META_SCHEMA_ID, false);
    	    }
    	    defaultMeta() {
    	        return (this.opts.defaultMeta =
    	            super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined));
    	    }
    	    compileSerializer(schema) {
    	        const sch = this._addSchema(schema);
    	        return sch.serialize || this._compileSerializer(sch);
    	    }
    	    compileParser(schema) {
    	        const sch = this._addSchema(schema);
    	        return (sch.parse || this._compileParser(sch));
    	    }
    	    _compileSerializer(sch) {
    	        serialize_1.default.call(this, sch, sch.schema.definitions || {});
    	        /* istanbul ignore if */
    	        if (!sch.serialize)
    	            throw new Error("ajv implementation error");
    	        return sch.serialize;
    	    }
    	    _compileParser(sch) {
    	        parse_1.default.call(this, sch, sch.schema.definitions || {});
    	        /* istanbul ignore if */
    	        if (!sch.parse)
    	            throw new Error("ajv implementation error");
    	        return sch.parse;
    	    }
    	}
    	module.exports = exports = Ajv;
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.default = Ajv;
    	var validate_1 = requireValidate();
    	Object.defineProperty(exports, "KeywordCxt", { enumerable: true, get: function () { return validate_1.KeywordCxt; } });
    	var codegen_1 = requireCodegen();
    	Object.defineProperty(exports, "_", { enumerable: true, get: function () { return codegen_1._; } });
    	Object.defineProperty(exports, "str", { enumerable: true, get: function () { return codegen_1.str; } });
    	Object.defineProperty(exports, "stringify", { enumerable: true, get: function () { return codegen_1.stringify; } });
    	Object.defineProperty(exports, "nil", { enumerable: true, get: function () { return codegen_1.nil; } });
    	Object.defineProperty(exports, "Name", { enumerable: true, get: function () { return codegen_1.Name; } });
    	Object.defineProperty(exports, "CodeGen", { enumerable: true, get: function () { return codegen_1.CodeGen; } });
    	var validation_error_1 = requireValidation_error();
    	Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function () { return validation_error_1.default; } });
    	var ref_error_1 = requireRef_error();
    	Object.defineProperty(exports, "MissingRefError", { enumerable: true, get: function () { return ref_error_1.default; } });
    	
    } (jtd$1, jtdExports));

    const fastUri = fastUriExports;

    var defaultAjvOptions$2 = Object.freeze({
      coerceTypes: 'array',
      useDefaults: true,
      removeAdditional: true,
      uriResolver: fastUri,
      addUsedSchema: false,
      // Explicitly set allErrors to `false`.
      // When set to `true`, a DoS attack is possible.
      allErrors: false
    });

    const Ajv = ajvExports.default;
    const AjvJTD$1 = jtdExports;

    const defaultAjvOptions$1 = defaultAjvOptions$2;

    class ValidatorCompiler {
      constructor (externalSchemas, options) {
        // This instance of Ajv is private
        // it should not be customized or used
        if (options.mode === 'JTD') {
          this.ajv = new AjvJTD$1(Object.assign({}, defaultAjvOptions$1, options.customOptions));
        } else {
          this.ajv = new Ajv(Object.assign({}, defaultAjvOptions$1, options.customOptions));
        }

        let addFormatPlugin = true;
        if (options.plugins && options.plugins.length > 0) {
          for (const plugin of options.plugins) {
            if (Array.isArray(plugin)) {
              addFormatPlugin = addFormatPlugin && plugin[0].name !== 'formatsPlugin';
              plugin[0](this.ajv, plugin[1]);
            } else {
              addFormatPlugin = addFormatPlugin && plugin.name !== 'formatsPlugin';
              plugin(this.ajv);
            }
          }
        }

        if (addFormatPlugin) {
          requireDist()(this.ajv);
        }

        const sourceSchemas = Object.values(externalSchemas);
        for (const extSchema of sourceSchemas) {
          this.ajv.addSchema(extSchema);
        }
      }

      buildValidatorFunction ({ schema/*, method, url, httpPart */ }) {
        // Ajv does not support compiling two schemas with the same
        // id inside the same instance. Therefore if we have already
        // compiled the schema with the given id, we just return it.
        if (schema.$id) {
          const stored = this.ajv.getSchema(schema.$id);
          if (stored) {
            return stored
          }
        }

        return this.ajv.compile(schema)
      }
    }

    var validatorCompiler = ValidatorCompiler;

    const AjvJTD = jtdExports;

    const defaultAjvOptions = defaultAjvOptions$2;

    class SerializerCompiler {
      constructor (externalSchemas, options) {
        this.ajv = new AjvJTD(Object.assign({}, defaultAjvOptions, options));

        /**
         * https://ajv.js.org/json-type-definition.html#ref-form
         * Unlike JSON Schema, JTD does not allow to reference:
         * - any schema fragment other than root level definitions member
         * - root of the schema - there is another way to define a self-recursive schema (see Example 2)
         * - another schema file (but you can still combine schemas from multiple files using JavaScript).
         *
         * So we ignore the externalSchemas parameter.
         */
      }

      buildSerializerFunction ({ schema/*, method, url, httpStatus */ }) {
        return this.ajv.compileSerializer(schema)
      }
    }

    var serializerCompiler = SerializerCompiler;

    var standaloneExports = {};
    var standalone$1 = {
      get exports(){ return standaloneExports; },
      set exports(v){ standaloneExports = v; },
    };

    (function (module, exports) {
    	Object.defineProperty(exports, "__esModule", { value: true });
    	const scope_1 = scope;
    	const code_1 = code$1;
    	function standaloneCode(ajv, refsOrFunc) {
    	    if (!ajv.opts.code.source) {
    	        throw new Error("moduleCode: ajv instance must have code.source option");
    	    }
    	    const { _n } = ajv.scope.opts;
    	    return typeof refsOrFunc == "function"
    	        ? funcExportCode(refsOrFunc.source)
    	        : refsOrFunc !== undefined
    	            ? multiExportsCode(refsOrFunc, getValidate)
    	            : multiExportsCode(ajv.schemas, (sch) => sch.meta ? undefined : ajv.compile(sch.schema));
    	    function getValidate(id) {
    	        const v = ajv.getSchema(id);
    	        if (!v)
    	            throw new Error(`moduleCode: no schema with id ${id}`);
    	        return v;
    	    }
    	    function funcExportCode(source) {
    	        const usedValues = {};
    	        const n = source === null || source === void 0 ? void 0 : source.validateName;
    	        const vCode = validateCode(usedValues, source);
    	        if (ajv.opts.code.esm) {
    	            // Always do named export as `validate` rather than the variable `n` which is `validateXX` for known export value
    	            return `"use strict";${_n}export const validate = ${n};${_n}export default ${n};${_n}${vCode}`;
    	        }
    	        return `"use strict";${_n}module.exports = ${n};${_n}module.exports.default = ${n};${_n}${vCode}`;
    	    }
    	    function multiExportsCode(schemas, getValidateFunc) {
    	        var _a;
    	        const usedValues = {};
    	        let code = (0, code_1._) `"use strict";`;
    	        for (const name in schemas) {
    	            const v = getValidateFunc(schemas[name]);
    	            if (v) {
    	                const vCode = validateCode(usedValues, v.source);
    	                const exportSyntax = ajv.opts.code.esm
    	                    ? (0, code_1._) `export const ${(0, code_1.getEsmExportName)(name)}`
    	                    : (0, code_1._) `exports${(0, code_1.getProperty)(name)}`;
    	                code = (0, code_1._) `${code}${_n}${exportSyntax} = ${(_a = v.source) === null || _a === void 0 ? void 0 : _a.validateName};${_n}${vCode}`;
    	            }
    	        }
    	        return `${code}`;
    	    }
    	    function validateCode(usedValues, s) {
    	        if (!s)
    	            throw new Error('moduleCode: function does not have "source" property');
    	        if (usedState(s.validateName) === scope_1.UsedValueState.Completed)
    	            return code_1.nil;
    	        setUsedState(s.validateName, scope_1.UsedValueState.Started);
    	        const scopeCode = ajv.scope.scopeCode(s.scopeValues, usedValues, refValidateCode);
    	        const code = new code_1._Code(`${scopeCode}${_n}${s.validateCode}`);
    	        return s.evaluated ? (0, code_1._) `${code}${s.validateName}.evaluated = ${s.evaluated};${_n}` : code;
    	        function refValidateCode(n) {
    	            var _a;
    	            const vRef = (_a = n.value) === null || _a === void 0 ? void 0 : _a.ref;
    	            if (n.prefix === "validate" && typeof vRef == "function") {
    	                const v = vRef;
    	                return validateCode(usedValues, v.source);
    	            }
    	            else if ((n.prefix === "root" || n.prefix === "wrapper") && typeof vRef == "object") {
    	                const { validate, validateName } = vRef;
    	                if (!validateName)
    	                    throw new Error("ajv internal error");
    	                const def = ajv.opts.code.es5 ? scope_1.varKinds.var : scope_1.varKinds.const;
    	                const wrapper = (0, code_1._) `${def} ${n} = {validate: ${validateName}};`;
    	                if (usedState(validateName) === scope_1.UsedValueState.Started)
    	                    return wrapper;
    	                const vCode = validateCode(usedValues, validate === null || validate === void 0 ? void 0 : validate.source);
    	                return (0, code_1._) `${wrapper}${_n}${vCode}`;
    	            }
    	            return undefined;
    	        }
    	        function usedState(name) {
    	            var _a;
    	            return (_a = usedValues[name.prefix]) === null || _a === void 0 ? void 0 : _a.get(name);
    	        }
    	        function setUsedState(name, state) {
    	            const { prefix } = name;
    	            const names = (usedValues[prefix] = usedValues[prefix] || new Map());
    	            names.set(name, state);
    	        }
    	    }
    	}
    	module.exports = exports = standaloneCode;
    	Object.defineProperty(exports, "__esModule", { value: true });
    	exports.default = standaloneCode;
    	
    } (standalone$1, standaloneExports));

    var standalone;
    var hasRequiredStandalone;

    function requireStandalone () {
    	if (hasRequiredStandalone) return standalone;
    	hasRequiredStandalone = 1;

    	const ValidatorSelector = requireAjvCompiler();
    	const standaloneCode = standaloneExports.default;

    	function StandaloneValidator (options = { readMode: true }) {
    	  if (options.readMode === true && !options.restoreFunction) {
    	    throw new Error('You must provide a restoreFunction options when readMode ON')
    	  }

    	  if (options.readMode !== true && !options.storeFunction) {
    	    throw new Error('You must provide a storeFunction options when readMode OFF')
    	  }

    	  if (options.readMode === true) {
    	    // READ MODE: it behalf only in the restore function provided by the user
    	    return function wrapper () {
    	      return function (opts) {
    	        return options.restoreFunction(opts)
    	      }
    	    }
    	  }

    	  // WRITE MODE: it behalf on the default ValidatorSelector, wrapping the API to run the Ajv Standalone code generation
    	  const factory = ValidatorSelector();
    	  return function wrapper (externalSchemas, ajvOptions = {}) {
    	    if (!ajvOptions.customOptions || !ajvOptions.customOptions.code) {
    	      // to generate the validation source code, these options are mandatory
    	      ajvOptions.customOptions = Object.assign({}, ajvOptions.customOptions, { code: { source: true } });
    	    }

    	    const compiler = factory(externalSchemas, ajvOptions);
    	    return function (opts) { // { schema/*, method, url, httpPart */ }
    	      const validationFunc = compiler(opts);

    	      const schemaValidationCode = standaloneCode(compiler[ValidatorSelector.AjvReference].ajv, validationFunc);
    	      options.storeFunction(opts, schemaValidationCode);

    	      return validationFunc
    	    }
    	  }
    	}

    	standalone = StandaloneValidator;
    	return standalone;
    }

    var hasRequiredAjvCompiler;

    function requireAjvCompiler () {
    	if (hasRequiredAjvCompiler) return ajvCompilerExports;
    	hasRequiredAjvCompiler = 1;

    	const AjvReference = Symbol.for('fastify.ajv-compiler.reference');
    	const ValidatorCompiler = validatorCompiler;
    	const SerializerCompiler = serializerCompiler;

    	function AjvCompiler (opts) {
    	  const validatorPool = new Map();
    	  const serializerPool = new Map();

    	  if (opts && opts.jtdSerializer === true) {
    	    return function buildSerializerFromPool (externalSchemas, serializerOpts) {
    	      const uniqueAjvKey = getPoolKey({}, serializerOpts);
    	      if (serializerPool.has(uniqueAjvKey)) {
    	        return serializerPool.get(uniqueAjvKey)
    	      }

    	      const compiler = new SerializerCompiler(externalSchemas, serializerOpts);
    	      const ret = compiler.buildSerializerFunction.bind(compiler);
    	      serializerPool.set(uniqueAjvKey, ret);

    	      return ret
    	    }
    	  }

    	  return function buildCompilerFromPool (externalSchemas, options) {
    	    const uniqueAjvKey = getPoolKey(externalSchemas, options.customOptions);
    	    if (validatorPool.has(uniqueAjvKey)) {
    	      return validatorPool.get(uniqueAjvKey)
    	    }

    	    const compiler = new ValidatorCompiler(externalSchemas, options);
    	    const ret = compiler.buildValidatorFunction.bind(compiler);
    	    validatorPool.set(uniqueAjvKey, ret);

    	    if (options.customOptions.code !== undefined) {
    	      ret[AjvReference] = compiler;
    	    }

    	    return ret
    	  }
    	}

    	function getPoolKey (externalSchemas, options) {
    	  const externals = JSON.stringify(externalSchemas);
    	  const ajvConfig = JSON.stringify(options);
    	  return `${externals}${ajvConfig}`
    	}
    	ajvCompiler.exports = AjvCompiler;
    	ajvCompilerExports.default = AjvCompiler;
    	ajvCompilerExports.AjvCompiler = AjvCompiler;
    	ajvCompilerExports.AjvReference = AjvReference;
    	ajvCompilerExports.StandaloneValidator = requireStandalone();
    	return ajvCompilerExports;
    }

    const { buildSchemas } = schemas;
    const SerializerSelector = requireFastJsonStringifyCompiler();
    const ValidatorSelector = requireAjvCompiler();

    /**
     * Called at every fastify context that is being created.
     * @param {object} parentSchemaCtrl: the SchemaController instance of the Fastify parent context
     * @param {object} opts: the `schemaController` server option. It can be undefined when a parentSchemaCtrl is set
     * @return {object}:a new SchemaController
     */
    function buildSchemaController (parentSchemaCtrl, opts) {
      if (parentSchemaCtrl) {
        return new SchemaController$2(parentSchemaCtrl, opts)
      }

      const compilersFactory = Object.assign({
        buildValidator: null,
        buildSerializer: null
      }, opts?.compilersFactory);

      if (!compilersFactory.buildValidator) {
        compilersFactory.buildValidator = ValidatorSelector();
      }
      if (!compilersFactory.buildSerializer) {
        compilersFactory.buildSerializer = SerializerSelector();
      }

      const option = {
        bucket: (opts && opts.bucket) || buildSchemas,
        compilersFactory,
        isCustomValidatorCompiler: typeof opts?.compilersFactory?.buildValidator === 'function',
        isCustomSerializerCompiler: typeof opts?.compilersFactory?.buildValidator === 'function'
      };

      return new SchemaController$2(undefined, option)
    }

    let SchemaController$2 = class SchemaController {
      constructor (parent, options) {
        this.opts = options || (parent && parent.opts);
        this.addedSchemas = false;

        this.compilersFactory = this.opts.compilersFactory;
        this.isCustomValidatorCompiler = this.opts.isCustomValidatorCompiler || false;
        this.isCustomSerializerCompiler = this.opts.isCustomSerializerCompiler || false;

        if (parent) {
          this.schemaBucket = this.opts.bucket(parent.getSchemas());
          this.validatorCompiler = parent.getValidatorCompiler();
          this.serializerCompiler = parent.getSerializerCompiler();
          this.parent = parent;
        } else {
          this.schemaBucket = this.opts.bucket();
        }
      }

      // Bucket interface
      add (schema) {
        this.addedSchemas = true;
        return this.schemaBucket.add(schema)
      }

      getSchema (schemaId) {
        return this.schemaBucket.getSchema(schemaId)
      }

      getSchemas () {
        return this.schemaBucket.getSchemas()
      }

      // Schema Controller compilers holder
      setValidatorCompiler (validatorCompiler) {
        this.validatorCompiler = validatorCompiler;
        this.isCustomValidatorCompiler = true;
      }

      setSerializerCompiler (serializerCompiler) {
        this.serializerCompiler = serializerCompiler;
        this.isCustomSerializerCompiler = true;
      }

      getValidatorCompiler () {
        return this.validatorCompiler || (this.parent && this.parent.getValidatorCompiler())
      }

      getSerializerCompiler () {
        return this.serializerCompiler || (this.parent && this.parent.getSerializerCompiler())
      }

      getSerializerBuilder () {
        return this.compilersFactory.buildSerializer || (this.parent && this.parent.getSerializerBuilder())
      }

      getValidatorBuilder () {
        return this.compilersFactory.buildValidator || (this.parent && this.parent.getValidatorBuilder())
      }

      /**
       * This method will be called when a validator must be setup.
       * Do not setup the compiler more than once
       * @param {object} serverOptions: the fastify server option
       */
      setupValidator (serverOption) {
        const isReady = this.validatorCompiler !== undefined && !this.addedSchemas;
        if (isReady) {
          return
        }
        this.validatorCompiler = this.getValidatorBuilder()(this.schemaBucket.getSchemas(), serverOption.ajv);
      }

      /**
       * This method will be called when a serializer must be setup.
       * Do not setup the compiler more than once
       * @param {object} serverOptions: the fastify server option
       */
      setupSerializer (serverOption) {
        const isReady = this.serializerCompiler !== undefined && !this.addedSchemas;
        if (isReady) {
          return
        }

        this.serializerCompiler = this.getSerializerBuilder()(this.schemaBucket.getSchemas(), serverOption.serializerOpts);
      }
    };

    SchemaController$2.buildSchemaController = buildSchemaController;
    var schemaController = SchemaController$2;

    var pluginUtilsExports = {};
    var pluginUtils$2 = {
      get exports(){ return pluginUtilsExports; },
      set exports(v){ pluginUtilsExports = v; },
    };

    (function (module) {

    	const semver = semver$4;
    	const assert = require$$0$7;
    	const registeredPlugins = Symbol.for('registered-plugin');
    	const {
    	  kTestInternals
    	} = symbols$2;
    	const { exist, existReply, existRequest } = decorate_1;
    	const { FST_ERR_PLUGIN_VERSION_MISMATCH } = errorsExports;

    	function getMeta (fn) {
    	  return fn[Symbol.for('plugin-meta')]
    	}

    	function getPluginName (func) {
    	  const display = getDisplayName(func);
    	  if (display) {
    	    return display
    	  }

    	  // let's see if this is a file, and in that case use that
    	  // this is common for plugins
    	  const cache = require.cache;
    	  const keys = Object.keys(cache);

    	  for (let i = 0; i < keys.length; i++) {
    	    const key = keys[i];
    	    if (cache[key].exports === func) {
    	      return key
    	    }
    	  }

    	  // if not maybe it's a named function, so use that
    	  if (func.name) {
    	    return func.name
    	  }

    	  return null
    	}

    	function getFuncPreview (func) {
    	  // takes the first two lines of the function if nothing else works
    	  return func.toString().split('\n').slice(0, 2).map(s => s.trim()).join(' -- ')
    	}

    	function getDisplayName (fn) {
    	  return fn[Symbol.for('fastify.display-name')]
    	}

    	function shouldSkipOverride (fn) {
    	  return !!fn[Symbol.for('skip-override')]
    	}

    	function checkDependencies (fn) {
    	  const meta = getMeta(fn);
    	  if (!meta) return

    	  const dependencies = meta.dependencies;
    	  if (!dependencies) return
    	  assert(Array.isArray(dependencies), 'The dependencies should be an array of strings');

    	  dependencies.forEach(dependency => {
    	    assert(
    	      this[registeredPlugins].indexOf(dependency) > -1,
    	      `The dependency '${dependency}' of plugin '${meta.name}' is not registered`
    	    );
    	  });
    	}

    	function checkDecorators (fn) {
    	  const meta = getMeta(fn);
    	  if (!meta) return

    	  const { decorators, name } = meta;
    	  if (!decorators) return

    	  if (decorators.fastify) _checkDecorators(this, 'Fastify', decorators.fastify, name);
    	  if (decorators.reply) _checkDecorators(this, 'Reply', decorators.reply, name);
    	  if (decorators.request) _checkDecorators(this, 'Request', decorators.request, name);
    	}

    	const checks = {
    	  Fastify: exist,
    	  Request: existRequest,
    	  Reply: existReply
    	};

    	function _checkDecorators (that, instance, decorators, name) {
    	  assert(Array.isArray(decorators), 'The decorators should be an array of strings');

    	  decorators.forEach(decorator => {
    	    const withPluginName = typeof name === 'string' ? ` required by '${name}'` : '';
    	    if (!checks[instance].call(that, decorator)) {
    	      throw new Error(`The decorator '${decorator}'${withPluginName} is not present in ${instance}`)
    	    }
    	  });
    	}

    	function checkVersion (fn) {
    	  const meta = getMeta(fn);
    	  if (!meta) return

    	  const requiredVersion = meta.fastify;

    	  const fastifyRc = /-rc.+$/.test(this.version);
    	  if (fastifyRc === true && semver.gt(this.version, semver.coerce(requiredVersion)) === true) {
    	    // A Fastify release candidate phase is taking place. In order to reduce
    	    // the effort needed to test plugins with the RC, we allow plugins targeting
    	    // the prior Fastify release to be loaded.
    	    return
    	  }
    	  if (requiredVersion && semver.satisfies(this.version, requiredVersion, { includePrerelease: fastifyRc }) === false) {
    	    // We are not in a release candidate phase. Thus, we must honor the semver
    	    // ranges defined by the plugin's metadata. Which is to say, if the plugin
    	    // expects an older version of Fastify than the _current_ version, we will
    	    // throw an error.
    	    throw new FST_ERR_PLUGIN_VERSION_MISMATCH(meta.name, requiredVersion, this.version)
    	  }
    	}

    	function registerPluginName (fn) {
    	  const meta = getMeta(fn);
    	  if (!meta) return

    	  const name = meta.name;
    	  if (!name) return
    	  this[registeredPlugins].push(name);
    	}

    	function registerPlugin (fn) {
    	  registerPluginName.call(this, fn);
    	  checkVersion.call(this, fn);
    	  checkDecorators.call(this, fn);
    	  checkDependencies.call(this, fn);
    	  return shouldSkipOverride(fn)
    	}

    	module.exports = {
    	  getPluginName,
    	  getFuncPreview,
    	  registeredPlugins,
    	  getDisplayName,
    	  registerPlugin
    	};

    	module.exports[kTestInternals] = {
    	  shouldSkipOverride,
    	  getMeta,
    	  checkDecorators,
    	  checkDependencies
    	};
    } (pluginUtils$2));

    var reqIdGenFactory$1 = function (requestIdHeader, optGenReqId) {
      // 2,147,483,647 (2^31 − 1) stands for max SMI value (an internal optimization of V8).
      // With this upper bound, if you'll be generating 1k ids/sec, you're going to hit it in ~25 days.
      // This is very likely to happen in real-world applications, hence the limit is enforced.
      // Growing beyond this value will make the id generation slower and cause a deopt.
      // In the worst cases, it will become a float, losing accuracy.
      const maxInt = 2147483647;
      let nextReqId = 0;
      function defaultGenReqId (req) {
        nextReqId = (nextReqId + 1) & maxInt;
        return `req-${nextReqId.toString(36)}`
      }

      const genReqId = optGenReqId || defaultGenReqId;

      if (requestIdHeader) {
        // requestIdHeader = typeof requestIdHeader === 'string' ? requestIdHeader : 'request-id'
        return function (req) {
          return req.headers[requestIdHeader] || genReqId(req)
        }
      }

      return genReqId
    };

    var libExports$1 = {};
    var lib$1 = {
      get exports(){ return libExports$1; },
      set exports(v){ libExports$1 = v; },
    };

    var UTF8_ACCEPT = 12;
    var UTF8_REJECT = 0;
    var UTF8_DATA = [
      // The first part of the table maps bytes to character to a transition.
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
      6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7,
      10, 9, 9, 9, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,

      // The second part of the table maps a state to a new state when adding a
      // transition.
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      12, 0, 0, 0, 0, 24, 36, 48, 60, 72, 84, 96,
      0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

      // The third part maps the current transition to a mask that needs to apply
      // to the byte.
      0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07
    ];

    function decodeURIComponent$1 (uri) {
      var percentPosition = uri.indexOf('%');
      if (percentPosition === -1) return uri

      var length = uri.length;
      var decoded = '';
      var last = 0;
      var codepoint = 0;
      var startOfOctets = percentPosition;
      var state = UTF8_ACCEPT;

      while (percentPosition > -1 && percentPosition < length) {
        var high = hexCodeToInt(uri[percentPosition + 1], 4);
        var low = hexCodeToInt(uri[percentPosition + 2], 0);
        var byte = high | low;
        var type = UTF8_DATA[byte];
        state = UTF8_DATA[256 + state + type];
        codepoint = (codepoint << 6) | (byte & UTF8_DATA[364 + type]);

        if (state === UTF8_ACCEPT) {
          decoded += uri.slice(last, startOfOctets);

          decoded += (codepoint <= 0xFFFF)
            ? String.fromCharCode(codepoint)
            : String.fromCharCode(
              (0xD7C0 + (codepoint >> 10)),
              (0xDC00 + (codepoint & 0x3FF))
            );

          codepoint = 0;
          last = percentPosition + 3;
          percentPosition = startOfOctets = uri.indexOf('%', last);
        } else if (state === UTF8_REJECT) {
          return null
        } else {
          percentPosition += 3;
          if (percentPosition < length && uri.charCodeAt(percentPosition) === 37) continue
          return null
        }
      }

      return decoded + uri.slice(last)
    }

    var HEX = {
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      'a': 10,
      'A': 10,
      'b': 11,
      'B': 11,
      'c': 12,
      'C': 12,
      'd': 13,
      'D': 13,
      'e': 14,
      'E': 14,
      'f': 15,
      'F': 15
    };

    function hexCodeToInt (c, shift) {
      var i = HEX[c];
      return i === undefined ? 255 : i << shift
    }

    var fastDecodeUriComponent = decodeURIComponent$1;

    const fastDecode = fastDecodeUriComponent;

    const plusRegex = /\+/g;
    const Empty = function () {};
    Empty.prototype = Object.create(null);

    /**
     * @callback parse
     * @param {string} input
     */
    function parse$2(input) {
      // Optimization: Use new Empty() instead of Object.create(null) for performance
      // v8 has a better optimization for initializing functions compared to Object
      const result = new Empty();

      if (typeof input !== "string") {
        return result;
      }

      let inputLength = input.length;
      let key = "";
      let value = "";
      let startingIndex = -1;
      let equalityIndex = -1;
      let shouldDecodeKey = false;
      let shouldDecodeValue = false;
      let keyHasPlus = false;
      let valueHasPlus = false;
      let hasBothKeyValuePair = false;
      let c = 0;

      // Have a boundary of input.length + 1 to access last pair inside the loop.
      for (let i = 0; i < inputLength + 1; i++) {
        c = i !== inputLength ? input.charCodeAt(i) : 38;

        // Handle '&' and end of line to pass the current values to result
        if (c === 38) {
          hasBothKeyValuePair = equalityIndex > startingIndex;

          // Optimization: Reuse equality index to store the end of key
          if (!hasBothKeyValuePair) {
            equalityIndex = i;
          }

          key = input.slice(startingIndex + 1, equalityIndex);

          // Add key/value pair only if the range size is greater than 1; a.k.a. contains at least "="
          if (hasBothKeyValuePair || key.length > 0) {
            // Optimization: Replace '+' with space
            if (keyHasPlus) {
              key = key.replace(plusRegex, " ");
            }

            // Optimization: Do not decode if it's not necessary.
            if (shouldDecodeKey) {
              key = fastDecode(key) || key;
            }

            if (hasBothKeyValuePair) {
              value = input.slice(equalityIndex + 1, i);

              if (valueHasPlus) {
                value = value.replace(plusRegex, " ");
              }

              if (shouldDecodeValue) {
                value = fastDecode(value) || value;
              }
            }
            const currentValue = result[key];

            if (currentValue === undefined) {
              result[key] = value;
            } else {
              // Optimization: value.pop is faster than Array.isArray(value)
              if (currentValue.pop) {
                currentValue.push(value);
              } else {
                result[key] = [currentValue, value];
              }
            }
          }

          // Reset reading key value pairs
          value = "";
          startingIndex = i;
          equalityIndex = i;
          shouldDecodeKey = false;
          shouldDecodeValue = false;
          keyHasPlus = false;
          valueHasPlus = false;
        }
        // Check '='
        else if (c === 61) {
          if (equalityIndex <= startingIndex) {
            equalityIndex = i;
          }
          // If '=' character occurs again, we should decode the input.
          else {
            shouldDecodeValue = true;
          }
        }
        // Check '+', and remember to replace it with empty space.
        else if (c === 43) {
          if (equalityIndex > startingIndex) {
            valueHasPlus = true;
          } else {
            keyHasPlus = true;
          }
        }
        // Check '%' character for encoding
        else if (c === 37) {
          if (equalityIndex > startingIndex) {
            shouldDecodeValue = true;
          } else {
            shouldDecodeKey = true;
          }
        }
      }

      return result;
    }

    var parse_1 = parse$2;

    // This file is taken from Node.js project.
    // Full implementation can be found from https://github.com/nodejs/node/blob/main/lib/internal/querystring.js

    const hexTable = Array.from(
      { length: 256 },
      (_, i) => "%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase(),
    );

    // These characters do not need escaping when generating query strings:
    // ! - . _ ~
    // ' ( ) *
    // digits
    // alpha (uppercase)
    // alpha (lowercase)
    // rome-ignore format: the array should not be formatted
    const noEscape = new Int8Array([
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
      0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 32 - 47
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 80 - 95
      0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,  // 112 - 127
    ]);

    /**
     * @param {string} str
     * @returns {string}
     */
    function encodeString$1(str) {
      const len = str.length;
      if (len === 0) return "";

      let out = "";
      let lastPos = 0;
      let i = 0;

      outer: for (; i < len; i++) {
        let c = str.charCodeAt(i);

        // ASCII
        while (c < 0x80) {
          if (noEscape[c] !== 1) {
            if (lastPos < i) out += str.slice(lastPos, i);
            lastPos = i + 1;
            out += hexTable[c];
          }

          if (++i === len) break outer;

          c = str.charCodeAt(i);
        }

        if (lastPos < i) out += str.slice(lastPos, i);

        // Multi-byte characters ...
        if (c < 0x800) {
          lastPos = i + 1;
          out += hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)];
          continue;
        }
        if (c < 0xD800 || c >= 0xE000) {
          lastPos = i + 1;
          out +=
            hexTable[0xE0 | (c >> 12)] +
            hexTable[0x80 | ((c >> 6) & 0x3F)] +
            hexTable[0x80 | (c & 0x3F)];
          continue;
        }
        // Surrogate pair
        ++i;

        // This branch should never happen because all URLSearchParams entries
        // should already be converted to USVString. But, included for
        // completion's sake anyway.
        if (i >= len) {
          throw new Error("URI malformed");
        }

        const c2 = str.charCodeAt(i) & 0x3FF;

        lastPos = i + 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | c2);
        out +=
          hexTable[0xF0 | (c >> 18)] +
          hexTable[0x80 | ((c >> 12) & 0x3F)] +
          hexTable[0x80 | ((c >> 6) & 0x3F)] +
          hexTable[0x80 | (c & 0x3F)];
      }
      if (lastPos === 0) return str;
      if (lastPos < len) return out + str.slice(lastPos);
      return out;
    }

    var querystring$1 = { encodeString: encodeString$1 };

    const { encodeString } = querystring$1;

    function getAsPrimitive(value) {
      const type = typeof value;

      if (type === "string") {
        // Length check is handled inside encodeString function
        return encodeString(value);
      } else if (type === "bigint") {
        return value.toString();
      } else if (type === "boolean") {
        return value ? "true" : "false";
      } else if (type === "number" && Number.isFinite(value)) {
        if (Math.abs(value) < 1e21) return value.toString();
        return encodeString(value.toString());
      }

      return "";
    }

    /**
     * @param {Record<string, string | number | boolean
     * | ReadonlyArray<string | number | boolean> | null>} input
     * @returns {string}
     */
    function stringify$1(input) {
      let result = "";

      if (input === null || typeof input !== "object") {
        return result;
      }

      const separator = "&";
      const keys = Object.keys(input);
      const keyLength = keys.length;
      let valueLength = 0;

      for (let i = 0; i < keyLength; i++) {
        const key = keys[i];
        const value = input[key];
        const encodedKey = encodeString(key) + "=";

        if (i) {
          result += separator;
        }

        if (Array.isArray(value)) {
          valueLength = value.length;
          for (let j = 0; j < valueLength; j++) {
            if (j) {
              result += separator;
            }

            // Optimization: Dividing into multiple lines improves the performance.
            // Since v8 does not need to care about the '+' character if it was one-liner.
            result += encodedKey;
            result += getAsPrimitive(value[j]);
          }
        } else {
          result += encodedKey;
          result += getAsPrimitive(value);
        }
      }

      return result;
    }

    var stringify_1 = stringify$1;

    const parse$1 = parse_1;
    const stringify = stringify_1;

    const fastQuerystring = {
      parse: parse$1,
      stringify,
    };

    /**
     * Enable TS and JS support
     *
     * - `const qs = require('fast-querystring')`
     * - `import qs from 'fast-querystring'`
     */
    lib$1.exports = fastQuerystring;
    libExports$1.default = fastQuerystring;

    var libExports = {};
    var lib = {
      get exports(){ return libExports; },
      set exports(v){ libExports = v; },
    };

    var util$5 = {};

    var types$4 = {
      ROOT       : 0,
      GROUP      : 1,
      POSITION   : 2,
      SET        : 3,
      RANGE      : 4,
      REPETITION : 5,
      REFERENCE  : 6,
      CHAR       : 7,
    };

    var sets$1 = {};

    const types$3 = types$4;

    const INTS = () => [{ type: types$3.RANGE , from: 48, to: 57 }];

    const WORDS = () => {
      return [
        { type: types$3.CHAR, value: 95 },
        { type: types$3.RANGE, from: 97, to: 122 },
        { type: types$3.RANGE, from: 65, to: 90 }
      ].concat(INTS());
    };

    const WHITESPACE = () => {
      return [
        { type: types$3.CHAR, value: 9 },
        { type: types$3.CHAR, value: 10 },
        { type: types$3.CHAR, value: 11 },
        { type: types$3.CHAR, value: 12 },
        { type: types$3.CHAR, value: 13 },
        { type: types$3.CHAR, value: 32 },
        { type: types$3.CHAR, value: 160 },
        { type: types$3.CHAR, value: 5760 },
        { type: types$3.RANGE, from: 8192, to: 8202 },
        { type: types$3.CHAR, value: 8232 },
        { type: types$3.CHAR, value: 8233 },
        { type: types$3.CHAR, value: 8239 },
        { type: types$3.CHAR, value: 8287 },
        { type: types$3.CHAR, value: 12288 },
        { type: types$3.CHAR, value: 65279 }
      ];
    };

    const NOTANYCHAR = () => {
      return [
        { type: types$3.CHAR, value: 10 },
        { type: types$3.CHAR, value: 13 },
        { type: types$3.CHAR, value: 8232 },
        { type: types$3.CHAR, value: 8233 },
      ];
    };

    // Predefined class objects.
    sets$1.words = () => ({ type: types$3.SET, set: WORDS(), not: false });
    sets$1.notWords = () => ({ type: types$3.SET, set: WORDS(), not: true });
    sets$1.ints = () => ({ type: types$3.SET, set: INTS(), not: false });
    sets$1.notInts = () => ({ type: types$3.SET, set: INTS(), not: true });
    sets$1.whitespace = () => ({ type: types$3.SET, set: WHITESPACE(), not: false });
    sets$1.notWhitespace = () => ({ type: types$3.SET, set: WHITESPACE(), not: true });
    sets$1.anyChar = () => ({ type: types$3.SET, set: NOTANYCHAR(), not: true });

    (function (exports) {
    	const types = types$4;
    	const sets  = sets$1;


    	const CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?';
    	const SLSH = { '0': 0, 't': 9, 'n': 10, 'v': 11, 'f': 12, 'r': 13 };

    	/**
    	 * Finds character representations in str and convert all to
    	 * their respective characters
    	 *
    	 * @param {String} str
    	 * @return {String}
    	 */
    	exports.strToChars = function(str) {
    	  /* jshint maxlen: false */
    	  var chars_regex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;
    	  str = str.replace(chars_regex, function(s, b, lbs, a16, b16, c8, dctrl, eslsh) {
    	    if (lbs) {
    	      return s;
    	    }

    	    var code = b ? 8 :
    	      a16   ? parseInt(a16, 16) :
    	      b16   ? parseInt(b16, 16) :
    	      c8    ? parseInt(c8,   8) :
    	      dctrl ? CTRL.indexOf(dctrl) :
    	      SLSH[eslsh];

    	    var c = String.fromCharCode(code);

    	    // Escape special regex characters.
    	    if (/[[\]{}^$.|?*+()]/.test(c)) {
    	      c = '\\' + c;
    	    }

    	    return c;
    	  });

    	  return str;
    	};


    	/**
    	 * turns class into tokens
    	 * reads str until it encounters a ] not preceeded by a \
    	 *
    	 * @param {String} str
    	 * @param {String} regexpStr
    	 * @return {Array.<Array.<Object>, Number>}
    	 */
    	exports.tokenizeClass = (str, regexpStr) => {
    	  /* jshint maxlen: false */
    	  var tokens = [];
    	  var regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?([^])/g;
    	  var rs, c;


    	  while ((rs = regexp.exec(str)) != null) {
    	    if (rs[1]) {
    	      tokens.push(sets.words());

    	    } else if (rs[2]) {
    	      tokens.push(sets.ints());

    	    } else if (rs[3]) {
    	      tokens.push(sets.whitespace());

    	    } else if (rs[4]) {
    	      tokens.push(sets.notWords());

    	    } else if (rs[5]) {
    	      tokens.push(sets.notInts());

    	    } else if (rs[6]) {
    	      tokens.push(sets.notWhitespace());

    	    } else if (rs[7]) {
    	      tokens.push({
    	        type: types.RANGE,
    	        from: (rs[8] || rs[9]).charCodeAt(0),
    	        to: rs[10].charCodeAt(0),
    	      });

    	    } else if ((c = rs[12])) {
    	      tokens.push({
    	        type: types.CHAR,
    	        value: c.charCodeAt(0),
    	      });

    	    } else {
    	      return [tokens, regexp.lastIndex];
    	    }
    	  }

    	  exports.error(regexpStr, 'Unterminated character class');
    	};


    	/**
    	 * Shortcut to throw errors.
    	 *
    	 * @param {String} regexp
    	 * @param {String} msg
    	 */
    	exports.error = (regexp, msg) => {
    	  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);
    	};
    } (util$5));

    var positions$1 = {};

    const types$2 = types$4;
    positions$1.wordBoundary = () => ({ type: types$2.POSITION, value: 'b' });
    positions$1.nonWordBoundary = () => ({ type: types$2.POSITION, value: 'B' });
    positions$1.begin = () => ({ type: types$2.POSITION, value: '^' });
    positions$1.end = () => ({ type: types$2.POSITION, value: '$' });

    const util$4      = util$5;
    const types$1     = types$4;
    const sets      = sets$1;
    const positions = positions$1;


    lib.exports = (regexpStr) => {
      var i = 0, l, c,
        start = { type: types$1.ROOT, stack: []},

        // Keep track of last clause/group and stack.
        lastGroup = start,
        last = start.stack,
        groupStack = [];


      var repeatErr = (i) => {
        util$4.error(regexpStr, `Nothing to repeat at column ${i - 1}`);
      };

      // Decode a few escaped characters.
      var str = util$4.strToChars(regexpStr);
      l = str.length;

      // Iterate through each character in string.
      while (i < l) {
        c = str[i++];

        switch (c) {
          // Handle escaped characters, inclues a few sets.
          case '\\':
            c = str[i++];

            switch (c) {
              case 'b':
                last.push(positions.wordBoundary());
                break;

              case 'B':
                last.push(positions.nonWordBoundary());
                break;

              case 'w':
                last.push(sets.words());
                break;

              case 'W':
                last.push(sets.notWords());
                break;

              case 'd':
                last.push(sets.ints());
                break;

              case 'D':
                last.push(sets.notInts());
                break;

              case 's':
                last.push(sets.whitespace());
                break;

              case 'S':
                last.push(sets.notWhitespace());
                break;

              default:
                // Check if c is integer.
                // In which case it's a reference.
                if (/\d/.test(c)) {
                  last.push({ type: types$1.REFERENCE, value: parseInt(c, 10) });

                // Escaped character.
                } else {
                  last.push({ type: types$1.CHAR, value: c.charCodeAt(0) });
                }
            }

            break;


          // Positionals.
          case '^':
            last.push(positions.begin());
            break;

          case '$':
            last.push(positions.end());
            break;


          // Handle custom sets.
          case '[':
            // Check if this class is 'anti' i.e. [^abc].
            var not;
            if (str[i] === '^') {
              not = true;
              i++;
            } else {
              not = false;
            }

            // Get all the characters in class.
            var classTokens = util$4.tokenizeClass(str.slice(i), regexpStr);

            // Increase index by length of class.
            i += classTokens[1];
            last.push({
              type: types$1.SET,
              set: classTokens[0],
              not,
            });

            break;


          // Class of any character except \n.
          case '.':
            last.push(sets.anyChar());
            break;


          // Push group onto stack.
          case '(':
            // Create group.
            var group = {
              type: types$1.GROUP,
              stack: [],
              remember: true,
            };

            c = str[i];

            // If if this is a special kind of group.
            if (c === '?') {
              c = str[i + 1];
              i += 2;

              // Match if followed by.
              if (c === '=') {
                group.followedBy = true;

              // Match if not followed by.
              } else if (c === '!') {
                group.notFollowedBy = true;

              } else if (c !== ':') {
                util$4.error(regexpStr,
                  `Invalid group, character '${c}'` +
                  ` after '?' at column ${i - 1}`);
              }

              group.remember = false;
            }

            // Insert subgroup into current group stack.
            last.push(group);

            // Remember the current group for when the group closes.
            groupStack.push(lastGroup);

            // Make this new group the current group.
            lastGroup = group;
            last = group.stack;
            break;


          // Pop group out of stack.
          case ')':
            if (groupStack.length === 0) {
              util$4.error(regexpStr, `Unmatched ) at column ${i - 1}`);
            }
            lastGroup = groupStack.pop();

            // Check if this group has a PIPE.
            // To get back the correct last stack.
            last = lastGroup.options ?
              lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
            break;


          // Use pipe character to give more choices.
          case '|':
            // Create array where options are if this is the first PIPE
            // in this clause.
            if (!lastGroup.options) {
              lastGroup.options = [lastGroup.stack];
              delete lastGroup.stack;
            }

            // Create a new stack and add to options for rest of clause.
            var stack = [];
            lastGroup.options.push(stack);
            last = stack;
            break;


          // Repetition.
          // For every repetition, remove last element from last stack
          // then insert back a RANGE object.
          // This design is chosen because there could be more than
          // one repetition symbols in a regex i.e. `a?+{2,3}`.
          case '{':
            var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)), min, max;
            if (rs !== null) {
              if (last.length === 0) {
                repeatErr(i);
              }
              min = parseInt(rs[1], 10);
              max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
              i += rs[0].length;

              last.push({
                type: types$1.REPETITION,
                min,
                max,
                value: last.pop(),
              });
            } else {
              last.push({
                type: types$1.CHAR,
                value: 123,
              });
            }
            break;

          case '?':
            if (last.length === 0) {
              repeatErr(i);
            }
            last.push({
              type: types$1.REPETITION,
              min: 0,
              max: 1,
              value: last.pop(),
            });
            break;

          case '+':
            if (last.length === 0) {
              repeatErr(i);
            }
            last.push({
              type: types$1.REPETITION,
              min: 1,
              max: Infinity,
              value: last.pop(),
            });
            break;

          case '*':
            if (last.length === 0) {
              repeatErr(i);
            }
            last.push({
              type: types$1.REPETITION,
              min: 0,
              max: Infinity,
              value: last.pop(),
            });
            break;


          // Default is a character that is not `\[](){}?+*^$`.
          default:
            last.push({
              type: types$1.CHAR,
              value: c.charCodeAt(0),
            });
        }

      }

      // Check if any groups have not been closed.
      if (groupStack.length !== 0) {
        util$4.error(regexpStr, 'Unterminated group');
      }

      return start;
    };

    libExports.types = types$1;

    var parse = libExports;
    var types = parse.types;

    var safeRegex2 = function (re, opts) {
      if (!opts) opts = {};
      var replimit = opts.limit === undefined ? 25 : opts.limit;

      if (isRegExp(re)) re = re.source;
      else if (typeof re !== 'string') re = String(re);

      try { re = parse(re); } catch (err) { return false }

      var reps = 0;
      return (function walk (node, starHeight) {
        var i;
        var ok;
        var len;

        if (node.type === types.REPETITION) {
          starHeight++;
          reps++;
          if (starHeight > 1) return false
          if (reps > replimit) return false
        }

        if (node.options) {
          for (i = 0, len = node.options.length; i < len; i++) {
            ok = walk({ stack: node.options[i] }, starHeight);
            if (!ok) return false
          }
        }
        var stack = node.stack || (node.value && node.value.stack);
        if (!stack) return true

        for (i = 0; i < stack.length; i++) {
          ok = walk(stack[i], starHeight);
          if (!ok) return false
        }

        return true
      })(re, 0)
    };

    function isRegExp (x) {
      return {}.toString.call(x) === '[object RegExp]'
    }

    /* eslint-disable no-multi-spaces */
    const indent              = '    ';
    const branchIndent        = '│   ';
    const midBranchIndent     = '├── ';
    const endBranchIndent     = '└── ';
    const wildcardDelimiter   = '*';
    const pathDelimiter       = '/';
    const pathRegExp          = /(?=\/)/;
    /* eslint-enable */

    function parseFunctionName (fn) {
      let fName = fn.name || '';

      fName = fName.replace('bound', '').trim();
      fName = (fName || 'anonymous') + '()';
      return fName
    }

    function parseMeta (meta) {
      if (Array.isArray(meta)) return meta.map(m => parseMeta(m))
      if (typeof meta === 'symbol') return meta.toString()
      if (typeof meta === 'function') return parseFunctionName(meta)
      return meta
    }

    function buildMetaObject (route, metaArray) {
      const out = {};
      const cleanMeta = this.buildPrettyMeta(route);
      if (!Array.isArray(metaArray)) metaArray = cleanMeta ? Reflect.ownKeys(cleanMeta) : [];
      metaArray.forEach(m => {
        const metaKey = typeof m === 'symbol' ? m.toString() : m;
        if (cleanMeta && cleanMeta[m]) {
          out[metaKey] = parseMeta(cleanMeta[m]);
        }
      });
      return out
    }

    function prettyPrintRoutesArray$1 (routeArray, opts = {}) {
      if (!this.buildPrettyMeta) throw new Error('buildPrettyMeta not defined')
      opts.includeMeta = opts.includeMeta || null; // array of meta objects to display
      const mergedRouteArray = [];

      let tree = '';

      routeArray.sort((a, b) => {
        if (!a.path || !b.path) return 0
        return a.path.localeCompare(b.path)
      });

      // merge alike paths
      for (let i = 0; i < routeArray.length; i++) {
        const route = routeArray[i];
        const pathExists = mergedRouteArray.find(r => route.path === r.path);
        if (pathExists) {
          // path already declared, add new method and break out of loop
          pathExists.handlers.push({
            method: route.method,
            opts: route.opts.constraints || undefined,
            meta: opts.includeMeta ? buildMetaObject.call(this, route, opts.includeMeta) : null
          });
          continue
        }

        const routeHandler = {
          method: route.method,
          opts: route.opts.constraints || undefined,
          meta: opts.includeMeta ? buildMetaObject.call(this, route, opts.includeMeta) : null
        };
        mergedRouteArray.push({
          path: route.path,
          methods: [route.method],
          opts: [route.opts],
          handlers: [routeHandler]
        });
      }

      // insert root level path if none defined
      if (!mergedRouteArray.filter(r => r.path === pathDelimiter).length) {
        const rootPath = {
          path: pathDelimiter,
          truncatedPath: '',
          methods: [],
          opts: [],
          handlers: [{}]
        };

        // if wildcard route exists, insert root level after wildcard
        if (mergedRouteArray.filter(r => r.path === wildcardDelimiter).length) {
          mergedRouteArray.splice(1, 0, rootPath);
        } else {
          mergedRouteArray.unshift(rootPath);
        }
      }

      // build tree
      const routeTree = buildRouteTree(mergedRouteArray);

      // draw tree
      routeTree.forEach((rootBranch, idx) => {
        tree += drawBranch(rootBranch, null, idx === routeTree.length - 1, false, true);
        tree += '\n'; // newline characters inserted at beginning of drawing function to allow for nested paths
      });

      return tree
    }

    function buildRouteTree (mergedRouteArray) {
      const result = [];
      const temp = { result };
      mergedRouteArray.forEach((route, idx) => {
        let splitPath = route.path.split(pathRegExp);

        // add preceding slash for proper nesting
        if (splitPath[0] !== pathDelimiter) {
          // handle wildcard route
          if (splitPath[0] !== wildcardDelimiter) splitPath = [pathDelimiter, splitPath[0].slice(1), ...splitPath.slice(1)];
        }

        // build tree
        splitPath.reduce((acc, path, pidx) => {
          if (!acc[path]) {
            acc[path] = { result: [] };
            const pathSeg = { path, children: acc[path].result };

            if (pidx === splitPath.length - 1) pathSeg.handlers = route.handlers;
            acc.result.push(pathSeg);
          }
          return acc[path]
        }, temp);
      });

      // unfold root object from array
      return result
    }

    function drawBranch (pathSeg, prefix, endBranch, noPrefix, rootBranch) {
      let branch = '';

      if (!noPrefix && !rootBranch) branch += '\n';
      if (!noPrefix) branch += `${prefix || ''}${endBranch ? endBranchIndent : midBranchIndent}`;
      branch += `${pathSeg.path}`;

      if (pathSeg.handlers) {
        const flatHandlers = pathSeg.handlers.reduce((acc, curr) => {
          const match = acc.findIndex(h => JSON.stringify(h.opts) === JSON.stringify(curr.opts));
          if (match !== -1) {
            acc[match].method = [acc[match].method, curr.method].join(', ');
          } else {
            acc.push(curr);
          }
          return acc
        }, []);

        flatHandlers.forEach((handler, idx) => {
          if (idx > 0) branch += `${noPrefix ? '' : prefix || ''}${endBranch ? indent : branchIndent}${pathSeg.path}`;
          branch += ` (${handler.method || '-'})`;
          if (handler.opts && JSON.stringify(handler.opts) !== '{}') branch += ` ${JSON.stringify(handler.opts)}`;
          if (handler.meta) {
            Reflect.ownKeys(handler.meta).forEach((m, hidx) => {
              branch += `\n${noPrefix ? '' : prefix || ''}${endBranch ? indent : branchIndent}`;
              branch += `• (${m}) ${JSON.stringify(handler.meta[m])}`;
            });
          }
          if (flatHandlers.length > 1 && idx !== flatHandlers.length - 1) branch += '\n';
        });
      } else {
        if (pathSeg.children.length > 1) branch += ' (-)';
      }

      if (!noPrefix) prefix = `${prefix || ''}${endBranch ? indent : branchIndent}`;

      pathSeg.children.forEach((child, idx) => {
        const endBranch = idx === pathSeg.children.length - 1;
        const skipPrefix = (!pathSeg.handlers && pathSeg.children.length === 1);
        branch += drawBranch(child, prefix, endBranch, skipPrefix);
      });

      return branch
    }

    function prettyPrintFlattenedNode$1 (flattenedNode, prefix, tail, opts) {
      if (!this.buildPrettyMeta) throw new Error('buildPrettyMeta not defined')
      opts.includeMeta = opts.includeMeta || null; // array of meta items to display
      let paramName = '';
      const printHandlers = [];

      for (const { node, method } of flattenedNode.nodes) {
        for (const handler of node.handlerStorage.handlers) {
          printHandlers.push({ method, ...handler });
        }
      }

      if (printHandlers.length) {
        printHandlers.forEach((handler, index) => {
          let suffix = `(${handler.method || '-'})`;
          if (Object.keys(handler.constraints).length > 0) {
            suffix += ' ' + JSON.stringify(handler.constraints);
          }

          let name = '';
          // find locations of parameters in prefix
          const paramIndices = flattenedNode.prefix.split('').map((ch, idx) => ch === ':' ? idx : null).filter(idx => idx !== null);
          if (paramIndices.length) {
            let prevLoc = 0;
            paramIndices.forEach((loc, idx) => {
              // find parameter in prefix
              name += flattenedNode.prefix.slice(prevLoc, loc + 1);
              // insert parameters
              name += handler.params[handler.params.length - paramIndices.length + idx];
              if (idx === paramIndices.length - 1) name += flattenedNode.prefix.slice(loc + 1);
              prevLoc = loc + 1;
            });
          } else {
            // there are no parameters, return full object
            name = flattenedNode.prefix;
          }

          if (index === 0) {
            paramName += `${name} ${suffix}`;
          } else {
            paramName += `\n${prefix}${tail ? indent : branchIndent}${name} ${suffix}`;
          }
          if (opts.includeMeta) {
            const meta = buildMetaObject.call(this, handler, opts.includeMeta);
            Object.keys(meta).forEach((m, hidx) => {
              paramName += `\n${prefix || ''}${tail ? indent : branchIndent}`;
              paramName += `• (${m}) ${JSON.stringify(meta[m])}`;
            });
          }
        });
      } else {
        paramName = flattenedNode.prefix;
      }

      let tree = `${prefix}${tail ? endBranchIndent : midBranchIndent}${paramName}\n`;

      prefix = `${prefix}${tail ? indent : branchIndent}`;
      const labels = Object.keys(flattenedNode.children);
      for (let i = 0; i < labels.length; i++) {
        const child = flattenedNode.children[labels[i]];
        tree += prettyPrintFlattenedNode$1.call(this, child, prefix, i === (labels.length - 1), opts);
      }
      return tree
    }

    function flattenNode$1 (flattened, node, method) {
      if (node.handlerStorage.handlers.length !== 0) {
        flattened.nodes.push({ method, node });
      }

      if (node.parametricChildren && node.parametricChildren[0]) {
        if (!flattened.children[':']) {
          flattened.children[':'] = {
            prefix: ':',
            nodes: [],
            children: {}
          };
        }
        flattenNode$1(flattened.children[':'], node.parametricChildren[0], method);
      }

      if (node.wildcardChild) {
        if (!flattened.children['*']) {
          flattened.children['*'] = {
            prefix: '*',
            nodes: [],
            children: {}
          };
        }
        flattenNode$1(flattened.children['*'], node.wildcardChild, method);
      }

      if (node.staticChildren) {
        for (const child of Object.values(node.staticChildren)) {
          // split on the slash separator but use a regex to lookahead and not actually match it, preserving it in the returned string segments
          const childPrefixSegments = child.prefix.split(pathRegExp);
          let cursor = flattened;
          let parent;
          for (const segment of childPrefixSegments) {
            parent = cursor;
            cursor = cursor.children[segment];
            if (!cursor) {
              cursor = {
                prefix: segment,
                nodes: [],
                children: {}
              };
              parent.children[segment] = cursor;
            }
          }
          flattenNode$1(cursor, child, method);
        }
      }
    }

    function compressFlattenedNode$1 (flattenedNode) {
      const childKeys = Object.keys(flattenedNode.children);
      if (flattenedNode.nodes.length === 0 && childKeys.length === 1) {
        const child = flattenedNode.children[childKeys[0]];
        if (child.nodes.length <= 1) {
          compressFlattenedNode$1(child);
          flattenedNode.nodes = child.nodes;
          flattenedNode.prefix += child.prefix;
          flattenedNode.children = child.children;
          return flattenedNode
        }
      }

      for (const key of Object.keys(flattenedNode.children)) {
        compressFlattenedNode$1(flattenedNode.children[key]);
      }

      return flattenedNode
    }

    var prettyPrint = { flattenNode: flattenNode$1, compressFlattenedNode: compressFlattenedNode$1, prettyPrintFlattenedNode: prettyPrintFlattenedNode$1, prettyPrintRoutesArray: prettyPrintRoutesArray$1 };

    let HandlerStorage$1 = class HandlerStorage {
      constructor () {
        this.unconstrainedHandler = null; // optimized reference to the handler that will match most of the time
        this.constraints = [];
        this.handlers = []; // unoptimized list of handler objects for which the fast matcher function will be compiled
        this.constrainedHandlerStores = null;
      }

      // This is the hot path for node handler finding -- change with care!
      getMatchingHandler (derivedConstraints) {
        if (derivedConstraints === undefined) {
          return this.unconstrainedHandler
        }
        return this._getHandlerMatchingConstraints(derivedConstraints)
      }

      addHandler (handler, params, store, constrainer, constraints) {
        const handlerObject = {
          handler,
          params,
          constraints,
          store: store || null,
          _createParamsObject: this._compileCreateParamsObject(params)
        };

        if (Object.keys(constraints).length === 0) {
          this.unconstrainedHandler = handlerObject;
        }

        for (const constraint of Object.keys(constraints)) {
          if (!this.constraints.includes(constraint)) {
            if (constraint === 'version') {
              // always check the version constraint first as it is the most selective
              this.constraints.unshift(constraint);
            } else {
              this.constraints.push(constraint);
            }
          }
        }

        if (this.handlers.length >= 32) {
          throw new Error('find-my-way supports a maximum of 32 route handlers per node when there are constraints, limit reached')
        }

        this.handlers.push(handlerObject);
        // Sort the most constrained handlers to the front of the list of handlers so they are tested first.
        this.handlers.sort((a, b) => Object.keys(a.constraints).length - Object.keys(b.constraints).length);

        this._compileGetHandlerMatchingConstraints(constrainer, constraints);
      }

      _compileCreateParamsObject (params) {
        const lines = [];
        for (let i = 0; i < params.length; i++) {
          lines.push(`'${params[i]}': paramsArray[${i}]`);
        }
        return new Function('paramsArray', `return {${lines.join(',')}}`)  // eslint-disable-line
      }

      _getHandlerMatchingConstraints () {
        return null
      }

      // Builds a store object that maps from constraint values to a bitmap of handler indexes which pass the constraint for a value
      // So for a host constraint, this might look like { "fastify.io": 0b0010, "google.ca": 0b0101 }, meaning the 3rd handler is constrainted to fastify.io, and the 2nd and 4th handlers are constrained to google.ca.
      // The store's implementation comes from the strategies provided to the Router.
      _buildConstraintStore (store, constraint) {
        for (let i = 0; i < this.handlers.length; i++) {
          const handler = this.handlers[i];
          const constraintValue = handler.constraints[constraint];
          if (constraintValue !== undefined) {
            let indexes = store.get(constraintValue) || 0;
            indexes |= 1 << i; // set the i-th bit for the mask because this handler is constrained by this value https://stackoverflow.com/questions/1436438/how-do-you-set-clear-and-toggle-a-single-bit-in-javascrip
            store.set(constraintValue, indexes);
          }
        }
      }

      // Builds a bitmask for a given constraint that has a bit for each handler index that is 0 when that handler *is* constrained and 1 when the handler *isnt* constrainted. This is opposite to what might be obvious, but is just for convienience when doing the bitwise operations.
      _constrainedIndexBitmask (constraint) {
        let mask = 0;
        for (let i = 0; i < this.handlers.length; i++) {
          const handler = this.handlers[i];
          const constraintValue = handler.constraints[constraint];
          if (constraintValue !== undefined) {
            mask |= 1 << i;
          }
        }
        return ~mask
      }

      // Compile a fast function to match the handlers for this node
      // The function implements a general case multi-constraint matching algorithm.
      // The general idea is this: we have a bunch of handlers, each with a potentially different set of constraints, and sometimes none at all. We're given a list of constraint values and we have to use the constraint-value-comparison strategies to see which handlers match the constraint values passed in.
      // We do this by asking each constraint store which handler indexes match the given constraint value for each store. Trickily, the handlers that a store says match are the handlers constrained by that store, but handlers that aren't constrained at all by that store could still match just fine. So, each constraint store can only describe matches for it, and it won't have any bearing on the handlers it doesn't care about. For this reason, we have to ask each stores which handlers match and track which have been matched (or not cared about) by all of them.
      // We use bitmaps to represent these lists of matches so we can use bitwise operations to implement this efficiently. Bitmaps are cheap to allocate, let us implement this masking behaviour in one CPU instruction, and are quite compact in memory. We start with a bitmap set to all 1s representing every handler that is a match candidate, and then for each constraint, see which handlers match using the store, and then mask the result by the mask of handlers that that store applies to, and bitwise AND with the candidate list. Phew.
      // We consider all this compiling function complexity to be worth it, because the naive implementation that just loops over the handlers asking which stores match is quite a bit slower.
      _compileGetHandlerMatchingConstraints (constrainer) {
        this.constrainedHandlerStores = {};

        for (const constraint of this.constraints) {
          const store = constrainer.newStoreForConstraint(constraint);
          this.constrainedHandlerStores[constraint] = store;

          this._buildConstraintStore(store, constraint);
        }

        const lines = [];
        lines.push(`
    let candidates = ${(1 << this.handlers.length) - 1}
    let mask, matches
    `);
        for (const constraint of this.constraints) {
          // Setup the mask for indexes this constraint applies to. The mask bits are set to 1 for each position if the constraint applies.
          lines.push(`
      mask = ${this._constrainedIndexBitmask(constraint)}
      value = derivedConstraints.${constraint}
      `);

          // If there's no constraint value, none of the handlers constrained by this constraint can match. Remove them from the candidates.
          // If there is a constraint value, get the matching indexes bitmap from the store, and mask it down to only the indexes this constraint applies to, and then bitwise and with the candidates list to leave only matching candidates left.
          const strategy = constrainer.strategies[constraint];
          const matchMask = strategy.mustMatchWhenDerived ? 'matches' : '(matches | mask)';

          lines.push(`
      if (value === undefined) {
        candidates &= mask
      } else {
        matches = this.constrainedHandlerStores.${constraint}.get(value) || 0
        candidates &= ${matchMask}
      }
      if (candidates === 0) return null;
      `);
        }

        // There are some constraints that can be derived and marked as "must match", where if they are derived, they only match routes that actually have a constraint on the value, like the SemVer version constraint.
        // An example: a request comes in for version 1.x, and this node has a handler that matches the path, but there's no version constraint. For SemVer, the find-my-way semantics do not match this handler to that request.
        // This function is used by Nodes with handlers to match when they don't have any constrained routes to exclude request that do have must match derived constraints present.
        for (const constraint in constrainer.strategies) {
          const strategy = constrainer.strategies[constraint];
          if (strategy.mustMatchWhenDerived && !this.constraints.includes(constraint)) {
            lines.push(`if (derivedConstraints.${constraint} !== undefined) return null`);
          }
        }

        // Return the first handler who's bit is set in the candidates https://stackoverflow.com/questions/18134985/how-to-find-index-of-first-set-bit
        lines.push('return this.handlers[Math.floor(Math.log2(candidates))]');

        this._getHandlerMatchingConstraints = new Function('derivedConstraints', lines.join('\n')); // eslint-disable-line
      }
    };

    var handler_storage = HandlerStorage$1;

    const HandlerStorage = handler_storage;

    const NODE_TYPES$1 = {
      STATIC: 0,
      PARAMETRIC: 1,
      WILDCARD: 2
    };

    class Node {
      constructor () {
        this.handlerStorage = new HandlerStorage();
      }
    }

    class ParentNode extends Node {
      constructor () {
        super();
        this.staticChildren = {};
      }

      findStaticMatchingChild (path, pathIndex) {
        const staticChild = this.staticChildren[path.charAt(pathIndex)];
        if (staticChild === undefined || !staticChild.matchPrefix(path, pathIndex)) {
          return null
        }
        return staticChild
      }

      createStaticChild (path) {
        if (path.length === 0) {
          return this
        }

        let staticChild = this.staticChildren[path.charAt(0)];
        if (staticChild) {
          let i = 1;
          for (; i < staticChild.prefix.length; i++) {
            if (path.charCodeAt(i) !== staticChild.prefix.charCodeAt(i)) {
              staticChild = staticChild.split(this, i);
              break
            }
          }
          return staticChild.createStaticChild(path.slice(i))
        }

        const label = path.charAt(0);
        this.staticChildren[label] = new StaticNode$1(path);
        return this.staticChildren[label]
      }
    }

    let StaticNode$1 = class StaticNode extends ParentNode {
      constructor (prefix) {
        super();
        this.prefix = prefix;
        this.wildcardChild = null;
        this.parametricChildren = [];
        this.kind = NODE_TYPES$1.STATIC;
        this._compilePrefixMatch();
      }

      createParametricChild (regex) {
        const regexpSource = regex && regex.source;

        let parametricChild = this.parametricChildren.find(child => {
          const childRegexSource = child.regex && child.regex.source;
          return childRegexSource === regexpSource
        });

        if (parametricChild) {
          return parametricChild
        }

        parametricChild = new ParametricNode(regex);
        if (regex) {
          this.parametricChildren.unshift(parametricChild);
        } else {
          this.parametricChildren.push(parametricChild);
        }
        return parametricChild
      }

      createWildcardChild () {
        if (this.wildcardChild) {
          return this.wildcardChild
        }

        this.wildcardChild = new WildcardNode();
        return this.wildcardChild
      }

      split (parentNode, length) {
        const parentPrefix = this.prefix.slice(0, length);
        const childPrefix = this.prefix.slice(length);

        this.prefix = childPrefix;
        this._compilePrefixMatch();

        const staticNode = new StaticNode(parentPrefix);
        staticNode.staticChildren[childPrefix.charAt(0)] = this;
        parentNode.staticChildren[parentPrefix.charAt(0)] = staticNode;

        return staticNode
      }

      getNextNode (path, pathIndex, nodeStack, paramsCount) {
        let node = this.findStaticMatchingChild(path, pathIndex);
        let parametricBrotherNodeIndex = 0;

        if (node === null) {
          if (this.parametricChildren.length === 0) {
            return this.wildcardChild
          }

          node = this.parametricChildren[0];
          parametricBrotherNodeIndex = 1;
        }

        if (this.wildcardChild !== null) {
          nodeStack.push({
            paramsCount,
            brotherPathIndex: pathIndex,
            brotherNode: this.wildcardChild
          });
        }

        for (let i = this.parametricChildren.length - 1; i >= parametricBrotherNodeIndex; i--) {
          nodeStack.push({
            paramsCount,
            brotherPathIndex: pathIndex,
            brotherNode: this.parametricChildren[i]
          });
        }

        return node
      }

      _compilePrefixMatch () {
        if (this.prefix.length === 1) {
          this.matchPrefix = () => true;
          return
        }

        const lines = [];
        for (let i = 1; i < this.prefix.length; i++) {
          const charCode = this.prefix.charCodeAt(i);
          lines.push(`path.charCodeAt(i + ${i}) === ${charCode}`);
        }
        this.matchPrefix = new Function('path', 'i', `return ${lines.join(' && ')}`); // eslint-disable-line
      }
    };

    class ParametricNode extends ParentNode {
      constructor (regex) {
        super();
        this.regex = regex || null;
        this.isRegex = !!regex;
        this.kind = NODE_TYPES$1.PARAMETRIC;
      }

      getNextNode (path, pathIndex) {
        return this.findStaticMatchingChild(path, pathIndex)
      }
    }

    class WildcardNode extends Node {
      constructor () {
        super();
        this.kind = NODE_TYPES$1.WILDCARD;
      }

      getNextNode () {
        return null
      }
    }

    var custom_node = { StaticNode: StaticNode$1, ParametricNode, WildcardNode, NODE_TYPES: NODE_TYPES$1 };

    const assert$3 = require$$0$7;

    function SemVerStore () {
      if (!(this instanceof SemVerStore)) {
        return new SemVerStore()
      }

      this.store = {};

      this.maxMajor = 0;
      this.maxMinors = {};
      this.maxPatches = {};
    }

    SemVerStore.prototype.set = function (version, store) {
      if (typeof version !== 'string') {
        throw new TypeError('Version should be a string')
      }
      let [major, minor, patch] = version.split('.');

      major = Number(major) || 0;
      minor = Number(minor) || 0;
      patch = Number(patch) || 0;

      if (major >= this.maxMajor) {
        this.maxMajor = major;
        this.store.x = store;
        this.store['*'] = store;
        this.store['x.x'] = store;
        this.store['x.x.x'] = store;
      }

      if (minor >= (this.maxMinors[major] || 0)) {
        this.maxMinors[major] = minor;
        this.store[`${major}.x`] = store;
        this.store[`${major}.x.x`] = store;
      }

      if (patch >= (this.store[`${major}.${minor}`] || 0)) {
        this.maxPatches[`${major}.${minor}`] = patch;
        this.store[`${major}.${minor}.x`] = store;
      }

      this.store[`${major}.${minor}.${patch}`] = store;
      return this
    };

    SemVerStore.prototype.get = function (version) {
      return this.store[version]
    };

    var acceptVersion = {
      name: 'version',
      mustMatchWhenDerived: true,
      storage: SemVerStore,
      validate (value) {
        assert$3(typeof value === 'string', 'Version should be a string');
      }
    };

    const assert$2 = require$$0$7;

    function HostStorage () {
      const hosts = {};
      const regexHosts = [];
      return {
        get: (host) => {
          const exact = hosts[host];
          if (exact) {
            return exact
          }
          for (const regex of regexHosts) {
            if (regex.host.test(host)) {
              return regex.value
            }
          }
        },
        set: (host, value) => {
          if (host instanceof RegExp) {
            regexHosts.push({ host, value });
          } else {
            hosts[host] = value;
          }
        }
      }
    }

    var acceptHost = {
      name: 'host',
      mustMatchWhenDerived: false,
      storage: HostStorage,
      validate (value) {
        assert$2(typeof value === 'string' || Object.prototype.toString.call(value) === '[object RegExp]', 'Host should be a string or a RegExp');
      }
    };

    const acceptVersionStrategy = acceptVersion;
    const acceptHostStrategy = acceptHost;
    const assert$1 = require$$0$7;

    let Constrainer$1 = class Constrainer {
      constructor (customStrategies) {
        this.strategies = {
          version: acceptVersionStrategy,
          host: acceptHostStrategy
        };

        this.strategiesInUse = new Set();
        this.asyncStrategiesInUse = new Set();

        // validate and optimize prototypes of given custom strategies
        if (customStrategies) {
          for (const strategy of Object.values(customStrategies)) {
            this.addConstraintStrategy(strategy);
          }
        }
      }

      isStrategyUsed (strategyName) {
        return this.strategiesInUse.has(strategyName) ||
          this.asyncStrategiesInUse.has(strategyName)
      }

      hasConstraintStrategy (strategyName) {
        const customConstraintStrategy = this.strategies[strategyName];
        if (customConstraintStrategy !== undefined) {
          return customConstraintStrategy.isCustom ||
            this.isStrategyUsed(strategyName)
        }
        return false
      }

      addConstraintStrategy (strategy) {
        assert$1(typeof strategy.name === 'string' && strategy.name !== '', 'strategy.name is required.');
        assert$1(strategy.storage && typeof strategy.storage === 'function', 'strategy.storage function is required.');
        assert$1(strategy.deriveConstraint && typeof strategy.deriveConstraint === 'function', 'strategy.deriveConstraint function is required.');

        if (this.strategies[strategy.name] && this.strategies[strategy.name].isCustom) {
          throw new Error(`There already exists a custom constraint with the name ${strategy.name}.`)
        }

        if (this.isStrategyUsed(strategy.name)) {
          throw new Error(`There already exists a route with ${strategy.name} constraint.`)
        }

        strategy.isCustom = true;
        strategy.isAsync = strategy.deriveConstraint.length === 3;
        this.strategies[strategy.name] = strategy;

        if (strategy.mustMatchWhenDerived) {
          this.noteUsage({ [strategy.name]: strategy });
        }
      }

      deriveConstraints (req, ctx, done) {
        const constraints = this.deriveSyncConstraints(req, ctx);

        if (done === undefined) {
          return constraints
        }

        this.deriveAsyncConstraints(constraints, req, ctx, done);
      }

      deriveSyncConstraints (req, ctx) {
        return undefined
      }

      // When new constraints start getting used, we need to rebuild the deriver to derive them. Do so if we see novel constraints used.
      noteUsage (constraints) {
        if (constraints) {
          const beforeSize = this.strategiesInUse.size;
          for (const key in constraints) {
            const strategy = this.strategies[key];
            if (strategy.isAsync) {
              this.asyncStrategiesInUse.add(key);
            } else {
              this.strategiesInUse.add(key);
            }
          }
          if (beforeSize !== this.strategiesInUse.size) {
            this._buildDeriveConstraints();
          }
        }
      }

      newStoreForConstraint (constraint) {
        if (!this.strategies[constraint]) {
          throw new Error(`No strategy registered for constraint key ${constraint}`)
        }
        return this.strategies[constraint].storage()
      }

      validateConstraints (constraints) {
        for (const key in constraints) {
          const value = constraints[key];
          if (typeof value === 'undefined') {
            throw new Error('Can\'t pass an undefined constraint value, must pass null or no key at all')
          }
          const strategy = this.strategies[key];
          if (!strategy) {
            throw new Error(`No strategy registered for constraint key ${key}`)
          }
          if (strategy.validate) {
            strategy.validate(value);
          }
        }
      }

      deriveAsyncConstraints (constraints, req, ctx, done) {
        let asyncConstraintsCount = this.asyncStrategiesInUse.size;

        if (asyncConstraintsCount === 0) {
          done(null, constraints);
          return
        }

        constraints = constraints || {};
        for (const key of this.asyncStrategiesInUse) {
          const strategy = this.strategies[key];
          strategy.deriveConstraint(req, ctx, (err, constraintValue) => {
            if (err !== null) {
              done(err);
              return
            }

            constraints[key] = constraintValue;

            if (--asyncConstraintsCount === 0) {
              done(null, constraints);
            }
          });
        }
      }

      // Optimization: build a fast function for deriving the constraints for all the strategies at once. We inline the definitions of the version constraint and the host constraint for performance.
      // If no constraining strategies are in use (no routes constrain on host, or version, or any custom strategies) then we don't need to derive constraints for each route match, so don't do anything special, and just return undefined
      // This allows us to not allocate an object to hold constraint values if no constraints are defined.
      _buildDeriveConstraints () {
        if (this.strategiesInUse.size === 0) return

        const lines = ['return {'];

        for (const key of this.strategiesInUse) {
          const strategy = this.strategies[key];
          // Optimization: inline the derivation for the common built in constraints
          if (!strategy.isCustom) {
            if (key === 'version') {
              lines.push('   version: req.headers[\'accept-version\'],');
            } else if (key === 'host') {
              lines.push('   host: req.headers.host || req.headers[\':authority\'],');
            } else {
              throw new Error('unknown non-custom strategy for compiling constraint derivation function')
            }
          } else {
            lines.push(`  ${strategy.name}: this.strategies.${key}.deriveConstraint(req, ctx),`);
          }
        }

        lines.push('}');

        this.deriveSyncConstraints = new Function('req', 'ctx', lines.join('\n')).bind(this); // eslint-disable-line
      }
    };

    var constrainer = Constrainer$1;

    // defined by Node.js http module, a snapshot from Node.js 18.12.0
    const httpMethods$1 = [
      'ACL', 'BIND', 'CHECKOUT', 'CONNECT', 'COPY', 'DELETE',
      'GET', 'HEAD', 'LINK', 'LOCK', 'M-SEARCH', 'MERGE',
      'MKACTIVITY', 'MKCALENDAR', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS',
      'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT',
      'REBIND', 'REPORT', 'SEARCH', 'SOURCE', 'SUBSCRIBE', 'TRACE',
      'UNBIND', 'UNLINK', 'UNLOCK', 'UNSUBSCRIBE'
    ];

    var httpMethods_1 = httpMethods$1;

    // It must spot all the chars where decodeURIComponent(x) !== decodeURI(x)
    // The chars are: # $ & + , / : ; = ? @
    function decodeComponentChar (highCharCode, lowCharCode) {
      if (highCharCode === 50) {
        if (lowCharCode === 53) return '%'

        if (lowCharCode === 51) return '#'
        if (lowCharCode === 52) return '$'
        if (lowCharCode === 54) return '&'
        if (lowCharCode === 66) return '+'
        if (lowCharCode === 98) return '+'
        if (lowCharCode === 67) return ','
        if (lowCharCode === 99) return ','
        if (lowCharCode === 70) return '/'
        if (lowCharCode === 102) return '/'
        return null
      }
      if (highCharCode === 51) {
        if (lowCharCode === 65) return ':'
        if (lowCharCode === 97) return ':'
        if (lowCharCode === 66) return ';'
        if (lowCharCode === 98) return ';'
        if (lowCharCode === 68) return '='
        if (lowCharCode === 100) return '='
        if (lowCharCode === 70) return '?'
        if (lowCharCode === 102) return '?'
        return null
      }
      if (highCharCode === 52 && lowCharCode === 48) {
        return '@'
      }
      return null
    }

    function safeDecodeURI$1 (path) {
      let shouldDecode = false;
      let shouldDecodeParam = false;

      let querystring = '';

      for (let i = 1; i < path.length; i++) {
        const charCode = path.charCodeAt(i);

        if (charCode === 37) {
          const highCharCode = path.charCodeAt(i + 1);
          const lowCharCode = path.charCodeAt(i + 2);

          if (decodeComponentChar(highCharCode, lowCharCode) === null) {
            shouldDecode = true;
          } else {
            shouldDecodeParam = true;
            // %25 - encoded % char. We need to encode one more time to prevent double decoding
            if (highCharCode === 50 && lowCharCode === 53) {
              shouldDecode = true;
              path = path.slice(0, i + 1) + '25' + path.slice(i + 1);
              i += 2;
            }
            i += 2;
          }
        // Some systems do not follow RFC and separate the path and query
        // string with a `;` character (code 59), e.g. `/foo;jsessionid=123456`.
        // Thus, we need to split on `;` as well as `?` and `#`.
        } else if (charCode === 63 || charCode === 59 || charCode === 35) {
          querystring = path.slice(i + 1);
          path = path.slice(0, i);
          break
        }
      }
      const decodedPath = shouldDecode ? decodeURI(path) : path;
      return { path: decodedPath, querystring, shouldDecodeParam }
    }

    function safeDecodeURIComponent$1 (uriComponent) {
      const startIndex = uriComponent.indexOf('%');
      if (startIndex === -1) return uriComponent

      let decoded = '';
      let lastIndex = startIndex;

      for (let i = startIndex; i < uriComponent.length; i++) {
        if (uriComponent.charCodeAt(i) === 37) {
          const highCharCode = uriComponent.charCodeAt(i + 1);
          const lowCharCode = uriComponent.charCodeAt(i + 2);

          const decodedChar = decodeComponentChar(highCharCode, lowCharCode);
          decoded += uriComponent.slice(lastIndex, i) + decodedChar;

          lastIndex = i + 3;
        }
      }
      return uriComponent.slice(0, startIndex) + decoded + uriComponent.slice(lastIndex)
    }

    var urlSanitizer = { safeDecodeURI: safeDecodeURI$1, safeDecodeURIComponent: safeDecodeURIComponent$1 };

    /*
      Char codes:
        '!': 33 - !
        '#': 35 - %23
        '$': 36 - %24
        '%': 37 - %25
        '&': 38 - %26
        ''': 39 - '
        '(': 40 - (
        ')': 41 - )
        '*': 42 - *
        '+': 43 - %2B
        ',': 44 - %2C
        '-': 45 - -
        '.': 46 - .
        '/': 47 - %2F
        ':': 58 - %3A
        ';': 59 - %3B
        '=': 61 - %3D
        '?': 63 - %3F
        '@': 64 - %40
        '_': 95 - _
        '~': 126 - ~
    */

    const assert = require$$0$7;
    const querystring = libExports$1;
    const isRegexSafe = safeRegex2;
    const deepEqual = fastDeepEqual;
    const { flattenNode, compressFlattenedNode, prettyPrintFlattenedNode, prettyPrintRoutesArray } = prettyPrint;
    const { StaticNode, NODE_TYPES } = custom_node;
    const Constrainer = constrainer;
    const httpMethods = httpMethods_1;
    const { safeDecodeURI, safeDecodeURIComponent } = urlSanitizer;

    const FULL_PATH_REGEXP = /^https?:\/\/.*?\//;
    const OPTIONAL_PARAM_REGEXP = /(\/:[^/()]*?)\?(\/?)/;

    if (!isRegexSafe(FULL_PATH_REGEXP)) {
      throw new Error('the FULL_PATH_REGEXP is not safe, update this module')
    }

    if (!isRegexSafe(OPTIONAL_PARAM_REGEXP)) {
      throw new Error('the OPTIONAL_PARAM_REGEXP is not safe, update this module')
    }

    function Router (opts) {
      if (!(this instanceof Router)) {
        return new Router(opts)
      }
      opts = opts || {};

      if (opts.defaultRoute) {
        assert(typeof opts.defaultRoute === 'function', 'The default route must be a function');
        this.defaultRoute = opts.defaultRoute;
      } else {
        this.defaultRoute = null;
      }

      if (opts.onBadUrl) {
        assert(typeof opts.onBadUrl === 'function', 'The bad url handler must be a function');
        this.onBadUrl = opts.onBadUrl;
      } else {
        this.onBadUrl = null;
      }

      if (opts.buildPrettyMeta) {
        assert(typeof opts.buildPrettyMeta === 'function', 'buildPrettyMeta must be a function');
        this.buildPrettyMeta = opts.buildPrettyMeta;
      } else {
        this.buildPrettyMeta = defaultBuildPrettyMeta$1;
      }

      if (opts.querystringParser) {
        assert(typeof opts.querystringParser === 'function', 'querystringParser must be a function');
        this.querystringParser = opts.querystringParser;
      } else {
        this.querystringParser = (query) => query === '' ? {} : querystring.parse(query);
      }

      this.caseSensitive = opts.caseSensitive === undefined ? true : opts.caseSensitive;
      this.ignoreTrailingSlash = opts.ignoreTrailingSlash || false;
      this.ignoreDuplicateSlashes = opts.ignoreDuplicateSlashes || false;
      this.maxParamLength = opts.maxParamLength || 100;
      this.allowUnsafeRegex = opts.allowUnsafeRegex || false;
      this.routes = [];
      this.trees = {};
      this.constrainer = new Constrainer(opts.constraints);

      this._routesPatterns = [];
    }

    Router.prototype.on = function on (method, path, opts, handler, store) {
      if (typeof opts === 'function') {
        if (handler !== undefined) {
          store = handler;
        }
        handler = opts;
        opts = {};
      }
      // path validation
      assert(typeof path === 'string', 'Path should be a string');
      assert(path.length > 0, 'The path could not be empty');
      assert(path[0] === '/' || path[0] === '*', 'The first character of a path should be `/` or `*`');
      // handler validation
      assert(typeof handler === 'function', 'Handler should be a function');

      // path ends with optional parameter
      const optionalParamMatch = path.match(OPTIONAL_PARAM_REGEXP);
      if (optionalParamMatch) {
        assert(path.length === optionalParamMatch.index + optionalParamMatch[0].length, 'Optional Parameter needs to be the last parameter of the path');

        const pathFull = path.replace(OPTIONAL_PARAM_REGEXP, '$1$2');
        const pathOptional = path.replace(OPTIONAL_PARAM_REGEXP, '$2');

        this.on(method, pathFull, opts, handler, store);
        this.on(method, pathOptional, opts, handler, store);
        return
      }

      const route = path;

      if (this.ignoreDuplicateSlashes) {
        path = removeDuplicateSlashes(path);
      }

      if (this.ignoreTrailingSlash) {
        path = trimLastSlash(path);
      }

      const methods = Array.isArray(method) ? method : [method];
      for (const method of methods) {
        this._on(method, path, opts, handler, store, route);
        this.routes.push({ method, path, opts, handler, store });
      }
    };

    Router.prototype._on = function _on (method, path, opts, handler, store) {
      assert(typeof method === 'string', 'Method should be a string');
      assert(httpMethods.includes(method), `Method '${method}' is not an http method.`);

      let constraints = {};
      if (opts.constraints !== undefined) {
        assert(typeof opts.constraints === 'object' && opts.constraints !== null, 'Constraints should be an object');
        if (Object.keys(opts.constraints).length !== 0) {
          constraints = opts.constraints;
        }
      }

      this.constrainer.validateConstraints(constraints);
      // Let the constrainer know if any constraints are being used now
      this.constrainer.noteUsage(constraints);

      // Boot the tree for this method if it doesn't exist yet
      if (this.trees[method] === undefined) {
        this.trees[method] = new StaticNode('/');
      }

      if (path === '*' && this.trees[method].prefix.length !== 0) {
        const currentRoot = this.trees[method];
        this.trees[method] = new StaticNode('');
        this.trees[method].staticChildren['/'] = currentRoot;
      }

      let currentNode = this.trees[method];
      let parentNodePathIndex = currentNode.prefix.length;

      const params = [];
      for (let i = 0; i <= path.length; i++) {
        if (path.charCodeAt(i) === 58 && path.charCodeAt(i + 1) === 58) {
          // It's a double colon
          i++;
          continue
        }

        const isParametricNode = path.charCodeAt(i) === 58 && path.charCodeAt(i + 1) !== 58;
        const isWildcardNode = path.charCodeAt(i) === 42;

        if (isParametricNode || isWildcardNode || (i === path.length && i !== parentNodePathIndex)) {
          let staticNodePath = path.slice(parentNodePathIndex, i);
          if (!this.caseSensitive) {
            staticNodePath = staticNodePath.toLowerCase();
          }
          staticNodePath = staticNodePath.split('::').join(':');
          staticNodePath = staticNodePath.split('%').join('%25');
          // add the static part of the route to the tree
          currentNode = currentNode.createStaticChild(staticNodePath);
        }

        if (isParametricNode) {
          let isRegexNode = false;
          const regexps = [];

          let staticEndingLength = 0;
          let lastParamStartIndex = i + 1;
          for (let j = lastParamStartIndex; ; j++) {
            const charCode = path.charCodeAt(j);

            if (charCode === 40 || charCode === 45 || charCode === 46) {
              isRegexNode = true;

              const paramName = path.slice(lastParamStartIndex, j);
              params.push(paramName);

              if (charCode === 40) {
                const endOfRegexIndex = getClosingParenthensePosition(path, j);
                const regexString = path.slice(j, endOfRegexIndex + 1);

                if (!this.allowUnsafeRegex) {
                  assert(isRegexSafe(new RegExp(regexString)), `The regex '${regexString}' is not safe!`);
                }

                regexps.push(trimRegExpStartAndEnd(regexString));

                j = endOfRegexIndex + 1;
              } else {
                regexps.push('(.*?)');
              }

              let lastParamEndIndex = j;
              for (; lastParamEndIndex < path.length; lastParamEndIndex++) {
                const charCode = path.charCodeAt(lastParamEndIndex);
                const nextCharCode = path.charCodeAt(lastParamEndIndex + 1);
                if (charCode === 58 && nextCharCode === 58) {
                  lastParamEndIndex++;
                  continue
                }
                if (charCode === 58 || charCode === 47) break
              }

              let staticPart = path.slice(j, lastParamEndIndex);
              if (staticPart) {
                staticPart = staticPart.split('::').join(':');
                staticPart = staticPart.split('%').join('%25');
                regexps.push(escapeRegExp(staticPart));
              }

              lastParamStartIndex = lastParamEndIndex + 1;
              j = lastParamEndIndex;

              if (path.charCodeAt(j) === 47 || j === path.length) {
                staticEndingLength = staticPart.length;
              }
            } else if (charCode === 47 || j === path.length) {
              const paramName = path.slice(lastParamStartIndex, j);
              params.push(paramName);

              if (regexps.length !== 0) {
                regexps.push('(.*?)');
              }
            }

            if (path.charCodeAt(j) === 47 || j === path.length) {
              path = path.slice(0, i + 1) + path.slice(j - staticEndingLength);
              i += staticEndingLength;
              break
            }
          }

          let regex = null;
          if (isRegexNode) {
            regex = new RegExp('^' + regexps.join('') + '$');
          }

          currentNode = currentNode.createParametricChild(regex);
          parentNodePathIndex = i + 1;
        } else if (isWildcardNode) {
          // add the wildcard parameter
          params.push('*');
          currentNode = currentNode.createWildcardChild();
          parentNodePathIndex = i + 1;

          if (i !== path.length - 1) {
            throw new Error('Wildcard must be the last character in the route')
          }
        }
      }

      if (!this.caseSensitive) {
        path = path.toLowerCase();
      }

      const isRootWildcard = path === '*' || path === '/*';
      for (const existRoute of this._routesPatterns) {
        let samePath = false;

        if (existRoute.path === path) {
          samePath = true;
        } else if (isRootWildcard && (existRoute.path === '/*' || existRoute.path === '*')) {
          samePath = true;
        }

        if (
          samePath &&
          existRoute.method === method &&
          deepEqual(existRoute.constraints, constraints)
        ) {
          throw new Error(`Method '${method}' already declared for route '${path}' with constraints '${JSON.stringify(constraints)}'`)
        }
      }
      this._routesPatterns.push({ method, path, constraints });

      currentNode.handlerStorage.addHandler(handler, params, store, this.constrainer, constraints);
    };

    Router.prototype.hasConstraintStrategy = function (strategyName) {
      return this.constrainer.hasConstraintStrategy(strategyName)
    };

    Router.prototype.addConstraintStrategy = function (constraints) {
      this.constrainer.addConstraintStrategy(constraints);
      this._rebuild(this.routes);
    };

    Router.prototype.reset = function reset () {
      this.trees = {};
      this.routes = [];
      this._routesPatterns = [];
    };

    Router.prototype.off = function off (method, path, constraints) {
      // path validation
      assert(typeof path === 'string', 'Path should be a string');
      assert(path.length > 0, 'The path could not be empty');
      assert(path[0] === '/' || path[0] === '*', 'The first character of a path should be `/` or `*`');
      // options validation
      assert(
        typeof constraints === 'undefined' ||
        (typeof constraints === 'object' && !Array.isArray(constraints) && constraints !== null),
        'Constraints should be an object or undefined.');

      // path ends with optional parameter
      const optionalParamMatch = path.match(OPTIONAL_PARAM_REGEXP);
      if (optionalParamMatch) {
        assert(path.length === optionalParamMatch.index + optionalParamMatch[0].length, 'Optional Parameter needs to be the last parameter of the path');

        const pathFull = path.replace(OPTIONAL_PARAM_REGEXP, '$1$2');
        const pathOptional = path.replace(OPTIONAL_PARAM_REGEXP, '$2');

        this.off(method, pathFull, constraints);
        this.off(method, pathOptional, constraints);
        return
      }

      if (this.ignoreDuplicateSlashes) {
        path = removeDuplicateSlashes(path);
      }

      if (this.ignoreTrailingSlash) {
        path = trimLastSlash(path);
      }

      const methods = Array.isArray(method) ? method : [method];
      for (const method of methods) {
        this._off(method, path, constraints);
      }
    };

    Router.prototype._off = function _off (method, path, constraints) {
      // method validation
      assert(typeof method === 'string', 'Method should be a string');
      assert(httpMethods.includes(method), `Method '${method}' is not an http method.`);

      function matcherWithoutConstraints (route) {
        return method !== route.method || path !== route.path
      }

      function matcherWithConstraints (route) {
        return matcherWithoutConstraints(route) || !deepEqual(constraints, route.opts.constraints || {})
      }

      const predicate = constraints ? matcherWithConstraints : matcherWithoutConstraints;

      // Rebuild tree without the specific route
      const newRoutes = this.routes.filter(predicate);
      this._rebuild(newRoutes);
    };

    Router.prototype.lookup = function lookup (req, res, ctx, done) {
      if (typeof ctx === 'function') {
        done = ctx;
        ctx = undefined;
      }

      if (done === undefined) {
        const constraints = this.constrainer.deriveConstraints(req, ctx);
        const handle = this.find(req.method, req.url, constraints);
        return this.callHandler(handle, req, res, ctx)
      }

      this.constrainer.deriveConstraints(req, ctx, (err, constraints) => {
        if (err !== null) {
          done(err);
          return
        }

        try {
          const handle = this.find(req.method, req.url, constraints);
          const result = this.callHandler(handle, req, res, ctx);
          done(null, result);
        } catch (err) {
          done(err);
        }
      });
    };

    Router.prototype.callHandler = function callHandler (handle, req, res, ctx) {
      if (handle === null) return this._defaultRoute(req, res, ctx)
      return ctx === undefined
        ? handle.handler(req, res, handle.params, handle.store, handle.searchParams)
        : handle.handler.call(ctx, req, res, handle.params, handle.store, handle.searchParams)
    };

    Router.prototype.find = function find (method, path, derivedConstraints) {
      let currentNode = this.trees[method];
      if (currentNode === undefined) return null

      if (path.charCodeAt(0) !== 47) { // 47 is '/'
        path = path.replace(FULL_PATH_REGEXP, '/');
      }

      // This must be run before sanitizeUrl as the resulting function
      // .sliceParameter must be constructed with same URL string used
      // throughout the rest of this function.
      if (this.ignoreDuplicateSlashes) {
        path = removeDuplicateSlashes(path);
      }

      let sanitizedUrl;
      let querystring;
      let shouldDecodeParam;

      try {
        sanitizedUrl = safeDecodeURI(path);
        path = sanitizedUrl.path;
        querystring = sanitizedUrl.querystring;
        shouldDecodeParam = sanitizedUrl.shouldDecodeParam;
      } catch (error) {
        return this._onBadUrl(path)
      }

      if (this.ignoreTrailingSlash) {
        path = trimLastSlash(path);
      }

      const originPath = path;

      if (this.caseSensitive === false) {
        path = path.toLowerCase();
      }

      const maxParamLength = this.maxParamLength;

      let pathIndex = currentNode.prefix.length;
      const params = [];
      const pathLen = path.length;

      const brothersNodesStack = [];

      while (true) {
        if (pathIndex === pathLen) {
          const handle = currentNode.handlerStorage.getMatchingHandler(derivedConstraints);

          if (handle !== null) {
            return {
              handler: handle.handler,
              store: handle.store,
              params: handle._createParamsObject(params),
              searchParams: this.querystringParser(querystring)
            }
          }
        }

        let node = currentNode.getNextNode(path, pathIndex, brothersNodesStack, params.length);

        if (node === null) {
          if (brothersNodesStack.length === 0) {
            return null
          }

          const brotherNodeState = brothersNodesStack.pop();
          pathIndex = brotherNodeState.brotherPathIndex;
          params.splice(brotherNodeState.paramsCount);
          node = brotherNodeState.brotherNode;
        }

        currentNode = node;

        // static route
        if (currentNode.kind === NODE_TYPES.STATIC) {
          pathIndex += currentNode.prefix.length;
          continue
        }

        if (currentNode.kind === NODE_TYPES.WILDCARD) {
          let param = originPath.slice(pathIndex);
          if (shouldDecodeParam) {
            param = safeDecodeURIComponent(param);
          }

          params.push(param);
          pathIndex = pathLen;
          continue
        }

        if (currentNode.kind === NODE_TYPES.PARAMETRIC) {
          let paramEndIndex = originPath.indexOf('/', pathIndex);
          if (paramEndIndex === -1) {
            paramEndIndex = pathLen;
          }

          let param = originPath.slice(pathIndex, paramEndIndex);
          if (shouldDecodeParam) {
            param = safeDecodeURIComponent(param);
          }

          if (currentNode.isRegex) {
            const matchedParameters = currentNode.regex.exec(param);
            if (matchedParameters === null) continue

            for (let i = 1; i < matchedParameters.length; i++) {
              const matchedParam = matchedParameters[i];
              if (matchedParam.length > maxParamLength) {
                return null
              }
              params.push(matchedParam);
            }
          } else {
            if (param.length > maxParamLength) {
              return null
            }
            params.push(param);
          }

          pathIndex = paramEndIndex;
        }
      }
    };

    Router.prototype._rebuild = function (routes) {
      this.reset();

      for (const route of routes) {
        const { method, path, opts, handler, store } = route;
        this._on(method, path, opts, handler, store);
        this.routes.push({ method, path, opts, handler, store });
      }
    };

    Router.prototype._defaultRoute = function (req, res, ctx) {
      if (this.defaultRoute !== null) {
        return ctx === undefined
          ? this.defaultRoute(req, res)
          : this.defaultRoute.call(ctx, req, res)
      } else {
        res.statusCode = 404;
        res.end();
      }
    };

    Router.prototype._onBadUrl = function (path) {
      if (this.onBadUrl === null) {
        return null
      }
      const onBadUrl = this.onBadUrl;
      return {
        handler: (req, res, ctx) => onBadUrl(path, req, res),
        params: {},
        store: null
      }
    };

    Router.prototype.prettyPrint = function (opts = {}) {
      opts.commonPrefix = opts.commonPrefix === undefined ? true : opts.commonPrefix; // default to original behaviour
      if (!opts.commonPrefix) return prettyPrintRoutesArray.call(this, this.routes, opts)
      const root = {
        prefix: '/',
        nodes: [],
        children: {}
      };

      for (const method in this.trees) {
        const node = this.trees[method];
        if (node) {
          flattenNode(root, node, method);
        }
      }

      compressFlattenedNode(root);

      return prettyPrintFlattenedNode.call(this, root, '', true, opts)
    };

    for (var i in httpMethods) {
      /* eslint no-prototype-builtins: "off" */
      if (!httpMethods.hasOwnProperty(i)) continue
      const m = httpMethods[i];
      const methodName = m.toLowerCase();

      if (Router.prototype[methodName]) throw new Error('Method already exists: ' + methodName)

      Router.prototype[methodName] = function (path, handler, store) {
        return this.on(m, path, handler, store)
      };
    }

    Router.prototype.all = function (path, handler, store) {
      this.on(httpMethods, path, handler, store);
    };

    var findMyWay = Router;

    function escapeRegExp (string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
    }

    function removeDuplicateSlashes (path) {
      return path.replace(/\/\/+/g, '/')
    }

    function trimLastSlash (path) {
      if (path.length > 1 && path.charCodeAt(path.length - 1) === 47) {
        return path.slice(0, -1)
      }
      return path
    }

    function trimRegExpStartAndEnd (regexString) {
      // removes chars that marks start "^" and end "$" of regexp
      if (regexString.charCodeAt(1) === 94) {
        regexString = regexString.slice(0, 1) + regexString.slice(2);
      }

      if (regexString.charCodeAt(regexString.length - 2) === 36) {
        regexString = regexString.slice(0, regexString.length - 2) + regexString.slice(regexString.length - 1);
      }

      return regexString
    }

    function getClosingParenthensePosition (path, idx) {
      // `path.indexOf()` will always return the first position of the closing parenthese,
      // but it's inefficient for grouped or wrong regexp expressions.
      // see issues #62 and #63 for more info

      var parentheses = 1;

      while (idx < path.length) {
        idx++;

        // ignore skipped chars
        if (path[idx] === '\\') {
          idx++;
          continue
        }

        if (path[idx] === ')') {
          parentheses--;
        } else if (path[idx] === '(') {
          parentheses++;
        }

        if (!parentheses) return idx
      }

      throw new TypeError('Invalid regexp expression in "' + path + '"')
    }

    function defaultBuildPrettyMeta$1 (route) {
      // buildPrettyMeta function must return an object, which will be parsed into key/value pairs for display
      if (!route) return {}
      if (!route.store) return {}
      return Object.assign({}, route.store)
    }

    const {
      kFourOhFourContext: kFourOhFourContext$2,
      kReplySerializerDefault: kReplySerializerDefault$2,
      kSchemaErrorFormatter: kSchemaErrorFormatter$2,
      kErrorHandler: kErrorHandler$3,
      kReply: kReply$2,
      kRequest: kRequest$2,
      kBodyLimit: kBodyLimit$1,
      kLogLevel: kLogLevel$3,
      kContentTypeParser: kContentTypeParser$2,
      kRouteByFastify: kRouteByFastify$1,
      kRequestValidateWeakMap,
      kReplySerializeWeakMap,
      kPublicRouteContext
    } = symbols$2;

    // Object that holds the context of every request
    // Every route holds an instance of this object.
    function Context$2 ({
      schema,
      handler,
      config,
      errorHandler,
      bodyLimit,
      logLevel,
      logSerializers,
      attachValidation,
      validatorCompiler,
      serializerCompiler,
      replySerializer,
      schemaErrorFormatter,
      exposeHeadRoute,
      prefixTrailingSlash,
      server,
      isFastify
    }) {
      this.schema = schema;
      this.handler = handler;
      this.Reply = server[kReply$2];
      this.Request = server[kRequest$2];
      this.contentTypeParser = server[kContentTypeParser$2];
      this.onRequest = null;
      this.onSend = null;
      this.onError = null;
      this.onTimeout = null;
      this.preHandler = null;
      this.onResponse = null;
      this.preSerialization = null;
      this.config = config;
      this.errorHandler = errorHandler || server[kErrorHandler$3];
      this._middie = null;
      this._parserOptions = {
        limit: bodyLimit || server[kBodyLimit$1]
      };
      this.exposeHeadRoute = exposeHeadRoute;
      this.prefixTrailingSlash = prefixTrailingSlash;
      this.logLevel = logLevel || server[kLogLevel$3];
      this.logSerializers = logSerializers;
      this[kFourOhFourContext$2] = null;
      this.attachValidation = attachValidation;
      this[kReplySerializerDefault$2] = replySerializer;
      this.schemaErrorFormatter =
        schemaErrorFormatter ||
        server[kSchemaErrorFormatter$2] ||
        defaultSchemaErrorFormatter;
      this[kRouteByFastify$1] = isFastify;

      this[kRequestValidateWeakMap] = null;
      this[kReplySerializeWeakMap] = null;
      this.validatorCompiler = validatorCompiler || null;
      this.serializerCompiler = serializerCompiler || null;

      // Route + Userland configurations for the route
      this[kPublicRouteContext] = getPublicRouteContext(this);

      this.server = server;
    }

    function getPublicRouteContext (context) {
      return Object.create(null, {
        schema: {
          enumerable: true,
          get () {
            return context.schema
          }
        },
        config: {
          enumerable: true,
          get () {
            return context.config
          }
        }
      })
    }

    function defaultSchemaErrorFormatter (errors, dataVar) {
      let text = '';
      const separator = ', ';

      // eslint-disable-next-line no-var
      for (var i = 0; i !== errors.length; ++i) {
        const e = errors[i];
        text += dataVar + (e.instancePath || '') + ' ' + e.message + separator;
      }
      return new Error(text.slice(0, -separator.length))
    }

    var context = Context$2;

    function headRouteOnSendHandler (req, reply, payload, done) {
      // If payload is undefined
      if (payload === undefined) {
        reply.header('content-length', '0');
        return done(null, null)
      }

      if (typeof payload.resume === 'function') {
        payload.on('error', (err) => {
          reply.log.error({ err }, 'Error on Stream found for HEAD route');
        });
        payload.resume();
        return done(null, null)
      }

      const size = '' + Buffer.byteLength(payload);

      reply.header('content-length', size);

      done(null, null);
    }

    function parseHeadOnSendHandlers$1 (onSendHandlers) {
      if (onSendHandlers == null) return headRouteOnSendHandler
      return Array.isArray(onSendHandlers) ? [...onSendHandlers, headRouteOnSendHandler] : [onSendHandlers, headRouteOnSendHandler]
    }

    var headRoute = {
      parseHeadOnSendHandlers: parseHeadOnSendHandlers$1
    };

    const FindMyWay$1 = findMyWay;
    const Context$1 = context;
    const handleRequest = handleRequestExports;
    const { hookRunner, hookIterator, lifecycleHooks: lifecycleHooks$1 } = hooks;
    const { supportedMethods: supportedMethods$1 } = httpMethods$2;
    const { normalizeSchema } = schemas;
    const { parseHeadOnSendHandlers } = headRoute;
    const warning$1 = warnings$1;

    const {
      compileSchemasForValidation,
      compileSchemasForSerialization
    } = validation$5;

    const {
      FST_ERR_SCH_VALIDATION_BUILD,
      FST_ERR_SCH_SERIALIZATION_BUILD,
      FST_ERR_DEFAULT_ROUTE_INVALID_TYPE,
      FST_ERR_DUPLICATED_ROUTE,
      FST_ERR_INVALID_URL,
      FST_ERR_SEND_UNDEFINED_ERR,
      FST_ERR_HOOK_INVALID_HANDLER
    } = errorsExports;

    const {
      kRoutePrefix: kRoutePrefix$3,
      kLogLevel: kLogLevel$2,
      kLogSerializers: kLogSerializers$2,
      kHooks: kHooks$3,
      kSchemaController: kSchemaController$2,
      kOptions: kOptions$1,
      kReplySerializerDefault: kReplySerializerDefault$1,
      kReplyIsError,
      kRequestPayloadStream,
      kDisableRequestLogging,
      kSchemaErrorFormatter: kSchemaErrorFormatter$1,
      kErrorHandler: kErrorHandler$2,
      kHasBeenDecorated,
      kRequestAcceptVersion: kRequestAcceptVersion$1,
      kRouteByFastify,
      kRouteContext
    } = symbols$2;
    const { buildErrorHandler: buildErrorHandler$2 } = errorHandler;

    function buildRouting$1 (options) {
      const router = FindMyWay$1(options.config);

      let avvio;
      let fourOhFour;
      let requestIdLogLabel;
      let logger;
      let hasLogger;
      let setupResponseListeners;
      let throwIfAlreadyStarted;
      let genReqId;
      let disableRequestLogging;
      let ignoreTrailingSlash;
      let ignoreDuplicateSlashes;
      let return503OnClosing;
      let globalExposeHeadRoutes;
      let validateHTTPVersion;
      let keepAliveConnections;

      let closing = false;

      return {
        setup (options, fastifyArgs) {
          avvio = fastifyArgs.avvio;
          fourOhFour = fastifyArgs.fourOhFour;
          logger = fastifyArgs.logger;
          hasLogger = fastifyArgs.hasLogger;
          setupResponseListeners = fastifyArgs.setupResponseListeners;
          throwIfAlreadyStarted = fastifyArgs.throwIfAlreadyStarted;
          validateHTTPVersion = fastifyArgs.validateHTTPVersion;

          globalExposeHeadRoutes = options.exposeHeadRoutes;
          requestIdLogLabel = options.requestIdLogLabel;
          genReqId = options.genReqId;
          disableRequestLogging = options.disableRequestLogging;
          ignoreTrailingSlash = options.ignoreTrailingSlash;
          ignoreDuplicateSlashes = options.ignoreDuplicateSlashes;
          return503OnClosing = Object.prototype.hasOwnProperty.call(options, 'return503OnClosing') ? options.return503OnClosing : true;
          keepAliveConnections = fastifyArgs.keepAliveConnections;
        },
        routing: router.lookup.bind(router), // router func to find the right handler to call
        route, // configure a route in the fastify instance
        hasRoute,
        prepareRoute,
        getDefaultRoute: function () {
          warning$1.emit('FSTDEP014');
          return router.defaultRoute
        },
        setDefaultRoute: function (defaultRoute) {
          warning$1.emit('FSTDEP014');
          if (typeof defaultRoute !== 'function') {
            throw new FST_ERR_DEFAULT_ROUTE_INVALID_TYPE()
          }

          router.defaultRoute = defaultRoute;
        },
        routeHandler,
        closeRoutes: () => { closing = true; },
        printRoutes: router.prettyPrint.bind(router),
        addConstraintStrategy,
        hasConstraintStrategy,
        isAsyncConstraint
      }

      function addConstraintStrategy (strategy) {
        throwIfAlreadyStarted('Cannot add constraint strategy when fastify instance is already started!');
        return router.addConstraintStrategy(strategy)
      }

      function hasConstraintStrategy (strategyName) {
        return router.hasConstraintStrategy(strategyName)
      }

      function isAsyncConstraint () {
        return router.constrainer.asyncStrategiesInUse.size > 0
      }

      // Convert shorthand to extended route declaration
      function prepareRoute ({ method, url, options, handler, isFastify }) {
        if (typeof url !== 'string') {
          throw new FST_ERR_INVALID_URL(typeof url)
        }

        if (!handler && typeof options === 'function') {
          handler = options; // for support over direct function calls such as fastify.get() options are reused as the handler
          options = {};
        } else if (handler && typeof handler === 'function') {
          if (Object.prototype.toString.call(options) !== '[object Object]') {
            throw new Error(`Options for ${method}:${url} route must be an object`)
          } else if (options.handler) {
            if (typeof options.handler === 'function') {
              throw new Error(`Duplicate handler for ${method}:${url} route is not allowed!`)
            } else {
              throw new Error(`Handler for ${method}:${url} route must be a function`)
            }
          }
        }

        options = Object.assign({}, options, {
          method,
          url,
          path: url,
          handler: handler || (options && options.handler)
        });

        return route.call(this, { options, isFastify })
      }

      function hasRoute ({ options }) {
        return router.find(
          options.method,
          options.url || '',
          options.constraints
        ) !== null
      }

      // Route management
      function route ({ options, isFastify }) {
        // Since we are mutating/assigning only top level props, it is fine to have a shallow copy using the spread operator
        const opts = { ...options };

        const { exposeHeadRoute } = opts;
        const hasRouteExposeHeadRouteFlag = exposeHeadRoute != null;
        const shouldExposeHead = hasRouteExposeHeadRouteFlag ? exposeHeadRoute : globalExposeHeadRoutes;
        // we need to clone a set of initial options for HEAD route
        const headOpts = shouldExposeHead && options.method === 'GET' ? { ...options } : null;

        throwIfAlreadyStarted('Cannot add route when fastify instance is already started!');

        const path = opts.url || opts.path || '';

        if (Array.isArray(opts.method)) {
          // eslint-disable-next-line no-var
          for (var i = 0; i < opts.method.length; ++i) {
            validateMethodAndSchemaBodyOption(opts.method[i], path, opts.schema);
          }
        } else {
          validateMethodAndSchemaBodyOption(opts.method, path, opts.schema);
        }

        if (!opts.handler) {
          throw new Error(`Missing handler function for ${opts.method}:${path} route.`)
        }

        if (opts.errorHandler !== undefined && typeof opts.errorHandler !== 'function') {
          throw new Error(`Error Handler for ${opts.method}:${path} route, if defined, must be a function`)
        }

        validateBodyLimitOption$1(opts.bodyLimit);

        const prefix = this[kRoutePrefix$3];

        if (path === '/' && prefix.length > 0 && opts.method !== 'HEAD') {
          switch (opts.prefixTrailingSlash) {
            case 'slash':
              addNewRoute.call(this, { path, isFastify });
              break
            case 'no-slash':
              addNewRoute.call(this, { path: '', isFastify });
              break
            case 'both':
            default:
              addNewRoute.call(this, { path: '', isFastify });
              // If ignoreTrailingSlash is set to true we need to add only the '' route to prevent adding an incomplete one.
              if (ignoreTrailingSlash !== true && (ignoreDuplicateSlashes !== true || !prefix.endsWith('/'))) {
                addNewRoute.call(this, { path, prefixing: true, isFastify });
              }
          }
        } else if (path[0] === '/' && prefix.endsWith('/')) {
          // Ensure that '/prefix/' + '/route' gets registered as '/prefix/route'
          addNewRoute.call(this, { path: path.slice(1), isFastify });
        } else {
          addNewRoute.call(this, { path, isFastify });
        }

        // chainable api
        return this

        function addNewRoute ({ path, prefixing = false, isFastify = false }) {
          const url = prefix + path;

          opts.url = url;
          opts.path = url;
          opts.routePath = path;
          opts.prefix = prefix;
          opts.logLevel = opts.logLevel || this[kLogLevel$2];

          if (this[kLogSerializers$2] || opts.logSerializers) {
            opts.logSerializers = Object.assign(Object.create(this[kLogSerializers$2]), opts.logSerializers);
          }

          if (opts.attachValidation == null) {
            opts.attachValidation = false;
          }

          if (prefixing === false) {
            // run 'onRoute' hooks
            for (const hook of this[kHooks$3].onRoute) {
              hook.call(this, opts);
            }
          }

          for (const hook of lifecycleHooks$1) {
            if (opts && hook in opts) {
              if (Array.isArray(opts[hook])) {
                for (const func of opts[hook]) {
                  if (typeof func !== 'function') {
                    throw new FST_ERR_HOOK_INVALID_HANDLER(hook, Object.prototype.toString.call(func))
                  }
                }
              } else if (opts[hook] !== undefined && typeof opts[hook] !== 'function') {
                throw new FST_ERR_HOOK_INVALID_HANDLER(hook, Object.prototype.toString.call(opts[hook]))
              }
            }
          }

          const constraints = opts.constraints || {};
          const config = {
            ...opts.config,
            url,
            method: opts.method
          };

          const context = new Context$1({
            schema: opts.schema,
            handler: opts.handler.bind(this),
            config,
            errorHandler: opts.errorHandler,
            bodyLimit: opts.bodyLimit,
            logLevel: opts.logLevel,
            logSerializers: opts.logSerializers,
            attachValidation: opts.attachValidation,
            schemaErrorFormatter: opts.schemaErrorFormatter,
            replySerializer: this[kReplySerializerDefault$1],
            validatorCompiler: opts.validatorCompiler,
            serializerCompiler: opts.serializerCompiler,
            exposeHeadRoute: shouldExposeHead,
            prefixTrailingSlash: (opts.prefixTrailingSlash || 'both'),
            server: this,
            isFastify
          });

          if (opts.version) {
            warning$1.emit('FSTDEP008');
            constraints.version = opts.version;
          }

          const headHandler = router.find('HEAD', opts.url, constraints);
          const hasHEADHandler = headHandler != null;

          // remove the head route created by fastify
          if (hasHEADHandler && !context[kRouteByFastify] && headHandler.store[kRouteByFastify]) {
            router.off(opts.method, opts.url, { constraints });
          }

          try {
            router.on(opts.method, opts.url, { constraints }, routeHandler, context);
          } catch (error) {
            // any route insertion error created by fastify can be safely ignore
            // because it only duplicate route for head
            if (!context[kRouteByFastify]) {
              const isDuplicatedRoute = error.message.includes(`Method '${opts.method}' already declared for route '${opts.url}'`);
              if (isDuplicatedRoute) {
                throw new FST_ERR_DUPLICATED_ROUTE(opts.method, opts.url)
              }

              throw error
            }
          }

          this.after((notHandledErr, done) => {
            // Send context async
            context.errorHandler = opts.errorHandler ? buildErrorHandler$2(this[kErrorHandler$2], opts.errorHandler) : this[kErrorHandler$2];
            context._parserOptions.limit = opts.bodyLimit || null;
            context.logLevel = opts.logLevel;
            context.logSerializers = opts.logSerializers;
            context.attachValidation = opts.attachValidation;
            context[kReplySerializerDefault$1] = this[kReplySerializerDefault$1];
            context.schemaErrorFormatter = opts.schemaErrorFormatter || this[kSchemaErrorFormatter$1] || context.schemaErrorFormatter;

            // Run hooks and more
            avvio.once('preReady', () => {
              for (const hook of lifecycleHooks$1) {
                const toSet = this[kHooks$3][hook]
                  .concat(opts[hook] || [])
                  .map(h => h.bind(this));
                context[hook] = toSet.length ? toSet : null;
              }

              // Optimization: avoid encapsulation if no decoration has been done.
              while (!context.Request[kHasBeenDecorated] && context.Request.parent) {
                context.Request = context.Request.parent;
              }
              while (!context.Reply[kHasBeenDecorated] && context.Reply.parent) {
                context.Reply = context.Reply.parent;
              }

              // Must store the 404 Context in 'preReady' because it is only guaranteed to
              // be available after all of the plugins and routes have been loaded.
              fourOhFour.setContext(this, context);

              if (opts.schema) {
                context.schema = normalizeSchema(context.schema, this.initialConfig);

                const schemaController = this[kSchemaController$2];
                if (!opts.validatorCompiler && (opts.schema.body || opts.schema.headers || opts.schema.querystring || opts.schema.params)) {
                  schemaController.setupValidator(this[kOptions$1]);
                }
                try {
                  const isCustom = typeof opts?.validatorCompiler === 'function' || schemaController.isCustomValidatorCompiler;
                  compileSchemasForValidation(context, opts.validatorCompiler || schemaController.validatorCompiler, isCustom);
                } catch (error) {
                  throw new FST_ERR_SCH_VALIDATION_BUILD(opts.method, url, error.message)
                }

                if (opts.schema.response && !opts.serializerCompiler) {
                  schemaController.setupSerializer(this[kOptions$1]);
                }
                try {
                  compileSchemasForSerialization(context, opts.serializerCompiler || schemaController.serializerCompiler);
                } catch (error) {
                  throw new FST_ERR_SCH_SERIALIZATION_BUILD(opts.method, url, error.message)
                }
              }
            });

            done(notHandledErr);
          });

          // register head route in sync
          // we must place it after the `this.after`

          if (shouldExposeHead && options.method === 'GET' && !hasHEADHandler) {
            const onSendHandlers = parseHeadOnSendHandlers(headOpts.onSend);
            prepareRoute.call(this, { method: 'HEAD', url: path, options: { ...headOpts, onSend: onSendHandlers }, isFastify: true });
          } else if (hasHEADHandler && exposeHeadRoute) {
            warning$1.emit('FSTDEP007');
          }
        }
      }

      // HTTP request entry point, the routing has already been executed
      function routeHandler (req, res, params, context, query) {
        // TODO: The check here should be removed once https://github.com/nodejs/node/issues/43115 resolve in core.
        if (!validateHTTPVersion(req.httpVersion)) {
          const message = '{"error":"HTTP Version Not Supported","message":"HTTP Version Not Supported","statusCode":505}';
          const headers = {
            'Content-Type': 'application/json',
            'Content-Length': message.length
          };
          res.writeHead(505, headers);
          res.end(message);
          return
        }

        if (closing === true) {
          /* istanbul ignore next mac, windows */
          if (req.httpVersionMajor !== 2) {
            res.setHeader('Connection', 'close');
          }

          // TODO remove return503OnClosing after Node v18 goes EOL
          /* istanbul ignore else */
          if (return503OnClosing) {
            // On Node v19 we cannot test this behavior as it won't be necessary
            // anymore. It will close all the idle connections before they reach this
            // stage.
            const headers = {
              'Content-Type': 'application/json',
              'Content-Length': '80'
            };
            res.writeHead(503, headers);
            res.end('{"error":"Service Unavailable","message":"Service Unavailable","statusCode":503}');
            return
          }
        }

        // When server.forceCloseConnections is true, we will collect any requests
        // that have indicated they want persistence so that they can be reaped
        // on server close. Otherwise, the container is a noop container.
        const connHeader = String.prototype.toLowerCase.call(req.headers.connection || '');
        if (connHeader === 'keep-alive') {
          if (keepAliveConnections.has(req.socket) === false) {
            keepAliveConnections.add(req.socket);
            req.socket.on('close', removeTrackedSocket.bind({ keepAliveConnections, socket: req.socket }));
          }
        }

        // we revert the changes in defaultRoute
        if (req.headers[kRequestAcceptVersion$1] !== undefined) {
          req.headers['accept-version'] = req.headers[kRequestAcceptVersion$1];
          req.headers[kRequestAcceptVersion$1] = undefined;
        }

        const id = genReqId(req);

        const loggerBinding = {
          [requestIdLogLabel]: id
        };

        const loggerOpts = {
          level: context.logLevel
        };

        if (context.logSerializers) {
          loggerOpts.serializers = context.logSerializers;
        }
        const childLogger = logger.child(loggerBinding, loggerOpts);
        childLogger[kDisableRequestLogging] = disableRequestLogging;

        const request = new context.Request(id, params, req, query, childLogger, context);
        const reply = new context.Reply(res, request, childLogger);

        if (disableRequestLogging === false) {
          childLogger.info({ req: request }, 'incoming request');
        }

        if (hasLogger === true || context.onResponse !== null) {
          setupResponseListeners(reply);
        }

        if (context.onRequest !== null) {
          hookRunner(
            context.onRequest,
            hookIterator,
            request,
            reply,
            runPreParsing
          );
        } else {
          runPreParsing(null, request, reply);
        }

        if (context.onTimeout !== null) {
          if (!request.raw.socket._meta) {
            request.raw.socket.on('timeout', handleTimeout);
          }
          request.raw.socket._meta = { context, request, reply };
        }
      }
    }

    function handleTimeout () {
      const { context, request, reply } = this._meta;
      hookRunner(
        context.onTimeout,
        hookIterator,
        request,
        reply,
        noop
      );
    }

    function validateMethodAndSchemaBodyOption (method, path, schema) {
      if (supportedMethods$1.indexOf(method) === -1) {
        throw new Error(`${method} method is not supported!`)
      }

      if ((method === 'GET' || method === 'HEAD') && schema && schema.body) {
        throw new Error(`Body validation schema for ${method}:${path} route is not supported!`)
      }
    }

    function validateBodyLimitOption$1 (bodyLimit) {
      if (bodyLimit === undefined) return
      if (!Number.isInteger(bodyLimit) || bodyLimit <= 0) {
        throw new TypeError(`'bodyLimit' option must be an integer > 0. Got '${bodyLimit}'`)
      }
    }

    function runPreParsing (err, request, reply) {
      if (reply.sent === true) return
      if (err != null) {
        reply[kReplyIsError] = true;
        reply.send(err);
        return
      }

      request[kRequestPayloadStream] = request.raw;

      if (request[kRouteContext].preParsing !== null) {
        preParsingHookRunner(request[kRouteContext].preParsing, request, reply, handleRequest);
      } else {
        handleRequest(null, request, reply);
      }
    }

    function preParsingHookRunner (functions, request, reply, cb) {
      let i = 0;

      function next (err, stream) {
        if (reply.sent) {
          return
        }

        if (typeof stream !== 'undefined') {
          request[kRequestPayloadStream] = stream;
        }

        if (err || i === functions.length) {
          cb(err, request, reply);
          return
        }

        const fn = functions[i++];
        let result;
        try {
          result = fn(request, reply, request[kRequestPayloadStream], next);
        } catch (error) {
          next(error);
          return
        }

        if (result && typeof result.then === 'function') {
          result.then(handleResolve, handleReject);
        }
      }

      function handleResolve (stream) {
        next(null, stream);
      }

      function handleReject (err) {
        if (!err) {
          err = new FST_ERR_SEND_UNDEFINED_ERR();
        }

        next(err);
      }

      next(null, request[kRequestPayloadStream]);
    }

    /**
     * Used within the route handler as a `net.Socket.close` event handler.
     * The purpose is to remove a socket from the tracked sockets collection when
     * the socket has naturally timed out.
     */
    function removeTrackedSocket () {
      this.keepAliveConnections.delete(this.socket);
    }

    function noop () { }

    var route = { buildRouting: buildRouting$1, validateBodyLimitOption: validateBodyLimitOption$1 };

    const FindMyWay = findMyWay;

    const Reply$2 = replyExports;
    const Request$2 = requestExports$1;
    const Context = context;
    const {
      kRoutePrefix: kRoutePrefix$2,
      kCanSetNotFoundHandler,
      kFourOhFourLevelInstance,
      kFourOhFourContext: kFourOhFourContext$1,
      kHooks: kHooks$2,
      kErrorHandler: kErrorHandler$1
    } = symbols$2;
    const { lifecycleHooks } = hooks;
    const { buildErrorHandler: buildErrorHandler$1 } = errorHandler;
    const fourOhFourContext = {
      config: {
      },
      onSend: [],
      onError: [],
      errorHandler: buildErrorHandler$1()
    };

    /**
     * Each fastify instance have a:
     * kFourOhFourLevelInstance: point to a fastify instance that has the 404 handler setted
     * kCanSetNotFoundHandler: bool to track if the 404 handler has already been set
     * kFourOhFour: the singleton instance of this 404 module
     * kFourOhFourContext: the context in the reply object where the handler will be executed
     */
    function fourOhFour (options) {
      const { logger, genReqId } = options;

      // 404 router, used for handling encapsulated 404 handlers
      const router = FindMyWay({ onBadUrl: createOnBadUrl(), defaultRoute: fourOhFourFallBack });
      let _onBadUrlHandler = null;

      return { router, setNotFoundHandler, setContext, arrange404 }

      function arrange404 (instance) {
        // Change the pointer of the fastify instance to itself, so register + prefix can add new 404 handler
        instance[kFourOhFourLevelInstance] = instance;
        instance[kCanSetNotFoundHandler] = true;
        // we need to bind instance for the context
        router.onBadUrl = router.onBadUrl.bind(instance);
      }

      function basic404 (request, reply) {
        const { url, method } = request.raw;
        const message = `Route ${method}:${url} not found`;
        request.log.info(message);
        reply.code(404).send({
          message,
          error: 'Not Found',
          statusCode: 404
        });
      }

      function createOnBadUrl () {
        return function onBadUrl (path, req, res) {
          const id = genReqId(req);
          const childLogger = logger.child({ reqId: id });
          const fourOhFourContext = this[kFourOhFourLevelInstance][kFourOhFourContext$1];
          const request = new Request$2(id, null, req, null, childLogger, fourOhFourContext);
          const reply = new Reply$2(res, request, childLogger);

          _onBadUrlHandler(request, reply);
        }
      }

      function setContext (instance, context) {
        const _404Context = Object.assign({}, instance[kFourOhFourContext$1]);
        _404Context.onSend = context.onSend;
        context[kFourOhFourContext$1] = _404Context;
      }

      function setNotFoundHandler (opts, handler, avvio, routeHandler) {
        // First initialization of the fastify root instance
        if (this[kCanSetNotFoundHandler] === undefined) {
          this[kCanSetNotFoundHandler] = true;
        }
        if (this[kFourOhFourContext$1] === undefined) {
          this[kFourOhFourContext$1] = null;
        }

        const _fastify = this;
        const prefix = this[kRoutePrefix$2] || '/';

        if (this[kCanSetNotFoundHandler] === false) {
          throw new Error(`Not found handler already set for Fastify instance with prefix: '${prefix}'`)
        }

        if (typeof opts === 'object') {
          if (opts.preHandler) {
            if (Array.isArray(opts.preHandler)) {
              opts.preHandler = opts.preHandler.map(hook => hook.bind(_fastify));
            } else {
              opts.preHandler = opts.preHandler.bind(_fastify);
            }
          }

          if (opts.preValidation) {
            if (Array.isArray(opts.preValidation)) {
              opts.preValidation = opts.preValidation.map(hook => hook.bind(_fastify));
            } else {
              opts.preValidation = opts.preValidation.bind(_fastify);
            }
          }
        }

        if (typeof opts === 'function') {
          handler = opts;
          opts = undefined;
        }
        opts = opts || {};

        if (handler) {
          this[kFourOhFourLevelInstance][kCanSetNotFoundHandler] = false;
          handler = handler.bind(this);
          // update onBadUrl handler
          _onBadUrlHandler = handler;
        } else {
          handler = basic404;
          // update onBadUrl handler
          _onBadUrlHandler = basic404;
        }

        this.after((notHandledErr, done) => {
          _setNotFoundHandler.call(this, prefix, opts, handler, avvio, routeHandler);
          done(notHandledErr);
        });
      }

      function _setNotFoundHandler (prefix, opts, handler, avvio, routeHandler) {
        const context = new Context({
          schema: opts.schema,
          handler,
          config: opts.config || {},
          server: this
        });

        avvio.once('preReady', () => {
          const context = this[kFourOhFourContext$1];
          for (const hook of lifecycleHooks) {
            const toSet = this[kHooks$2][hook]
              .concat(opts[hook] || [])
              .map(h => h.bind(this));
            context[hook] = toSet.length ? toSet : null;
          }
          context.errorHandler = opts.errorHandler ? buildErrorHandler$1(this[kErrorHandler$1], opts.errorHandler) : this[kErrorHandler$1];
        });

        if (this[kFourOhFourContext$1] !== null && prefix === '/') {
          Object.assign(this[kFourOhFourContext$1], context); // Replace the default 404 handler
          return
        }

        this[kFourOhFourLevelInstance][kFourOhFourContext$1] = context;

        router.all(prefix + (prefix.endsWith('/') ? '*' : '/*'), routeHandler, context);
        router.all(prefix, routeHandler, context);
      }

      function fourOhFourFallBack (req, res) {
        // if this happen, we have a very bad bug
        // we might want to do some hard debugging
        // here, let's print out as much info as
        // we can
        const id = genReqId(req);
        const childLogger = logger.child({ reqId: id });

        childLogger.info({ req }, 'incoming request');

        const request = new Request$2(id, null, req, null, childLogger, fourOhFourContext);
        const reply = new Reply$2(res, request, childLogger);

        request.log.warn('the default handler for 404 did not catch this, this is likely a fastify bug, please report it');
        request.log.warn(router.prettyPrint());
        reply.code(404).send(new Error('Not Found'));
      }
    }

    var fourOhFour_1 = fourOhFour;

    var initialConfigValidationExports = {};
    var initialConfigValidation = {
      get exports(){ return initialConfigValidationExports; },
      set exports(v){ initialConfigValidationExports = v; },
    };

    var configValidatorExports$1 = {};
    var configValidator$1 = {
      get exports(){ return configValidatorExports$1; },
      set exports(v){ configValidatorExports$1 = v; },
    };

    configValidator$1.exports = validate10;
    configValidatorExports$1.default = validate10;
    const schema11 = {"type":"object","additionalProperties":false,"properties":{"connectionTimeout":{"type":"integer","default":0},"keepAliveTimeout":{"type":"integer","default":72000},"forceCloseConnections":{"oneOf":[{"type":"string","pattern":"idle"},{"type":"boolean"}]},"maxRequestsPerSocket":{"type":"integer","default":0,"nullable":true},"requestTimeout":{"type":"integer","default":0},"bodyLimit":{"type":"integer","default":1048576},"caseSensitive":{"type":"boolean","default":true},"allowUnsafeRegex":{"type":"boolean","default":false},"http2":{"type":"boolean"},"https":{"if":{"not":{"oneOf":[{"type":"boolean"},{"type":"null"},{"type":"object","additionalProperties":false,"required":["allowHTTP1"],"properties":{"allowHTTP1":{"type":"boolean"}}}]}},"then":{"setDefaultValue":true}},"ignoreTrailingSlash":{"type":"boolean","default":false},"ignoreDuplicateSlashes":{"type":"boolean","default":false},"disableRequestLogging":{"type":"boolean","default":false},"jsonShorthand":{"type":"boolean","default":true},"maxParamLength":{"type":"integer","default":100},"onProtoPoisoning":{"type":"string","default":"error"},"onConstructorPoisoning":{"type":"string","default":"error"},"pluginTimeout":{"type":"integer","default":10000},"requestIdHeader":{"anyOf":[{"enum":[false]},{"type":"string"}],"default":"request-id"},"requestIdLogLabel":{"type":"string","default":"reqId"},"http2SessionTimeout":{"type":"integer","default":72000},"exposeHeadRoutes":{"type":"boolean","default":true},"versioning":{"type":"object","additionalProperties":true,"required":["storage","deriveVersion"],"properties":{"storage":{},"deriveVersion":{}}},"constraints":{"type":"object","additionalProperties":{"type":"object","required":["name","storage","validate","deriveConstraint"],"additionalProperties":true,"properties":{"name":{"type":"string"},"storage":{},"validate":{},"deriveConstraint":{}}}}}};
    const func2 = Object.prototype.hasOwnProperty;
    const pattern0 = new RegExp("idle", "u");

    function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
    let vErrors = null;
    let errors = 0;
    if(errors === 0){
    if(data && typeof data == "object" && !Array.isArray(data)){
    if(data.connectionTimeout === undefined){
    data.connectionTimeout = 0;
    }
    if(data.keepAliveTimeout === undefined){
    data.keepAliveTimeout = 72000;
    }
    if(data.maxRequestsPerSocket === undefined){
    data.maxRequestsPerSocket = 0;
    }
    if(data.requestTimeout === undefined){
    data.requestTimeout = 0;
    }
    if(data.bodyLimit === undefined){
    data.bodyLimit = 1048576;
    }
    if(data.caseSensitive === undefined){
    data.caseSensitive = true;
    }
    if(data.allowUnsafeRegex === undefined){
    data.allowUnsafeRegex = false;
    }
    if(data.ignoreTrailingSlash === undefined){
    data.ignoreTrailingSlash = false;
    }
    if(data.ignoreDuplicateSlashes === undefined){
    data.ignoreDuplicateSlashes = false;
    }
    if(data.disableRequestLogging === undefined){
    data.disableRequestLogging = false;
    }
    if(data.jsonShorthand === undefined){
    data.jsonShorthand = true;
    }
    if(data.maxParamLength === undefined){
    data.maxParamLength = 100;
    }
    if(data.onProtoPoisoning === undefined){
    data.onProtoPoisoning = "error";
    }
    if(data.onConstructorPoisoning === undefined){
    data.onConstructorPoisoning = "error";
    }
    if(data.pluginTimeout === undefined){
    data.pluginTimeout = 10000;
    }
    if(data.requestIdHeader === undefined){
    data.requestIdHeader = "request-id";
    }
    if(data.requestIdLogLabel === undefined){
    data.requestIdLogLabel = "reqId";
    }
    if(data.http2SessionTimeout === undefined){
    data.http2SessionTimeout = 72000;
    }
    if(data.exposeHeadRoutes === undefined){
    data.exposeHeadRoutes = true;
    }
    const _errs1 = errors;
    for(const key0 in data){
    if(!(func2.call(schema11.properties, key0))){
    delete data[key0];
    }
    }
    if(_errs1 === errors){
    let data0 = data.connectionTimeout;
    const _errs2 = errors;
    if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){
    let dataType0 = typeof data0;
    let coerced0 = undefined;
    if(!(coerced0 !== undefined)){
    if(dataType0 === "boolean" || data0 === null
                  || (dataType0 === "string" && data0 && data0 == +data0 && !(data0 % 1))){
    coerced0 = +data0;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/connectionTimeout",schemaPath:"#/properties/connectionTimeout/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced0 !== undefined){
    data0 = coerced0;
    if(data !== undefined){
    data["connectionTimeout"] = coerced0;
    }
    }
    }
    var valid0 = _errs2 === errors;
    if(valid0){
    let data1 = data.keepAliveTimeout;
    const _errs4 = errors;
    if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){
    let dataType1 = typeof data1;
    let coerced1 = undefined;
    if(!(coerced1 !== undefined)){
    if(dataType1 === "boolean" || data1 === null
                  || (dataType1 === "string" && data1 && data1 == +data1 && !(data1 % 1))){
    coerced1 = +data1;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/keepAliveTimeout",schemaPath:"#/properties/keepAliveTimeout/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced1 !== undefined){
    data1 = coerced1;
    if(data !== undefined){
    data["keepAliveTimeout"] = coerced1;
    }
    }
    }
    var valid0 = _errs4 === errors;
    if(valid0){
    if(data.forceCloseConnections !== undefined){
    let data2 = data.forceCloseConnections;
    const _errs6 = errors;
    const _errs7 = errors;
    let valid1 = false;
    let passing0 = null;
    const _errs8 = errors;
    if(typeof data2 !== "string"){
    let dataType2 = typeof data2;
    let coerced2 = undefined;
    if(!(coerced2 !== undefined)){
    if(dataType2 == "number" || dataType2 == "boolean"){
    coerced2 = "" + data2;
    }
    else if(data2 === null){
    coerced2 = "";
    }
    else {
    const err0 = {instancePath:instancePath+"/forceCloseConnections",schemaPath:"#/properties/forceCloseConnections/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
    if(vErrors === null){
    vErrors = [err0];
    }
    else {
    vErrors.push(err0);
    }
    errors++;
    }
    }
    if(coerced2 !== undefined){
    data2 = coerced2;
    if(data !== undefined){
    data["forceCloseConnections"] = coerced2;
    }
    }
    }
    if(errors === _errs8){
    if(typeof data2 === "string"){
    if(!pattern0.test(data2)){
    const err1 = {instancePath:instancePath+"/forceCloseConnections",schemaPath:"#/properties/forceCloseConnections/oneOf/0/pattern",keyword:"pattern",params:{pattern: "idle"},message:"must match pattern \""+"idle"+"\""};
    if(vErrors === null){
    vErrors = [err1];
    }
    else {
    vErrors.push(err1);
    }
    errors++;
    }
    }
    }
    var _valid0 = _errs8 === errors;
    if(_valid0){
    valid1 = true;
    passing0 = 0;
    }
    const _errs10 = errors;
    if(typeof data2 !== "boolean"){
    let coerced3 = undefined;
    if(!(coerced3 !== undefined)){
    if(data2 === "false" || data2 === 0 || data2 === null){
    coerced3 = false;
    }
    else if(data2 === "true" || data2 === 1){
    coerced3 = true;
    }
    else {
    const err2 = {instancePath:instancePath+"/forceCloseConnections",schemaPath:"#/properties/forceCloseConnections/oneOf/1/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
    if(vErrors === null){
    vErrors = [err2];
    }
    else {
    vErrors.push(err2);
    }
    errors++;
    }
    }
    if(coerced3 !== undefined){
    data2 = coerced3;
    if(data !== undefined){
    data["forceCloseConnections"] = coerced3;
    }
    }
    }
    var _valid0 = _errs10 === errors;
    if(_valid0 && valid1){
    valid1 = false;
    passing0 = [passing0, 1];
    }
    else {
    if(_valid0){
    valid1 = true;
    passing0 = 1;
    }
    }
    if(!valid1){
    const err3 = {instancePath:instancePath+"/forceCloseConnections",schemaPath:"#/properties/forceCloseConnections/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};
    if(vErrors === null){
    vErrors = [err3];
    }
    else {
    vErrors.push(err3);
    }
    errors++;
    validate10.errors = vErrors;
    return false;
    }
    else {
    errors = _errs7;
    if(vErrors !== null){
    if(_errs7){
    vErrors.length = _errs7;
    }
    else {
    vErrors = null;
    }
    }
    }
    var valid0 = _errs6 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    let data3 = data.maxRequestsPerSocket;
    const _errs12 = errors;
    if((!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))) && (data3 !== null)){
    let dataType4 = typeof data3;
    let coerced4 = undefined;
    if(!(coerced4 !== undefined)){
    if(dataType4 === "boolean" || data3 === null
                  || (dataType4 === "string" && data3 && data3 == +data3 && !(data3 % 1))){
    coerced4 = +data3;
    }
    else if(data3 === "" || data3 === 0 || data3 === false){
    coerced4 = null;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/maxRequestsPerSocket",schemaPath:"#/properties/maxRequestsPerSocket/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced4 !== undefined){
    data3 = coerced4;
    if(data !== undefined){
    data["maxRequestsPerSocket"] = coerced4;
    }
    }
    }
    var valid0 = _errs12 === errors;
    if(valid0){
    let data4 = data.requestTimeout;
    const _errs15 = errors;
    if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){
    let dataType5 = typeof data4;
    let coerced5 = undefined;
    if(!(coerced5 !== undefined)){
    if(dataType5 === "boolean" || data4 === null
                  || (dataType5 === "string" && data4 && data4 == +data4 && !(data4 % 1))){
    coerced5 = +data4;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/requestTimeout",schemaPath:"#/properties/requestTimeout/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced5 !== undefined){
    data4 = coerced5;
    if(data !== undefined){
    data["requestTimeout"] = coerced5;
    }
    }
    }
    var valid0 = _errs15 === errors;
    if(valid0){
    let data5 = data.bodyLimit;
    const _errs17 = errors;
    if(!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))){
    let dataType6 = typeof data5;
    let coerced6 = undefined;
    if(!(coerced6 !== undefined)){
    if(dataType6 === "boolean" || data5 === null
                  || (dataType6 === "string" && data5 && data5 == +data5 && !(data5 % 1))){
    coerced6 = +data5;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/bodyLimit",schemaPath:"#/properties/bodyLimit/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced6 !== undefined){
    data5 = coerced6;
    if(data !== undefined){
    data["bodyLimit"] = coerced6;
    }
    }
    }
    var valid0 = _errs17 === errors;
    if(valid0){
    let data6 = data.caseSensitive;
    const _errs19 = errors;
    if(typeof data6 !== "boolean"){
    let coerced7 = undefined;
    if(!(coerced7 !== undefined)){
    if(data6 === "false" || data6 === 0 || data6 === null){
    coerced7 = false;
    }
    else if(data6 === "true" || data6 === 1){
    coerced7 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/caseSensitive",schemaPath:"#/properties/caseSensitive/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced7 !== undefined){
    data6 = coerced7;
    if(data !== undefined){
    data["caseSensitive"] = coerced7;
    }
    }
    }
    var valid0 = _errs19 === errors;
    if(valid0){
    let data7 = data.allowUnsafeRegex;
    const _errs21 = errors;
    if(typeof data7 !== "boolean"){
    let coerced8 = undefined;
    if(!(coerced8 !== undefined)){
    if(data7 === "false" || data7 === 0 || data7 === null){
    coerced8 = false;
    }
    else if(data7 === "true" || data7 === 1){
    coerced8 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/allowUnsafeRegex",schemaPath:"#/properties/allowUnsafeRegex/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced8 !== undefined){
    data7 = coerced8;
    if(data !== undefined){
    data["allowUnsafeRegex"] = coerced8;
    }
    }
    }
    var valid0 = _errs21 === errors;
    if(valid0){
    if(data.http2 !== undefined){
    let data8 = data.http2;
    const _errs23 = errors;
    if(typeof data8 !== "boolean"){
    let coerced9 = undefined;
    if(!(coerced9 !== undefined)){
    if(data8 === "false" || data8 === 0 || data8 === null){
    coerced9 = false;
    }
    else if(data8 === "true" || data8 === 1){
    coerced9 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/http2",schemaPath:"#/properties/http2/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced9 !== undefined){
    data8 = coerced9;
    if(data !== undefined){
    data["http2"] = coerced9;
    }
    }
    }
    var valid0 = _errs23 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.https !== undefined){
    let data9 = data.https;
    const _errs25 = errors;
    const _errs26 = errors;
    let valid2 = true;
    const _errs27 = errors;
    const _errs28 = errors;
    const _errs29 = errors;
    const _errs30 = errors;
    let valid4 = false;
    const _errs31 = errors;
    if(typeof data9 !== "boolean"){
    let coerced10 = undefined;
    if(!(coerced10 !== undefined)){
    if(data9 === "false" || data9 === 0 || data9 === null){
    coerced10 = false;
    }
    else if(data9 === "true" || data9 === 1){
    coerced10 = true;
    }
    else {
    const err4 = {};
    if(vErrors === null){
    vErrors = [err4];
    }
    else {
    vErrors.push(err4);
    }
    errors++;
    }
    }
    if(coerced10 !== undefined){
    data9 = coerced10;
    if(data !== undefined){
    data["https"] = coerced10;
    }
    }
    }
    var _valid2 = _errs31 === errors;
    if(_valid2){
    valid4 = true;
    }
    const _errs33 = errors;
    if(data9 !== null){
    let coerced11 = undefined;
    if(!(coerced11 !== undefined)){
    if(data9 === "" || data9 === 0 || data9 === false){
    coerced11 = null;
    }
    else {
    const err5 = {};
    if(vErrors === null){
    vErrors = [err5];
    }
    else {
    vErrors.push(err5);
    }
    errors++;
    }
    }
    if(coerced11 !== undefined){
    data9 = coerced11;
    if(data !== undefined){
    data["https"] = coerced11;
    }
    }
    }
    var _valid2 = _errs33 === errors;
    if(_valid2 && valid4){
    valid4 = false;
    }
    else {
    if(_valid2){
    valid4 = true;
    }
    const _errs35 = errors;
    if(errors === _errs35){
    if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
    if((data9.allowHTTP1 === undefined) && ("allowHTTP1")){
    const err6 = {};
    if(vErrors === null){
    vErrors = [err6];
    }
    else {
    vErrors.push(err6);
    }
    errors++;
    }
    else {
    const _errs37 = errors;
    for(const key1 in data9){
    if(!(key1 === "allowHTTP1")){
    delete data9[key1];
    }
    }
    if(_errs37 === errors){
    if(data9.allowHTTP1 !== undefined){
    let data10 = data9.allowHTTP1;
    if(typeof data10 !== "boolean"){
    let coerced12 = undefined;
    if(!(coerced12 !== undefined)){
    if(data10 === "false" || data10 === 0 || data10 === null){
    coerced12 = false;
    }
    else if(data10 === "true" || data10 === 1){
    coerced12 = true;
    }
    else {
    const err7 = {};
    if(vErrors === null){
    vErrors = [err7];
    }
    else {
    vErrors.push(err7);
    }
    errors++;
    }
    }
    if(coerced12 !== undefined){
    data10 = coerced12;
    if(data9 !== undefined){
    data9["allowHTTP1"] = coerced12;
    }
    }
    }
    }
    }
    }
    }
    else {
    const err8 = {};
    if(vErrors === null){
    vErrors = [err8];
    }
    else {
    vErrors.push(err8);
    }
    errors++;
    }
    }
    var _valid2 = _errs35 === errors;
    if(_valid2 && valid4){
    valid4 = false;
    }
    else {
    if(_valid2){
    valid4 = true;
    }
    }
    }
    if(!valid4){
    const err9 = {};
    if(vErrors === null){
    vErrors = [err9];
    }
    else {
    vErrors.push(err9);
    }
    errors++;
    }
    else {
    errors = _errs30;
    if(vErrors !== null){
    if(_errs30){
    vErrors.length = _errs30;
    }
    else {
    vErrors = null;
    }
    }
    }
    var valid3 = _errs29 === errors;
    if(valid3){
    const err10 = {};
    if(vErrors === null){
    vErrors = [err10];
    }
    else {
    vErrors.push(err10);
    }
    errors++;
    }
    else {
    errors = _errs28;
    if(vErrors !== null){
    if(_errs28){
    vErrors.length = _errs28;
    }
    else {
    vErrors = null;
    }
    }
    }
    var _valid1 = _errs27 === errors;
    errors = _errs26;
    if(vErrors !== null){
    if(_errs26){
    vErrors.length = _errs26;
    }
    else {
    vErrors = null;
    }
    }
    if(_valid1){
    const _errs40 = errors;
    data["https"] = true;
    var _valid1 = _errs40 === errors;
    valid2 = _valid1;
    }
    if(!valid2){
    const err11 = {instancePath:instancePath+"/https",schemaPath:"#/properties/https/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
    if(vErrors === null){
    vErrors = [err11];
    }
    else {
    vErrors.push(err11);
    }
    errors++;
    validate10.errors = vErrors;
    return false;
    }
    var valid0 = _errs25 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    let data11 = data.ignoreTrailingSlash;
    const _errs41 = errors;
    if(typeof data11 !== "boolean"){
    let coerced13 = undefined;
    if(!(coerced13 !== undefined)){
    if(data11 === "false" || data11 === 0 || data11 === null){
    coerced13 = false;
    }
    else if(data11 === "true" || data11 === 1){
    coerced13 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/ignoreTrailingSlash",schemaPath:"#/properties/ignoreTrailingSlash/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced13 !== undefined){
    data11 = coerced13;
    if(data !== undefined){
    data["ignoreTrailingSlash"] = coerced13;
    }
    }
    }
    var valid0 = _errs41 === errors;
    if(valid0){
    let data12 = data.ignoreDuplicateSlashes;
    const _errs43 = errors;
    if(typeof data12 !== "boolean"){
    let coerced14 = undefined;
    if(!(coerced14 !== undefined)){
    if(data12 === "false" || data12 === 0 || data12 === null){
    coerced14 = false;
    }
    else if(data12 === "true" || data12 === 1){
    coerced14 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/ignoreDuplicateSlashes",schemaPath:"#/properties/ignoreDuplicateSlashes/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced14 !== undefined){
    data12 = coerced14;
    if(data !== undefined){
    data["ignoreDuplicateSlashes"] = coerced14;
    }
    }
    }
    var valid0 = _errs43 === errors;
    if(valid0){
    let data13 = data.disableRequestLogging;
    const _errs45 = errors;
    if(typeof data13 !== "boolean"){
    let coerced15 = undefined;
    if(!(coerced15 !== undefined)){
    if(data13 === "false" || data13 === 0 || data13 === null){
    coerced15 = false;
    }
    else if(data13 === "true" || data13 === 1){
    coerced15 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/disableRequestLogging",schemaPath:"#/properties/disableRequestLogging/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced15 !== undefined){
    data13 = coerced15;
    if(data !== undefined){
    data["disableRequestLogging"] = coerced15;
    }
    }
    }
    var valid0 = _errs45 === errors;
    if(valid0){
    let data14 = data.jsonShorthand;
    const _errs47 = errors;
    if(typeof data14 !== "boolean"){
    let coerced16 = undefined;
    if(!(coerced16 !== undefined)){
    if(data14 === "false" || data14 === 0 || data14 === null){
    coerced16 = false;
    }
    else if(data14 === "true" || data14 === 1){
    coerced16 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/jsonShorthand",schemaPath:"#/properties/jsonShorthand/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced16 !== undefined){
    data14 = coerced16;
    if(data !== undefined){
    data["jsonShorthand"] = coerced16;
    }
    }
    }
    var valid0 = _errs47 === errors;
    if(valid0){
    let data15 = data.maxParamLength;
    const _errs49 = errors;
    if(!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))){
    let dataType17 = typeof data15;
    let coerced17 = undefined;
    if(!(coerced17 !== undefined)){
    if(dataType17 === "boolean" || data15 === null
                  || (dataType17 === "string" && data15 && data15 == +data15 && !(data15 % 1))){
    coerced17 = +data15;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/maxParamLength",schemaPath:"#/properties/maxParamLength/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced17 !== undefined){
    data15 = coerced17;
    if(data !== undefined){
    data["maxParamLength"] = coerced17;
    }
    }
    }
    var valid0 = _errs49 === errors;
    if(valid0){
    let data16 = data.onProtoPoisoning;
    const _errs51 = errors;
    if(typeof data16 !== "string"){
    let dataType18 = typeof data16;
    let coerced18 = undefined;
    if(!(coerced18 !== undefined)){
    if(dataType18 == "number" || dataType18 == "boolean"){
    coerced18 = "" + data16;
    }
    else if(data16 === null){
    coerced18 = "";
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/onProtoPoisoning",schemaPath:"#/properties/onProtoPoisoning/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    if(coerced18 !== undefined){
    data16 = coerced18;
    if(data !== undefined){
    data["onProtoPoisoning"] = coerced18;
    }
    }
    }
    var valid0 = _errs51 === errors;
    if(valid0){
    let data17 = data.onConstructorPoisoning;
    const _errs53 = errors;
    if(typeof data17 !== "string"){
    let dataType19 = typeof data17;
    let coerced19 = undefined;
    if(!(coerced19 !== undefined)){
    if(dataType19 == "number" || dataType19 == "boolean"){
    coerced19 = "" + data17;
    }
    else if(data17 === null){
    coerced19 = "";
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/onConstructorPoisoning",schemaPath:"#/properties/onConstructorPoisoning/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    if(coerced19 !== undefined){
    data17 = coerced19;
    if(data !== undefined){
    data["onConstructorPoisoning"] = coerced19;
    }
    }
    }
    var valid0 = _errs53 === errors;
    if(valid0){
    let data18 = data.pluginTimeout;
    const _errs55 = errors;
    if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){
    let dataType20 = typeof data18;
    let coerced20 = undefined;
    if(!(coerced20 !== undefined)){
    if(dataType20 === "boolean" || data18 === null
                  || (dataType20 === "string" && data18 && data18 == +data18 && !(data18 % 1))){
    coerced20 = +data18;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/pluginTimeout",schemaPath:"#/properties/pluginTimeout/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced20 !== undefined){
    data18 = coerced20;
    if(data !== undefined){
    data["pluginTimeout"] = coerced20;
    }
    }
    }
    var valid0 = _errs55 === errors;
    if(valid0){
    let data19 = data.requestIdHeader;
    const _errs57 = errors;
    const _errs58 = errors;
    let valid6 = false;
    const _errs59 = errors;
    if(!(data19 === false)){
    const err12 = {instancePath:instancePath+"/requestIdHeader",schemaPath:"#/properties/requestIdHeader/anyOf/0/enum",keyword:"enum",params:{allowedValues: schema11.properties.requestIdHeader.anyOf[0].enum},message:"must be equal to one of the allowed values"};
    if(vErrors === null){
    vErrors = [err12];
    }
    else {
    vErrors.push(err12);
    }
    errors++;
    }
    var _valid3 = _errs59 === errors;
    valid6 = valid6 || _valid3;
    if(!valid6){
    const _errs60 = errors;
    if(typeof data19 !== "string"){
    let dataType21 = typeof data19;
    let coerced21 = undefined;
    if(!(coerced21 !== undefined)){
    if(dataType21 == "number" || dataType21 == "boolean"){
    coerced21 = "" + data19;
    }
    else if(data19 === null){
    coerced21 = "";
    }
    else {
    const err13 = {instancePath:instancePath+"/requestIdHeader",schemaPath:"#/properties/requestIdHeader/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
    if(vErrors === null){
    vErrors = [err13];
    }
    else {
    vErrors.push(err13);
    }
    errors++;
    }
    }
    if(coerced21 !== undefined){
    data19 = coerced21;
    if(data !== undefined){
    data["requestIdHeader"] = coerced21;
    }
    }
    }
    var _valid3 = _errs60 === errors;
    valid6 = valid6 || _valid3;
    }
    if(!valid6){
    const err14 = {instancePath:instancePath+"/requestIdHeader",schemaPath:"#/properties/requestIdHeader/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
    if(vErrors === null){
    vErrors = [err14];
    }
    else {
    vErrors.push(err14);
    }
    errors++;
    validate10.errors = vErrors;
    return false;
    }
    else {
    errors = _errs58;
    if(vErrors !== null){
    if(_errs58){
    vErrors.length = _errs58;
    }
    else {
    vErrors = null;
    }
    }
    }
    var valid0 = _errs57 === errors;
    if(valid0){
    let data20 = data.requestIdLogLabel;
    const _errs62 = errors;
    if(typeof data20 !== "string"){
    let dataType22 = typeof data20;
    let coerced22 = undefined;
    if(!(coerced22 !== undefined)){
    if(dataType22 == "number" || dataType22 == "boolean"){
    coerced22 = "" + data20;
    }
    else if(data20 === null){
    coerced22 = "";
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/requestIdLogLabel",schemaPath:"#/properties/requestIdLogLabel/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    if(coerced22 !== undefined){
    data20 = coerced22;
    if(data !== undefined){
    data["requestIdLogLabel"] = coerced22;
    }
    }
    }
    var valid0 = _errs62 === errors;
    if(valid0){
    let data21 = data.http2SessionTimeout;
    const _errs64 = errors;
    if(!(((typeof data21 == "number") && (!(data21 % 1) && !isNaN(data21))) && (isFinite(data21)))){
    let dataType23 = typeof data21;
    let coerced23 = undefined;
    if(!(coerced23 !== undefined)){
    if(dataType23 === "boolean" || data21 === null
                  || (dataType23 === "string" && data21 && data21 == +data21 && !(data21 % 1))){
    coerced23 = +data21;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/http2SessionTimeout",schemaPath:"#/properties/http2SessionTimeout/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
    return false;
    }
    }
    if(coerced23 !== undefined){
    data21 = coerced23;
    if(data !== undefined){
    data["http2SessionTimeout"] = coerced23;
    }
    }
    }
    var valid0 = _errs64 === errors;
    if(valid0){
    let data22 = data.exposeHeadRoutes;
    const _errs66 = errors;
    if(typeof data22 !== "boolean"){
    let coerced24 = undefined;
    if(!(coerced24 !== undefined)){
    if(data22 === "false" || data22 === 0 || data22 === null){
    coerced24 = false;
    }
    else if(data22 === "true" || data22 === 1){
    coerced24 = true;
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/exposeHeadRoutes",schemaPath:"#/properties/exposeHeadRoutes/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    return false;
    }
    }
    if(coerced24 !== undefined){
    data22 = coerced24;
    if(data !== undefined){
    data["exposeHeadRoutes"] = coerced24;
    }
    }
    }
    var valid0 = _errs66 === errors;
    if(valid0){
    if(data.versioning !== undefined){
    let data23 = data.versioning;
    const _errs68 = errors;
    if(errors === _errs68){
    if(data23 && typeof data23 == "object" && !Array.isArray(data23)){
    let missing1;
    if(((data23.storage === undefined) && (missing1 = "storage")) || ((data23.deriveVersion === undefined) && (missing1 = "deriveVersion"))){
    validate10.errors = [{instancePath:instancePath+"/versioning",schemaPath:"#/properties/versioning/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
    return false;
    }
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/versioning",schemaPath:"#/properties/versioning/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid0 = _errs68 === errors;
    }
    else {
    var valid0 = true;
    }
    if(valid0){
    if(data.constraints !== undefined){
    let data24 = data.constraints;
    const _errs71 = errors;
    if(errors === _errs71){
    if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
    for(const key2 in data24){
    let data25 = data24[key2];
    const _errs74 = errors;
    if(errors === _errs74){
    if(data25 && typeof data25 == "object" && !Array.isArray(data25)){
    let missing2;
    if(((((data25.name === undefined) && (missing2 = "name")) || ((data25.storage === undefined) && (missing2 = "storage"))) || ((data25.validate === undefined) && (missing2 = "validate"))) || ((data25.deriveConstraint === undefined) && (missing2 = "deriveConstraint"))){
    validate10.errors = [{instancePath:instancePath+"/constraints/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/constraints/additionalProperties/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
    return false;
    }
    else {
    if(data25.name !== undefined){
    let data26 = data25.name;
    if(typeof data26 !== "string"){
    let dataType25 = typeof data26;
    let coerced25 = undefined;
    if(!(coerced25 !== undefined)){
    if(dataType25 == "number" || dataType25 == "boolean"){
    coerced25 = "" + data26;
    }
    else if(data26 === null){
    coerced25 = "";
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/constraints/" + key2.replace(/~/g, "~0").replace(/\//g, "~1")+"/name",schemaPath:"#/properties/constraints/additionalProperties/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    return false;
    }
    }
    if(coerced25 !== undefined){
    data26 = coerced25;
    if(data25 !== undefined){
    data25["name"] = coerced25;
    }
    }
    }
    }
    }
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/constraints/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/constraints/additionalProperties/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid7 = _errs74 === errors;
    if(!valid7){
    break;
    }
    }
    }
    else {
    validate10.errors = [{instancePath:instancePath+"/constraints",schemaPath:"#/properties/constraints/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    var valid0 = _errs71 === errors;
    }
    else {
    var valid0 = true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    else {
    validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    return false;
    }
    }
    validate10.errors = vErrors;
    return errors === 0;
    }


    configValidatorExports$1.defaultInitOptions = {"connectionTimeout":0,"keepAliveTimeout":72000,"maxRequestsPerSocket":0,"requestTimeout":0,"bodyLimit":1048576,"caseSensitive":true,"allowUnsafeRegex":false,"disableRequestLogging":false,"jsonShorthand":true,"ignoreTrailingSlash":false,"ignoreDuplicateSlashes":false,"maxParamLength":100,"onProtoPoisoning":"error","onConstructorPoisoning":"error","pluginTimeout":10000,"requestIdHeader":"request-id","requestIdLogLabel":"reqId","http2SessionTimeout":72000,"exposeHeadRoutes":true};

    const validate$1 = configValidatorExports$1;
    const deepClone = rfdc_1({ circles: true, proto: false });
    const { FST_ERR_INIT_OPTS_INVALID } = errorsExports;

    function validateInitialConfig (options) {
      const opts = deepClone(options);

      if (!validate$1(opts)) {
        const error = new FST_ERR_INIT_OPTS_INVALID(JSON.stringify(validate$1.errors.map(e => e.message)));
        error.errors = validate$1.errors;
        throw error
      }

      return deepFreezeObject(opts)
    }

    function deepFreezeObject (object) {
      const properties = Object.getOwnPropertyNames(object);

      for (const name of properties) {
        const value = object[name];

        if (ArrayBuffer.isView(value) && !(value instanceof DataView)) {
          continue
        }

        object[name] = value && typeof value === 'object' ? deepFreezeObject(value) : value;
      }

      return Object.freeze(object)
    }

    initialConfigValidation.exports = validateInitialConfig;
    initialConfigValidationExports.defaultInitOptions = validate$1.defaultInitOptions;
    initialConfigValidationExports.utils = { deepFreezeObject };

    const {
      kAvvioBoot: kAvvioBoot$1,
      kChildren: kChildren$1,
      kRoutePrefix: kRoutePrefix$1,
      kLogLevel: kLogLevel$1,
      kLogSerializers: kLogSerializers$1,
      kHooks: kHooks$1,
      kSchemaController: kSchemaController$1,
      kContentTypeParser: kContentTypeParser$1,
      kReply: kReply$1,
      kRequest: kRequest$1,
      kFourOhFour: kFourOhFour$1,
      kPluginNameChain: kPluginNameChain$1
    } = symbols$2;

    const Reply$1 = replyExports;
    const Request$1 = requestExports$1;
    const SchemaController$1 = schemaController;
    const ContentTypeParser$1 = contentTypeParserExports;
    const { buildHooks } = hooks;
    const pluginUtils$1 = pluginUtilsExports;

    // Function that runs the encapsulation magic.
    // Everything that need to be encapsulated must be handled in this function.
    var pluginOverride = function override (old, fn, opts) {
      const shouldSkipOverride = pluginUtils$1.registerPlugin.call(old, fn);

      if (shouldSkipOverride) {
        // after every plugin registration we will enter a new name
        old[kPluginNameChain$1].push(pluginUtils$1.getDisplayName(fn));
        return old
      }

      const instance = Object.create(old);
      old[kChildren$1].push(instance);
      instance.ready = old[kAvvioBoot$1].bind(instance);
      instance[kChildren$1] = [];

      instance[kReply$1] = Reply$1.buildReply(instance[kReply$1]);
      instance[kRequest$1] = Request$1.buildRequest(instance[kRequest$1]);

      instance[kContentTypeParser$1] = ContentTypeParser$1.helpers.buildContentTypeParser(instance[kContentTypeParser$1]);
      instance[kHooks$1] = buildHooks(instance[kHooks$1]);
      instance[kRoutePrefix$1] = buildRoutePrefix(instance[kRoutePrefix$1], opts.prefix);
      instance[kLogLevel$1] = opts.logLevel || instance[kLogLevel$1];
      instance[kSchemaController$1] = SchemaController$1.buildSchemaController(old[kSchemaController$1]);
      instance.getSchema = instance[kSchemaController$1].getSchema.bind(instance[kSchemaController$1]);
      instance.getSchemas = instance[kSchemaController$1].getSchemas.bind(instance[kSchemaController$1]);
      instance[pluginUtils$1.registeredPlugins] = Object.create(instance[pluginUtils$1.registeredPlugins]);
      instance[kPluginNameChain$1] = [pluginUtils$1.getPluginName(fn) || pluginUtils$1.getFuncPreview(fn)];

      if (instance[kLogSerializers$1] || opts.logSerializers) {
        instance[kLogSerializers$1] = Object.assign(Object.create(instance[kLogSerializers$1]), opts.logSerializers);
      }

      if (opts.prefix) {
        instance[kFourOhFour$1].arrange404(instance);
      }

      for (const hook of instance[kHooks$1].onRegister) hook.call(this, instance, opts);

      return instance
    };

    function buildRoutePrefix (instancePrefix, pluginPrefix) {
      if (!pluginPrefix) {
        return instancePrefix
      }

      // Ensure that there is a '/' between the prefixes
      if (instancePrefix.endsWith('/') && pluginPrefix[0] === '/') {
        // Remove the extra '/' to avoid: '/first//second'
        pluginPrefix = pluginPrefix.slice(1);
      } else if (pluginPrefix[0] !== '/') {
        pluginPrefix = '/' + pluginPrefix;
      }

      return instancePrefix + pluginPrefix
    }

    var noopSet$1 = function noopSet () {
      return {
        [Symbol.iterator]: function * () {},
        add () {},
        delete () {},
        has () { return true }
      }
    };

    var lightMyRequestExports = {};
    var lightMyRequest$1 = {
      get exports(){ return lightMyRequestExports; },
      set exports(v){ lightMyRequestExports = v; },
    };

    var requestExports = {};
    var request = {
      get exports(){ return requestExports; },
      set exports(v){ requestExports = v; },
    };

    var cookie = {};

    /*!
     * cookie
     * Copyright(c) 2012-2014 Roman Shtylman
     * Copyright(c) 2015 Douglas Christopher Wilson
     * MIT Licensed
     */

    var hasRequiredCookie;

    function requireCookie () {
    	if (hasRequiredCookie) return cookie;
    	hasRequiredCookie = 1;

    	/**
    	 * Module exports.
    	 * @public
    	 */

    	cookie.parse = parse;
    	cookie.serialize = serialize;

    	/**
    	 * Module variables.
    	 * @private
    	 */

    	var __toString = Object.prototype.toString;

    	/**
    	 * RegExp to match field-content in RFC 7230 sec 3.2
    	 *
    	 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
    	 * field-vchar   = VCHAR / obs-text
    	 * obs-text      = %x80-FF
    	 */

    	var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

    	/**
    	 * Parse a cookie header.
    	 *
    	 * Parse the given cookie header string into an object
    	 * The object has the various cookies as keys(names) => values
    	 *
    	 * @param {string} str
    	 * @param {object} [options]
    	 * @return {object}
    	 * @public
    	 */

    	function parse(str, options) {
    	  if (typeof str !== 'string') {
    	    throw new TypeError('argument str must be a string');
    	  }

    	  var obj = {};
    	  var opt = options || {};
    	  var dec = opt.decode || decode;

    	  var index = 0;
    	  while (index < str.length) {
    	    var eqIdx = str.indexOf('=', index);

    	    // no more cookie pairs
    	    if (eqIdx === -1) {
    	      break
    	    }

    	    var endIdx = str.indexOf(';', index);

    	    if (endIdx === -1) {
    	      endIdx = str.length;
    	    } else if (endIdx < eqIdx) {
    	      // backtrack on prior semicolon
    	      index = str.lastIndexOf(';', eqIdx - 1) + 1;
    	      continue
    	    }

    	    var key = str.slice(index, eqIdx).trim();

    	    // only assign once
    	    if (undefined === obj[key]) {
    	      var val = str.slice(eqIdx + 1, endIdx).trim();

    	      // quoted values
    	      if (val.charCodeAt(0) === 0x22) {
    	        val = val.slice(1, -1);
    	      }

    	      obj[key] = tryDecode(val, dec);
    	    }

    	    index = endIdx + 1;
    	  }

    	  return obj;
    	}

    	/**
    	 * Serialize data into a cookie header.
    	 *
    	 * Serialize the a name value pair into a cookie string suitable for
    	 * http headers. An optional options object specified cookie parameters.
    	 *
    	 * serialize('foo', 'bar', { httpOnly: true })
    	 *   => "foo=bar; httpOnly"
    	 *
    	 * @param {string} name
    	 * @param {string} val
    	 * @param {object} [options]
    	 * @return {string}
    	 * @public
    	 */

    	function serialize(name, val, options) {
    	  var opt = options || {};
    	  var enc = opt.encode || encode;

    	  if (typeof enc !== 'function') {
    	    throw new TypeError('option encode is invalid');
    	  }

    	  if (!fieldContentRegExp.test(name)) {
    	    throw new TypeError('argument name is invalid');
    	  }

    	  var value = enc(val);

    	  if (value && !fieldContentRegExp.test(value)) {
    	    throw new TypeError('argument val is invalid');
    	  }

    	  var str = name + '=' + value;

    	  if (null != opt.maxAge) {
    	    var maxAge = opt.maxAge - 0;

    	    if (isNaN(maxAge) || !isFinite(maxAge)) {
    	      throw new TypeError('option maxAge is invalid')
    	    }

    	    str += '; Max-Age=' + Math.floor(maxAge);
    	  }

    	  if (opt.domain) {
    	    if (!fieldContentRegExp.test(opt.domain)) {
    	      throw new TypeError('option domain is invalid');
    	    }

    	    str += '; Domain=' + opt.domain;
    	  }

    	  if (opt.path) {
    	    if (!fieldContentRegExp.test(opt.path)) {
    	      throw new TypeError('option path is invalid');
    	    }

    	    str += '; Path=' + opt.path;
    	  }

    	  if (opt.expires) {
    	    var expires = opt.expires;

    	    if (!isDate(expires) || isNaN(expires.valueOf())) {
    	      throw new TypeError('option expires is invalid');
    	    }

    	    str += '; Expires=' + expires.toUTCString();
    	  }

    	  if (opt.httpOnly) {
    	    str += '; HttpOnly';
    	  }

    	  if (opt.secure) {
    	    str += '; Secure';
    	  }

    	  if (opt.priority) {
    	    var priority = typeof opt.priority === 'string'
    	      ? opt.priority.toLowerCase()
    	      : opt.priority;

    	    switch (priority) {
    	      case 'low':
    	        str += '; Priority=Low';
    	        break
    	      case 'medium':
    	        str += '; Priority=Medium';
    	        break
    	      case 'high':
    	        str += '; Priority=High';
    	        break
    	      default:
    	        throw new TypeError('option priority is invalid')
    	    }
    	  }

    	  if (opt.sameSite) {
    	    var sameSite = typeof opt.sameSite === 'string'
    	      ? opt.sameSite.toLowerCase() : opt.sameSite;

    	    switch (sameSite) {
    	      case true:
    	        str += '; SameSite=Strict';
    	        break;
    	      case 'lax':
    	        str += '; SameSite=Lax';
    	        break;
    	      case 'strict':
    	        str += '; SameSite=Strict';
    	        break;
    	      case 'none':
    	        str += '; SameSite=None';
    	        break;
    	      default:
    	        throw new TypeError('option sameSite is invalid');
    	    }
    	  }

    	  return str;
    	}

    	/**
    	 * URL-decode string value. Optimized to skip native call when no %.
    	 *
    	 * @param {string} str
    	 * @returns {string}
    	 */

    	function decode (str) {
    	  return str.indexOf('%') !== -1
    	    ? decodeURIComponent(str)
    	    : str
    	}

    	/**
    	 * URL-encode value.
    	 *
    	 * @param {string} str
    	 * @returns {string}
    	 */

    	function encode (val) {
    	  return encodeURIComponent(val)
    	}

    	/**
    	 * Determine if value is a Date.
    	 *
    	 * @param {*} val
    	 * @private
    	 */

    	function isDate (val) {
    	  return __toString.call(val) === '[object Date]' ||
    	    val instanceof Date
    	}

    	/**
    	 * Try decoding a string using a decoding function.
    	 *
    	 * @param {string} str
    	 * @param {function} decode
    	 * @private
    	 */

    	function tryDecode(str, decode) {
    	  try {
    	    return decode(str);
    	  } catch (e) {
    	    return str;
    	  }
    	}
    	return cookie;
    }

    var parseURL;
    var hasRequiredParseURL;

    function requireParseURL () {
    	if (hasRequiredParseURL) return parseURL;
    	hasRequiredParseURL = 1;

    	const { URL } = require$$0$6;

    	const BASE_URL = 'http://localhost';

    	/**
    	 * Parse URL
    	 *
    	 * @param {(Object|String)} url
    	 * @param {Object} [query]
    	 * @return {URL}
    	 */
    	parseURL = function parseURL (url, query) {
    	  if ((typeof url === 'string' || Object.prototype.toString.call(url) === '[object String]') && url.startsWith('//')) {
    	    url = BASE_URL + url;
    	  }
    	  const result = typeof url === 'object'
    	    ? Object.assign(new URL(BASE_URL), url)
    	    : new URL(url, BASE_URL);

    	  if (typeof query === 'string') {
    	    query = new URLSearchParams(query);
    	    for (const key of query.keys()) {
    	      result.searchParams.delete(key);
    	      for (const value of query.getAll(key)) {
    	        result.searchParams.append(key, value);
    	      }
    	    }
    	  } else {
    	    const merged = Object.assign({}, url.query, query);
    	    for (const key in merged) {
    	      const value = merged[key];

    	      if (Array.isArray(value)) {
    	        result.searchParams.delete(key);
    	        for (const param of value) {
    	          result.searchParams.append(key, param);
    	        }
    	      } else {
    	        result.searchParams.set(key, value);
    	      }
    	    }
    	  }

    	  return result
    	};
    	return parseURL;
    }

    var hasRequiredRequest;

    function requireRequest () {
    	if (hasRequiredRequest) return requestExports;
    	hasRequiredRequest = 1;

    	/* eslint no-prototype-builtins: 0 */

    	const { Readable, addAbortSignal } = require$$0$9;
    	const util = require$$2;
    	const cookie = requireCookie();
    	const assert = require$$0$7;
    	const warning = processWarningExports();

    	const parseURL = requireParseURL();
    	const { EventEmitter } = require$$1$2;

    	// request.connectin deprecation https://nodejs.org/api/http.html#http_request_connection
    	warning.create('FastifyDeprecationLightMyRequest', 'FST_LIGHTMYREQUEST_DEP01', 'You are accessing "request.connection", use "request.socket" instead.');

    	/**
    	 * Get hostname:port
    	 *
    	 * @param {URL} parsedURL
    	 * @return {String}
    	 */
    	function hostHeaderFromURL (parsedURL) {
    	  return parsedURL.port
    	    ? parsedURL.host
    	    : parsedURL.hostname + (parsedURL.protocol === 'https:' ? ':443' : ':80')
    	}

    	/**
    	 * Mock socket object used to fake access to a socket for a request
    	 *
    	 * @constructor
    	 * @param {String} remoteAddress the fake address to show consumers of the socket
    	 */
    	class MockSocket extends EventEmitter {
    	  constructor (remoteAddress) {
    	    super();
    	    this.remoteAddress = remoteAddress;
    	  }
    	}

    	/**
    	 * CustomRequest
    	 *
    	 * @constructor
    	 * @param {Object} options
    	 * @param {(Object|String)} options.url || options.path
    	 * @param {String} [options.method='GET']
    	 * @param {String} [options.remoteAddress]
    	 * @param {Object} [options.cookies]
    	 * @param {Object} [options.headers]
    	 * @param {Object} [options.query]
    	 * @param {Object} [options.Request]
    	 * @param {any} [options.payload]
    	 */
    	function CustomRequest (options) {
    	  return new _CustomLMRRequest(this)

    	  function _CustomLMRRequest (obj) {
    	    Request.call(obj, {
    	      ...options,
    	      Request: undefined
    	    });
    	    Object.assign(this, obj);

    	    for (const fn of Object.keys(Request.prototype)) {
    	      this.constructor.prototype[fn] = Request.prototype[fn];
    	    }

    	    util.inherits(this.constructor, options.Request);
    	    return this
    	  }
    	}

    	/**
    	 * Request
    	 *
    	 * @constructor
    	 * @param {Object} options
    	 * @param {(Object|String)} options.url || options.path
    	 * @param {String} [options.method='GET']
    	 * @param {String} [options.remoteAddress]
    	 * @param {Object} [options.cookies]
    	 * @param {Object} [options.headers]
    	 * @param {Object} [options.query]
    	 * @param {any} [options.payload]
    	 */
    	function Request (options) {
    	  Readable.call(this, {
    	    autoDestroy: false
    	  });

    	  const parsedURL = parseURL(options.url || options.path, options.query);

    	  this.url = parsedURL.pathname + parsedURL.search;

    	  this.aborted = false;
    	  this.httpVersionMajor = 1;
    	  this.httpVersionMinor = 1;
    	  this.httpVersion = '1.1';
    	  this.method = options.method ? options.method.toUpperCase() : 'GET';

    	  this.headers = {};
    	  this.rawHeaders = [];
    	  const headers = options.headers || {};

    	  for (const field in headers) {
    	    const fieldLowerCase = field.toLowerCase();
    	    if (
    	      (
    	        fieldLowerCase === 'user-agent' ||
    	        fieldLowerCase === 'content-type'
    	      ) && headers[field] === undefined
    	    ) {
    	      this.headers[fieldLowerCase] = undefined;
    	      continue
    	    }
    	    const value = headers[field];
    	    assert(value !== undefined, 'invalid value "undefined" for header ' + field);
    	    this.headers[fieldLowerCase] = '' + value;
    	  }

    	  if (('user-agent' in this.headers) === false) {
    	    this.headers['user-agent'] = 'lightMyRequest';
    	  }
    	  this.headers.host = this.headers.host || options.authority || hostHeaderFromURL(parsedURL);

    	  if (options.cookies) {
    	    const { cookies } = options;
    	    const cookieValues = Object.keys(cookies).map(key => cookie.serialize(key, cookies[key]));
    	    if (this.headers.cookie) {
    	      cookieValues.unshift(this.headers.cookie);
    	    }
    	    this.headers.cookie = cookieValues.join('; ');
    	  }

    	  this.socket = new MockSocket(options.remoteAddress || '127.0.0.1');

    	  Object.defineProperty(this, 'connection', {
    	    get () {
    	      warning.emit('FST_LIGHTMYREQUEST_DEP01');
    	      return this.socket
    	    },
    	    configurable: true
    	  });

    	  const signal = options.signal;
    	  /* istanbul ignore if  */
    	  if (signal) {
    	    addAbortSignal(signal, this);
    	  }

    	  // we keep both payload and body for compatibility reasons
    	  let payload = options.payload || options.body || null;
    	  const payloadResume = payload && typeof payload.resume === 'function';

    	  if (payload && typeof payload !== 'string' && !payloadResume && !Buffer.isBuffer(payload)) {
    	    payload = JSON.stringify(payload);

    	    if (('content-type' in this.headers) === false) {
    	      this.headers['content-type'] = 'application/json';
    	    }
    	  }

    	  // Set the content-length for the corresponding payload if none set
    	  if (payload && !payloadResume && !Object.prototype.hasOwnProperty.call(this.headers, 'content-length')) {
    	    this.headers['content-length'] = (Buffer.isBuffer(payload) ? payload.length : Buffer.byteLength(payload)).toString();
    	  }

    	  for (const header of Object.keys(this.headers)) {
    	    this.rawHeaders.push(header, this.headers[header]);
    	  }

    	  // Use _lightMyRequest namespace to avoid collision with Node
    	  this._lightMyRequest = {
    	    payload,
    	    isDone: false,
    	    simulate: options.simulate || {}
    	  };

    	  return this
    	}

    	util.inherits(Request, Readable);
    	util.inherits(CustomRequest, Request);

    	Request.prototype.prepare = function (next) {
    	  const payload = this._lightMyRequest.payload;
    	  if (!payload || typeof payload.resume !== 'function') { // does not quack like a stream
    	    return next()
    	  }

    	  const chunks = [];

    	  payload.on('data', (chunk) => chunks.push(Buffer.from(chunk)));

    	  payload.on('end', () => {
    	    const payload = Buffer.concat(chunks);
    	    this.headers['content-length'] = this.headers['content-length'] || ('' + payload.length);
    	    this._lightMyRequest.payload = payload;
    	    return next()
    	  });

    	  // Force to resume the stream. Needed for Stream 1
    	  payload.resume();
    	};

    	Request.prototype._read = function (size) {
    	  setImmediate(() => {
    	    if (this._lightMyRequest.isDone) {
    	      // 'end' defaults to true
    	      if (this._lightMyRequest.simulate.end !== false) {
    	        this.push(null);
    	      }

    	      return
    	    }

    	    this._lightMyRequest.isDone = true;

    	    if (this._lightMyRequest.payload) {
    	      if (this._lightMyRequest.simulate.split) {
    	        this.push(this._lightMyRequest.payload.slice(0, 1));
    	        this.push(this._lightMyRequest.payload.slice(1));
    	      } else {
    	        this.push(this._lightMyRequest.payload);
    	      }
    	    }

    	    if (this._lightMyRequest.simulate.error) {
    	      this.emit('error', new Error('Simulated'));
    	    }

    	    if (this._lightMyRequest.simulate.close) {
    	      this.emit('close');
    	    }

    	    // 'end' defaults to true
    	    if (this._lightMyRequest.simulate.end !== false) {
    	      this.push(null);
    	    }
    	  });
    	};

    	Request.prototype.destroy = function (error) {
    	  if (this.destroyed) return
    	  this.destroyed = true;

    	  if (error) {
    	    this._error = true;
    	    process.nextTick(() => this.emit('error', error));
    	  }

    	  process.nextTick(() => this.emit('close'));
    	};

    	request.exports = Request;
    	requestExports.Request = Request;
    	requestExports.CustomRequest = CustomRequest;
    	return requestExports;
    }

    var setCookieExports = {};
    var setCookie = {
      get exports(){ return setCookieExports; },
      set exports(v){ setCookieExports = v; },
    };

    var hasRequiredSetCookie;

    function requireSetCookie () {
    	if (hasRequiredSetCookie) return setCookieExports;
    	hasRequiredSetCookie = 1;

    	var defaultParseOptions = {
    	  decodeValues: true,
    	  map: false,
    	  silent: false,
    	};

    	function isNonEmptyString(str) {
    	  return typeof str === "string" && !!str.trim();
    	}

    	function parseString(setCookieValue, options) {
    	  var parts = setCookieValue.split(";").filter(isNonEmptyString);

    	  var nameValuePairStr = parts.shift();
    	  var parsed = parseNameValuePair(nameValuePairStr);
    	  var name = parsed.name;
    	  var value = parsed.value;

    	  options = options
    	    ? Object.assign({}, defaultParseOptions, options)
    	    : defaultParseOptions;

    	  try {
    	    value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value
    	  } catch (e) {
    	    console.error(
    	      "set-cookie-parser encountered an error while decoding a cookie with value '" +
    	        value +
    	        "'. Set options.decodeValues to false to disable this feature.",
    	      e
    	    );
    	  }

    	  var cookie = {
    	    name: name,
    	    value: value,
    	  };

    	  parts.forEach(function (part) {
    	    var sides = part.split("=");
    	    var key = sides.shift().trimLeft().toLowerCase();
    	    var value = sides.join("=");
    	    if (key === "expires") {
    	      cookie.expires = new Date(value);
    	    } else if (key === "max-age") {
    	      cookie.maxAge = parseInt(value, 10);
    	    } else if (key === "secure") {
    	      cookie.secure = true;
    	    } else if (key === "httponly") {
    	      cookie.httpOnly = true;
    	    } else if (key === "samesite") {
    	      cookie.sameSite = value;
    	    } else {
    	      cookie[key] = value;
    	    }
    	  });

    	  return cookie;
    	}

    	function parseNameValuePair(nameValuePairStr) {
    	  // Parses name-value-pair according to rfc6265bis draft

    	  var name = "";
    	  var value = "";
    	  var nameValueArr = nameValuePairStr.split("=");
    	  if (nameValueArr.length > 1) {
    	    name = nameValueArr.shift();
    	    value = nameValueArr.join("="); // everything after the first =, joined by a "=" if there was more than one part
    	  } else {
    	    value = nameValuePairStr;
    	  }

    	  return { name: name, value: value };
    	}

    	function parse(input, options) {
    	  options = options
    	    ? Object.assign({}, defaultParseOptions, options)
    	    : defaultParseOptions;

    	  if (!input) {
    	    if (!options.map) {
    	      return [];
    	    } else {
    	      return {};
    	    }
    	  }

    	  if (input.headers && input.headers["set-cookie"]) {
    	    // fast-path for node.js (which automatically normalizes header names to lower-case
    	    input = input.headers["set-cookie"];
    	  } else if (input.headers) {
    	    // slow-path for other environments - see #25
    	    var sch =
    	      input.headers[
    	        Object.keys(input.headers).find(function (key) {
    	          return key.toLowerCase() === "set-cookie";
    	        })
    	      ];
    	    // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36
    	    if (!sch && input.headers.cookie && !options.silent) {
    	      console.warn(
    	        "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
    	      );
    	    }
    	    input = sch;
    	  }
    	  if (!Array.isArray(input)) {
    	    input = [input];
    	  }

    	  options = options
    	    ? Object.assign({}, defaultParseOptions, options)
    	    : defaultParseOptions;

    	  if (!options.map) {
    	    return input.filter(isNonEmptyString).map(function (str) {
    	      return parseString(str, options);
    	    });
    	  } else {
    	    var cookies = {};
    	    return input.filter(isNonEmptyString).reduce(function (cookies, str) {
    	      var cookie = parseString(str, options);
    	      cookies[cookie.name] = cookie;
    	      return cookies;
    	    }, cookies);
    	  }
    	}

    	/*
    	  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas
    	  that are within a single set-cookie field-value, such as in the Expires portion.

    	  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2
    	  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128
    	  React Native's fetch does this for *every* header, including set-cookie.

    	  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25
    	  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation
    	*/
    	function splitCookiesString(cookiesString) {
    	  if (Array.isArray(cookiesString)) {
    	    return cookiesString;
    	  }
    	  if (typeof cookiesString !== "string") {
    	    return [];
    	  }

    	  var cookiesStrings = [];
    	  var pos = 0;
    	  var start;
    	  var ch;
    	  var lastComma;
    	  var nextStart;
    	  var cookiesSeparatorFound;

    	  function skipWhitespace() {
    	    while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
    	      pos += 1;
    	    }
    	    return pos < cookiesString.length;
    	  }

    	  function notSpecialChar() {
    	    ch = cookiesString.charAt(pos);

    	    return ch !== "=" && ch !== ";" && ch !== ",";
    	  }

    	  while (pos < cookiesString.length) {
    	    start = pos;
    	    cookiesSeparatorFound = false;

    	    while (skipWhitespace()) {
    	      ch = cookiesString.charAt(pos);
    	      if (ch === ",") {
    	        // ',' is a cookie separator if we have later first '=', not ';' or ','
    	        lastComma = pos;
    	        pos += 1;

    	        skipWhitespace();
    	        nextStart = pos;

    	        while (pos < cookiesString.length && notSpecialChar()) {
    	          pos += 1;
    	        }

    	        // currently special character
    	        if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
    	          // we found cookies separator
    	          cookiesSeparatorFound = true;
    	          // pos is inside the next cookie, so back up and return it.
    	          pos = nextStart;
    	          cookiesStrings.push(cookiesString.substring(start, lastComma));
    	          start = pos;
    	        } else {
    	          // in param ',' or param separator ';',
    	          // we continue from that comma
    	          pos = lastComma + 1;
    	        }
    	      } else {
    	        pos += 1;
    	      }
    	    }

    	    if (!cookiesSeparatorFound || pos >= cookiesString.length) {
    	      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
    	    }
    	  }

    	  return cookiesStrings;
    	}

    	setCookie.exports = parse;
    	setCookieExports.parse = parse;
    	setCookieExports.parseString = parseString;
    	setCookieExports.splitCookiesString = splitCookiesString;
    	return setCookieExports;
    }

    var response;
    var hasRequiredResponse;

    function requireResponse () {
    	if (hasRequiredResponse) return response;
    	hasRequiredResponse = 1;

    	const http = require$$0$2;
    	const { Writable } = require$$0$9;
    	const util = require$$2;

    	const setCookie = requireSetCookie();

    	function Response (req, onEnd, reject) {
    	  http.ServerResponse.call(this, req);

    	  this._lightMyRequest = { headers: null, trailers: {}, payloadChunks: [] };
    	  // This forces node@8 to always render the headers
    	  this.setHeader('foo', 'bar'); this.removeHeader('foo');

    	  this.assignSocket(getNullSocket());

    	  this._promiseCallback = typeof reject === 'function';

    	  let called = false;
    	  const onEndSuccess = (payload) => {
    	    // no need to early-return if already called because this handler is bound `once`
    	    called = true;
    	    if (this._promiseCallback) {
    	      return process.nextTick(() => onEnd(payload))
    	    }
    	    process.nextTick(() => onEnd(null, payload));
    	  };

    	  const onEndFailure = (err) => {
    	    if (called) return
    	    called = true;
    	    if (this._promiseCallback) {
    	      return process.nextTick(() => reject(err))
    	    }
    	    process.nextTick(() => onEnd(err, null));
    	  };

    	  this.once('finish', () => {
    	    const res = generatePayload(this);
    	    res.raw.req = req;
    	    onEndSuccess(res);
    	  });

    	  this.connection.once('error', onEndFailure);

    	  this.once('error', onEndFailure);

    	  this.once('close', onEndFailure);
    	}

    	util.inherits(Response, http.ServerResponse);

    	Response.prototype.setTimeout = function (msecs, callback) {
    	  this.timeoutHandle = setTimeout(() => {
    	    this.emit('timeout');
    	  }, msecs);
    	  this.on('timeout', callback);
    	  return this
    	};

    	Response.prototype.writeHead = function () {
    	  const result = http.ServerResponse.prototype.writeHead.apply(this, arguments);

    	  copyHeaders(this);

    	  return result
    	};

    	Response.prototype.write = function (data, encoding, callback) {
    	  if (this.timeoutHandle) {
    	    clearTimeout(this.timeoutHandle);
    	  }
    	  http.ServerResponse.prototype.write.call(this, data, encoding, callback);
    	  this._lightMyRequest.payloadChunks.push(Buffer.from(data, encoding));
    	  return true
    	};

    	Response.prototype.end = function (data, encoding, callback) {
    	  if (data) {
    	    this.write(data, encoding);
    	  }

    	  http.ServerResponse.prototype.end.call(this, callback);

    	  this.emit('finish');

    	  // We need to emit 'close' otherwise stream.finished() would
    	  // not pick it up on Node v16

    	  this.destroy();
    	};

    	Response.prototype.destroy = function (error) {
    	  if (this.destroyed) return
    	  this.destroyed = true;

    	  if (error) {
    	    process.nextTick(() => this.emit('error', error));
    	  }

    	  process.nextTick(() => this.emit('close'));
    	};

    	Response.prototype.addTrailers = function (trailers) {
    	  for (const key in trailers) {
    	    this._lightMyRequest.trailers[key.toLowerCase().trim()] = trailers[key].toString().trim();
    	  }
    	};

    	function generatePayload (response) {
    	  // This seems only to happen when using `fastify-express` - see https://github.com/fastify/fastify-express/issues/47
    	  /* istanbul ignore if */
    	  if (response._lightMyRequest.headers === null) {
    	    copyHeaders(response);
    	  }
    	  // Prepare response object
    	  const res = {
    	    raw: {
    	      res: response
    	    },
    	    headers: response._lightMyRequest.headers,
    	    statusCode: response.statusCode,
    	    statusMessage: response.statusMessage,
    	    trailers: {},
    	    get cookies () {
    	      return setCookie.parse(this)
    	    }
    	  };

    	  // Prepare payload and trailers
    	  const rawBuffer = Buffer.concat(response._lightMyRequest.payloadChunks);
    	  res.rawPayload = rawBuffer;

    	  // we keep both of them for compatibility reasons
    	  res.payload = rawBuffer.toString();
    	  res.body = res.payload;
    	  res.trailers = response._lightMyRequest.trailers;

    	  // Prepare payload parsers
    	  res.json = function parseJsonPayload () {
    	    return JSON.parse(res.payload)
    	  };

    	  return res
    	}

    	// Throws away all written data to prevent response from buffering payload
    	function getNullSocket () {
    	  return new Writable({
    	    write (chunk, encoding, callback) {
    	      setImmediate(callback);
    	    }
    	  })
    	}

    	function copyHeaders (response) {
    	  response._lightMyRequest.headers = Object.assign({}, response.getHeaders())

    	  // Add raw headers
    	  ;['Date', 'Connection', 'Transfer-Encoding'].forEach((name) => {
    	    const regex = new RegExp('\\r\\n' + name + ': ([^\\r]*)\\r\\n');
    	    const field = response._header.match(regex);
    	    if (field) {
    	      response._lightMyRequest.headers[name.toLowerCase()] = field[1];
    	    }
    	  });
    	}

    	response = Response;
    	return response;
    }

    var configValidatorExports = {};
    var configValidator = {
      get exports(){ return configValidatorExports; },
      set exports(v){ configValidatorExports = v; },
    };

    var hasRequiredConfigValidator;

    function requireConfigValidator () {
    	if (hasRequiredConfigValidator) return configValidatorExports;
    	hasRequiredConfigValidator = 1;
    	configValidator.exports = validate10;
    	configValidatorExports.default = validate10;
    	const schema11 = {"type":"object","properties":{"url":{"oneOf":[{"type":"string"},{"type":"object","properties":{"protocol":{"type":"string"},"hostname":{"type":"string"},"pathname":{"type":"string"}},"additionalProperties":true,"required":["pathname"]}]},"path":{"oneOf":[{"type":"string"},{"type":"object","properties":{"protocol":{"type":"string"},"hostname":{"type":"string"},"pathname":{"type":"string"}},"additionalProperties":true,"required":["pathname"]}]},"cookies":{"type":"object","additionalProperties":true},"headers":{"type":"object","additionalProperties":true},"query":{"anyOf":[{"type":"object","additionalProperties":true},{"type":"string"}]},"simulate":{"type":"object","properties":{"end":{"type":"boolean"},"split":{"type":"boolean"},"error":{"type":"boolean"},"close":{"type":"boolean"}}},"authority":{"type":"string"},"remoteAddress":{"type":"string"},"method":{"type":"string","enum":["ACL","BIND","CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LINK","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCALENDAR","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REBIND","REPORT","SEARCH","SOURCE","SUBSCRIBE","TRACE","UNBIND","UNLINK","UNLOCK","UNSUBSCRIBE","acl","bind","checkout","connect","copy","delete","get","head","link","lock","m-search","merge","mkactivity","mkcalendar","mkcol","move","notify","options","patch","post","propfind","proppatch","purge","put","rebind","report","search","source","subscribe","trace","unbind","unlink","unlock","unsubscribe"]},"validate":{"type":"boolean"}},"additionalProperties":true,"oneOf":[{"required":["url"]},{"required":["path"]}]};

    	function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
    	let vErrors = null;
    	let errors = 0;
    	const _errs1 = errors;
    	let valid0 = false;
    	let passing0 = null;
    	const _errs2 = errors;
    	if(data && typeof data == "object" && !Array.isArray(data)){
    	let missing0;
    	if((data.url === undefined) && (missing0 = "url")){
    	const err0 = {instancePath,schemaPath:"#/oneOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};
    	if(vErrors === null){
    	vErrors = [err0];
    	}
    	else {
    	vErrors.push(err0);
    	}
    	errors++;
    	}
    	}
    	var _valid0 = _errs2 === errors;
    	if(_valid0){
    	valid0 = true;
    	passing0 = 0;
    	}
    	const _errs3 = errors;
    	if(data && typeof data == "object" && !Array.isArray(data)){
    	let missing1;
    	if((data.path === undefined) && (missing1 = "path")){
    	const err1 = {instancePath,schemaPath:"#/oneOf/1/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
    	if(vErrors === null){
    	vErrors = [err1];
    	}
    	else {
    	vErrors.push(err1);
    	}
    	errors++;
    	}
    	}
    	var _valid0 = _errs3 === errors;
    	if(_valid0 && valid0){
    	valid0 = false;
    	passing0 = [passing0, 1];
    	}
    	else {
    	if(_valid0){
    	valid0 = true;
    	passing0 = 1;
    	}
    	}
    	if(!valid0){
    	const err2 = {instancePath,schemaPath:"#/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};
    	if(vErrors === null){
    	vErrors = [err2];
    	}
    	else {
    	vErrors.push(err2);
    	}
    	errors++;
    	validate10.errors = vErrors;
    	return false;
    	}
    	else {
    	errors = _errs1;
    	if(vErrors !== null){
    	if(_errs1){
    	vErrors.length = _errs1;
    	}
    	else {
    	vErrors = null;
    	}
    	}
    	}
    	if(errors === 0){
    	if(data && typeof data == "object" && !Array.isArray(data)){
    	if(data.url !== undefined){
    	let data0 = data.url;
    	const _errs5 = errors;
    	const _errs6 = errors;
    	let valid2 = false;
    	let passing1 = null;
    	const _errs7 = errors;
    	if(typeof data0 !== "string"){
    	let dataType0 = typeof data0;
    	let coerced0 = undefined;
    	if(!(coerced0 !== undefined)){
    	if(dataType0 == "number" || dataType0 == "boolean"){
    	coerced0 = "" + data0;
    	}
    	else if(data0 === null){
    	coerced0 = "";
    	}
    	else {
    	const err3 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err3];
    	}
    	else {
    	vErrors.push(err3);
    	}
    	errors++;
    	}
    	}
    	if(coerced0 !== undefined){
    	data0 = coerced0;
    	if(data !== undefined){
    	data["url"] = coerced0;
    	}
    	}
    	}
    	var _valid1 = _errs7 === errors;
    	if(_valid1){
    	valid2 = true;
    	passing1 = 0;
    	}
    	const _errs9 = errors;
    	if(errors === _errs9){
    	if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
    	let missing2;
    	if((data0.pathname === undefined) && (missing2 = "pathname")){
    	const err4 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/oneOf/1/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};
    	if(vErrors === null){
    	vErrors = [err4];
    	}
    	else {
    	vErrors.push(err4);
    	}
    	errors++;
    	}
    	else {
    	if(data0.protocol !== undefined){
    	let data1 = data0.protocol;
    	const _errs12 = errors;
    	if(typeof data1 !== "string"){
    	let dataType1 = typeof data1;
    	let coerced1 = undefined;
    	if(!(coerced1 !== undefined)){
    	if(dataType1 == "number" || dataType1 == "boolean"){
    	coerced1 = "" + data1;
    	}
    	else if(data1 === null){
    	coerced1 = "";
    	}
    	else {
    	const err5 = {instancePath:instancePath+"/url/protocol",schemaPath:"#/properties/url/oneOf/1/properties/protocol/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err5];
    	}
    	else {
    	vErrors.push(err5);
    	}
    	errors++;
    	}
    	}
    	if(coerced1 !== undefined){
    	data1 = coerced1;
    	if(data0 !== undefined){
    	data0["protocol"] = coerced1;
    	}
    	}
    	}
    	var valid3 = _errs12 === errors;
    	}
    	else {
    	var valid3 = true;
    	}
    	if(valid3){
    	if(data0.hostname !== undefined){
    	let data2 = data0.hostname;
    	const _errs14 = errors;
    	if(typeof data2 !== "string"){
    	let dataType2 = typeof data2;
    	let coerced2 = undefined;
    	if(!(coerced2 !== undefined)){
    	if(dataType2 == "number" || dataType2 == "boolean"){
    	coerced2 = "" + data2;
    	}
    	else if(data2 === null){
    	coerced2 = "";
    	}
    	else {
    	const err6 = {instancePath:instancePath+"/url/hostname",schemaPath:"#/properties/url/oneOf/1/properties/hostname/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err6];
    	}
    	else {
    	vErrors.push(err6);
    	}
    	errors++;
    	}
    	}
    	if(coerced2 !== undefined){
    	data2 = coerced2;
    	if(data0 !== undefined){
    	data0["hostname"] = coerced2;
    	}
    	}
    	}
    	var valid3 = _errs14 === errors;
    	}
    	else {
    	var valid3 = true;
    	}
    	if(valid3){
    	if(data0.pathname !== undefined){
    	let data3 = data0.pathname;
    	const _errs16 = errors;
    	if(typeof data3 !== "string"){
    	let dataType3 = typeof data3;
    	let coerced3 = undefined;
    	if(!(coerced3 !== undefined)){
    	if(dataType3 == "number" || dataType3 == "boolean"){
    	coerced3 = "" + data3;
    	}
    	else if(data3 === null){
    	coerced3 = "";
    	}
    	else {
    	const err7 = {instancePath:instancePath+"/url/pathname",schemaPath:"#/properties/url/oneOf/1/properties/pathname/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err7];
    	}
    	else {
    	vErrors.push(err7);
    	}
    	errors++;
    	}
    	}
    	if(coerced3 !== undefined){
    	data3 = coerced3;
    	if(data0 !== undefined){
    	data0["pathname"] = coerced3;
    	}
    	}
    	}
    	var valid3 = _errs16 === errors;
    	}
    	else {
    	var valid3 = true;
    	}
    	}
    	}
    	}
    	}
    	else {
    	const err8 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};
    	if(vErrors === null){
    	vErrors = [err8];
    	}
    	else {
    	vErrors.push(err8);
    	}
    	errors++;
    	}
    	}
    	var _valid1 = _errs9 === errors;
    	if(_valid1 && valid2){
    	valid2 = false;
    	passing1 = [passing1, 1];
    	}
    	else {
    	if(_valid1){
    	valid2 = true;
    	passing1 = 1;
    	}
    	}
    	if(!valid2){
    	const err9 = {instancePath:instancePath+"/url",schemaPath:"#/properties/url/oneOf",keyword:"oneOf",params:{passingSchemas: passing1},message:"must match exactly one schema in oneOf"};
    	if(vErrors === null){
    	vErrors = [err9];
    	}
    	else {
    	vErrors.push(err9);
    	}
    	errors++;
    	validate10.errors = vErrors;
    	return false;
    	}
    	else {
    	errors = _errs6;
    	if(vErrors !== null){
    	if(_errs6){
    	vErrors.length = _errs6;
    	}
    	else {
    	vErrors = null;
    	}
    	}
    	}
    	var valid1 = _errs5 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.path !== undefined){
    	let data4 = data.path;
    	const _errs18 = errors;
    	const _errs19 = errors;
    	let valid4 = false;
    	let passing2 = null;
    	const _errs20 = errors;
    	if(typeof data4 !== "string"){
    	let dataType4 = typeof data4;
    	let coerced4 = undefined;
    	if(!(coerced4 !== undefined)){
    	if(dataType4 == "number" || dataType4 == "boolean"){
    	coerced4 = "" + data4;
    	}
    	else if(data4 === null){
    	coerced4 = "";
    	}
    	else {
    	const err10 = {instancePath:instancePath+"/path",schemaPath:"#/properties/path/oneOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err10];
    	}
    	else {
    	vErrors.push(err10);
    	}
    	errors++;
    	}
    	}
    	if(coerced4 !== undefined){
    	data4 = coerced4;
    	if(data !== undefined){
    	data["path"] = coerced4;
    	}
    	}
    	}
    	var _valid2 = _errs20 === errors;
    	if(_valid2){
    	valid4 = true;
    	passing2 = 0;
    	}
    	const _errs22 = errors;
    	if(errors === _errs22){
    	if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
    	let missing3;
    	if((data4.pathname === undefined) && (missing3 = "pathname")){
    	const err11 = {instancePath:instancePath+"/path",schemaPath:"#/properties/path/oneOf/1/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"};
    	if(vErrors === null){
    	vErrors = [err11];
    	}
    	else {
    	vErrors.push(err11);
    	}
    	errors++;
    	}
    	else {
    	if(data4.protocol !== undefined){
    	let data5 = data4.protocol;
    	const _errs25 = errors;
    	if(typeof data5 !== "string"){
    	let dataType5 = typeof data5;
    	let coerced5 = undefined;
    	if(!(coerced5 !== undefined)){
    	if(dataType5 == "number" || dataType5 == "boolean"){
    	coerced5 = "" + data5;
    	}
    	else if(data5 === null){
    	coerced5 = "";
    	}
    	else {
    	const err12 = {instancePath:instancePath+"/path/protocol",schemaPath:"#/properties/path/oneOf/1/properties/protocol/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err12];
    	}
    	else {
    	vErrors.push(err12);
    	}
    	errors++;
    	}
    	}
    	if(coerced5 !== undefined){
    	data5 = coerced5;
    	if(data4 !== undefined){
    	data4["protocol"] = coerced5;
    	}
    	}
    	}
    	var valid5 = _errs25 === errors;
    	}
    	else {
    	var valid5 = true;
    	}
    	if(valid5){
    	if(data4.hostname !== undefined){
    	let data6 = data4.hostname;
    	const _errs27 = errors;
    	if(typeof data6 !== "string"){
    	let dataType6 = typeof data6;
    	let coerced6 = undefined;
    	if(!(coerced6 !== undefined)){
    	if(dataType6 == "number" || dataType6 == "boolean"){
    	coerced6 = "" + data6;
    	}
    	else if(data6 === null){
    	coerced6 = "";
    	}
    	else {
    	const err13 = {instancePath:instancePath+"/path/hostname",schemaPath:"#/properties/path/oneOf/1/properties/hostname/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err13];
    	}
    	else {
    	vErrors.push(err13);
    	}
    	errors++;
    	}
    	}
    	if(coerced6 !== undefined){
    	data6 = coerced6;
    	if(data4 !== undefined){
    	data4["hostname"] = coerced6;
    	}
    	}
    	}
    	var valid5 = _errs27 === errors;
    	}
    	else {
    	var valid5 = true;
    	}
    	if(valid5){
    	if(data4.pathname !== undefined){
    	let data7 = data4.pathname;
    	const _errs29 = errors;
    	if(typeof data7 !== "string"){
    	let dataType7 = typeof data7;
    	let coerced7 = undefined;
    	if(!(coerced7 !== undefined)){
    	if(dataType7 == "number" || dataType7 == "boolean"){
    	coerced7 = "" + data7;
    	}
    	else if(data7 === null){
    	coerced7 = "";
    	}
    	else {
    	const err14 = {instancePath:instancePath+"/path/pathname",schemaPath:"#/properties/path/oneOf/1/properties/pathname/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err14];
    	}
    	else {
    	vErrors.push(err14);
    	}
    	errors++;
    	}
    	}
    	if(coerced7 !== undefined){
    	data7 = coerced7;
    	if(data4 !== undefined){
    	data4["pathname"] = coerced7;
    	}
    	}
    	}
    	var valid5 = _errs29 === errors;
    	}
    	else {
    	var valid5 = true;
    	}
    	}
    	}
    	}
    	}
    	else {
    	const err15 = {instancePath:instancePath+"/path",schemaPath:"#/properties/path/oneOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};
    	if(vErrors === null){
    	vErrors = [err15];
    	}
    	else {
    	vErrors.push(err15);
    	}
    	errors++;
    	}
    	}
    	var _valid2 = _errs22 === errors;
    	if(_valid2 && valid4){
    	valid4 = false;
    	passing2 = [passing2, 1];
    	}
    	else {
    	if(_valid2){
    	valid4 = true;
    	passing2 = 1;
    	}
    	}
    	if(!valid4){
    	const err16 = {instancePath:instancePath+"/path",schemaPath:"#/properties/path/oneOf",keyword:"oneOf",params:{passingSchemas: passing2},message:"must match exactly one schema in oneOf"};
    	if(vErrors === null){
    	vErrors = [err16];
    	}
    	else {
    	vErrors.push(err16);
    	}
    	errors++;
    	validate10.errors = vErrors;
    	return false;
    	}
    	else {
    	errors = _errs19;
    	if(vErrors !== null){
    	if(_errs19){
    	vErrors.length = _errs19;
    	}
    	else {
    	vErrors = null;
    	}
    	}
    	}
    	var valid1 = _errs18 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.cookies !== undefined){
    	let data8 = data.cookies;
    	const _errs31 = errors;
    	if(errors === _errs31){
    	if(!(data8 && typeof data8 == "object" && !Array.isArray(data8))){
    	validate10.errors = [{instancePath:instancePath+"/cookies",schemaPath:"#/properties/cookies/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    	return false;
    	}
    	}
    	var valid1 = _errs31 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.headers !== undefined){
    	let data9 = data.headers;
    	const _errs34 = errors;
    	if(errors === _errs34){
    	if(!(data9 && typeof data9 == "object" && !Array.isArray(data9))){
    	validate10.errors = [{instancePath:instancePath+"/headers",schemaPath:"#/properties/headers/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    	return false;
    	}
    	}
    	var valid1 = _errs34 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.query !== undefined){
    	let data10 = data.query;
    	const _errs37 = errors;
    	const _errs38 = errors;
    	let valid6 = false;
    	const _errs39 = errors;
    	if(errors === _errs39){
    	if(!(data10 && typeof data10 == "object" && !Array.isArray(data10))){
    	const err17 = {instancePath:instancePath+"/query",schemaPath:"#/properties/query/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
    	if(vErrors === null){
    	vErrors = [err17];
    	}
    	else {
    	vErrors.push(err17);
    	}
    	errors++;
    	}
    	}
    	var _valid3 = _errs39 === errors;
    	valid6 = valid6 || _valid3;
    	if(!valid6){
    	const _errs42 = errors;
    	if(typeof data10 !== "string"){
    	let dataType8 = typeof data10;
    	let coerced8 = undefined;
    	if(!(coerced8 !== undefined)){
    	if(dataType8 == "number" || dataType8 == "boolean"){
    	coerced8 = "" + data10;
    	}
    	else if(data10 === null){
    	coerced8 = "";
    	}
    	else {
    	const err18 = {instancePath:instancePath+"/query",schemaPath:"#/properties/query/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
    	if(vErrors === null){
    	vErrors = [err18];
    	}
    	else {
    	vErrors.push(err18);
    	}
    	errors++;
    	}
    	}
    	if(coerced8 !== undefined){
    	data10 = coerced8;
    	if(data !== undefined){
    	data["query"] = coerced8;
    	}
    	}
    	}
    	var _valid3 = _errs42 === errors;
    	valid6 = valid6 || _valid3;
    	}
    	if(!valid6){
    	const err19 = {instancePath:instancePath+"/query",schemaPath:"#/properties/query/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
    	if(vErrors === null){
    	vErrors = [err19];
    	}
    	else {
    	vErrors.push(err19);
    	}
    	errors++;
    	validate10.errors = vErrors;
    	return false;
    	}
    	else {
    	errors = _errs38;
    	if(vErrors !== null){
    	if(_errs38){
    	vErrors.length = _errs38;
    	}
    	else {
    	vErrors = null;
    	}
    	}
    	}
    	var valid1 = _errs37 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.simulate !== undefined){
    	let data11 = data.simulate;
    	const _errs44 = errors;
    	if(errors === _errs44){
    	if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
    	if(data11.end !== undefined){
    	let data12 = data11.end;
    	const _errs46 = errors;
    	if(typeof data12 !== "boolean"){
    	let coerced9 = undefined;
    	if(!(coerced9 !== undefined)){
    	if(data12 === "false" || data12 === 0 || data12 === null){
    	coerced9 = false;
    	}
    	else if(data12 === "true" || data12 === 1){
    	coerced9 = true;
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/simulate/end",schemaPath:"#/properties/simulate/properties/end/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    	return false;
    	}
    	}
    	if(coerced9 !== undefined){
    	data12 = coerced9;
    	if(data11 !== undefined){
    	data11["end"] = coerced9;
    	}
    	}
    	}
    	var valid7 = _errs46 === errors;
    	}
    	else {
    	var valid7 = true;
    	}
    	if(valid7){
    	if(data11.split !== undefined){
    	let data13 = data11.split;
    	const _errs48 = errors;
    	if(typeof data13 !== "boolean"){
    	let coerced10 = undefined;
    	if(!(coerced10 !== undefined)){
    	if(data13 === "false" || data13 === 0 || data13 === null){
    	coerced10 = false;
    	}
    	else if(data13 === "true" || data13 === 1){
    	coerced10 = true;
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/simulate/split",schemaPath:"#/properties/simulate/properties/split/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    	return false;
    	}
    	}
    	if(coerced10 !== undefined){
    	data13 = coerced10;
    	if(data11 !== undefined){
    	data11["split"] = coerced10;
    	}
    	}
    	}
    	var valid7 = _errs48 === errors;
    	}
    	else {
    	var valid7 = true;
    	}
    	if(valid7){
    	if(data11.error !== undefined){
    	let data14 = data11.error;
    	const _errs50 = errors;
    	if(typeof data14 !== "boolean"){
    	let coerced11 = undefined;
    	if(!(coerced11 !== undefined)){
    	if(data14 === "false" || data14 === 0 || data14 === null){
    	coerced11 = false;
    	}
    	else if(data14 === "true" || data14 === 1){
    	coerced11 = true;
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/simulate/error",schemaPath:"#/properties/simulate/properties/error/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    	return false;
    	}
    	}
    	if(coerced11 !== undefined){
    	data14 = coerced11;
    	if(data11 !== undefined){
    	data11["error"] = coerced11;
    	}
    	}
    	}
    	var valid7 = _errs50 === errors;
    	}
    	else {
    	var valid7 = true;
    	}
    	if(valid7){
    	if(data11.close !== undefined){
    	let data15 = data11.close;
    	const _errs52 = errors;
    	if(typeof data15 !== "boolean"){
    	let coerced12 = undefined;
    	if(!(coerced12 !== undefined)){
    	if(data15 === "false" || data15 === 0 || data15 === null){
    	coerced12 = false;
    	}
    	else if(data15 === "true" || data15 === 1){
    	coerced12 = true;
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/simulate/close",schemaPath:"#/properties/simulate/properties/close/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    	return false;
    	}
    	}
    	if(coerced12 !== undefined){
    	data15 = coerced12;
    	if(data11 !== undefined){
    	data11["close"] = coerced12;
    	}
    	}
    	}
    	var valid7 = _errs52 === errors;
    	}
    	else {
    	var valid7 = true;
    	}
    	}
    	}
    	}
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/simulate",schemaPath:"#/properties/simulate/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    	return false;
    	}
    	}
    	var valid1 = _errs44 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.authority !== undefined){
    	let data16 = data.authority;
    	const _errs54 = errors;
    	if(typeof data16 !== "string"){
    	let dataType13 = typeof data16;
    	let coerced13 = undefined;
    	if(!(coerced13 !== undefined)){
    	if(dataType13 == "number" || dataType13 == "boolean"){
    	coerced13 = "" + data16;
    	}
    	else if(data16 === null){
    	coerced13 = "";
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/authority",schemaPath:"#/properties/authority/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    	return false;
    	}
    	}
    	if(coerced13 !== undefined){
    	data16 = coerced13;
    	if(data !== undefined){
    	data["authority"] = coerced13;
    	}
    	}
    	}
    	var valid1 = _errs54 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.remoteAddress !== undefined){
    	let data17 = data.remoteAddress;
    	const _errs56 = errors;
    	if(typeof data17 !== "string"){
    	let dataType14 = typeof data17;
    	let coerced14 = undefined;
    	if(!(coerced14 !== undefined)){
    	if(dataType14 == "number" || dataType14 == "boolean"){
    	coerced14 = "" + data17;
    	}
    	else if(data17 === null){
    	coerced14 = "";
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/remoteAddress",schemaPath:"#/properties/remoteAddress/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    	return false;
    	}
    	}
    	if(coerced14 !== undefined){
    	data17 = coerced14;
    	if(data !== undefined){
    	data["remoteAddress"] = coerced14;
    	}
    	}
    	}
    	var valid1 = _errs56 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.method !== undefined){
    	let data18 = data.method;
    	const _errs58 = errors;
    	if(typeof data18 !== "string"){
    	let dataType15 = typeof data18;
    	let coerced15 = undefined;
    	if(!(coerced15 !== undefined)){
    	if(dataType15 == "number" || dataType15 == "boolean"){
    	coerced15 = "" + data18;
    	}
    	else if(data18 === null){
    	coerced15 = "";
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/type",keyword:"type",params:{type: "string"},message:"must be string"}];
    	return false;
    	}
    	}
    	if(coerced15 !== undefined){
    	data18 = coerced15;
    	if(data !== undefined){
    	data["method"] = coerced15;
    	}
    	}
    	}
    	if(!((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data18 === "ACL") || (data18 === "BIND")) || (data18 === "CHECKOUT")) || (data18 === "CONNECT")) || (data18 === "COPY")) || (data18 === "DELETE")) || (data18 === "GET")) || (data18 === "HEAD")) || (data18 === "LINK")) || (data18 === "LOCK")) || (data18 === "M-SEARCH")) || (data18 === "MERGE")) || (data18 === "MKACTIVITY")) || (data18 === "MKCALENDAR")) || (data18 === "MKCOL")) || (data18 === "MOVE")) || (data18 === "NOTIFY")) || (data18 === "OPTIONS")) || (data18 === "PATCH")) || (data18 === "POST")) || (data18 === "PROPFIND")) || (data18 === "PROPPATCH")) || (data18 === "PURGE")) || (data18 === "PUT")) || (data18 === "REBIND")) || (data18 === "REPORT")) || (data18 === "SEARCH")) || (data18 === "SOURCE")) || (data18 === "SUBSCRIBE")) || (data18 === "TRACE")) || (data18 === "UNBIND")) || (data18 === "UNLINK")) || (data18 === "UNLOCK")) || (data18 === "UNSUBSCRIBE")) || (data18 === "acl")) || (data18 === "bind")) || (data18 === "checkout")) || (data18 === "connect")) || (data18 === "copy")) || (data18 === "delete")) || (data18 === "get")) || (data18 === "head")) || (data18 === "link")) || (data18 === "lock")) || (data18 === "m-search")) || (data18 === "merge")) || (data18 === "mkactivity")) || (data18 === "mkcalendar")) || (data18 === "mkcol")) || (data18 === "move")) || (data18 === "notify")) || (data18 === "options")) || (data18 === "patch")) || (data18 === "post")) || (data18 === "propfind")) || (data18 === "proppatch")) || (data18 === "purge")) || (data18 === "put")) || (data18 === "rebind")) || (data18 === "report")) || (data18 === "search")) || (data18 === "source")) || (data18 === "subscribe")) || (data18 === "trace")) || (data18 === "unbind")) || (data18 === "unlink")) || (data18 === "unlock")) || (data18 === "unsubscribe"))){
    	validate10.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/enum",keyword:"enum",params:{allowedValues: schema11.properties.method.enum},message:"must be equal to one of the allowed values"}];
    	return false;
    	}
    	var valid1 = _errs58 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	if(valid1){
    	if(data.validate !== undefined){
    	let data19 = data.validate;
    	const _errs60 = errors;
    	if(typeof data19 !== "boolean"){
    	let coerced16 = undefined;
    	if(!(coerced16 !== undefined)){
    	if(data19 === "false" || data19 === 0 || data19 === null){
    	coerced16 = false;
    	}
    	else if(data19 === "true" || data19 === 1){
    	coerced16 = true;
    	}
    	else {
    	validate10.errors = [{instancePath:instancePath+"/validate",schemaPath:"#/properties/validate/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
    	return false;
    	}
    	}
    	if(coerced16 !== undefined){
    	data19 = coerced16;
    	if(data !== undefined){
    	data["validate"] = coerced16;
    	}
    	}
    	}
    	var valid1 = _errs60 === errors;
    	}
    	else {
    	var valid1 = true;
    	}
    	}
    	}
    	}
    	}
    	}
    	}
    	}
    	}
    	}
    	}
    	else {
    	validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
    	return false;
    	}
    	}
    	validate10.errors = vErrors;
    	return errors === 0;
    	}
    	return configValidatorExports;
    }

    var hasRequiredLightMyRequest;

    function requireLightMyRequest () {
    	if (hasRequiredLightMyRequest) return lightMyRequestExports;
    	hasRequiredLightMyRequest = 1;

    	const assert = require$$0$7;
    	const Request = requireRequest();
    	const Response = requireResponse();

    	const errorMessage = 'The dispatch function has already been invoked';

    	const optsValidator = requireConfigValidator();

    	function inject (dispatchFunc, options, callback) {
    	  if (typeof callback === 'undefined') {
    	    return new Chain(dispatchFunc, options)
    	  } else {
    	    return doInject(dispatchFunc, options, callback)
    	  }
    	}

    	function makeRequest (dispatchFunc, server, req, res) {
    	  req.once('error', function (err) {
    	    if (this.destroyed) res.destroy(err);
    	  });

    	  req.once('close', function () {
    	    if (this.destroyed && !this._error) res.destroy();
    	  });

    	  return req.prepare(() => dispatchFunc.call(server, req, res))
    	}

    	function doInject (dispatchFunc, options, callback) {
    	  options = (typeof options === 'string' ? { url: options } : options);

    	  if (options.validate !== false) {
    	    assert(typeof dispatchFunc === 'function', 'dispatchFunc should be a function');
    	    const isOptionValid = optsValidator(options);
    	    if (!isOptionValid) {
    	      throw new Error(optsValidator.errors.map(e => e.message))
    	    }
    	  }

    	  const server = options.server || {};

    	  const RequestConstructor = options.Request
    	    ? Request.CustomRequest
    	    : Request;

    	  // Express.js detection
    	  if (dispatchFunc.request && dispatchFunc.request.app === dispatchFunc) {
    	    Object.setPrototypeOf(Object.getPrototypeOf(dispatchFunc.request), RequestConstructor.prototype);
    	    Object.setPrototypeOf(Object.getPrototypeOf(dispatchFunc.response), Response.prototype);
    	  }

    	  if (typeof callback === 'function') {
    	    const req = new RequestConstructor(options);
    	    const res = new Response(req, callback);

    	    return makeRequest(dispatchFunc, server, req, res)
    	  } else {
    	    return new Promise((resolve, reject) => {
    	      const req = new RequestConstructor(options);
    	      const res = new Response(req, resolve, reject);

    	      makeRequest(dispatchFunc, server, req, res);
    	    })
    	  }
    	}

    	function Chain (dispatch, option) {
    	  if (typeof option === 'string') {
    	    this.option = { url: option };
    	  } else {
    	    this.option = Object.assign({}, option);
    	  }

    	  this.dispatch = dispatch;
    	  this._hasInvoked = false;
    	  this._promise = null;

    	  if (this.option.autoStart !== false) {
    	    process.nextTick(() => {
    	      if (!this._hasInvoked) {
    	        this.end();
    	      }
    	    });
    	  }
    	}

    	const httpMethods = [
    	  'delete',
    	  'get',
    	  'head',
    	  'options',
    	  'patch',
    	  'post',
    	  'put',
    	  'trace'
    	];

    	httpMethods.forEach(method => {
    	  Chain.prototype[method] = function (url) {
    	    if (this._hasInvoked === true || this._promise) {
    	      throw new Error(errorMessage)
    	    }
    	    this.option.url = url;
    	    this.option.method = method.toUpperCase();
    	    return this
    	  };
    	});

    	const chainMethods = [
    	  'body',
    	  'cookies',
    	  'headers',
    	  'payload',
    	  'query'
    	];

    	chainMethods.forEach(method => {
    	  Chain.prototype[method] = function (value) {
    	    if (this._hasInvoked === true || this._promise) {
    	      throw new Error(errorMessage)
    	    }
    	    this.option[method] = value;
    	    return this
    	  };
    	});

    	Chain.prototype.end = function (callback) {
    	  if (this._hasInvoked === true || this._promise) {
    	    throw new Error(errorMessage)
    	  }
    	  this._hasInvoked = true;
    	  if (typeof callback === 'function') {
    	    doInject(this.dispatch, this.option, callback);
    	  } else {
    	    this._promise = doInject(this.dispatch, this.option);
    	    return this._promise
    	  }
    	};

    	Object.getOwnPropertyNames(Promise.prototype).forEach(method => {
    	  if (method === 'constructor') return
    	  Chain.prototype[method] = function (...args) {
    	    if (!this._promise) {
    	      if (this._hasInvoked === true) {
    	        throw new Error(errorMessage)
    	      }
    	      this._hasInvoked = true;
    	      this._promise = doInject(this.dispatch, this.option);
    	    }
    	    return this._promise[method](...args)
    	  };
    	});

    	function isInjection (obj) {
    	  return (
    	    obj instanceof Request ||
    	    obj instanceof Response ||
    	    (obj && obj.constructor && obj.constructor.name === '_CustomLMRRequest')
    	  )
    	}

    	lightMyRequest$1.exports = inject;
    	lightMyRequestExports.default = inject;
    	lightMyRequestExports.inject = inject;
    	lightMyRequestExports.isInjection = isInjection;
    	return lightMyRequestExports;
    }

    const VERSION = '4.12.0';

    const Avvio = bootExports;
    const http = require$$0$2;
    let lightMyRequest;

    const {
      kAvvioBoot,
      kChildren,
      kServerBindings,
      kBodyLimit,
      kRoutePrefix,
      kLogLevel,
      kLogSerializers,
      kHooks,
      kSchemaController,
      kRequestAcceptVersion,
      kReplySerializerDefault,
      kContentTypeParser,
      kReply,
      kRequest,
      kFourOhFour,
      kState,
      kOptions,
      kPluginNameChain,
      kSchemaErrorFormatter,
      kErrorHandler,
      kKeepAliveConnections,
      kFourOhFourContext
    } = symbols$2;

    const { createServer, compileValidateHTTPVersion } = server;
    const Reply = replyExports;
    const Request = requestExports$1;
    const { supportedMethods } = httpMethods$2;
    const decorator = decorate_1;
    const ContentTypeParser = contentTypeParserExports;
    const SchemaController = schemaController;
    const { Hooks, hookRunnerApplication, supportedHooks } = hooks;
    const { createLogger } = logger;
    const pluginUtils = pluginUtilsExports;
    const reqIdGenFactory = reqIdGenFactory$1;
    const { buildRouting, validateBodyLimitOption } = route;
    const build404 = fourOhFour_1;
    const getSecuredInitialConfig = initialConfigValidationExports;
    const override = pluginOverride;
    const warning = warnings$1;
    const noopSet = noopSet$1;
    const {
      appendStackTrace,
      AVVIO_ERRORS_MAP,
      ...errorCodes
    } = errorsExports;

    const { defaultInitOptions } = getSecuredInitialConfig;

    const {
      FST_ERR_ASYNC_CONSTRAINT,
      FST_ERR_BAD_URL,
      FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE
    } = errorCodes;

    const { buildErrorHandler } = errorHandler;

    const onBadUrlContext = {
      config: {
      },
      onSend: [],
      onError: [],
      [kFourOhFourContext]: null
    };

    function defaultBuildPrettyMeta (route) {
      // return a shallow copy of route's sanitized context

      const cleanKeys = {};
      const allowedProps = ['errorHandler', 'logLevel', 'logSerializers'];

      allowedProps.concat(supportedHooks).forEach(k => {
        cleanKeys[k] = route.store[k];
      });

      return Object.assign({}, cleanKeys)
    }

    function fastify (options) {
      // Options validations
      options = options || {};

      if (typeof options !== 'object') {
        throw new TypeError('Options must be an object')
      }

      if (options.querystringParser && typeof options.querystringParser !== 'function') {
        throw new Error(`querystringParser option should be a function, instead got '${typeof options.querystringParser}'`)
      }

      if (options.schemaController && options.schemaController.bucket && typeof options.schemaController.bucket !== 'function') {
        throw new Error(`schemaController.bucket option should be a function, instead got '${typeof options.schemaController.bucket}'`)
      }

      validateBodyLimitOption(options.bodyLimit);

      const requestIdHeader = (options.requestIdHeader === false) ? false : (options.requestIdHeader || defaultInitOptions.requestIdHeader);
      const genReqId = reqIdGenFactory(requestIdHeader, options.genReqId);
      const requestIdLogLabel = options.requestIdLogLabel || 'reqId';
      const bodyLimit = options.bodyLimit || defaultInitOptions.bodyLimit;
      const disableRequestLogging = options.disableRequestLogging || false;

      const ajvOptions = Object.assign({
        customOptions: {},
        plugins: []
      }, options.ajv);
      const frameworkErrors = options.frameworkErrors;

      // Ajv options
      if (!ajvOptions.customOptions || Object.prototype.toString.call(ajvOptions.customOptions) !== '[object Object]') {
        throw new Error(`ajv.customOptions option should be an object, instead got '${typeof ajvOptions.customOptions}'`)
      }
      if (!ajvOptions.plugins || !Array.isArray(ajvOptions.plugins)) {
        throw new Error(`ajv.plugins option should be an array, instead got '${typeof ajvOptions.plugins}'`)
      }

      // Instance Fastify components
      const { logger, hasLogger } = createLogger(options);

      // Update the options with the fixed values
      options.connectionTimeout = options.connectionTimeout || defaultInitOptions.connectionTimeout;
      options.keepAliveTimeout = options.keepAliveTimeout || defaultInitOptions.keepAliveTimeout;
      options.maxRequestsPerSocket = options.maxRequestsPerSocket || defaultInitOptions.maxRequestsPerSocket;
      options.requestTimeout = options.requestTimeout || defaultInitOptions.requestTimeout;
      options.logger = logger;
      options.genReqId = genReqId;
      options.requestIdHeader = requestIdHeader;
      options.requestIdLogLabel = requestIdLogLabel;
      options.disableRequestLogging = disableRequestLogging;
      options.ajv = ajvOptions;
      options.clientErrorHandler = options.clientErrorHandler || defaultClientErrorHandler;

      const initialConfig = getSecuredInitialConfig(options);

      // exposeHeadRoutes have its default set from the validator
      options.exposeHeadRoutes = initialConfig.exposeHeadRoutes;

      let constraints = options.constraints;
      if (options.versioning) {
        warning.emit('FSTDEP009');
        constraints = {
          ...constraints,
          version: {
            name: 'version',
            mustMatchWhenDerived: true,
            storage: options.versioning.storage,
            deriveConstraint: options.versioning.deriveVersion,
            validate (value) {
              if (typeof value !== 'string') {
                throw new Error('Version constraint should be a string.')
              }
            }
          }
        };
      }

      // Default router
      const router = buildRouting({
        config: {
          defaultRoute,
          onBadUrl,
          constraints,
          ignoreTrailingSlash: options.ignoreTrailingSlash || defaultInitOptions.ignoreTrailingSlash,
          ignoreDuplicateSlashes: options.ignoreDuplicateSlashes || defaultInitOptions.ignoreDuplicateSlashes,
          maxParamLength: options.maxParamLength || defaultInitOptions.maxParamLength,
          caseSensitive: options.caseSensitive,
          allowUnsafeRegex: options.allowUnsafeRegex || defaultInitOptions.allowUnsafeRegex,
          buildPrettyMeta: defaultBuildPrettyMeta,
          querystringParser: options.querystringParser
        }
      });

      // 404 router, used for handling encapsulated 404 handlers
      const fourOhFour = build404(options);

      // HTTP server and its handler
      const httpHandler = wrapRouting(router, options);

      // we need to set this before calling createServer
      options.http2SessionTimeout = initialConfig.http2SessionTimeout;
      const { server, listen } = createServer(options, httpHandler);

      const serverHasCloseAllConnections = typeof server.closeAllConnections === 'function';
      const serverHasCloseIdleConnections = typeof server.closeIdleConnections === 'function';

      let forceCloseConnections = options.forceCloseConnections;
      if (forceCloseConnections === 'idle' && !serverHasCloseIdleConnections) {
        throw new FST_ERR_FORCE_CLOSE_CONNECTIONS_IDLE_NOT_AVAILABLE()
      } else if (typeof forceCloseConnections !== 'boolean') {
        /* istanbul ignore next: only one branch can be valid in a given Node.js version */
        forceCloseConnections = serverHasCloseIdleConnections ? 'idle' : false;
      }

      const keepAliveConnections = !serverHasCloseAllConnections && forceCloseConnections === true ? new Set() : noopSet();

      const setupResponseListeners = Reply.setupResponseListeners;
      const schemaController = SchemaController.buildSchemaController(null, options.schemaController);

      // Public API
      const fastify = {
        // Fastify internals
        [kState]: {
          listening: false,
          closing: false,
          started: false
        },
        [kKeepAliveConnections]: keepAliveConnections,
        [kOptions]: options,
        [kChildren]: [],
        [kServerBindings]: [],
        [kBodyLimit]: bodyLimit,
        [kRoutePrefix]: '',
        [kLogLevel]: '',
        [kLogSerializers]: null,
        [kHooks]: new Hooks(),
        [kSchemaController]: schemaController,
        [kSchemaErrorFormatter]: null,
        [kErrorHandler]: buildErrorHandler(),
        [kReplySerializerDefault]: null,
        [kContentTypeParser]: new ContentTypeParser(
          bodyLimit,
          (options.onProtoPoisoning || defaultInitOptions.onProtoPoisoning),
          (options.onConstructorPoisoning || defaultInitOptions.onConstructorPoisoning)
        ),
        [kReply]: Reply.buildReply(Reply),
        [kRequest]: Request.buildRequest(Request, options.trustProxy),
        [kFourOhFour]: fourOhFour,
        [pluginUtils.registeredPlugins]: [],
        [kPluginNameChain]: ['fastify'],
        [kAvvioBoot]: null,
        // routing method
        routing: httpHandler,
        getDefaultRoute: router.getDefaultRoute.bind(router),
        setDefaultRoute: router.setDefaultRoute.bind(router),
        // routes shorthand methods
        delete: function _delete (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'DELETE', url, options, handler })
        },
        get: function _get (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'GET', url, options, handler })
        },
        head: function _head (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'HEAD', url, options, handler })
        },
        patch: function _patch (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'PATCH', url, options, handler })
        },
        post: function _post (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'POST', url, options, handler })
        },
        put: function _put (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'PUT', url, options, handler })
        },
        options: function _options (url, options, handler) {
          return router.prepareRoute.call(this, { method: 'OPTIONS', url, options, handler })
        },
        all: function _all (url, options, handler) {
          return router.prepareRoute.call(this, { method: supportedMethods, url, options, handler })
        },
        // extended route
        route: function _route (options) {
          // we need the fastify object that we are producing so we apply a lazy loading of the function,
          // otherwise we should bind it after the declaration
          return router.route.call(this, { options })
        },
        hasRoute: function _route (options) {
          return router.hasRoute.call(this, { options })
        },
        // expose logger instance
        log: logger,
        // type provider
        withTypeProvider,
        // hooks
        addHook,
        // schemas
        addSchema,
        getSchema: schemaController.getSchema.bind(schemaController),
        getSchemas: schemaController.getSchemas.bind(schemaController),
        setValidatorCompiler,
        setSerializerCompiler,
        setSchemaController,
        setReplySerializer,
        setSchemaErrorFormatter,
        // custom parsers
        addContentTypeParser: ContentTypeParser.helpers.addContentTypeParser,
        hasContentTypeParser: ContentTypeParser.helpers.hasContentTypeParser,
        getDefaultJsonParser: ContentTypeParser.defaultParsers.getDefaultJsonParser,
        defaultTextParser: ContentTypeParser.defaultParsers.defaultTextParser,
        removeContentTypeParser: ContentTypeParser.helpers.removeContentTypeParser,
        removeAllContentTypeParsers: ContentTypeParser.helpers.removeAllContentTypeParsers,
        // Fastify architecture methods (initialized by Avvio)
        register: null,
        after: null,
        ready: null,
        onClose: null,
        close: null,
        printPlugins: null,
        hasPlugin: function (name) {
          return this[kPluginNameChain].includes(name)
        },
        // http server
        listen,
        server,
        addresses: function () {
          /* istanbul ignore next */
          const binded = this[kServerBindings].map(b => b.address());
          binded.push(this.server.address());
          return binded.filter(adr => adr)
        },
        // extend fastify objects
        decorate: decorator.add,
        hasDecorator: decorator.exist,
        decorateReply: decorator.decorateReply,
        decorateRequest: decorator.decorateRequest,
        hasRequestDecorator: decorator.existRequest,
        hasReplyDecorator: decorator.existReply,
        // fake http injection
        inject,
        // pretty print of the registered routes
        printRoutes,
        // custom error handling
        setNotFoundHandler,
        setErrorHandler,
        // Set fastify initial configuration options read-only object
        initialConfig,
        // constraint strategies
        addConstraintStrategy: router.addConstraintStrategy.bind(router),
        hasConstraintStrategy: router.hasConstraintStrategy.bind(router)
      };

      Object.defineProperties(fastify, {
        pluginName: {
          configurable: true,
          get () {
            if (this[kPluginNameChain].length > 1) {
              return this[kPluginNameChain].join(' -> ')
            }
            return this[kPluginNameChain][0]
          }
        },
        prefix: {
          configurable: true,
          get () { return this[kRoutePrefix] }
        },
        validatorCompiler: {
          configurable: true,
          get () { return this[kSchemaController].getValidatorCompiler() }
        },
        serializerCompiler: {
          configurable: true,
          get () { return this[kSchemaController].getSerializerCompiler() }
        },
        version: {
          configurable: true,
          get () { return VERSION }
        },
        errorHandler: {
          configurable: true,
          get () {
            return this[kErrorHandler].func
          }
        }
      });

      if (options.schemaErrorFormatter) {
        validateSchemaErrorFormatter(options.schemaErrorFormatter);
        fastify[kSchemaErrorFormatter] = options.schemaErrorFormatter.bind(fastify);
      }

      // Install and configure Avvio
      // Avvio will update the following Fastify methods:
      // - register
      // - after
      // - ready
      // - onClose
      // - close

      const avvioPluginTimeout = Number(options.pluginTimeout);
      const avvio = Avvio(fastify, {
        autostart: false,
        timeout: isNaN(avvioPluginTimeout) === false ? avvioPluginTimeout : defaultInitOptions.pluginTimeout,
        expose: {
          use: 'register'
        }
      });
      // Override to allow the plugin encapsulation
      avvio.override = override;
      avvio.on('start', () => (fastify[kState].started = true));
      fastify[kAvvioBoot] = fastify.ready; // the avvio ready function
      fastify.ready = ready; // overwrite the avvio ready function
      fastify.printPlugins = avvio.prettyPrint.bind(avvio);

      // cache the closing value, since we are checking it in an hot path
      avvio.once('preReady', () => {
        fastify.onClose((instance, done) => {
          fastify[kState].closing = true;
          router.closeRoutes();
          if (fastify[kState].listening) {
            // No new TCP connections are accepted
            instance.server.close(done);

            /* istanbul ignore next: Cannot test this without Node.js core support */
            if (forceCloseConnections === 'idle') {
              // Not needed in Node 19
              instance.server.closeIdleConnections();
            /* istanbul ignore next: Cannot test this without Node.js core support */
            } else if (serverHasCloseAllConnections && forceCloseConnections) {
              instance.server.closeAllConnections();
            } else if (forceCloseConnections === true) {
              for (const conn of fastify[kKeepAliveConnections]) {
                // We must invoke the destroy method instead of merely unreffing
                // the sockets. If we only unref, then the callback passed to
                // `fastify.close` will never be invoked; nor will any of the
                // registered `onClose` hooks.
                conn.destroy();
                fastify[kKeepAliveConnections].delete(conn);
              }
            }
          } else {
            done(null);
          }
        });
      });

      // Set the default 404 handler
      fastify.setNotFoundHandler();
      fourOhFour.arrange404(fastify);

      router.setup(options, {
        avvio,
        fourOhFour,
        logger,
        hasLogger,
        setupResponseListeners,
        throwIfAlreadyStarted,
        validateHTTPVersion: compileValidateHTTPVersion(options),
        keepAliveConnections
      });

      // Delay configuring clientError handler so that it can access fastify state.
      server.on('clientError', options.clientErrorHandler.bind(fastify));

      try {
        const dc = require('diagnostics_channel');
        const initChannel = dc.channel('fastify.initialization');
        if (initChannel.hasSubscribers) {
          initChannel.publish({ fastify });
        }
      } catch (e) {
        // This only happens if `diagnostics_channel` isn't available, i.e. earlier
        // versions of Node.js. In that event, we don't care, so ignore the error.
      }

      return fastify

      function throwIfAlreadyStarted (msg) {
        if (fastify[kState].started) throw new Error(msg)
      }

      // HTTP injection handling
      // If the server is not ready yet, this
      // utility will automatically force it.
      function inject (opts, cb) {
        // lightMyRequest is dynamically loaded as it seems very expensive
        // because of Ajv
        if (lightMyRequest === undefined) {
          lightMyRequest = requireLightMyRequest();
        }

        if (fastify[kState].started) {
          if (fastify[kState].closing) {
            // Force to return an error
            const error = new Error('Server is closed');
            if (cb) {
              cb(error);
              return
            } else {
              return Promise.reject(error)
            }
          }
          return lightMyRequest(httpHandler, opts, cb)
        }

        if (cb) {
          this.ready(err => {
            if (err) cb(err, null);
            else lightMyRequest(httpHandler, opts, cb);
          });
        } else {
          return lightMyRequest((req, res) => {
            this.ready(function (err) {
              if (err) {
                res.emit('error', err);
                return
              }
              httpHandler(req, res);
            });
          }, opts)
        }
      }

      function ready (cb) {
        let resolveReady;
        let rejectReady;

        // run the hooks after returning the promise
        process.nextTick(runHooks);

        if (!cb) {
          return new Promise(function (resolve, reject) {
            resolveReady = resolve;
            rejectReady = reject;
          })
        }

        function runHooks () {
          // start loading
          fastify[kAvvioBoot]((err, done) => {
            if (err || fastify[kState].started) {
              manageErr(err);
            } else {
              hookRunnerApplication('onReady', fastify[kAvvioBoot], fastify, manageErr);
            }
            done();
          });
        }

        function manageErr (err) {
          // If the error comes out of Avvio's Error codes
          // We create a make and preserve the previous error
          // as cause
          err = err != null && AVVIO_ERRORS_MAP[err.code] != null
            ? appendStackTrace(err, new AVVIO_ERRORS_MAP[err.code](err.message))
            : err;

          if (cb) {
            if (err) {
              cb(err);
            } else {
              cb(undefined, fastify);
            }
          } else {
            if (err) {
              return rejectReady(err)
            }
            resolveReady(fastify);
          }
        }
      }

      // Used exclusively in TypeScript contexts to enable auto type inference from JSON schema.
      function withTypeProvider () {
        return this
      }

      // wrapper that we expose to the user for hooks handling
      function addHook (name, fn) {
        throwIfAlreadyStarted('Cannot call "addHook" when fastify instance is already started!');

        if (fn == null) {
          throw new errorCodes.FST_ERR_HOOK_INVALID_HANDLER(name, fn)
        }

        if (name === 'onSend' || name === 'preSerialization' || name === 'onError' || name === 'preParsing') {
          if (fn.constructor.name === 'AsyncFunction' && fn.length === 4) {
            throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()
          }
        } else if (name === 'onReady') {
          if (fn.constructor.name === 'AsyncFunction' && fn.length !== 0) {
            throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()
          }
        } else {
          if (fn.constructor.name === 'AsyncFunction' && fn.length === 3) {
            throw new errorCodes.FST_ERR_HOOK_INVALID_ASYNC_HANDLER()
          }
        }

        if (name === 'onClose') {
          this.onClose(fn);
        } else if (name === 'onReady') {
          this[kHooks].add(name, fn);
        } else if (name === 'onRoute') {
          this[kHooks].validate(name, fn);
          this[kHooks].add(name, fn);
        } else {
          this.after((err, done) => {
            _addHook.call(this, name, fn);
            done(err);
          });
        }
        return this

        function _addHook (name, fn) {
          this[kHooks].add(name, fn);
          this[kChildren].forEach(child => _addHook.call(child, name, fn));
        }
      }

      // wrapper that we expose to the user for schemas handling
      function addSchema (schema) {
        throwIfAlreadyStarted('Cannot call "addSchema" when fastify instance is already started!');
        this[kSchemaController].add(schema);
        this[kChildren].forEach(child => child.addSchema(schema));
        return this
      }

      function defaultClientErrorHandler (err, socket) {
        // In case of a connection reset, the socket has been destroyed and there is nothing that needs to be done.
        // https://nodejs.org/api/http.html#http_event_clienterror
        if (err.code === 'ECONNRESET' || socket.destroyed) {
          return
        }

        const body = JSON.stringify({
          error: http.STATUS_CODES['400'],
          message: 'Client Error',
          statusCode: 400
        });

        // Most devs do not know what to do with this error.
        // In the vast majority of cases, it's a network error and/or some
        // config issue on the load balancer side.
        this.log.trace({ err }, 'client error');
        // Copying standard node behaviour
        // https://github.com/nodejs/node/blob/6ca23d7846cb47e84fd344543e394e50938540be/lib/_http_server.js#L666

        // If the socket is not writable, there is no reason to try to send data.
        if (socket.writable) {
          socket.write(`HTTP/1.1 400 Bad Request\r\nContent-Length: ${body.length}\r\nContent-Type: application/json\r\n\r\n${body}`);
        }
        socket.destroy(err);
      }

      // If the router does not match any route, every request will land here
      // req and res are Node.js core objects
      function defaultRoute (req, res) {
        if (req.headers['accept-version'] !== undefined) {
          // we remove the accept-version header for performance result
          // because we do not want to go through the constraint checking
          // the usage of symbol here to prevent any collision on custom header name
          req.headers[kRequestAcceptVersion] = req.headers['accept-version'];
          req.headers['accept-version'] = undefined;
        }
        fourOhFour.router.lookup(req, res);
      }

      function onBadUrl (path, req, res) {
        if (frameworkErrors) {
          const id = genReqId(req);
          const childLogger = logger.child({ reqId: id });

          childLogger.info({ req }, 'incoming request');

          const request = new Request(id, null, req, null, childLogger, onBadUrlContext);
          const reply = new Reply(res, request, childLogger);
          return frameworkErrors(new FST_ERR_BAD_URL(path), request, reply)
        }
        const body = `{"error":"Bad Request","message":"'${path}' is not a valid url component","statusCode":400}`;
        res.writeHead(400, {
          'Content-Type': 'application/json',
          'Content-Length': body.length
        });
        res.end(body);
      }

      function buildAsyncConstraintCallback (isAsync, req, res) {
        if (isAsync === false) return undefined
        return function onAsyncConstraintError (err) {
          if (err) {
            if (frameworkErrors) {
              const id = genReqId(req);
              const childLogger = logger.child({ reqId: id });

              childLogger.info({ req }, 'incoming request');

              const request = new Request(id, null, req, null, childLogger, onBadUrlContext);
              const reply = new Reply(res, request, childLogger);
              return frameworkErrors(new FST_ERR_ASYNC_CONSTRAINT(), request, reply)
            }
            const body = '{"error":"Internal Server Error","message":"Unexpected error from async constraint","statusCode":500}';
            res.writeHead(500, {
              'Content-Type': 'application/json',
              'Content-Length': body.length
            });
            res.end(body);
          }
        }
      }

      function setNotFoundHandler (opts, handler) {
        throwIfAlreadyStarted('Cannot call "setNotFoundHandler" when fastify instance is already started!');

        fourOhFour.setNotFoundHandler.call(this, opts, handler, avvio, router.routeHandler);
        return this
      }

      function setValidatorCompiler (validatorCompiler) {
        throwIfAlreadyStarted('Cannot call "setValidatorCompiler" when fastify instance is already started!');
        this[kSchemaController].setValidatorCompiler(validatorCompiler);
        return this
      }

      function setSchemaErrorFormatter (errorFormatter) {
        throwIfAlreadyStarted('Cannot call "setSchemaErrorFormatter" when fastify instance is already started!');
        validateSchemaErrorFormatter(errorFormatter);
        this[kSchemaErrorFormatter] = errorFormatter.bind(this);
        return this
      }

      function setSerializerCompiler (serializerCompiler) {
        throwIfAlreadyStarted('Cannot call "setSerializerCompiler" when fastify instance is already started!');
        this[kSchemaController].setSerializerCompiler(serializerCompiler);
        return this
      }

      function setSchemaController (schemaControllerOpts) {
        throwIfAlreadyStarted('Cannot call "setSchemaController" when fastify instance is already started!');
        const old = this[kSchemaController];
        const schemaController = SchemaController.buildSchemaController(old, Object.assign({}, old.opts, schemaControllerOpts));
        this[kSchemaController] = schemaController;
        this.getSchema = schemaController.getSchema.bind(schemaController);
        this.getSchemas = schemaController.getSchemas.bind(schemaController);
        return this
      }

      function setReplySerializer (replySerializer) {
        throwIfAlreadyStarted('Cannot call "setReplySerializer" when fastify instance is already started!');

        this[kReplySerializerDefault] = replySerializer;
        return this
      }

      // wrapper that we expose to the user for configure the custom error handler
      function setErrorHandler (func) {
        throwIfAlreadyStarted('Cannot call "setErrorHandler" when fastify instance is already started!');

        this[kErrorHandler] = buildErrorHandler(this[kErrorHandler], func.bind(this));
        return this
      }

      function printRoutes (opts = {}) {
        // includeHooks:true - shortcut to include all supported hooks exported by fastify.Hooks
        opts.includeMeta = opts.includeHooks ? opts.includeMeta ? supportedHooks.concat(opts.includeMeta) : supportedHooks : opts.includeMeta;
        return router.printRoutes(opts)
      }

      function wrapRouting (router, { rewriteUrl, logger }) {
        let isAsync;
        return function preRouting (req, res) {
          // only call isAsyncConstraint once
          if (isAsync === undefined) isAsync = router.isAsyncConstraint();
          if (rewriteUrl) {
            const originalUrl = req.url;
            const url = rewriteUrl(req);
            if (originalUrl !== url) {
              logger.debug({ originalUrl, url }, 'rewrite url');
              if (typeof url === 'string') {
                req.url = url;
              } else {
                req.destroy(new Error(`Rewrite url for "${req.url}" needs to be of type "string" but received "${typeof url}"`));
              }
            }
          }
          router.routing(req, res, buildAsyncConstraintCallback(isAsync, req, res));
        }
      }
    }

    fastify.errorCodes = errorCodes;

    function validateSchemaErrorFormatter (schemaErrorFormatter) {
      if (typeof schemaErrorFormatter !== 'function') {
        throw new Error(`schemaErrorFormatter option should be a function, instead got ${typeof schemaErrorFormatter}`)
      } else if (schemaErrorFormatter.constructor.name === 'AsyncFunction') {
        throw new Error('schemaErrorFormatter option should not be an async function')
      }
    }

    /**
     * These export configurations enable JS and TS developers
     * to consumer fastify in whatever way best suits their needs.
     * Some examples of supported import syntax includes:
     * - `const fastify = require('fastify')`
     * - `const { fastify } = require('fastify')`
     * - `import * as Fastify from 'fastify'`
     * - `import { fastify, TSC_definition } from 'fastify'`
     * - `import fastify from 'fastify'`
     * - `import fastify, { TSC_definition } from 'fastify'`
     */
    fastify$1.exports = fastify;
    fastifyExports.fastify = fastify;
    fastifyExports.default = fastify;

    function buildResults(count, routes, route) {
        if (count) {
            const results = [];
            for (let i = count; i > 0; i--) {
                results.push(routes[route].build());
            }
            return results;
        }
        else {
            return routes[route].build();
        }
    }
    class Server {
        static run(routes, config) {
            const server = fastifyExports();
            buildRoutes(server, routes, config);
            server.listen({ port: config.port || 3000 }, (err, address) => {
                if (err)
                    handleError(err);
                console.log(`faux.js server listening at ${address}`);
            });
            return server;
        }
    }
    function handleError(err) {
        console.error(err);
        process.exit(1);
    }
    function buildRoutes(server, routes, config) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const route in routes) {
                server.get(route, (request) => __awaiter(this, void 0, void 0, function* () {
                    const results = buildResults(request.query.count, routes, route);
                    // If there is a default, wrap the returned response in a set timeout
                    if (config.defaultDelay) {
                        let delay;
                        if (typeof config.defaultDelay === 'number') {
                            delay = config.defaultDelay;
                        }
                        else {
                            delay = int({ min: config.defaultDelay.min, max: config.defaultDelay.max });
                        }
                        yield pause(delay);
                        return results;
                    }
                    else {
                        return results;
                    }
                }));
            }
        });
    }
    function pause(duration) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                setTimeout(resolve, duration);
            });
        });
    }
    // const user = {
    // 	address: address,
    // 	age: () => Math.round(normalDist(20, 40, 2))
    // };
    // const userRegister = new Factory(user);
    // const routes: { [key: string]: any } = {
    // 	'/user': userRegister,
    // };
    // Server.run(routes, {});

    const API = {
        Server
    };

    var jsonwebtokenExports = {};
    var jsonwebtoken = {
      get exports(){ return jsonwebtokenExports; },
      set exports(v){ jsonwebtokenExports = v; },
    };

    var JsonWebTokenError$3 = function (message, error) {
      Error.call(this, message);
      if(Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = 'JsonWebTokenError';
      this.message = message;
      if (error) this.inner = error;
    };

    JsonWebTokenError$3.prototype = Object.create(Error.prototype);
    JsonWebTokenError$3.prototype.constructor = JsonWebTokenError$3;

    var JsonWebTokenError_1 = JsonWebTokenError$3;

    var JsonWebTokenError$2 = JsonWebTokenError_1;

    var NotBeforeError$1 = function (message, date) {
      JsonWebTokenError$2.call(this, message);
      this.name = 'NotBeforeError';
      this.date = date;
    };

    NotBeforeError$1.prototype = Object.create(JsonWebTokenError$2.prototype);

    NotBeforeError$1.prototype.constructor = NotBeforeError$1;

    var NotBeforeError_1 = NotBeforeError$1;

    var JsonWebTokenError$1 = JsonWebTokenError_1;

    var TokenExpiredError$1 = function (message, expiredAt) {
      JsonWebTokenError$1.call(this, message);
      this.name = 'TokenExpiredError';
      this.expiredAt = expiredAt;
    };

    TokenExpiredError$1.prototype = Object.create(JsonWebTokenError$1.prototype);

    TokenExpiredError$1.prototype.constructor = TokenExpiredError$1;

    var TokenExpiredError_1 = TokenExpiredError$1;

    var jws$3 = {};

    var safeBufferExports = {};
    var safeBuffer = {
      get exports(){ return safeBufferExports; },
      set exports(v){ safeBufferExports = v; },
    };

    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

    (function (module, exports) {
    	/* eslint-disable node/no-deprecated-api */
    	var buffer = require$$0$5;
    	var Buffer = buffer.Buffer;

    	// alternative to using Object.keys for old browsers
    	function copyProps (src, dst) {
    	  for (var key in src) {
    	    dst[key] = src[key];
    	  }
    	}
    	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    	  module.exports = buffer;
    	} else {
    	  // Copy properties from require('buffer')
    	  copyProps(buffer, exports);
    	  exports.Buffer = SafeBuffer;
    	}

    	function SafeBuffer (arg, encodingOrOffset, length) {
    	  return Buffer(arg, encodingOrOffset, length)
    	}

    	SafeBuffer.prototype = Object.create(Buffer.prototype);

    	// Copy static methods from Buffer
    	copyProps(Buffer, SafeBuffer);

    	SafeBuffer.from = function (arg, encodingOrOffset, length) {
    	  if (typeof arg === 'number') {
    	    throw new TypeError('Argument must not be a number')
    	  }
    	  return Buffer(arg, encodingOrOffset, length)
    	};

    	SafeBuffer.alloc = function (size, fill, encoding) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('Argument must be a number')
    	  }
    	  var buf = Buffer(size);
    	  if (fill !== undefined) {
    	    if (typeof encoding === 'string') {
    	      buf.fill(fill, encoding);
    	    } else {
    	      buf.fill(fill);
    	    }
    	  } else {
    	    buf.fill(0);
    	  }
    	  return buf
    	};

    	SafeBuffer.allocUnsafe = function (size) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('Argument must be a number')
    	  }
    	  return Buffer(size)
    	};

    	SafeBuffer.allocUnsafeSlow = function (size) {
    	  if (typeof size !== 'number') {
    	    throw new TypeError('Argument must be a number')
    	  }
    	  return buffer.SlowBuffer(size)
    	};
    } (safeBuffer, safeBufferExports));

    /*global module, process*/

    var Buffer$7 = safeBufferExports.Buffer;
    var Stream$2 = require$$0$9;
    var util$3 = require$$2;

    function DataStream$2(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;

      // No input
      if (!data) {
        this.buffer = Buffer$7.alloc(0);
        return this;
      }

      // Stream
      if (typeof data.pipe === 'function') {
        this.buffer = Buffer$7.alloc(0);
        data.pipe(this);
        return this;
      }

      // Buffer or String
      // or Object (assumedly a passworded key)
      if (data.length || typeof data === 'object') {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function () {
          this.emit('end', data);
          this.readable = false;
          this.emit('close');
        }.bind(this));
        return this;
      }

      throw new TypeError('Unexpected data type ('+ typeof data + ')');
    }
    util$3.inherits(DataStream$2, Stream$2);

    DataStream$2.prototype.write = function write(data) {
      this.buffer = Buffer$7.concat([this.buffer, Buffer$7.from(data)]);
      this.emit('data', data);
    };

    DataStream$2.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit('end', data);
      this.emit('close');
      this.writable = false;
      this.readable = false;
    };

    var dataStream = DataStream$2;

    /*jshint node:true */
    var Buffer$6 = require$$0$5.Buffer; // browserify
    var SlowBuffer = require$$0$5.SlowBuffer;

    var bufferEqualConstantTime = bufferEq;

    function bufferEq(a, b) {

      // shortcutting on type is necessary for correctness
      if (!Buffer$6.isBuffer(a) || !Buffer$6.isBuffer(b)) {
        return false;
      }

      // buffer sizes should be well-known information, so despite this
      // shortcutting, it doesn't leak any information about the *contents* of the
      // buffers.
      if (a.length !== b.length) {
        return false;
      }

      var c = 0;
      for (var i = 0; i < a.length; i++) {
        /*jshint bitwise:false */
        c |= a[i] ^ b[i]; // XOR
      }
      return c === 0;
    }

    bufferEq.install = function() {
      Buffer$6.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
      };
    };

    var origBufEqual = Buffer$6.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function() {
      Buffer$6.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };

    function getParamSize(keySize) {
    	var result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);
    	return result;
    }

    var paramBytesForAlg = {
    	ES256: getParamSize(256),
    	ES384: getParamSize(384),
    	ES512: getParamSize(521)
    };

    function getParamBytesForAlg$1(alg) {
    	var paramBytes = paramBytesForAlg[alg];
    	if (paramBytes) {
    		return paramBytes;
    	}

    	throw new Error('Unknown algorithm "' + alg + '"');
    }

    var paramBytesForAlg_1 = getParamBytesForAlg$1;

    var Buffer$5 = safeBufferExports.Buffer;

    var getParamBytesForAlg = paramBytesForAlg_1;

    var MAX_OCTET = 0x80,
    	CLASS_UNIVERSAL = 0,
    	PRIMITIVE_BIT = 0x20,
    	TAG_SEQ = 0x10,
    	TAG_INT = 0x02,
    	ENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6),
    	ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);

    function base64Url(base64) {
    	return base64
    		.replace(/=/g, '')
    		.replace(/\+/g, '-')
    		.replace(/\//g, '_');
    }

    function signatureAsBuffer(signature) {
    	if (Buffer$5.isBuffer(signature)) {
    		return signature;
    	} else if ('string' === typeof signature) {
    		return Buffer$5.from(signature, 'base64');
    	}

    	throw new TypeError('ECDSA signature must be a Base64 string or a Buffer');
    }

    function derToJose(signature, alg) {
    	signature = signatureAsBuffer(signature);
    	var paramBytes = getParamBytesForAlg(alg);

    	// the DER encoded param should at most be the param size, plus a padding
    	// zero, since due to being a signed integer
    	var maxEncodedParamLength = paramBytes + 1;

    	var inputLength = signature.length;

    	var offset = 0;
    	if (signature[offset++] !== ENCODED_TAG_SEQ) {
    		throw new Error('Could not find expected "seq"');
    	}

    	var seqLength = signature[offset++];
    	if (seqLength === (MAX_OCTET | 1)) {
    		seqLength = signature[offset++];
    	}

    	if (inputLength - offset < seqLength) {
    		throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
    	}

    	if (signature[offset++] !== ENCODED_TAG_INT) {
    		throw new Error('Could not find expected "int" for "r"');
    	}

    	var rLength = signature[offset++];

    	if (inputLength - offset - 2 < rLength) {
    		throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
    	}

    	if (maxEncodedParamLength < rLength) {
    		throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
    	}

    	var rOffset = offset;
    	offset += rLength;

    	if (signature[offset++] !== ENCODED_TAG_INT) {
    		throw new Error('Could not find expected "int" for "s"');
    	}

    	var sLength = signature[offset++];

    	if (inputLength - offset !== sLength) {
    		throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
    	}

    	if (maxEncodedParamLength < sLength) {
    		throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
    	}

    	var sOffset = offset;
    	offset += sLength;

    	if (offset !== inputLength) {
    		throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
    	}

    	var rPadding = paramBytes - rLength,
    		sPadding = paramBytes - sLength;

    	var dst = Buffer$5.allocUnsafe(rPadding + rLength + sPadding + sLength);

    	for (offset = 0; offset < rPadding; ++offset) {
    		dst[offset] = 0;
    	}
    	signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);

    	offset = paramBytes;

    	for (var o = offset; offset < o + sPadding; ++offset) {
    		dst[offset] = 0;
    	}
    	signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);

    	dst = dst.toString('base64');
    	dst = base64Url(dst);

    	return dst;
    }

    function countPadding(buf, start, stop) {
    	var padding = 0;
    	while (start + padding < stop && buf[start + padding] === 0) {
    		++padding;
    	}

    	var needsSign = buf[start + padding] >= MAX_OCTET;
    	if (needsSign) {
    		--padding;
    	}

    	return padding;
    }

    function joseToDer(signature, alg) {
    	signature = signatureAsBuffer(signature);
    	var paramBytes = getParamBytesForAlg(alg);

    	var signatureBytes = signature.length;
    	if (signatureBytes !== paramBytes * 2) {
    		throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
    	}

    	var rPadding = countPadding(signature, 0, paramBytes);
    	var sPadding = countPadding(signature, paramBytes, signature.length);
    	var rLength = paramBytes - rPadding;
    	var sLength = paramBytes - sPadding;

    	var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;

    	var shortLength = rsBytes < MAX_OCTET;

    	var dst = Buffer$5.allocUnsafe((shortLength ? 2 : 3) + rsBytes);

    	var offset = 0;
    	dst[offset++] = ENCODED_TAG_SEQ;
    	if (shortLength) {
    		// Bit 8 has value "0"
    		// bits 7-1 give the length.
    		dst[offset++] = rsBytes;
    	} else {
    		// Bit 8 of first octet has value "1"
    		// bits 7-1 give the number of additional length octets.
    		dst[offset++] = MAX_OCTET	| 1;
    		// length, base 256
    		dst[offset++] = rsBytes & 0xff;
    	}
    	dst[offset++] = ENCODED_TAG_INT;
    	dst[offset++] = rLength;
    	if (rPadding < 0) {
    		dst[offset++] = 0;
    		offset += signature.copy(dst, offset, 0, paramBytes);
    	} else {
    		offset += signature.copy(dst, offset, rPadding, paramBytes);
    	}
    	dst[offset++] = ENCODED_TAG_INT;
    	dst[offset++] = sLength;
    	if (sPadding < 0) {
    		dst[offset++] = 0;
    		signature.copy(dst, offset, paramBytes);
    	} else {
    		signature.copy(dst, offset, paramBytes + sPadding);
    	}

    	return dst;
    }

    var ecdsaSigFormatter = {
    	derToJose: derToJose,
    	joseToDer: joseToDer
    };

    var bufferEqual = bufferEqualConstantTime;
    var Buffer$4 = safeBufferExports.Buffer;
    var crypto = require$$2$3;
    var formatEcdsa = ecdsaSigFormatter;
    var util$2 = require$$2;

    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = 'secret must be a string or buffer';
    var MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';
    var MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';

    var supportsKeyObjects = typeof crypto.createPublicKey === 'function';
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';
      MSG_INVALID_SECRET += 'or a KeyObject';
    }

    function checkIsPublicKey(key) {
      if (Buffer$4.isBuffer(key)) {
        return;
      }

      if (typeof key === 'string') {
        return;
      }

      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }

      if (typeof key !== 'object') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }

      if (typeof key.type !== 'string') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }

      if (typeof key.asymmetricKeyType !== 'string') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }

      if (typeof key.export !== 'function') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer$4.isBuffer(key)) {
        return;
      }

      if (typeof key === 'string') {
        return;
      }

      if (typeof key === 'object') {
        return;
      }

      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer$4.isBuffer(key)) {
        return;
      }

      if (typeof key === 'string') {
        return key;
      }

      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }

      if (typeof key !== 'object') {
        throw typeError(MSG_INVALID_SECRET);
      }

      if (key.type !== 'secret') {
        throw typeError(MSG_INVALID_SECRET);
      }

      if (typeof key.export !== 'function') {
        throw typeError(MSG_INVALID_SECRET);
      }
    }

    function fromBase64(base64) {
      return base64
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
    }

    function toBase64(base64url) {
      base64url = base64url.toString();

      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i = 0; i < padding; ++i) {
          base64url += '=';
        }
      }

      return base64url
        .replace(/\-/g, '+')
        .replace(/_/g, '/');
    }

    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util$2.format.bind(util$2, template).apply(null, args);
      return new TypeError(errMsg);
    }

    function bufferOrString(obj) {
      return Buffer$4.isBuffer(obj) || typeof obj === 'string';
    }

    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }

    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto.createHmac('sha' + bits, secret);
        var sig = (hmac.update(thing), hmac.digest('base64'));
        return fromBase64(sig);
      }
    }

    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer$4.from(signature), Buffer$4.from(computedSig));
      }
    }

    function createKeySigner(bits) {
     return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        // Even though we are specifying "RSA" here, this works with ECDSA
        // keys as well.
        var signer = crypto.createSign('RSA-SHA' + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));
        return fromBase64(sig);
      }
    }

    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto.createVerify('RSA-SHA' + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, 'base64');
      }
    }

    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto.createSign('RSA-SHA' + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
        }, 'base64'));
        return fromBase64(sig);
      }
    }

    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto.createVerify('RSA-SHA' + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, 'base64');
      }
    }

    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, 'ES' + bits);
        return signature;
      };
    }

    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, 'ES' + bits).toString('base64');
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }

    function createNoneSigner() {
      return function sign() {
        return '';
      }
    }

    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === '';
      }
    }

    var jwa$2 = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner,
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier,
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];

      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits),
      }
    };

    /*global module*/

    var Buffer$3 = require$$0$5.Buffer;

    var tostring = function toString(obj) {
      if (typeof obj === 'string')
        return obj;
      if (typeof obj === 'number' || Buffer$3.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };

    /*global module*/

    var Buffer$2 = safeBufferExports.Buffer;
    var DataStream$1 = dataStream;
    var jwa$1 = jwa$2;
    var Stream$1 = require$$0$9;
    var toString$1 = tostring;
    var util$1 = require$$2;

    function base64url(string, encoding) {
      return Buffer$2
        .from(string, encoding)
        .toString('base64')
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
    }

    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || 'utf8';
      var encodedHeader = base64url(toString$1(header), 'binary');
      var encodedPayload = base64url(toString$1(payload), encoding);
      return util$1.format('%s.%s', encodedHeader, encodedPayload);
    }

    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa$1(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util$1.format('%s.%s', securedInput, signature);
    }

    function SignStream$1(opts) {
      var secret = opts.secret||opts.privateKey||opts.key;
      var secretStream = new DataStream$1(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream$1(opts.payload);
      this.secret.once('close', function () {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));

      this.payload.once('close', function () {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util$1.inherits(SignStream$1, Stream$1);

    SignStream$1.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit('done', signature);
        this.emit('data', signature);
        this.emit('end');
        this.readable = false;
        return signature;
      } catch (e) {
        this.readable = false;
        this.emit('error', e);
        this.emit('close');
      }
    };

    SignStream$1.sign = jwsSign;

    var signStream = SignStream$1;

    /*global module*/

    var Buffer$1 = safeBufferExports.Buffer;
    var DataStream = dataStream;
    var jwa = jwa$2;
    var Stream = require$$0$9;
    var toString = tostring;
    var util = require$$2;
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;

    function isObject(thing) {
      return Object.prototype.toString.call(thing) === '[object Object]';
    }

    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try { return JSON.parse(thing); }
      catch (e) { return undefined; }
    }

    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split('.', 1)[0];
      return safeJsonParse(Buffer$1.from(encodedHeader, 'base64').toString('binary'));
    }

    function securedInputFromJWS(jwsSig) {
      return jwsSig.split('.', 2).join('.');
    }

    function signatureFromJWS(jwsSig) {
      return jwsSig.split('.')[2];
    }

    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || 'utf8';
      var payload = jwsSig.split('.')[1];
      return Buffer$1.from(payload, 'base64').toString(encoding);
    }

    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }

    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }

    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);

      if (!isValidJws(jwsSig))
        return null;

      var header = headerFromJWS(jwsSig);

      if (!header)
        return null;

      var payload = payloadFromJWS(jwsSig);
      if (header.typ === 'JWT' || opts.json)
        payload = JSON.parse(payload, opts.encoding);

      return {
        header: header,
        payload: payload,
        signature: signatureFromJWS(jwsSig)
      };
    }

    function VerifyStream$1(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret||opts.publicKey||opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once('close', function () {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));

      this.signature.once('close', function () {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream$1, Stream);
    VerifyStream$1.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit('done', valid, obj);
        this.emit('data', valid);
        this.emit('end');
        this.readable = false;
        return valid;
      } catch (e) {
        this.readable = false;
        this.emit('error', e);
        this.emit('close');
      }
    };

    VerifyStream$1.decode = jwsDecode;
    VerifyStream$1.isValid = isValidJws;
    VerifyStream$1.verify = jwsVerify;

    var verifyStream = VerifyStream$1;

    /*global exports*/

    var SignStream = signStream;
    var VerifyStream = verifyStream;

    var ALGORITHMS = [
      'HS256', 'HS384', 'HS512',
      'RS256', 'RS384', 'RS512',
      'PS256', 'PS384', 'PS512',
      'ES256', 'ES384', 'ES512'
    ];

    jws$3.ALGORITHMS = ALGORITHMS;
    jws$3.sign = SignStream.sign;
    jws$3.verify = VerifyStream.verify;
    jws$3.decode = VerifyStream.decode;
    jws$3.isValid = VerifyStream.isValid;
    jws$3.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    jws$3.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };

    var jws$2 = jws$3;

    var decode$1 = function (jwt, options) {
      options = options || {};
      var decoded = jws$2.decode(jwt, options);
      if (!decoded) { return null; }
      var payload = decoded.payload;

      //try parse the payload
      if(typeof payload === 'string') {
        try {
          var obj = JSON.parse(payload);
          if(obj !== null && typeof obj === 'object') {
            payload = obj;
          }
        } catch (e) { }
      }

      //return header if `complete` option is enabled.  header includes claims
      //such as `kid` and `alg` used to select the key within a JWKS needed to
      //verify the signature
      if (options.complete === true) {
        return {
          header: decoded.header,
          payload: payload,
          signature: decoded.signature
        };
      }
      return payload;
    };

    var ms = ms$1;

    var timespan$2 = function (time, iat) {
      var timestamp = iat || Math.floor(Date.now() / 1000);

      if (typeof time === 'string') {
        var milliseconds = ms(time);
        if (typeof milliseconds === 'undefined') {
          return;
        }
        return Math.floor(timestamp + milliseconds / 1000);
      } else if (typeof time === 'number') {
        return timestamp + time;
      } else {
        return;
      }

    };

    const semver$2 = semver$4;

    var asymmetricKeyDetailsSupported = semver$2.satisfies(process.version, '>=15.7.0');

    const semver$1 = semver$4;

    var rsaPssKeyDetailsSupported = semver$1.satisfies(process.version, '>=16.9.0');

    const ASYMMETRIC_KEY_DETAILS_SUPPORTED = asymmetricKeyDetailsSupported;
    const RSA_PSS_KEY_DETAILS_SUPPORTED = rsaPssKeyDetailsSupported;

    const allowedAlgorithmsForKeys = {
      'ec': ['ES256', 'ES384', 'ES512'],
      'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],
      'rsa-pss': ['PS256', 'PS384', 'PS512']
    };

    const allowedCurves = {
      ES256: 'prime256v1',
      ES384: 'secp384r1',
      ES512: 'secp521r1',
    };

    var validateAsymmetricKey$2 = function(algorithm, key) {
      if (!algorithm || !key) return;

      const keyType = key.asymmetricKeyType;
      if (!keyType) return;

      const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];

      if (!allowedAlgorithms) {
        throw new Error(`Unknown key type "${keyType}".`);
      }

      if (!allowedAlgorithms.includes(algorithm)) {
        throw new Error(`"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(', ')}.`)
      }

      /*
       * Ignore the next block from test coverage because it gets executed
       * conditionally depending on the Node version. Not ignoring it would
       * prevent us from reaching the target % of coverage for versions of
       * Node under 15.7.0.
       */
      /* istanbul ignore next */
      if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {
        switch (keyType) {
        case 'ec':
          const keyCurve = key.asymmetricKeyDetails.namedCurve;
          const allowedCurve = allowedCurves[algorithm];

          if (keyCurve !== allowedCurve) {
            throw new Error(`"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`);
          }
          break;

        case 'rsa-pss':
          if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
            const length = parseInt(algorithm.slice(-3), 10);
            const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;

            if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {
              throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`);
            }

            if (saltLength !== undefined && saltLength > length >> 3) {
              throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`)
            }
          }
          break;
        }
      }
    };

    var semver = semver$4;

    var psSupported = semver.satisfies(process.version, '^6.12.0 || >=8.0.0');

    const JsonWebTokenError = JsonWebTokenError_1;
    const NotBeforeError = NotBeforeError_1;
    const TokenExpiredError = TokenExpiredError_1;
    const decode = decode$1;
    const timespan$1 = timespan$2;
    const validateAsymmetricKey$1 = validateAsymmetricKey$2;
    const PS_SUPPORTED$1 = psSupported;
    const jws$1 = jws$3;
    const {KeyObject: KeyObject$1, createSecretKey: createSecretKey$1, createPublicKey} = require$$2$3;

    const PUB_KEY_ALGS = ['RS256', 'RS384', 'RS512'];
    const EC_KEY_ALGS = ['ES256', 'ES384', 'ES512'];
    const RSA_KEY_ALGS = ['RS256', 'RS384', 'RS512'];
    const HS_ALGS = ['HS256', 'HS384', 'HS512'];

    if (PS_SUPPORTED$1) {
      PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');
      RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');
    }

    var verify = function (jwtString, secretOrPublicKey, options, callback) {
      if ((typeof options === 'function') && !callback) {
        callback = options;
        options = {};
      }

      if (!options) {
        options = {};
      }

      //clone this object since we are going to mutate it.
      options = Object.assign({}, options);

      let done;

      if (callback) {
        done = callback;
      } else {
        done = function(err, data) {
          if (err) throw err;
          return data;
        };
      }

      if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {
        return done(new JsonWebTokenError('clockTimestamp must be a number'));
      }

      if (options.nonce !== undefined && (typeof options.nonce !== 'string' || options.nonce.trim() === '')) {
        return done(new JsonWebTokenError('nonce must be a non-empty string'));
      }

      if (options.allowInvalidAsymmetricKeyTypes !== undefined && typeof options.allowInvalidAsymmetricKeyTypes !== 'boolean') {
        return done(new JsonWebTokenError('allowInvalidAsymmetricKeyTypes must be a boolean'));
      }

      const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);

      if (!jwtString){
        return done(new JsonWebTokenError('jwt must be provided'));
      }

      if (typeof jwtString !== 'string') {
        return done(new JsonWebTokenError('jwt must be a string'));
      }

      const parts = jwtString.split('.');

      if (parts.length !== 3){
        return done(new JsonWebTokenError('jwt malformed'));
      }

      let decodedToken;

      try {
        decodedToken = decode(jwtString, { complete: true });
      } catch(err) {
        return done(err);
      }

      if (!decodedToken) {
        return done(new JsonWebTokenError('invalid token'));
      }

      const header = decodedToken.header;
      let getSecret;

      if(typeof secretOrPublicKey === 'function') {
        if(!callback) {
          return done(new JsonWebTokenError('verify must be called asynchronous if secret or public key is provided as a callback'));
        }

        getSecret = secretOrPublicKey;
      }
      else {
        getSecret = function(header, secretCallback) {
          return secretCallback(null, secretOrPublicKey);
        };
      }

      return getSecret(header, function(err, secretOrPublicKey) {
        if(err) {
          return done(new JsonWebTokenError('error in secret or public key callback: ' + err.message));
        }

        const hasSignature = parts[2].trim() !== '';

        if (!hasSignature && secretOrPublicKey){
          return done(new JsonWebTokenError('jwt signature is required'));
        }

        if (hasSignature && !secretOrPublicKey) {
          return done(new JsonWebTokenError('secret or public key must be provided'));
        }

        if (!hasSignature && !options.algorithms) {
          return done(new JsonWebTokenError('please specify "none" in "algorithms" to verify unsigned tokens'));
        }

        if (secretOrPublicKey != null && !(secretOrPublicKey instanceof KeyObject$1)) {
          try {
            secretOrPublicKey = createPublicKey(secretOrPublicKey);
          } catch (_) {
            try {
              secretOrPublicKey = createSecretKey$1(typeof secretOrPublicKey === 'string' ? Buffer.from(secretOrPublicKey) : secretOrPublicKey);
            } catch (_) {
              return done(new JsonWebTokenError('secretOrPublicKey is not valid key material'))
            }
          }
        }

        if (!options.algorithms) {
          if (secretOrPublicKey.type === 'secret') {
            options.algorithms = HS_ALGS;
          } else if (['rsa', 'rsa-pss'].includes(secretOrPublicKey.asymmetricKeyType)) {
            options.algorithms = RSA_KEY_ALGS;
          } else if (secretOrPublicKey.asymmetricKeyType === 'ec') {
            options.algorithms = EC_KEY_ALGS;
          } else {
            options.algorithms = PUB_KEY_ALGS;
          }
        }

        if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {
          return done(new JsonWebTokenError('invalid algorithm'));
        }

        if (header.alg.startsWith('HS') && secretOrPublicKey.type !== 'secret') {
          return done(new JsonWebTokenError((`secretOrPublicKey must be a symmetric key when using ${header.alg}`)))
        } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey.type !== 'public') {
          return done(new JsonWebTokenError((`secretOrPublicKey must be an asymmetric key when using ${header.alg}`)))
        }

        if (!options.allowInvalidAsymmetricKeyTypes) {
          try {
            validateAsymmetricKey$1(header.alg, secretOrPublicKey);
          } catch (e) {
            return done(e);
          }
        }

        let valid;

        try {
          valid = jws$1.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);
        } catch (e) {
          return done(e);
        }

        if (!valid) {
          return done(new JsonWebTokenError('invalid signature'));
        }

        const payload = decodedToken.payload;

        if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {
          if (typeof payload.nbf !== 'number') {
            return done(new JsonWebTokenError('invalid nbf value'));
          }
          if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
            return done(new NotBeforeError('jwt not active', new Date(payload.nbf * 1000)));
          }
        }

        if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {
          if (typeof payload.exp !== 'number') {
            return done(new JsonWebTokenError('invalid exp value'));
          }
          if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
            return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));
          }
        }

        if (options.audience) {
          const audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
          const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];

          const match = target.some(function (targetAudience) {
            return audiences.some(function (audience) {
              return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
            });
          });

          if (!match) {
            return done(new JsonWebTokenError('jwt audience invalid. expected: ' + audiences.join(' or ')));
          }
        }

        if (options.issuer) {
          const invalid_issuer =
                  (typeof options.issuer === 'string' && payload.iss !== options.issuer) ||
                  (Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1);

          if (invalid_issuer) {
            return done(new JsonWebTokenError('jwt issuer invalid. expected: ' + options.issuer));
          }
        }

        if (options.subject) {
          if (payload.sub !== options.subject) {
            return done(new JsonWebTokenError('jwt subject invalid. expected: ' + options.subject));
          }
        }

        if (options.jwtid) {
          if (payload.jti !== options.jwtid) {
            return done(new JsonWebTokenError('jwt jwtid invalid. expected: ' + options.jwtid));
          }
        }

        if (options.nonce) {
          if (payload.nonce !== options.nonce) {
            return done(new JsonWebTokenError('jwt nonce invalid. expected: ' + options.nonce));
          }
        }

        if (options.maxAge) {
          if (typeof payload.iat !== 'number') {
            return done(new JsonWebTokenError('iat required when maxAge is specified'));
          }

          const maxAgeTimestamp = timespan$1(options.maxAge, payload.iat);
          if (typeof maxAgeTimestamp === 'undefined') {
            return done(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
          }
          if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {
            return done(new TokenExpiredError('maxAge exceeded', new Date(maxAgeTimestamp * 1000)));
          }
        }

        if (options.complete === true) {
          const signature = decodedToken.signature;

          return done(null, {
            header: header,
            payload: payload,
            signature: signature
          });
        }

        return done(null, payload);
      });
    };

    var lodashExports = {};
    var lodash = {
      get exports(){ return lodashExports; },
      set exports(v){ lodashExports = v; },
    };

    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    (function (module, exports) {
    (function() {

    	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    	  var undefined$1;

    	  /** Used as the semantic version number. */
    	  var VERSION = '4.17.21';

    	  /** Used as the size to enable large array optimizations. */
    	  var LARGE_ARRAY_SIZE = 200;

    	  /** Error message constants. */
    	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
    	      FUNC_ERROR_TEXT = 'Expected a function',
    	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    	  /** Used to stand-in for `undefined` hash values. */
    	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	  /** Used as the maximum memoize cache size. */
    	  var MAX_MEMOIZE_SIZE = 500;

    	  /** Used as the internal argument placeholder. */
    	  var PLACEHOLDER = '__lodash_placeholder__';

    	  /** Used to compose bitmasks for cloning. */
    	  var CLONE_DEEP_FLAG = 1,
    	      CLONE_FLAT_FLAG = 2,
    	      CLONE_SYMBOLS_FLAG = 4;

    	  /** Used to compose bitmasks for value comparisons. */
    	  var COMPARE_PARTIAL_FLAG = 1,
    	      COMPARE_UNORDERED_FLAG = 2;

    	  /** Used to compose bitmasks for function metadata. */
    	  var WRAP_BIND_FLAG = 1,
    	      WRAP_BIND_KEY_FLAG = 2,
    	      WRAP_CURRY_BOUND_FLAG = 4,
    	      WRAP_CURRY_FLAG = 8,
    	      WRAP_CURRY_RIGHT_FLAG = 16,
    	      WRAP_PARTIAL_FLAG = 32,
    	      WRAP_PARTIAL_RIGHT_FLAG = 64,
    	      WRAP_ARY_FLAG = 128,
    	      WRAP_REARG_FLAG = 256,
    	      WRAP_FLIP_FLAG = 512;

    	  /** Used as default options for `_.truncate`. */
    	  var DEFAULT_TRUNC_LENGTH = 30,
    	      DEFAULT_TRUNC_OMISSION = '...';

    	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
    	  var HOT_COUNT = 800,
    	      HOT_SPAN = 16;

    	  /** Used to indicate the type of lazy iteratees. */
    	  var LAZY_FILTER_FLAG = 1,
    	      LAZY_MAP_FLAG = 2,
    	      LAZY_WHILE_FLAG = 3;

    	  /** Used as references for various `Number` constants. */
    	  var INFINITY = 1 / 0,
    	      MAX_SAFE_INTEGER = 9007199254740991,
    	      MAX_INTEGER = 1.7976931348623157e+308,
    	      NAN = 0 / 0;

    	  /** Used as references for the maximum length and index of an array. */
    	  var MAX_ARRAY_LENGTH = 4294967295,
    	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
    	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    	  /** Used to associate wrap methods with their bit flags. */
    	  var wrapFlags = [
    	    ['ary', WRAP_ARY_FLAG],
    	    ['bind', WRAP_BIND_FLAG],
    	    ['bindKey', WRAP_BIND_KEY_FLAG],
    	    ['curry', WRAP_CURRY_FLAG],
    	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    	    ['flip', WRAP_FLIP_FLAG],
    	    ['partial', WRAP_PARTIAL_FLAG],
    	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    	    ['rearg', WRAP_REARG_FLAG]
    	  ];

    	  /** `Object#toString` result references. */
    	  var argsTag = '[object Arguments]',
    	      arrayTag = '[object Array]',
    	      asyncTag = '[object AsyncFunction]',
    	      boolTag = '[object Boolean]',
    	      dateTag = '[object Date]',
    	      domExcTag = '[object DOMException]',
    	      errorTag = '[object Error]',
    	      funcTag = '[object Function]',
    	      genTag = '[object GeneratorFunction]',
    	      mapTag = '[object Map]',
    	      numberTag = '[object Number]',
    	      nullTag = '[object Null]',
    	      objectTag = '[object Object]',
    	      promiseTag = '[object Promise]',
    	      proxyTag = '[object Proxy]',
    	      regexpTag = '[object RegExp]',
    	      setTag = '[object Set]',
    	      stringTag = '[object String]',
    	      symbolTag = '[object Symbol]',
    	      undefinedTag = '[object Undefined]',
    	      weakMapTag = '[object WeakMap]',
    	      weakSetTag = '[object WeakSet]';

    	  var arrayBufferTag = '[object ArrayBuffer]',
    	      dataViewTag = '[object DataView]',
    	      float32Tag = '[object Float32Array]',
    	      float64Tag = '[object Float64Array]',
    	      int8Tag = '[object Int8Array]',
    	      int16Tag = '[object Int16Array]',
    	      int32Tag = '[object Int32Array]',
    	      uint8Tag = '[object Uint8Array]',
    	      uint8ClampedTag = '[object Uint8ClampedArray]',
    	      uint16Tag = '[object Uint16Array]',
    	      uint32Tag = '[object Uint32Array]';

    	  /** Used to match empty string literals in compiled template source. */
    	  var reEmptyStringLeading = /\b__p \+= '';/g,
    	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    	  /** Used to match HTML entities and HTML characters. */
    	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
    	      reUnescapedHtml = /[&<>"']/g,
    	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
    	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    	  /** Used to match template delimiters. */
    	  var reEscape = /<%-([\s\S]+?)%>/g,
    	      reEvaluate = /<%([\s\S]+?)%>/g,
    	      reInterpolate = /<%=([\s\S]+?)%>/g;

    	  /** Used to match property names within property paths. */
    	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    	      reIsPlainProp = /^\w*$/,
    	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    	  /**
    	   * Used to match `RegExp`
    	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	   */
    	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    	      reHasRegExpChar = RegExp(reRegExpChar.source);

    	  /** Used to match leading whitespace. */
    	  var reTrimStart = /^\s+/;

    	  /** Used to match a single whitespace character. */
    	  var reWhitespace = /\s/;

    	  /** Used to match wrap detail comments. */
    	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    	      reSplitDetails = /,? & /;

    	  /** Used to match words composed of alphanumeric characters. */
    	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    	  /**
    	   * Used to validate the `validate` option in `_.template` variable.
    	   *
    	   * Forbids characters which could potentially change the meaning of the function argument definition:
    	   * - "()," (modification of function parameters)
    	   * - "=" (default value)
    	   * - "[]{}" (destructuring of function parameters)
    	   * - "/" (beginning of a comment)
    	   * - whitespace
    	   */
    	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    	  /** Used to match backslashes in property paths. */
    	  var reEscapeChar = /\\(\\)?/g;

    	  /**
    	   * Used to match
    	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
    	   */
    	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    	  /** Used to match `RegExp` flags from their coerced string values. */
    	  var reFlags = /\w*$/;

    	  /** Used to detect bad signed hexadecimal string values. */
    	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    	  /** Used to detect binary string values. */
    	  var reIsBinary = /^0b[01]+$/i;

    	  /** Used to detect host constructors (Safari). */
    	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	  /** Used to detect octal string values. */
    	  var reIsOctal = /^0o[0-7]+$/i;

    	  /** Used to detect unsigned integer values. */
    	  var reIsUint = /^(?:0|[1-9]\d*)$/;

    	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
    	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    	  /** Used to ensure capturing order of template delimiters. */
    	  var reNoMatch = /($^)/;

    	  /** Used to match unescaped characters in compiled string literals. */
    	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    	  /** Used to compose unicode character classes. */
    	  var rsAstralRange = '\\ud800-\\udfff',
    	      rsComboMarksRange = '\\u0300-\\u036f',
    	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
    	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    	      rsDingbatRange = '\\u2700-\\u27bf',
    	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    	      rsPunctuationRange = '\\u2000-\\u206f',
    	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    	      rsVarRange = '\\ufe0e\\ufe0f',
    	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    	  /** Used to compose unicode capture groups. */
    	  var rsApos = "['\u2019]",
    	      rsAstral = '[' + rsAstralRange + ']',
    	      rsBreak = '[' + rsBreakRange + ']',
    	      rsCombo = '[' + rsComboRange + ']',
    	      rsDigits = '\\d+',
    	      rsDingbat = '[' + rsDingbatRange + ']',
    	      rsLower = '[' + rsLowerRange + ']',
    	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
    	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    	      rsNonAstral = '[^' + rsAstralRange + ']',
    	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    	      rsUpper = '[' + rsUpperRange + ']',
    	      rsZWJ = '\\u200d';

    	  /** Used to compose unicode regexes. */
    	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    	      reOptMod = rsModifier + '?',
    	      rsOptVar = '[' + rsVarRange + ']?',
    	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
    	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
    	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    	  /** Used to match apostrophes. */
    	  var reApos = RegExp(rsApos, 'g');

    	  /**
    	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
    	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
    	   */
    	  var reComboMark = RegExp(rsCombo, 'g');

    	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    	  /** Used to match complex or compound words. */
    	  var reUnicodeWord = RegExp([
    	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    	    rsUpper + '+' + rsOptContrUpper,
    	    rsOrdUpper,
    	    rsOrdLower,
    	    rsDigits,
    	    rsEmoji
    	  ].join('|'), 'g');

    	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    	  /** Used to detect strings that need a more robust regexp to match words. */
    	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    	  /** Used to assign default `context` object properties. */
    	  var contextProps = [
    	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    	  ];

    	  /** Used to make template sourceURLs easier to identify. */
    	  var templateCounter = -1;

    	  /** Used to identify `toStringTag` values of typed arrays. */
    	  var typedArrayTags = {};
    	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	  typedArrayTags[uint32Tag] = true;
    	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	  typedArrayTags[weakMapTag] = false;

    	  /** Used to identify `toStringTag` values supported by `_.clone`. */
    	  var cloneableTags = {};
    	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
    	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    	  cloneableTags[boolTag] = cloneableTags[dateTag] =
    	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
    	  cloneableTags[numberTag] = cloneableTags[objectTag] =
    	  cloneableTags[regexpTag] = cloneableTags[setTag] =
    	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
    	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    	  cloneableTags[errorTag] = cloneableTags[funcTag] =
    	  cloneableTags[weakMapTag] = false;

    	  /** Used to map Latin Unicode letters to basic Latin letters. */
    	  var deburredLetters = {
    	    // Latin-1 Supplement block.
    	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    	    '\xc7': 'C',  '\xe7': 'c',
    	    '\xd0': 'D',  '\xf0': 'd',
    	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    	    '\xd1': 'N',  '\xf1': 'n',
    	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    	    '\xc6': 'Ae', '\xe6': 'ae',
    	    '\xde': 'Th', '\xfe': 'th',
    	    '\xdf': 'ss',
    	    // Latin Extended-A block.
    	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    	    '\u0134': 'J',  '\u0135': 'j',
    	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    	    '\u0174': 'W',  '\u0175': 'w',
    	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    	    '\u0132': 'IJ', '\u0133': 'ij',
    	    '\u0152': 'Oe', '\u0153': 'oe',
    	    '\u0149': "'n", '\u017f': 's'
    	  };

    	  /** Used to map characters to HTML entities. */
    	  var htmlEscapes = {
    	    '&': '&amp;',
    	    '<': '&lt;',
    	    '>': '&gt;',
    	    '"': '&quot;',
    	    "'": '&#39;'
    	  };

    	  /** Used to map HTML entities to characters. */
    	  var htmlUnescapes = {
    	    '&amp;': '&',
    	    '&lt;': '<',
    	    '&gt;': '>',
    	    '&quot;': '"',
    	    '&#39;': "'"
    	  };

    	  /** Used to escape characters for inclusion in compiled string literals. */
    	  var stringEscapes = {
    	    '\\': '\\',
    	    "'": "'",
    	    '\n': 'n',
    	    '\r': 'r',
    	    '\u2028': 'u2028',
    	    '\u2029': 'u2029'
    	  };

    	  /** Built-in method references without a dependency on `root`. */
    	  var freeParseFloat = parseFloat,
    	      freeParseInt = parseInt;

    	  /** Detect free variable `global` from Node.js. */
    	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	  /** Detect free variable `self`. */
    	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	  /** Used as a reference to the global object. */
    	  var root = freeGlobal || freeSelf || Function('return this')();

    	  /** Detect free variable `exports`. */
    	  var freeExports = exports && !exports.nodeType && exports;

    	  /** Detect free variable `module`. */
    	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	  /** Detect the popular CommonJS extension `module.exports`. */
    	  var moduleExports = freeModule && freeModule.exports === freeExports;

    	  /** Detect free variable `process` from Node.js. */
    	  var freeProcess = moduleExports && freeGlobal.process;

    	  /** Used to access faster Node.js helpers. */
    	  var nodeUtil = (function() {
    	    try {
    	      // Use `util.types` for Node.js 10+.
    	      var types = freeModule && freeModule.require && freeModule.require('util').types;

    	      if (types) {
    	        return types;
    	      }

    	      // Legacy `process.binding('util')` for Node.js < 10.
    	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    	    } catch (e) {}
    	  }());

    	  /* Node.js helper references. */
    	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
    	      nodeIsDate = nodeUtil && nodeUtil.isDate,
    	      nodeIsMap = nodeUtil && nodeUtil.isMap,
    	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
    	      nodeIsSet = nodeUtil && nodeUtil.isSet,
    	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    	  /*--------------------------------------------------------------------------*/

    	  /**
    	   * A faster alternative to `Function#apply`, this function invokes `func`
    	   * with the `this` binding of `thisArg` and the arguments of `args`.
    	   *
    	   * @private
    	   * @param {Function} func The function to invoke.
    	   * @param {*} thisArg The `this` binding of `func`.
    	   * @param {Array} args The arguments to invoke `func` with.
    	   * @returns {*} Returns the result of `func`.
    	   */
    	  function apply(func, thisArg, args) {
    	    switch (args.length) {
    	      case 0: return func.call(thisArg);
    	      case 1: return func.call(thisArg, args[0]);
    	      case 2: return func.call(thisArg, args[0], args[1]);
    	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    	    }
    	    return func.apply(thisArg, args);
    	  }

    	  /**
    	   * A specialized version of `baseAggregator` for arrays.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} setter The function to set `accumulator` values.
    	   * @param {Function} iteratee The iteratee to transform keys.
    	   * @param {Object} accumulator The initial aggregated object.
    	   * @returns {Function} Returns `accumulator`.
    	   */
    	  function arrayAggregator(array, setter, iteratee, accumulator) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      var value = array[index];
    	      setter(accumulator, value, iteratee(value), array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.forEach` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEach(array, iteratee) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (iteratee(array[index], index, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.forEachRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEachRight(array, iteratee) {
    	    var length = array == null ? 0 : array.length;

    	    while (length--) {
    	      if (iteratee(array[length], length, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.every` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	   *  else `false`.
    	   */
    	  function arrayEvery(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (!predicate(array[index], index, array)) {
    	        return false;
    	      }
    	    }
    	    return true;
    	  }

    	  /**
    	   * A specialized version of `_.filter` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {Array} Returns the new filtered array.
    	   */
    	  function arrayFilter(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length,
    	        resIndex = 0,
    	        result = [];

    	    while (++index < length) {
    	      var value = array[index];
    	      if (predicate(value, index, array)) {
    	        result[resIndex++] = value;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * A specialized version of `_.includes` for arrays without support for
    	   * specifying an index to search from.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to inspect.
    	   * @param {*} target The value to search for.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludes(array, value) {
    	    var length = array == null ? 0 : array.length;
    	    return !!length && baseIndexOf(array, value, 0) > -1;
    	  }

    	  /**
    	   * This function is like `arrayIncludes` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to inspect.
    	   * @param {*} target The value to search for.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludesWith(array, value, comparator) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (comparator(value, array[index])) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }

    	  /**
    	   * A specialized version of `_.map` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the new mapped array.
    	   */
    	  function arrayMap(array, iteratee) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length,
    	        result = Array(length);

    	    while (++index < length) {
    	      result[index] = iteratee(array[index], index, array);
    	    }
    	    return result;
    	  }

    	  /**
    	   * Appends the elements of `values` to `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {Array} values The values to append.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayPush(array, values) {
    	    var index = -1,
    	        length = values.length,
    	        offset = array.length;

    	    while (++index < length) {
    	      array[offset + index] = values[index];
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.reduce` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the first element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduce(array, iteratee, accumulator, initAccum) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    if (initAccum && length) {
    	      accumulator = array[++index];
    	    }
    	    while (++index < length) {
    	      accumulator = iteratee(accumulator, array[index], index, array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.reduceRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the last element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    	    var length = array == null ? 0 : array.length;
    	    if (initAccum && length) {
    	      accumulator = array[--length];
    	    }
    	    while (length--) {
    	      accumulator = iteratee(accumulator, array[length], length, array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.some` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if any element passes the predicate check,
    	   *  else `false`.
    	   */
    	  function arraySome(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (predicate(array[index], index, array)) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }

    	  /**
    	   * Gets the size of an ASCII `string`.
    	   *
    	   * @private
    	   * @param {string} string The string inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  var asciiSize = baseProperty('length');

    	  /**
    	   * Converts an ASCII `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function asciiToArray(string) {
    	    return string.split('');
    	  }

    	  /**
    	   * Splits an ASCII `string` into an array of its words.
    	   *
    	   * @private
    	   * @param {string} The string to inspect.
    	   * @returns {Array} Returns the words of `string`.
    	   */
    	  function asciiWords(string) {
    	    return string.match(reAsciiWord) || [];
    	  }

    	  /**
    	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
    	   * without support for iteratee shorthands, which iterates over `collection`
    	   * using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to inspect.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the found element or its key, else `undefined`.
    	   */
    	  function baseFindKey(collection, predicate, eachFunc) {
    	    var result;
    	    eachFunc(collection, function(value, key, collection) {
    	      if (predicate(value, key, collection)) {
    	        result = key;
    	        return false;
    	      }
    	    });
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
    	   * support for iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {boolean} [fromRight] Specify iterating from right to left.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    	    var length = array.length,
    	        index = fromIndex + (fromRight ? 1 : -1);

    	    while ((fromRight ? index-- : ++index < length)) {
    	      if (predicate(array[index], index, array)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOf(array, value, fromIndex) {
    	    return value === value
    	      ? strictIndexOf(array, value, fromIndex)
    	      : baseFindIndex(array, baseIsNaN, fromIndex);
    	  }

    	  /**
    	   * This function is like `baseIndexOf` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOfWith(array, value, fromIndex, comparator) {
    	    var index = fromIndex - 1,
    	        length = array.length;

    	    while (++index < length) {
    	      if (comparator(array[index], value)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * The base implementation of `_.isNaN` without support for number objects.
    	   *
    	   * @private
    	   * @param {*} value The value to check.
    	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	   */
    	  function baseIsNaN(value) {
    	    return value !== value;
    	  }

    	  /**
    	   * The base implementation of `_.mean` and `_.meanBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the mean.
    	   */
    	  function baseMean(array, iteratee) {
    	    var length = array == null ? 0 : array.length;
    	    return length ? (baseSum(array, iteratee) / length) : NAN;
    	  }

    	  /**
    	   * The base implementation of `_.property` without support for deep paths.
    	   *
    	   * @private
    	   * @param {string} key The key of the property to get.
    	   * @returns {Function} Returns the new accessor function.
    	   */
    	  function baseProperty(key) {
    	    return function(object) {
    	      return object == null ? undefined$1 : object[key];
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.propertyOf` without support for deep paths.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @returns {Function} Returns the new accessor function.
    	   */
    	  function basePropertyOf(object) {
    	    return function(key) {
    	      return object == null ? undefined$1 : object[key];
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
    	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} accumulator The initial value.
    	   * @param {boolean} initAccum Specify using the first or last element of
    	   *  `collection` as the initial value.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    	    eachFunc(collection, function(value, index, collection) {
    	      accumulator = initAccum
    	        ? (initAccum = false, value)
    	        : iteratee(accumulator, value, index, collection);
    	    });
    	    return accumulator;
    	  }

    	  /**
    	   * The base implementation of `_.sortBy` which uses `comparer` to define the
    	   * sort order of `array` and replaces criteria objects with their corresponding
    	   * values.
    	   *
    	   * @private
    	   * @param {Array} array The array to sort.
    	   * @param {Function} comparer The function to define sort order.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function baseSortBy(array, comparer) {
    	    var length = array.length;

    	    array.sort(comparer);
    	    while (length--) {
    	      array[length] = array[length].value;
    	    }
    	    return array;
    	  }

    	  /**
    	   * The base implementation of `_.sum` and `_.sumBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the sum.
    	   */
    	  function baseSum(array, iteratee) {
    	    var result,
    	        index = -1,
    	        length = array.length;

    	    while (++index < length) {
    	      var current = iteratee(array[index]);
    	      if (current !== undefined$1) {
    	        result = result === undefined$1 ? current : (result + current);
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.times` without support for iteratee shorthands
    	   * or max array length checks.
    	   *
    	   * @private
    	   * @param {number} n The number of times to invoke `iteratee`.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the array of results.
    	   */
    	  function baseTimes(n, iteratee) {
    	    var index = -1,
    	        result = Array(n);

    	    while (++index < n) {
    	      result[index] = iteratee(index);
    	    }
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
    	   * of key-value pairs for `object` corresponding to the property names of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the key-value pairs.
    	   */
    	  function baseToPairs(object, props) {
    	    return arrayMap(props, function(key) {
    	      return [key, object[key]];
    	    });
    	  }

    	  /**
    	   * The base implementation of `_.trim`.
    	   *
    	   * @private
    	   * @param {string} string The string to trim.
    	   * @returns {string} Returns the trimmed string.
    	   */
    	  function baseTrim(string) {
    	    return string
    	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    	      : string;
    	  }

    	  /**
    	   * The base implementation of `_.unary` without support for storing metadata.
    	   *
    	   * @private
    	   * @param {Function} func The function to cap arguments for.
    	   * @returns {Function} Returns the new capped function.
    	   */
    	  function baseUnary(func) {
    	    return function(value) {
    	      return func(value);
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.values` and `_.valuesIn` which creates an
    	   * array of `object` property values corresponding to the property names
    	   * of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the array of property values.
    	   */
    	  function baseValues(object, props) {
    	    return arrayMap(props, function(key) {
    	      return object[key];
    	    });
    	  }

    	  /**
    	   * Checks if a `cache` value for `key` exists.
    	   *
    	   * @private
    	   * @param {Object} cache The cache to query.
    	   * @param {string} key The key of the entry to check.
    	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	   */
    	  function cacheHas(cache, key) {
    	    return cache.has(key);
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the first unmatched string symbol.
    	   */
    	  function charsStartIndex(strSymbols, chrSymbols) {
    	    var index = -1,
    	        length = strSymbols.length;

    	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the last unmatched string symbol.
    	   */
    	  function charsEndIndex(strSymbols, chrSymbols) {
    	    var index = strSymbols.length;

    	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }

    	  /**
    	   * Gets the number of `placeholder` occurrences in `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} placeholder The placeholder to search for.
    	   * @returns {number} Returns the placeholder count.
    	   */
    	  function countHolders(array, placeholder) {
    	    var length = array.length,
    	        result = 0;

    	    while (length--) {
    	      if (array[length] === placeholder) {
    	        ++result;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
    	   * letters to basic Latin letters.
    	   *
    	   * @private
    	   * @param {string} letter The matched letter to deburr.
    	   * @returns {string} Returns the deburred letter.
    	   */
    	  var deburrLetter = basePropertyOf(deburredLetters);

    	  /**
    	   * Used by `_.escape` to convert characters to HTML entities.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

    	  /**
    	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  function escapeStringChar(chr) {
    	    return '\\' + stringEscapes[chr];
    	  }

    	  /**
    	   * Gets the value at `key` of `object`.
    	   *
    	   * @private
    	   * @param {Object} [object] The object to query.
    	   * @param {string} key The key of the property to get.
    	   * @returns {*} Returns the property value.
    	   */
    	  function getValue(object, key) {
    	    return object == null ? undefined$1 : object[key];
    	  }

    	  /**
    	   * Checks if `string` contains Unicode symbols.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
    	   */
    	  function hasUnicode(string) {
    	    return reHasUnicode.test(string);
    	  }

    	  /**
    	   * Checks if `string` contains a word composed of Unicode symbols.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {boolean} Returns `true` if a word is found, else `false`.
    	   */
    	  function hasUnicodeWord(string) {
    	    return reHasUnicodeWord.test(string);
    	  }

    	  /**
    	   * Converts `iterator` to an array.
    	   *
    	   * @private
    	   * @param {Object} iterator The iterator to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function iteratorToArray(iterator) {
    	    var data,
    	        result = [];

    	    while (!(data = iterator.next()).done) {
    	      result.push(data.value);
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts `map` to its key-value pairs.
    	   *
    	   * @private
    	   * @param {Object} map The map to convert.
    	   * @returns {Array} Returns the key-value pairs.
    	   */
    	  function mapToArray(map) {
    	    var index = -1,
    	        result = Array(map.size);

    	    map.forEach(function(value, key) {
    	      result[++index] = [key, value];
    	    });
    	    return result;
    	  }

    	  /**
    	   * Creates a unary function that invokes `func` with its argument transformed.
    	   *
    	   * @private
    	   * @param {Function} func The function to wrap.
    	   * @param {Function} transform The argument transform.
    	   * @returns {Function} Returns the new function.
    	   */
    	  function overArg(func, transform) {
    	    return function(arg) {
    	      return func(transform(arg));
    	    };
    	  }

    	  /**
    	   * Replaces all `placeholder` elements in `array` with an internal placeholder
    	   * and returns an array of their indexes.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {*} placeholder The placeholder to replace.
    	   * @returns {Array} Returns the new array of placeholder indexes.
    	   */
    	  function replaceHolders(array, placeholder) {
    	    var index = -1,
    	        length = array.length,
    	        resIndex = 0,
    	        result = [];

    	    while (++index < length) {
    	      var value = array[index];
    	      if (value === placeholder || value === PLACEHOLDER) {
    	        array[index] = PLACEHOLDER;
    	        result[resIndex++] = index;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts `set` to an array of its values.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the values.
    	   */
    	  function setToArray(set) {
    	    var index = -1,
    	        result = Array(set.size);

    	    set.forEach(function(value) {
    	      result[++index] = value;
    	    });
    	    return result;
    	  }

    	  /**
    	   * Converts `set` to its value-value pairs.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the value-value pairs.
    	   */
    	  function setToPairs(set) {
    	    var index = -1,
    	        result = Array(set.size);

    	    set.forEach(function(value) {
    	      result[++index] = [value, value];
    	    });
    	    return result;
    	  }

    	  /**
    	   * A specialized version of `_.indexOf` which performs strict equality
    	   * comparisons of values, i.e. `===`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function strictIndexOf(array, value, fromIndex) {
    	    var index = fromIndex - 1,
    	        length = array.length;

    	    while (++index < length) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * A specialized version of `_.lastIndexOf` which performs strict equality
    	   * comparisons of values, i.e. `===`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function strictLastIndexOf(array, value, fromIndex) {
    	    var index = fromIndex + 1;
    	    while (index--) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return index;
    	  }

    	  /**
    	   * Gets the number of symbols in `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function stringSize(string) {
    	    return hasUnicode(string)
    	      ? unicodeSize(string)
    	      : asciiSize(string);
    	  }

    	  /**
    	   * Converts `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function stringToArray(string) {
    	    return hasUnicode(string)
    	      ? unicodeToArray(string)
    	      : asciiToArray(string);
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
    	   * character of `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the index of the last non-whitespace character.
    	   */
    	  function trimmedEndIndex(string) {
    	    var index = string.length;

    	    while (index-- && reWhitespace.test(string.charAt(index))) {}
    	    return index;
    	  }

    	  /**
    	   * Used by `_.unescape` to convert HTML entities to characters.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to unescape.
    	   * @returns {string} Returns the unescaped character.
    	   */
    	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    	  /**
    	   * Gets the size of a Unicode `string`.
    	   *
    	   * @private
    	   * @param {string} string The string inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function unicodeSize(string) {
    	    var result = reUnicode.lastIndex = 0;
    	    while (reUnicode.test(string)) {
    	      ++result;
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts a Unicode `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function unicodeToArray(string) {
    	    return string.match(reUnicode) || [];
    	  }

    	  /**
    	   * Splits a Unicode `string` into an array of its words.
    	   *
    	   * @private
    	   * @param {string} The string to inspect.
    	   * @returns {Array} Returns the words of `string`.
    	   */
    	  function unicodeWords(string) {
    	    return string.match(reUnicodeWord) || [];
    	  }

    	  /*--------------------------------------------------------------------------*/

    	  /**
    	   * Create a new pristine `lodash` function using the `context` object.
    	   *
    	   * @static
    	   * @memberOf _
    	   * @since 1.1.0
    	   * @category Util
    	   * @param {Object} [context=root] The context object.
    	   * @returns {Function} Returns a new `lodash` function.
    	   * @example
    	   *
    	   * _.mixin({ 'foo': _.constant('foo') });
    	   *
    	   * var lodash = _.runInContext();
    	   * lodash.mixin({ 'bar': lodash.constant('bar') });
    	   *
    	   * _.isFunction(_.foo);
    	   * // => true
    	   * _.isFunction(_.bar);
    	   * // => false
    	   *
    	   * lodash.isFunction(lodash.foo);
    	   * // => false
    	   * lodash.isFunction(lodash.bar);
    	   * // => true
    	   *
    	   * // Create a suped-up `defer` in Node.js.
    	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
    	   */
    	  var runInContext = (function runInContext(context) {
    	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    	    /** Built-in constructor references. */
    	    var Array = context.Array,
    	        Date = context.Date,
    	        Error = context.Error,
    	        Function = context.Function,
    	        Math = context.Math,
    	        Object = context.Object,
    	        RegExp = context.RegExp,
    	        String = context.String,
    	        TypeError = context.TypeError;

    	    /** Used for built-in method references. */
    	    var arrayProto = Array.prototype,
    	        funcProto = Function.prototype,
    	        objectProto = Object.prototype;

    	    /** Used to detect overreaching core-js shims. */
    	    var coreJsData = context['__core-js_shared__'];

    	    /** Used to resolve the decompiled source of functions. */
    	    var funcToString = funcProto.toString;

    	    /** Used to check objects for own properties. */
    	    var hasOwnProperty = objectProto.hasOwnProperty;

    	    /** Used to generate unique IDs. */
    	    var idCounter = 0;

    	    /** Used to detect methods masquerading as native. */
    	    var maskSrcKey = (function() {
    	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	      return uid ? ('Symbol(src)_1.' + uid) : '';
    	    }());

    	    /**
    	     * Used to resolve the
    	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	     * of values.
    	     */
    	    var nativeObjectToString = objectProto.toString;

    	    /** Used to infer the `Object` constructor. */
    	    var objectCtorString = funcToString.call(Object);

    	    /** Used to restore the original `_` reference in `_.noConflict`. */
    	    var oldDash = root._;

    	    /** Used to detect if a method is native. */
    	    var reIsNative = RegExp('^' +
    	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	    );

    	    /** Built-in value references. */
    	    var Buffer = moduleExports ? context.Buffer : undefined$1,
    	        Symbol = context.Symbol,
    	        Uint8Array = context.Uint8Array,
    	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
    	        getPrototype = overArg(Object.getPrototypeOf, Object),
    	        objectCreate = Object.create,
    	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	        splice = arrayProto.splice,
    	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
    	        symIterator = Symbol ? Symbol.iterator : undefined$1,
    	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    	    var defineProperty = (function() {
    	      try {
    	        var func = getNative(Object, 'defineProperty');
    	        func({}, '', {});
    	        return func;
    	      } catch (e) {}
    	    }());

    	    /** Mocked built-ins. */
    	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
    	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
    	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    	    /* Built-in method references for those with the same name as other `lodash` methods. */
    	    var nativeCeil = Math.ceil,
    	        nativeFloor = Math.floor,
    	        nativeGetSymbols = Object.getOwnPropertySymbols,
    	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
    	        nativeIsFinite = context.isFinite,
    	        nativeJoin = arrayProto.join,
    	        nativeKeys = overArg(Object.keys, Object),
    	        nativeMax = Math.max,
    	        nativeMin = Math.min,
    	        nativeNow = Date.now,
    	        nativeParseInt = context.parseInt,
    	        nativeRandom = Math.random,
    	        nativeReverse = arrayProto.reverse;

    	    /* Built-in method references that are verified to be native. */
    	    var DataView = getNative(context, 'DataView'),
    	        Map = getNative(context, 'Map'),
    	        Promise = getNative(context, 'Promise'),
    	        Set = getNative(context, 'Set'),
    	        WeakMap = getNative(context, 'WeakMap'),
    	        nativeCreate = getNative(Object, 'create');

    	    /** Used to store function metadata. */
    	    var metaMap = WeakMap && new WeakMap;

    	    /** Used to lookup unminified function names. */
    	    var realNames = {};

    	    /** Used to detect maps, sets, and weakmaps. */
    	    var dataViewCtorString = toSource(DataView),
    	        mapCtorString = toSource(Map),
    	        promiseCtorString = toSource(Promise),
    	        setCtorString = toSource(Set),
    	        weakMapCtorString = toSource(WeakMap);

    	    /** Used to convert symbols to primitives and strings. */
    	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
    	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
    	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a `lodash` object which wraps `value` to enable implicit method
    	     * chain sequences. Methods that operate on and return arrays, collections,
    	     * and functions can be chained together. Methods that retrieve a single value
    	     * or may return a primitive value will automatically end the chain sequence
    	     * and return the unwrapped value. Otherwise, the value must be unwrapped
    	     * with `_#value`.
    	     *
    	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
    	     * enabled using `_.chain`.
    	     *
    	     * The execution of chained methods is lazy, that is, it's deferred until
    	     * `_#value` is implicitly or explicitly called.
    	     *
    	     * Lazy evaluation allows several methods to support shortcut fusion.
    	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
    	     * the creation of intermediate arrays and can greatly reduce the number of
    	     * iteratee executions. Sections of a chain sequence qualify for shortcut
    	     * fusion if the section is applied to an array and iteratees accept only
    	     * one argument. The heuristic for whether a section qualifies for shortcut
    	     * fusion is subject to change.
    	     *
    	     * Chaining is supported in custom builds as long as the `_#value` method is
    	     * directly or indirectly included in the build.
    	     *
    	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
    	     *
    	     * The wrapper `Array` methods are:
    	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
    	     *
    	     * The wrapper `String` methods are:
    	     * `replace` and `split`
    	     *
    	     * The wrapper methods that support shortcut fusion are:
    	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
    	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
    	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
    	     *
    	     * The chainable wrapper methods are:
    	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
    	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
    	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
    	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
    	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
    	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
    	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
    	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
    	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
    	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
    	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
    	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
    	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
    	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
    	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
    	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
    	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
    	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
    	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
    	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
    	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
    	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
    	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
    	     * `zipObject`, `zipObjectDeep`, and `zipWith`
    	     *
    	     * The wrapper methods that are **not** chainable by default are:
    	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
    	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
    	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
    	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
    	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
    	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
    	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
    	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
    	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
    	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
    	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
    	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
    	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
    	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
    	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
    	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
    	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
    	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
    	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
    	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
    	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
    	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
    	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
    	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
    	     * `upperFirst`, `value`, and `words`
    	     *
    	     * @name _
    	     * @constructor
    	     * @category Seq
    	     * @param {*} value The value to wrap in a `lodash` instance.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2, 3]);
    	     *
    	     * // Returns an unwrapped value.
    	     * wrapped.reduce(_.add);
    	     * // => 6
    	     *
    	     * // Returns a wrapped value.
    	     * var squares = wrapped.map(square);
    	     *
    	     * _.isArray(squares);
    	     * // => false
    	     *
    	     * _.isArray(squares.value());
    	     * // => true
    	     */
    	    function lodash(value) {
    	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    	        if (value instanceof LodashWrapper) {
    	          return value;
    	        }
    	        if (hasOwnProperty.call(value, '__wrapped__')) {
    	          return wrapperClone(value);
    	        }
    	      }
    	      return new LodashWrapper(value);
    	    }

    	    /**
    	     * The base implementation of `_.create` without support for assigning
    	     * properties to the created object.
    	     *
    	     * @private
    	     * @param {Object} proto The object to inherit from.
    	     * @returns {Object} Returns the new object.
    	     */
    	    var baseCreate = (function() {
    	      function object() {}
    	      return function(proto) {
    	        if (!isObject(proto)) {
    	          return {};
    	        }
    	        if (objectCreate) {
    	          return objectCreate(proto);
    	        }
    	        object.prototype = proto;
    	        var result = new object;
    	        object.prototype = undefined$1;
    	        return result;
    	      };
    	    }());

    	    /**
    	     * The function whose prototype chain sequence wrappers inherit from.
    	     *
    	     * @private
    	     */
    	    function baseLodash() {
    	      // No operation performed.
    	    }

    	    /**
    	     * The base constructor for creating `lodash` wrapper objects.
    	     *
    	     * @private
    	     * @param {*} value The value to wrap.
    	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
    	     */
    	    function LodashWrapper(value, chainAll) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__chain__ = !!chainAll;
    	      this.__index__ = 0;
    	      this.__values__ = undefined$1;
    	    }

    	    /**
    	     * By default, the template delimiters used by lodash are like those in
    	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
    	     * following template settings to use alternative delimiters.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {Object}
    	     */
    	    lodash.templateSettings = {

    	      /**
    	       * Used to detect `data` property values to be HTML-escaped.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'escape': reEscape,

    	      /**
    	       * Used to detect code to be evaluated.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'evaluate': reEvaluate,

    	      /**
    	       * Used to detect `data` property values to inject.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'interpolate': reInterpolate,

    	      /**
    	       * Used to reference the data object in the template text.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {string}
    	       */
    	      'variable': '',

    	      /**
    	       * Used to import variables into the compiled template.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {Object}
    	       */
    	      'imports': {

    	        /**
    	         * A reference to the `lodash` function.
    	         *
    	         * @memberOf _.templateSettings.imports
    	         * @type {Function}
    	         */
    	        '_': lodash
    	      }
    	    };

    	    // Ensure wrappers are instances of `baseLodash`.
    	    lodash.prototype = baseLodash.prototype;
    	    lodash.prototype.constructor = lodash;

    	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LodashWrapper.prototype.constructor = LodashWrapper;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {*} value The value to wrap.
    	     */
    	    function LazyWrapper(value) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__dir__ = 1;
    	      this.__filtered__ = false;
    	      this.__iteratees__ = [];
    	      this.__takeCount__ = MAX_ARRAY_LENGTH;
    	      this.__views__ = [];
    	    }

    	    /**
    	     * Creates a clone of the lazy wrapper object.
    	     *
    	     * @private
    	     * @name clone
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the cloned `LazyWrapper` object.
    	     */
    	    function lazyClone() {
    	      var result = new LazyWrapper(this.__wrapped__);
    	      result.__actions__ = copyArray(this.__actions__);
    	      result.__dir__ = this.__dir__;
    	      result.__filtered__ = this.__filtered__;
    	      result.__iteratees__ = copyArray(this.__iteratees__);
    	      result.__takeCount__ = this.__takeCount__;
    	      result.__views__ = copyArray(this.__views__);
    	      return result;
    	    }

    	    /**
    	     * Reverses the direction of lazy iteration.
    	     *
    	     * @private
    	     * @name reverse
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
    	     */
    	    function lazyReverse() {
    	      if (this.__filtered__) {
    	        var result = new LazyWrapper(this);
    	        result.__dir__ = -1;
    	        result.__filtered__ = true;
    	      } else {
    	        result = this.clone();
    	        result.__dir__ *= -1;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Extracts the unwrapped value from its lazy wrapper.
    	     *
    	     * @private
    	     * @name value
    	     * @memberOf LazyWrapper
    	     * @returns {*} Returns the unwrapped value.
    	     */
    	    function lazyValue() {
    	      var array = this.__wrapped__.value(),
    	          dir = this.__dir__,
    	          isArr = isArray(array),
    	          isRight = dir < 0,
    	          arrLength = isArr ? array.length : 0,
    	          view = getView(0, arrLength, this.__views__),
    	          start = view.start,
    	          end = view.end,
    	          length = end - start,
    	          index = isRight ? end : (start - 1),
    	          iteratees = this.__iteratees__,
    	          iterLength = iteratees.length,
    	          resIndex = 0,
    	          takeCount = nativeMin(length, this.__takeCount__);

    	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
    	        return baseWrapperValue(array, this.__actions__);
    	      }
    	      var result = [];

    	      outer:
    	      while (length-- && resIndex < takeCount) {
    	        index += dir;

    	        var iterIndex = -1,
    	            value = array[index];

    	        while (++iterIndex < iterLength) {
    	          var data = iteratees[iterIndex],
    	              iteratee = data.iteratee,
    	              type = data.type,
    	              computed = iteratee(value);

    	          if (type == LAZY_MAP_FLAG) {
    	            value = computed;
    	          } else if (!computed) {
    	            if (type == LAZY_FILTER_FLAG) {
    	              continue outer;
    	            } else {
    	              break outer;
    	            }
    	          }
    	        }
    	        result[resIndex++] = value;
    	      }
    	      return result;
    	    }

    	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LazyWrapper.prototype.constructor = LazyWrapper;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a hash object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Hash(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the hash.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Hash
    	     */
    	    function hashClear() {
    	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the hash.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Hash
    	     * @param {Object} hash The hash to modify.
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function hashDelete(key) {
    	      var result = this.has(key) && delete this.__data__[key];
    	      this.size -= result ? 1 : 0;
    	      return result;
    	    }

    	    /**
    	     * Gets the hash value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function hashGet(key) {
    	      var data = this.__data__;
    	      if (nativeCreate) {
    	        var result = data[key];
    	        return result === HASH_UNDEFINED ? undefined$1 : result;
    	      }
    	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    	    }

    	    /**
    	     * Checks if a hash value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Hash
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function hashHas(key) {
    	      var data = this.__data__;
    	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    	    }

    	    /**
    	     * Sets the hash `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the hash instance.
    	     */
    	    function hashSet(key, value) {
    	      var data = this.__data__;
    	      this.size += this.has(key) ? 0 : 1;
    	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
    	      return this;
    	    }

    	    // Add methods to `Hash`.
    	    Hash.prototype.clear = hashClear;
    	    Hash.prototype['delete'] = hashDelete;
    	    Hash.prototype.get = hashGet;
    	    Hash.prototype.has = hashHas;
    	    Hash.prototype.set = hashSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an list cache object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function ListCache(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the list cache.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf ListCache
    	     */
    	    function listCacheClear() {
    	      this.__data__ = [];
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the list cache.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function listCacheDelete(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      if (index < 0) {
    	        return false;
    	      }
    	      var lastIndex = data.length - 1;
    	      if (index == lastIndex) {
    	        data.pop();
    	      } else {
    	        splice.call(data, index, 1);
    	      }
    	      --this.size;
    	      return true;
    	    }

    	    /**
    	     * Gets the list cache value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function listCacheGet(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      return index < 0 ? undefined$1 : data[index][1];
    	    }

    	    /**
    	     * Checks if a list cache value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf ListCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function listCacheHas(key) {
    	      return assocIndexOf(this.__data__, key) > -1;
    	    }

    	    /**
    	     * Sets the list cache `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the list cache instance.
    	     */
    	    function listCacheSet(key, value) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      if (index < 0) {
    	        ++this.size;
    	        data.push([key, value]);
    	      } else {
    	        data[index][1] = value;
    	      }
    	      return this;
    	    }

    	    // Add methods to `ListCache`.
    	    ListCache.prototype.clear = listCacheClear;
    	    ListCache.prototype['delete'] = listCacheDelete;
    	    ListCache.prototype.get = listCacheGet;
    	    ListCache.prototype.has = listCacheHas;
    	    ListCache.prototype.set = listCacheSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a map cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function MapCache(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the map.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf MapCache
    	     */
    	    function mapCacheClear() {
    	      this.size = 0;
    	      this.__data__ = {
    	        'hash': new Hash,
    	        'map': new (Map || ListCache),
    	        'string': new Hash
    	      };
    	    }

    	    /**
    	     * Removes `key` and its value from the map.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function mapCacheDelete(key) {
    	      var result = getMapData(this, key)['delete'](key);
    	      this.size -= result ? 1 : 0;
    	      return result;
    	    }

    	    /**
    	     * Gets the map value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function mapCacheGet(key) {
    	      return getMapData(this, key).get(key);
    	    }

    	    /**
    	     * Checks if a map value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf MapCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function mapCacheHas(key) {
    	      return getMapData(this, key).has(key);
    	    }

    	    /**
    	     * Sets the map `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the map cache instance.
    	     */
    	    function mapCacheSet(key, value) {
    	      var data = getMapData(this, key),
    	          size = data.size;

    	      data.set(key, value);
    	      this.size += data.size == size ? 0 : 1;
    	      return this;
    	    }

    	    // Add methods to `MapCache`.
    	    MapCache.prototype.clear = mapCacheClear;
    	    MapCache.prototype['delete'] = mapCacheDelete;
    	    MapCache.prototype.get = mapCacheGet;
    	    MapCache.prototype.has = mapCacheHas;
    	    MapCache.prototype.set = mapCacheSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     *
    	     * Creates an array cache object to store unique values.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [values] The values to cache.
    	     */
    	    function SetCache(values) {
    	      var index = -1,
    	          length = values == null ? 0 : values.length;

    	      this.__data__ = new MapCache;
    	      while (++index < length) {
    	        this.add(values[index]);
    	      }
    	    }

    	    /**
    	     * Adds `value` to the array cache.
    	     *
    	     * @private
    	     * @name add
    	     * @memberOf SetCache
    	     * @alias push
    	     * @param {*} value The value to cache.
    	     * @returns {Object} Returns the cache instance.
    	     */
    	    function setCacheAdd(value) {
    	      this.__data__.set(value, HASH_UNDEFINED);
    	      return this;
    	    }

    	    /**
    	     * Checks if `value` is in the array cache.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf SetCache
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns `true` if `value` is found, else `false`.
    	     */
    	    function setCacheHas(value) {
    	      return this.__data__.has(value);
    	    }

    	    // Add methods to `SetCache`.
    	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    	    SetCache.prototype.has = setCacheHas;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a stack cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Stack(entries) {
    	      var data = this.__data__ = new ListCache(entries);
    	      this.size = data.size;
    	    }

    	    /**
    	     * Removes all key-value entries from the stack.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Stack
    	     */
    	    function stackClear() {
    	      this.__data__ = new ListCache;
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the stack.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function stackDelete(key) {
    	      var data = this.__data__,
    	          result = data['delete'](key);

    	      this.size = data.size;
    	      return result;
    	    }

    	    /**
    	     * Gets the stack value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function stackGet(key) {
    	      return this.__data__.get(key);
    	    }

    	    /**
    	     * Checks if a stack value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Stack
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function stackHas(key) {
    	      return this.__data__.has(key);
    	    }

    	    /**
    	     * Sets the stack `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the stack cache instance.
    	     */
    	    function stackSet(key, value) {
    	      var data = this.__data__;
    	      if (data instanceof ListCache) {
    	        var pairs = data.__data__;
    	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	          pairs.push([key, value]);
    	          this.size = ++data.size;
    	          return this;
    	        }
    	        data = this.__data__ = new MapCache(pairs);
    	      }
    	      data.set(key, value);
    	      this.size = data.size;
    	      return this;
    	    }

    	    // Add methods to `Stack`.
    	    Stack.prototype.clear = stackClear;
    	    Stack.prototype['delete'] = stackDelete;
    	    Stack.prototype.get = stackGet;
    	    Stack.prototype.has = stackHas;
    	    Stack.prototype.set = stackSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an array of the enumerable property names of the array-like `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @param {boolean} inherited Specify returning inherited property names.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function arrayLikeKeys(value, inherited) {
    	      var isArr = isArray(value),
    	          isArg = !isArr && isArguments(value),
    	          isBuff = !isArr && !isArg && isBuffer(value),
    	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    	          skipIndexes = isArr || isArg || isBuff || isType,
    	          result = skipIndexes ? baseTimes(value.length, String) : [],
    	          length = result.length;

    	      for (var key in value) {
    	        if ((inherited || hasOwnProperty.call(value, key)) &&
    	            !(skipIndexes && (
    	               // Safari 9 has enumerable `arguments.length` in strict mode.
    	               key == 'length' ||
    	               // Node.js 0.10 has enumerable non-index properties on buffers.
    	               (isBuff && (key == 'offset' || key == 'parent')) ||
    	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
    	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
    	               // Skip index properties.
    	               isIndex(key, length)
    	            ))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `_.sample` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to sample.
    	     * @returns {*} Returns the random element.
    	     */
    	    function arraySample(array) {
    	      var length = array.length;
    	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    	    }

    	    /**
    	     * A specialized version of `_.sampleSize` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to sample.
    	     * @param {number} n The number of elements to sample.
    	     * @returns {Array} Returns the random elements.
    	     */
    	    function arraySampleSize(array, n) {
    	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    	    }

    	    /**
    	     * A specialized version of `_.shuffle` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     */
    	    function arrayShuffle(array) {
    	      return shuffleSelf(copyArray(array));
    	    }

    	    /**
    	     * This function is like `assignValue` except that it doesn't assign
    	     * `undefined` values.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignMergeValue(object, key, value) {
    	      if ((value !== undefined$1 && !eq(object[key], value)) ||
    	          (value === undefined$1 && !(key in object))) {
    	        baseAssignValue(object, key, value);
    	      }
    	    }

    	    /**
    	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignValue(object, key, value) {
    	      var objValue = object[key];
    	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
    	          (value === undefined$1 && !(key in object))) {
    	        baseAssignValue(object, key, value);
    	      }
    	    }

    	    /**
    	     * Gets the index at which the `key` is found in `array` of key-value pairs.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {*} key The key to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     */
    	    function assocIndexOf(array, key) {
    	      var length = array.length;
    	      while (length--) {
    	        if (eq(array[length][0], key)) {
    	          return length;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * Aggregates elements of `collection` on `accumulator` with keys transformed
    	     * by `iteratee` and values set by `setter`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform keys.
    	     * @param {Object} accumulator The initial aggregated object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseAggregator(collection, setter, iteratee, accumulator) {
    	      baseEach(collection, function(value, key, collection) {
    	        setter(accumulator, value, iteratee(value), collection);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * The base implementation of `_.assign` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssign(object, source) {
    	      return object && copyObject(source, keys(source), object);
    	    }

    	    /**
    	     * The base implementation of `_.assignIn` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssignIn(object, source) {
    	      return object && copyObject(source, keysIn(source), object);
    	    }

    	    /**
    	     * The base implementation of `assignValue` and `assignMergeValue` without
    	     * value checks.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function baseAssignValue(object, key, value) {
    	      if (key == '__proto__' && defineProperty) {
    	        defineProperty(object, key, {
    	          'configurable': true,
    	          'enumerable': true,
    	          'value': value,
    	          'writable': true
    	        });
    	      } else {
    	        object[key] = value;
    	      }
    	    }

    	    /**
    	     * The base implementation of `_.at` without support for individual paths.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {string[]} paths The property paths to pick.
    	     * @returns {Array} Returns the picked elements.
    	     */
    	    function baseAt(object, paths) {
    	      var index = -1,
    	          length = paths.length,
    	          result = Array(length),
    	          skip = object == null;

    	      while (++index < length) {
    	        result[index] = skip ? undefined$1 : get(object, paths[index]);
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.clamp` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     */
    	    function baseClamp(number, lower, upper) {
    	      if (number === number) {
    	        if (upper !== undefined$1) {
    	          number = number <= upper ? number : upper;
    	        }
    	        if (lower !== undefined$1) {
    	          number = number >= lower ? number : lower;
    	        }
    	      }
    	      return number;
    	    }

    	    /**
    	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
    	     * traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to clone.
    	     * @param {boolean} bitmask The bitmask flags.
    	     *  1 - Deep clone
    	     *  2 - Flatten inherited properties
    	     *  4 - Clone symbols
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @param {string} [key] The key of `value`.
    	     * @param {Object} [object] The parent object of `value`.
    	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
    	     * @returns {*} Returns the cloned value.
    	     */
    	    function baseClone(value, bitmask, customizer, key, object, stack) {
    	      var result,
    	          isDeep = bitmask & CLONE_DEEP_FLAG,
    	          isFlat = bitmask & CLONE_FLAT_FLAG,
    	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

    	      if (customizer) {
    	        result = object ? customizer(value, key, object, stack) : customizer(value);
    	      }
    	      if (result !== undefined$1) {
    	        return result;
    	      }
    	      if (!isObject(value)) {
    	        return value;
    	      }
    	      var isArr = isArray(value);
    	      if (isArr) {
    	        result = initCloneArray(value);
    	        if (!isDeep) {
    	          return copyArray(value, result);
    	        }
    	      } else {
    	        var tag = getTag(value),
    	            isFunc = tag == funcTag || tag == genTag;

    	        if (isBuffer(value)) {
    	          return cloneBuffer(value, isDeep);
    	        }
    	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
    	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
    	          if (!isDeep) {
    	            return isFlat
    	              ? copySymbolsIn(value, baseAssignIn(result, value))
    	              : copySymbols(value, baseAssign(result, value));
    	          }
    	        } else {
    	          if (!cloneableTags[tag]) {
    	            return object ? value : {};
    	          }
    	          result = initCloneByTag(value, tag, isDeep);
    	        }
    	      }
    	      // Check for circular references and return its corresponding clone.
    	      stack || (stack = new Stack);
    	      var stacked = stack.get(value);
    	      if (stacked) {
    	        return stacked;
    	      }
    	      stack.set(value, result);

    	      if (isSet(value)) {
    	        value.forEach(function(subValue) {
    	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    	        });
    	      } else if (isMap(value)) {
    	        value.forEach(function(subValue, key) {
    	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    	        });
    	      }

    	      var keysFunc = isFull
    	        ? (isFlat ? getAllKeysIn : getAllKeys)
    	        : (isFlat ? keysIn : keys);

    	      var props = isArr ? undefined$1 : keysFunc(value);
    	      arrayEach(props || value, function(subValue, key) {
    	        if (props) {
    	          key = subValue;
    	          subValue = value[key];
    	        }
    	        // Recursively populate clone (susceptible to call stack limits).
    	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.conforms` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseConforms(source) {
    	      var props = keys(source);
    	      return function(object) {
    	        return baseConformsTo(object, source, props);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.conformsTo` which accepts `props` to check.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
    	     */
    	    function baseConformsTo(object, source, props) {
    	      var length = props.length;
    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (length--) {
    	        var key = props[length],
    	            predicate = source[key],
    	            value = object[key];

    	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
    	          return false;
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
    	     * to provide to `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {Array} args The arguments to provide to `func`.
    	     * @returns {number|Object} Returns the timer id or timeout object.
    	     */
    	    function baseDelay(func, wait, args) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    	    }

    	    /**
    	     * The base implementation of methods like `_.difference` without support
    	     * for excluding multiple arrays or iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Array} values The values to exclude.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     */
    	    function baseDifference(array, values, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          isCommon = true,
    	          length = array.length,
    	          result = [],
    	          valuesLength = values.length;

    	      if (!length) {
    	        return result;
    	      }
    	      if (iteratee) {
    	        values = arrayMap(values, baseUnary(iteratee));
    	      }
    	      if (comparator) {
    	        includes = arrayIncludesWith;
    	        isCommon = false;
    	      }
    	      else if (values.length >= LARGE_ARRAY_SIZE) {
    	        includes = cacheHas;
    	        isCommon = false;
    	        values = new SetCache(values);
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee == null ? value : iteratee(value);

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var valuesIndex = valuesLength;
    	          while (valuesIndex--) {
    	            if (values[valuesIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(values, computed, comparator)) {
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.forEach` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEach = createBaseEach(baseForOwn);

    	    /**
    	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEachRight = createBaseEach(baseForOwnRight, true);

    	    /**
    	     * The base implementation of `_.every` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`
    	     */
    	    function baseEvery(collection, predicate) {
    	      var result = true;
    	      baseEach(collection, function(value, index, collection) {
    	        result = !!predicate(value, index, collection);
    	        return result;
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of methods like `_.max` and `_.min` which accepts a
    	     * `comparator` to determine the extremum value.
    	     *
    	     * @private
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} iteratee The iteratee invoked per iteration.
    	     * @param {Function} comparator The comparator used to compare values.
    	     * @returns {*} Returns the extremum value.
    	     */
    	    function baseExtremum(array, iteratee, comparator) {
    	      var index = -1,
    	          length = array.length;

    	      while (++index < length) {
    	        var value = array[index],
    	            current = iteratee(value);

    	        if (current != null && (computed === undefined$1
    	              ? (current === current && !isSymbol(current))
    	              : comparator(current, computed)
    	            )) {
    	          var computed = current,
    	              result = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.fill` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function baseFill(array, value, start, end) {
    	      var length = array.length;

    	      start = toInteger(start);
    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
    	      if (end < 0) {
    	        end += length;
    	      }
    	      end = start > end ? 0 : toLength(end);
    	      while (start < end) {
    	        array[start++] = value;
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.filter` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     */
    	    function baseFilter(collection, predicate) {
    	      var result = [];
    	      baseEach(collection, function(value, index, collection) {
    	        if (predicate(value, index, collection)) {
    	          result.push(value);
    	        }
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.flatten` with support for restricting flattening.
    	     *
    	     * @private
    	     * @param {Array} array The array to flatten.
    	     * @param {number} depth The maximum recursion depth.
    	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
    	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
    	     * @param {Array} [result=[]] The initial result value.
    	     * @returns {Array} Returns the new flattened array.
    	     */
    	    function baseFlatten(array, depth, predicate, isStrict, result) {
    	      var index = -1,
    	          length = array.length;

    	      predicate || (predicate = isFlattenable);
    	      result || (result = []);

    	      while (++index < length) {
    	        var value = array[index];
    	        if (depth > 0 && predicate(value)) {
    	          if (depth > 1) {
    	            // Recursively flatten arrays (susceptible to call stack limits).
    	            baseFlatten(value, depth - 1, predicate, isStrict, result);
    	          } else {
    	            arrayPush(result, value);
    	          }
    	        } else if (!isStrict) {
    	          result[result.length] = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `baseForOwn` which iterates over `object`
    	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseFor = createBaseFor();

    	    /**
    	     * This function is like `baseFor` except that it iterates over properties
    	     * in the opposite order.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseForRight = createBaseFor(true);

    	    /**
    	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwn(object, iteratee) {
    	      return object && baseFor(object, iteratee, keys);
    	    }

    	    /**
    	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwnRight(object, iteratee) {
    	      return object && baseForRight(object, iteratee, keys);
    	    }

    	    /**
    	     * The base implementation of `_.functions` which creates an array of
    	     * `object` function property names filtered from `props`.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Array} props The property names to filter.
    	     * @returns {Array} Returns the function names.
    	     */
    	    function baseFunctions(object, props) {
    	      return arrayFilter(props, function(key) {
    	        return isFunction(object[key]);
    	      });
    	    }

    	    /**
    	     * The base implementation of `_.get` without support for default values.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseGet(object, path) {
    	      path = castPath(path, object);

    	      var index = 0,
    	          length = path.length;

    	      while (object != null && index < length) {
    	        object = object[toKey(path[index++])];
    	      }
    	      return (index && index == length) ? object : undefined$1;
    	    }

    	    /**
    	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    	      var result = keysFunc(object);
    	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    	    }

    	    /**
    	     * The base implementation of `getTag` without fallbacks for buggy environments.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    function baseGetTag(value) {
    	      if (value == null) {
    	        return value === undefined$1 ? undefinedTag : nullTag;
    	      }
    	      return (symToStringTag && symToStringTag in Object(value))
    	        ? getRawTag(value)
    	        : objectToString(value);
    	    }

    	    /**
    	     * The base implementation of `_.gt` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     */
    	    function baseGt(value, other) {
    	      return value > other;
    	    }

    	    /**
    	     * The base implementation of `_.has` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHas(object, key) {
    	      return object != null && hasOwnProperty.call(object, key);
    	    }

    	    /**
    	     * The base implementation of `_.hasIn` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHasIn(object, key) {
    	      return object != null && key in Object(object);
    	    }

    	    /**
    	     * The base implementation of `_.inRange` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {number} number The number to check.
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     */
    	    function baseInRange(number, start, end) {
    	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    	    }

    	    /**
    	     * The base implementation of methods like `_.intersection`, without support
    	     * for iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of shared values.
    	     */
    	    function baseIntersection(arrays, iteratee, comparator) {
    	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
    	          length = arrays[0].length,
    	          othLength = arrays.length,
    	          othIndex = othLength,
    	          caches = Array(othLength),
    	          maxLength = Infinity,
    	          result = [];

    	      while (othIndex--) {
    	        var array = arrays[othIndex];
    	        if (othIndex && iteratee) {
    	          array = arrayMap(array, baseUnary(iteratee));
    	        }
    	        maxLength = nativeMin(array.length, maxLength);
    	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
    	          ? new SetCache(othIndex && array)
    	          : undefined$1;
    	      }
    	      array = arrays[0];

    	      var index = -1,
    	          seen = caches[0];

    	      outer:
    	      while (++index < length && result.length < maxLength) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (!(seen
    	              ? cacheHas(seen, computed)
    	              : includes(result, computed, comparator)
    	            )) {
    	          othIndex = othLength;
    	          while (--othIndex) {
    	            var cache = caches[othIndex];
    	            if (!(cache
    	                  ? cacheHas(cache, computed)
    	                  : includes(arrays[othIndex], computed, comparator))
    	                ) {
    	              continue outer;
    	            }
    	          }
    	          if (seen) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.invert` and `_.invertBy` which inverts
    	     * `object` with values transformed by `iteratee` and set by `setter`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform values.
    	     * @param {Object} accumulator The initial inverted object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseInverter(object, setter, iteratee, accumulator) {
    	      baseForOwn(object, function(value, key, object) {
    	        setter(accumulator, iteratee(value), key, object);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * The base implementation of `_.invoke` without support for individual
    	     * method arguments.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {Array} args The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     */
    	    function baseInvoke(object, path, args) {
    	      path = castPath(path, object);
    	      object = parent(object, path);
    	      var func = object == null ? object : object[toKey(last(path))];
    	      return func == null ? undefined$1 : apply(func, object, args);
    	    }

    	    /**
    	     * The base implementation of `_.isArguments`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	     */
    	    function baseIsArguments(value) {
    	      return isObjectLike(value) && baseGetTag(value) == argsTag;
    	    }

    	    /**
    	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
    	     */
    	    function baseIsArrayBuffer(value) {
    	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    	    }

    	    /**
    	     * The base implementation of `_.isDate` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
    	     */
    	    function baseIsDate(value) {
    	      return isObjectLike(value) && baseGetTag(value) == dateTag;
    	    }

    	    /**
    	     * The base implementation of `_.isEqual` which supports partial comparisons
    	     * and tracks traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {boolean} bitmask The bitmask flags.
    	     *  1 - Unordered comparison
    	     *  2 - Partial comparison
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     */
    	    function baseIsEqual(value, other, bitmask, customizer, stack) {
    	      if (value === other) {
    	        return true;
    	      }
    	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    	        return value !== value && other !== other;
    	      }
    	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    	    }

    	    /**
    	     * A specialized version of `baseIsEqual` for arrays and objects which performs
    	     * deep comparisons and tracks traversed objects enabling objects with circular
    	     * references to be compared.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    	      var objIsArr = isArray(object),
    	          othIsArr = isArray(other),
    	          objTag = objIsArr ? arrayTag : getTag(object),
    	          othTag = othIsArr ? arrayTag : getTag(other);

    	      objTag = objTag == argsTag ? objectTag : objTag;
    	      othTag = othTag == argsTag ? objectTag : othTag;

    	      var objIsObj = objTag == objectTag,
    	          othIsObj = othTag == objectTag,
    	          isSameTag = objTag == othTag;

    	      if (isSameTag && isBuffer(object)) {
    	        if (!isBuffer(other)) {
    	          return false;
    	        }
    	        objIsArr = true;
    	        objIsObj = false;
    	      }
    	      if (isSameTag && !objIsObj) {
    	        stack || (stack = new Stack);
    	        return (objIsArr || isTypedArray(object))
    	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
    	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    	      }
    	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    	        if (objIsWrapped || othIsWrapped) {
    	          var objUnwrapped = objIsWrapped ? object.value() : object,
    	              othUnwrapped = othIsWrapped ? other.value() : other;

    	          stack || (stack = new Stack);
    	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    	        }
    	      }
    	      if (!isSameTag) {
    	        return false;
    	      }
    	      stack || (stack = new Stack);
    	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    	    }

    	    /**
    	     * The base implementation of `_.isMap` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
    	     */
    	    function baseIsMap(value) {
    	      return isObjectLike(value) && getTag(value) == mapTag;
    	    }

    	    /**
    	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Array} matchData The property names, values, and compare flags to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     */
    	    function baseIsMatch(object, source, matchData, customizer) {
    	      var index = matchData.length,
    	          length = index,
    	          noCustomizer = !customizer;

    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (index--) {
    	        var data = matchData[index];
    	        if ((noCustomizer && data[2])
    	              ? data[1] !== object[data[0]]
    	              : !(data[0] in object)
    	            ) {
    	          return false;
    	        }
    	      }
    	      while (++index < length) {
    	        data = matchData[index];
    	        var key = data[0],
    	            objValue = object[key],
    	            srcValue = data[1];

    	        if (noCustomizer && data[2]) {
    	          if (objValue === undefined$1 && !(key in object)) {
    	            return false;
    	          }
    	        } else {
    	          var stack = new Stack;
    	          if (customizer) {
    	            var result = customizer(objValue, srcValue, key, object, source, stack);
    	          }
    	          if (!(result === undefined$1
    	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
    	                : result
    	              )) {
    	            return false;
    	          }
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * The base implementation of `_.isNative` without bad shim checks.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     */
    	    function baseIsNative(value) {
    	      if (!isObject(value) || isMasked(value)) {
    	        return false;
    	      }
    	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    	      return pattern.test(toSource(value));
    	    }

    	    /**
    	     * The base implementation of `_.isRegExp` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
    	     */
    	    function baseIsRegExp(value) {
    	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    	    }

    	    /**
    	     * The base implementation of `_.isSet` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
    	     */
    	    function baseIsSet(value) {
    	      return isObjectLike(value) && getTag(value) == setTag;
    	    }

    	    /**
    	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	     */
    	    function baseIsTypedArray(value) {
    	      return isObjectLike(value) &&
    	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    	    }

    	    /**
    	     * The base implementation of `_.iteratee`.
    	     *
    	     * @private
    	     * @param {*} [value=_.identity] The value to convert to an iteratee.
    	     * @returns {Function} Returns the iteratee.
    	     */
    	    function baseIteratee(value) {
    	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    	      if (typeof value == 'function') {
    	        return value;
    	      }
    	      if (value == null) {
    	        return identity;
    	      }
    	      if (typeof value == 'object') {
    	        return isArray(value)
    	          ? baseMatchesProperty(value[0], value[1])
    	          : baseMatches(value);
    	      }
    	      return property(value);
    	    }

    	    /**
    	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeys(object) {
    	      if (!isPrototype(object)) {
    	        return nativeKeys(object);
    	      }
    	      var result = [];
    	      for (var key in Object(object)) {
    	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeysIn(object) {
    	      if (!isObject(object)) {
    	        return nativeKeysIn(object);
    	      }
    	      var isProto = isPrototype(object),
    	          result = [];

    	      for (var key in object) {
    	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.lt` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     */
    	    function baseLt(value, other) {
    	      return value < other;
    	    }

    	    /**
    	     * The base implementation of `_.map` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     */
    	    function baseMap(collection, iteratee) {
    	      var index = -1,
    	          result = isArrayLike(collection) ? Array(collection.length) : [];

    	      baseEach(collection, function(value, key, collection) {
    	        result[++index] = iteratee(value, key, collection);
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.matches` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatches(source) {
    	      var matchData = getMatchData(source);
    	      if (matchData.length == 1 && matchData[0][2]) {
    	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    	      }
    	      return function(object) {
    	        return object === source || baseIsMatch(object, source, matchData);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
    	     *
    	     * @private
    	     * @param {string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatchesProperty(path, srcValue) {
    	      if (isKey(path) && isStrictComparable(srcValue)) {
    	        return matchesStrictComparable(toKey(path), srcValue);
    	      }
    	      return function(object) {
    	        var objValue = get(object, path);
    	        return (objValue === undefined$1 && objValue === srcValue)
    	          ? hasIn(object, path)
    	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.merge` without support for multiple sources.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} [customizer] The function to customize merged values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMerge(object, source, srcIndex, customizer, stack) {
    	      if (object === source) {
    	        return;
    	      }
    	      baseFor(source, function(srcValue, key) {
    	        stack || (stack = new Stack);
    	        if (isObject(srcValue)) {
    	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    	        }
    	        else {
    	          var newValue = customizer
    	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
    	            : undefined$1;

    	          if (newValue === undefined$1) {
    	            newValue = srcValue;
    	          }
    	          assignMergeValue(object, key, newValue);
    	        }
    	      }, keysIn);
    	    }

    	    /**
    	     * A specialized version of `baseMerge` for arrays and objects which performs
    	     * deep merges and tracks traversed objects enabling objects with circular
    	     * references to be merged.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {string} key The key of the value to merge.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} mergeFunc The function to merge values.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    	      var objValue = safeGet(object, key),
    	          srcValue = safeGet(source, key),
    	          stacked = stack.get(srcValue);

    	      if (stacked) {
    	        assignMergeValue(object, key, stacked);
    	        return;
    	      }
    	      var newValue = customizer
    	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    	        : undefined$1;

    	      var isCommon = newValue === undefined$1;

    	      if (isCommon) {
    	        var isArr = isArray(srcValue),
    	            isBuff = !isArr && isBuffer(srcValue),
    	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    	        newValue = srcValue;
    	        if (isArr || isBuff || isTyped) {
    	          if (isArray(objValue)) {
    	            newValue = objValue;
    	          }
    	          else if (isArrayLikeObject(objValue)) {
    	            newValue = copyArray(objValue);
    	          }
    	          else if (isBuff) {
    	            isCommon = false;
    	            newValue = cloneBuffer(srcValue, true);
    	          }
    	          else if (isTyped) {
    	            isCommon = false;
    	            newValue = cloneTypedArray(srcValue, true);
    	          }
    	          else {
    	            newValue = [];
    	          }
    	        }
    	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
    	          newValue = objValue;
    	          if (isArguments(objValue)) {
    	            newValue = toPlainObject(objValue);
    	          }
    	          else if (!isObject(objValue) || isFunction(objValue)) {
    	            newValue = initCloneObject(srcValue);
    	          }
    	        }
    	        else {
    	          isCommon = false;
    	        }
    	      }
    	      if (isCommon) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        stack.set(srcValue, newValue);
    	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    	        stack['delete'](srcValue);
    	      }
    	      assignMergeValue(object, key, newValue);
    	    }

    	    /**
    	     * The base implementation of `_.nth` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {number} n The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     */
    	    function baseNth(array, n) {
    	      var length = array.length;
    	      if (!length) {
    	        return;
    	      }
    	      n += n < 0 ? length : 0;
    	      return isIndex(n, length) ? array[n] : undefined$1;
    	    }

    	    /**
    	     * The base implementation of `_.orderBy` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
    	     * @param {string[]} orders The sort orders of `iteratees`.
    	     * @returns {Array} Returns the new sorted array.
    	     */
    	    function baseOrderBy(collection, iteratees, orders) {
    	      if (iteratees.length) {
    	        iteratees = arrayMap(iteratees, function(iteratee) {
    	          if (isArray(iteratee)) {
    	            return function(value) {
    	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
    	            }
    	          }
    	          return iteratee;
    	        });
    	      } else {
    	        iteratees = [identity];
    	      }

    	      var index = -1;
    	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

    	      var result = baseMap(collection, function(value, key, collection) {
    	        var criteria = arrayMap(iteratees, function(iteratee) {
    	          return iteratee(value);
    	        });
    	        return { 'criteria': criteria, 'index': ++index, 'value': value };
    	      });

    	      return baseSortBy(result, function(object, other) {
    	        return compareMultiple(object, other, orders);
    	      });
    	    }

    	    /**
    	     * The base implementation of `_.pick` without support for individual
    	     * property identifiers.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} paths The property paths to pick.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePick(object, paths) {
    	      return basePickBy(object, paths, function(value, path) {
    	        return hasIn(object, path);
    	      });
    	    }

    	    /**
    	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} paths The property paths to pick.
    	     * @param {Function} predicate The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePickBy(object, paths, predicate) {
    	      var index = -1,
    	          length = paths.length,
    	          result = {};

    	      while (++index < length) {
    	        var path = paths[index],
    	            value = baseGet(object, path);

    	        if (predicate(value, path)) {
    	          baseSet(result, castPath(path, object), value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseProperty` which supports deep paths.
    	     *
    	     * @private
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     */
    	    function basePropertyDeep(path) {
    	      return function(object) {
    	        return baseGet(object, path);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.pullAllBy` without support for iteratee
    	     * shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAll(array, values, iteratee, comparator) {
    	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
    	          index = -1,
    	          length = values.length,
    	          seen = array;

    	      if (array === values) {
    	        values = copyArray(values);
    	      }
    	      if (iteratee) {
    	        seen = arrayMap(array, baseUnary(iteratee));
    	      }
    	      while (++index < length) {
    	        var fromIndex = 0,
    	            value = values[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
    	          if (seen !== array) {
    	            splice.call(seen, fromIndex, 1);
    	          }
    	          splice.call(array, fromIndex, 1);
    	        }
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.pullAt` without support for individual
    	     * indexes or capturing the removed elements.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {number[]} indexes The indexes of elements to remove.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAt(array, indexes) {
    	      var length = array ? indexes.length : 0,
    	          lastIndex = length - 1;

    	      while (length--) {
    	        var index = indexes[length];
    	        if (length == lastIndex || index !== previous) {
    	          var previous = index;
    	          if (isIndex(index)) {
    	            splice.call(array, index, 1);
    	          } else {
    	            baseUnset(array, index);
    	          }
    	        }
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.random` without support for returning
    	     * floating-point numbers.
    	     *
    	     * @private
    	     * @param {number} lower The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the random number.
    	     */
    	    function baseRandom(lower, upper) {
    	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    	    }

    	    /**
    	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
    	     * coerce arguments.
    	     *
    	     * @private
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} step The value to increment or decrement by.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the range of numbers.
    	     */
    	    function baseRange(start, end, step, fromRight) {
    	      var index = -1,
    	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
    	          result = Array(length);

    	      while (length--) {
    	        result[fromRight ? length : ++index] = start;
    	        start += step;
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.repeat` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {string} string The string to repeat.
    	     * @param {number} n The number of times to repeat the string.
    	     * @returns {string} Returns the repeated string.
    	     */
    	    function baseRepeat(string, n) {
    	      var result = '';
    	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    	        return result;
    	      }
    	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
    	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    	      do {
    	        if (n % 2) {
    	          result += string;
    	        }
    	        n = nativeFloor(n / 2);
    	        if (n) {
    	          string += string;
    	        }
    	      } while (n);

    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function baseRest(func, start) {
    	      return setToString(overRest(func, start, identity), func + '');
    	    }

    	    /**
    	     * The base implementation of `_.sample`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     */
    	    function baseSample(collection) {
    	      return arraySample(values(collection));
    	    }

    	    /**
    	     * The base implementation of `_.sampleSize` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} n The number of elements to sample.
    	     * @returns {Array} Returns the random elements.
    	     */
    	    function baseSampleSize(collection, n) {
    	      var array = values(collection);
    	      return shuffleSelf(array, baseClamp(n, 0, array.length));
    	    }

    	    /**
    	     * The base implementation of `_.set`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseSet(object, path, value, customizer) {
    	      if (!isObject(object)) {
    	        return object;
    	      }
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length,
    	          lastIndex = length - 1,
    	          nested = object;

    	      while (nested != null && ++index < length) {
    	        var key = toKey(path[index]),
    	            newValue = value;

    	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
    	          return object;
    	        }

    	        if (index != lastIndex) {
    	          var objValue = nested[key];
    	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
    	          if (newValue === undefined$1) {
    	            newValue = isObject(objValue)
    	              ? objValue
    	              : (isIndex(path[index + 1]) ? [] : {});
    	          }
    	        }
    	        assignValue(nested, key, newValue);
    	        nested = nested[key];
    	      }
    	      return object;
    	    }

    	    /**
    	     * The base implementation of `setData` without support for hot loop shorting.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetData = !metaMap ? identity : function(func, data) {
    	      metaMap.set(func, data);
    	      return func;
    	    };

    	    /**
    	     * The base implementation of `setToString` without support for hot loop shorting.
    	     *
    	     * @private
    	     * @param {Function} func The function to modify.
    	     * @param {Function} string The `toString` result.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetToString = !defineProperty ? identity : function(func, string) {
    	      return defineProperty(func, 'toString', {
    	        'configurable': true,
    	        'enumerable': false,
    	        'value': constant(string),
    	        'writable': true
    	      });
    	    };

    	    /**
    	     * The base implementation of `_.shuffle`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     */
    	    function baseShuffle(collection) {
    	      return shuffleSelf(values(collection));
    	    }

    	    /**
    	     * The base implementation of `_.slice` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseSlice(array, start, end) {
    	      var index = -1,
    	          length = array.length;

    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = end > length ? length : end;
    	      if (end < 0) {
    	        end += length;
    	      }
    	      length = start > end ? 0 : ((end - start) >>> 0);
    	      start >>>= 0;

    	      var result = Array(length);
    	      while (++index < length) {
    	        result[index] = array[index + start];
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.some` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     */
    	    function baseSome(collection, predicate) {
    	      var result;

    	      baseEach(collection, function(value, index, collection) {
    	        result = predicate(value, index, collection);
    	        return !result;
    	      });
    	      return !!result;
    	    }

    	    /**
    	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
    	     * performs a binary search of `array` to determine the index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndex(array, value, retHighest) {
    	      var low = 0,
    	          high = array == null ? low : array.length;

    	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    	        while (low < high) {
    	          var mid = (low + high) >>> 1,
    	              computed = array[mid];

    	          if (computed !== null && !isSymbol(computed) &&
    	              (retHighest ? (computed <= value) : (computed < value))) {
    	            low = mid + 1;
    	          } else {
    	            high = mid;
    	          }
    	        }
    	        return high;
    	      }
    	      return baseSortedIndexBy(array, value, identity, retHighest);
    	    }

    	    /**
    	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
    	     * which invokes `iteratee` for `value` and each element of `array` to compute
    	     * their sort ranking. The iteratee is invoked with one argument; (value).
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} iteratee The iteratee invoked per element.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
    	      var low = 0,
    	          high = array == null ? 0 : array.length;
    	      if (high === 0) {
    	        return 0;
    	      }

    	      value = iteratee(value);
    	      var valIsNaN = value !== value,
    	          valIsNull = value === null,
    	          valIsSymbol = isSymbol(value),
    	          valIsUndefined = value === undefined$1;

    	      while (low < high) {
    	        var mid = nativeFloor((low + high) / 2),
    	            computed = iteratee(array[mid]),
    	            othIsDefined = computed !== undefined$1,
    	            othIsNull = computed === null,
    	            othIsReflexive = computed === computed,
    	            othIsSymbol = isSymbol(computed);

    	        if (valIsNaN) {
    	          var setLow = retHighest || othIsReflexive;
    	        } else if (valIsUndefined) {
    	          setLow = othIsReflexive && (retHighest || othIsDefined);
    	        } else if (valIsNull) {
    	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    	        } else if (valIsSymbol) {
    	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    	        } else if (othIsNull || othIsSymbol) {
    	          setLow = false;
    	        } else {
    	          setLow = retHighest ? (computed <= value) : (computed < value);
    	        }
    	        if (setLow) {
    	          low = mid + 1;
    	        } else {
    	          high = mid;
    	        }
    	      }
    	      return nativeMin(high, MAX_ARRAY_INDEX);
    	    }

    	    /**
    	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
    	     * support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseSortedUniq(array, iteratee) {
    	      var index = -1,
    	          length = array.length,
    	          resIndex = 0,
    	          result = [];

    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        if (!index || !eq(computed, seen)) {
    	          var seen = computed;
    	          result[resIndex++] = value === 0 ? 0 : value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.toNumber` which doesn't ensure correct
    	     * conversions of binary, hexadecimal, or octal string values.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     */
    	    function baseToNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      return +value;
    	    }

    	    /**
    	     * The base implementation of `_.toString` which doesn't convert nullish
    	     * values to empty strings.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {string} Returns the string.
    	     */
    	    function baseToString(value) {
    	      // Exit early for strings to avoid a performance hit in some environments.
    	      if (typeof value == 'string') {
    	        return value;
    	      }
    	      if (isArray(value)) {
    	        // Recursively convert values (susceptible to call stack limits).
    	        return arrayMap(value, baseToString) + '';
    	      }
    	      if (isSymbol(value)) {
    	        return symbolToString ? symbolToString.call(value) : '';
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }

    	    /**
    	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseUniq(array, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          length = array.length,
    	          isCommon = true,
    	          result = [],
    	          seen = result;

    	      if (comparator) {
    	        isCommon = false;
    	        includes = arrayIncludesWith;
    	      }
    	      else if (length >= LARGE_ARRAY_SIZE) {
    	        var set = iteratee ? null : createSet(array);
    	        if (set) {
    	          return setToArray(set);
    	        }
    	        isCommon = false;
    	        includes = cacheHas;
    	        seen = new SetCache;
    	      }
    	      else {
    	        seen = iteratee ? [] : result;
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var seenIndex = seen.length;
    	          while (seenIndex--) {
    	            if (seen[seenIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          if (iteratee) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(seen, computed, comparator)) {
    	          if (seen !== result) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.unset`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The property path to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     */
    	    function baseUnset(object, path) {
    	      path = castPath(path, object);
    	      object = parent(object, path);
    	      return object == null || delete object[toKey(last(path))];
    	    }

    	    /**
    	     * The base implementation of `_.update`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to update.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseUpdate(object, path, updater, customizer) {
    	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    	    }

    	    /**
    	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
    	     * without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseWhile(array, predicate, isDrop, fromRight) {
    	      var length = array.length,
    	          index = fromRight ? length : -1;

    	      while ((fromRight ? index-- : ++index < length) &&
    	        predicate(array[index], index, array)) {}

    	      return isDrop
    	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
    	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    	    }

    	    /**
    	     * The base implementation of `wrapperValue` which returns the result of
    	     * performing a sequence of actions on the unwrapped `value`, where each
    	     * successive action is supplied the return value of the previous.
    	     *
    	     * @private
    	     * @param {*} value The unwrapped value.
    	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseWrapperValue(value, actions) {
    	      var result = value;
    	      if (result instanceof LazyWrapper) {
    	        result = result.value();
    	      }
    	      return arrayReduce(actions, function(result, action) {
    	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
    	      }, result);
    	    }

    	    /**
    	     * The base implementation of methods like `_.xor`, without support for
    	     * iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of values.
    	     */
    	    function baseXor(arrays, iteratee, comparator) {
    	      var length = arrays.length;
    	      if (length < 2) {
    	        return length ? baseUniq(arrays[0]) : [];
    	      }
    	      var index = -1,
    	          result = Array(length);

    	      while (++index < length) {
    	        var array = arrays[index],
    	            othIndex = -1;

    	        while (++othIndex < length) {
    	          if (othIndex != index) {
    	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
    	          }
    	        }
    	      }
    	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    	    }

    	    /**
    	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
    	     *
    	     * @private
    	     * @param {Array} props The property identifiers.
    	     * @param {Array} values The property values.
    	     * @param {Function} assignFunc The function to assign values.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function baseZipObject(props, values, assignFunc) {
    	      var index = -1,
    	          length = props.length,
    	          valsLength = values.length,
    	          result = {};

    	      while (++index < length) {
    	        var value = index < valsLength ? values[index] : undefined$1;
    	        assignFunc(result, props[index], value);
    	      }
    	      return result;
    	    }

    	    /**
    	     * Casts `value` to an empty array if it's not an array like object.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Array|Object} Returns the cast array-like object.
    	     */
    	    function castArrayLikeObject(value) {
    	      return isArrayLikeObject(value) ? value : [];
    	    }

    	    /**
    	     * Casts `value` to `identity` if it's not a function.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Function} Returns cast function.
    	     */
    	    function castFunction(value) {
    	      return typeof value == 'function' ? value : identity;
    	    }

    	    /**
    	     * Casts `value` to a path array if it's not one.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {Array} Returns the cast property path array.
    	     */
    	    function castPath(value, object) {
    	      if (isArray(value)) {
    	        return value;
    	      }
    	      return isKey(value, object) ? [value] : stringToPath(toString(value));
    	    }

    	    /**
    	     * A `baseRest` alias which can be replaced with `identity` by module
    	     * replacement plugins.
    	     *
    	     * @private
    	     * @type {Function}
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @returns {Function} Returns the new function.
    	     */
    	    var castRest = baseRest;

    	    /**
    	     * Casts `array` to a slice if it's needed.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {number} start The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the cast slice.
    	     */
    	    function castSlice(array, start, end) {
    	      var length = array.length;
    	      end = end === undefined$1 ? length : end;
    	      return (!start && end >= length) ? array : baseSlice(array, start, end);
    	    }

    	    /**
    	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
    	     *
    	     * @private
    	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
    	     */
    	    var clearTimeout = ctxClearTimeout || function(id) {
    	      return root.clearTimeout(id);
    	    };

    	    /**
    	     * Creates a clone of  `buffer`.
    	     *
    	     * @private
    	     * @param {Buffer} buffer The buffer to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Buffer} Returns the cloned buffer.
    	     */
    	    function cloneBuffer(buffer, isDeep) {
    	      if (isDeep) {
    	        return buffer.slice();
    	      }
    	      var length = buffer.length,
    	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    	      buffer.copy(result);
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of `arrayBuffer`.
    	     *
    	     * @private
    	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
    	     * @returns {ArrayBuffer} Returns the cloned array buffer.
    	     */
    	    function cloneArrayBuffer(arrayBuffer) {
    	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of `dataView`.
    	     *
    	     * @private
    	     * @param {Object} dataView The data view to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned data view.
    	     */
    	    function cloneDataView(dataView, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    	    }

    	    /**
    	     * Creates a clone of `regexp`.
    	     *
    	     * @private
    	     * @param {Object} regexp The regexp to clone.
    	     * @returns {Object} Returns the cloned regexp.
    	     */
    	    function cloneRegExp(regexp) {
    	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    	      result.lastIndex = regexp.lastIndex;
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of the `symbol` object.
    	     *
    	     * @private
    	     * @param {Object} symbol The symbol object to clone.
    	     * @returns {Object} Returns the cloned symbol object.
    	     */
    	    function cloneSymbol(symbol) {
    	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    	    }

    	    /**
    	     * Creates a clone of `typedArray`.
    	     *
    	     * @private
    	     * @param {Object} typedArray The typed array to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned typed array.
    	     */
    	    function cloneTypedArray(typedArray, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    	    }

    	    /**
    	     * Compares values to sort them in ascending order.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {number} Returns the sort order indicator for `value`.
    	     */
    	    function compareAscending(value, other) {
    	      if (value !== other) {
    	        var valIsDefined = value !== undefined$1,
    	            valIsNull = value === null,
    	            valIsReflexive = value === value,
    	            valIsSymbol = isSymbol(value);

    	        var othIsDefined = other !== undefined$1,
    	            othIsNull = other === null,
    	            othIsReflexive = other === other,
    	            othIsSymbol = isSymbol(other);

    	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
    	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
    	            (valIsNull && othIsDefined && othIsReflexive) ||
    	            (!valIsDefined && othIsReflexive) ||
    	            !valIsReflexive) {
    	          return 1;
    	        }
    	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
    	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
    	            (othIsNull && valIsDefined && valIsReflexive) ||
    	            (!othIsDefined && valIsReflexive) ||
    	            !othIsReflexive) {
    	          return -1;
    	        }
    	      }
    	      return 0;
    	    }

    	    /**
    	     * Used by `_.orderBy` to compare multiple properties of a value to another
    	     * and stable sort them.
    	     *
    	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
    	     * specify an order of "desc" for descending or "asc" for ascending sort order
    	     * of corresponding values.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {boolean[]|string[]} orders The order to sort by for each property.
    	     * @returns {number} Returns the sort order indicator for `object`.
    	     */
    	    function compareMultiple(object, other, orders) {
    	      var index = -1,
    	          objCriteria = object.criteria,
    	          othCriteria = other.criteria,
    	          length = objCriteria.length,
    	          ordersLength = orders.length;

    	      while (++index < length) {
    	        var result = compareAscending(objCriteria[index], othCriteria[index]);
    	        if (result) {
    	          if (index >= ordersLength) {
    	            return result;
    	          }
    	          var order = orders[index];
    	          return result * (order == 'desc' ? -1 : 1);
    	        }
    	      }
    	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    	      // that causes it, under certain circumstances, to provide the same value for
    	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    	      // for more details.
    	      //
    	      // This also ensures a stable sort in V8 and other engines.
    	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    	      return object.index - other.index;
    	    }

    	    /**
    	     * Creates an array that is the composition of partially applied arguments,
    	     * placeholders, and provided arguments into a single array of arguments.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to prepend to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgs(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersLength = holders.length,
    	          leftIndex = -1,
    	          leftLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(leftLength + rangeLength),
    	          isUncurried = !isCurried;

    	      while (++leftIndex < leftLength) {
    	        result[leftIndex] = partials[leftIndex];
    	      }
    	      while (++argsIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[holders[argsIndex]] = args[argsIndex];
    	        }
    	      }
    	      while (rangeLength--) {
    	        result[leftIndex++] = args[argsIndex++];
    	      }
    	      return result;
    	    }

    	    /**
    	     * This function is like `composeArgs` except that the arguments composition
    	     * is tailored for `_.partialRight`.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to append to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgsRight(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersIndex = -1,
    	          holdersLength = holders.length,
    	          rightIndex = -1,
    	          rightLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(rangeLength + rightLength),
    	          isUncurried = !isCurried;

    	      while (++argsIndex < rangeLength) {
    	        result[argsIndex] = args[argsIndex];
    	      }
    	      var offset = argsIndex;
    	      while (++rightIndex < rightLength) {
    	        result[offset + rightIndex] = partials[rightIndex];
    	      }
    	      while (++holdersIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[offset + holders[holdersIndex]] = args[argsIndex++];
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Copies the values of `source` to `array`.
    	     *
    	     * @private
    	     * @param {Array} source The array to copy values from.
    	     * @param {Array} [array=[]] The array to copy values to.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function copyArray(source, array) {
    	      var index = -1,
    	          length = source.length;

    	      array || (array = Array(length));
    	      while (++index < length) {
    	        array[index] = source[index];
    	      }
    	      return array;
    	    }

    	    /**
    	     * Copies properties of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy properties from.
    	     * @param {Array} props The property identifiers to copy.
    	     * @param {Object} [object={}] The object to copy properties to.
    	     * @param {Function} [customizer] The function to customize copied values.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copyObject(source, props, object, customizer) {
    	      var isNew = !object;
    	      object || (object = {});

    	      var index = -1,
    	          length = props.length;

    	      while (++index < length) {
    	        var key = props[index];

    	        var newValue = customizer
    	          ? customizer(object[key], source[key], key, object, source)
    	          : undefined$1;

    	        if (newValue === undefined$1) {
    	          newValue = source[key];
    	        }
    	        if (isNew) {
    	          baseAssignValue(object, key, newValue);
    	        } else {
    	          assignValue(object, key, newValue);
    	        }
    	      }
    	      return object;
    	    }

    	    /**
    	     * Copies own symbols of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbols(source, object) {
    	      return copyObject(source, getSymbols(source), object);
    	    }

    	    /**
    	     * Copies own and inherited symbols of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbolsIn(source, object) {
    	      return copyObject(source, getSymbolsIn(source), object);
    	    }

    	    /**
    	     * Creates a function like `_.groupBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} [initializer] The accumulator object initializer.
    	     * @returns {Function} Returns the new aggregator function.
    	     */
    	    function createAggregator(setter, initializer) {
    	      return function(collection, iteratee) {
    	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
    	            accumulator = initializer ? initializer() : {};

    	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.assign`.
    	     *
    	     * @private
    	     * @param {Function} assigner The function to assign values.
    	     * @returns {Function} Returns the new assigner function.
    	     */
    	    function createAssigner(assigner) {
    	      return baseRest(function(object, sources) {
    	        var index = -1,
    	            length = sources.length,
    	            customizer = length > 1 ? sources[length - 1] : undefined$1,
    	            guard = length > 2 ? sources[2] : undefined$1;

    	        customizer = (assigner.length > 3 && typeof customizer == 'function')
    	          ? (length--, customizer)
    	          : undefined$1;

    	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	          customizer = length < 3 ? undefined$1 : customizer;
    	          length = 1;
    	        }
    	        object = Object(object);
    	        while (++index < length) {
    	          var source = sources[index];
    	          if (source) {
    	            assigner(object, source, index, customizer);
    	          }
    	        }
    	        return object;
    	      });
    	    }

    	    /**
    	     * Creates a `baseEach` or `baseEachRight` function.
    	     *
    	     * @private
    	     * @param {Function} eachFunc The function to iterate over a collection.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseEach(eachFunc, fromRight) {
    	      return function(collection, iteratee) {
    	        if (collection == null) {
    	          return collection;
    	        }
    	        if (!isArrayLike(collection)) {
    	          return eachFunc(collection, iteratee);
    	        }
    	        var length = collection.length,
    	            index = fromRight ? length : -1,
    	            iterable = Object(collection);

    	        while ((fromRight ? index-- : ++index < length)) {
    	          if (iteratee(iterable[index], index, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return collection;
    	      };
    	    }

    	    /**
    	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseFor(fromRight) {
    	      return function(object, iteratee, keysFunc) {
    	        var index = -1,
    	            iterable = Object(object),
    	            props = keysFunc(object),
    	            length = props.length;

    	        while (length--) {
    	          var key = props[fromRight ? length : ++index];
    	          if (iteratee(iterable[key], key, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return object;
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with the optional `this`
    	     * binding of `thisArg`.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createBind(func, bitmask, thisArg) {
    	      var isBind = bitmask & WRAP_BIND_FLAG,
    	          Ctor = createCtor(func);

    	      function wrapper() {
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return fn.apply(isBind ? thisArg : this, arguments);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a function like `_.lowerFirst`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `String` case method to use.
    	     * @returns {Function} Returns the new case function.
    	     */
    	    function createCaseFirst(methodName) {
    	      return function(string) {
    	        string = toString(string);

    	        var strSymbols = hasUnicode(string)
    	          ? stringToArray(string)
    	          : undefined$1;

    	        var chr = strSymbols
    	          ? strSymbols[0]
    	          : string.charAt(0);

    	        var trailing = strSymbols
    	          ? castSlice(strSymbols, 1).join('')
    	          : string.slice(1);

    	        return chr[methodName]() + trailing;
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.camelCase`.
    	     *
    	     * @private
    	     * @param {Function} callback The function to combine each word.
    	     * @returns {Function} Returns the new compounder function.
    	     */
    	    function createCompounder(callback) {
    	      return function(string) {
    	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    	      };
    	    }

    	    /**
    	     * Creates a function that produces an instance of `Ctor` regardless of
    	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
    	     *
    	     * @private
    	     * @param {Function} Ctor The constructor to wrap.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCtor(Ctor) {
    	      return function() {
    	        // Use a `switch` statement to work with class constructors. See
    	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    	        // for more details.
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return new Ctor;
    	          case 1: return new Ctor(args[0]);
    	          case 2: return new Ctor(args[0], args[1]);
    	          case 3: return new Ctor(args[0], args[1], args[2]);
    	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
    	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
    	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
    	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    	        }
    	        var thisBinding = baseCreate(Ctor.prototype),
    	            result = Ctor.apply(thisBinding, args);

    	        // Mimic the constructor's `return` behavior.
    	        // See https://es5.github.io/#x13.2.2 for more details.
    	        return isObject(result) ? result : thisBinding;
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to enable currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {number} arity The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCurry(func, bitmask, arity) {
    	      var Ctor = createCtor(func);

    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length,
    	            placeholder = getHolder(wrapper);

    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
    	          ? []
    	          : replaceHolders(args, placeholder);

    	        length -= holders.length;
    	        if (length < arity) {
    	          return createRecurry(
    	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
    	            args, holders, undefined$1, undefined$1, arity - length);
    	        }
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return apply(fn, this, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a `_.find` or `_.findLast` function.
    	     *
    	     * @private
    	     * @param {Function} findIndexFunc The function to find the collection index.
    	     * @returns {Function} Returns the new find function.
    	     */
    	    function createFind(findIndexFunc) {
    	      return function(collection, predicate, fromIndex) {
    	        var iterable = Object(collection);
    	        if (!isArrayLike(collection)) {
    	          var iteratee = getIteratee(predicate, 3);
    	          collection = keys(collection);
    	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    	        }
    	        var index = findIndexFunc(collection, predicate, fromIndex);
    	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
    	      };
    	    }

    	    /**
    	     * Creates a `_.flow` or `_.flowRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new flow function.
    	     */
    	    function createFlow(fromRight) {
    	      return flatRest(function(funcs) {
    	        var length = funcs.length,
    	            index = length,
    	            prereq = LodashWrapper.prototype.thru;

    	        if (fromRight) {
    	          funcs.reverse();
    	        }
    	        while (index--) {
    	          var func = funcs[index];
    	          if (typeof func != 'function') {
    	            throw new TypeError(FUNC_ERROR_TEXT);
    	          }
    	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
    	            var wrapper = new LodashWrapper([], true);
    	          }
    	        }
    	        index = wrapper ? index : length;
    	        while (++index < length) {
    	          func = funcs[index];

    	          var funcName = getFuncName(func),
    	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

    	          if (data && isLaziable(data[0]) &&
    	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
    	                !data[4].length && data[9] == 1
    	              ) {
    	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
    	          } else {
    	            wrapper = (func.length == 1 && isLaziable(func))
    	              ? wrapper[funcName]()
    	              : wrapper.thru(func);
    	          }
    	        }
    	        return function() {
    	          var args = arguments,
    	              value = args[0];

    	          if (wrapper && args.length == 1 && isArray(value)) {
    	            return wrapper.plant(value).value();
    	          }
    	          var index = 0,
    	              result = length ? funcs[index].apply(this, args) : value;

    	          while (++index < length) {
    	            result = funcs[index].call(this, result);
    	          }
    	          return result;
    	        };
    	      });
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with optional `this`
    	     * binding of `thisArg`, partial application, and currying.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [partialsRight] The arguments to append to those provided
    	     *  to the new function.
    	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    	      var isAry = bitmask & WRAP_ARY_FLAG,
    	          isBind = bitmask & WRAP_BIND_FLAG,
    	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
    	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
    	          isFlip = bitmask & WRAP_FLIP_FLAG,
    	          Ctor = isBindKey ? undefined$1 : createCtor(func);

    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length;

    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        if (isCurried) {
    	          var placeholder = getHolder(wrapper),
    	              holdersCount = countHolders(args, placeholder);
    	        }
    	        if (partials) {
    	          args = composeArgs(args, partials, holders, isCurried);
    	        }
    	        if (partialsRight) {
    	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    	        }
    	        length -= holdersCount;
    	        if (isCurried && length < arity) {
    	          var newHolders = replaceHolders(args, placeholder);
    	          return createRecurry(
    	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
    	            args, newHolders, argPos, ary, arity - length
    	          );
    	        }
    	        var thisBinding = isBind ? thisArg : this,
    	            fn = isBindKey ? thisBinding[func] : func;

    	        length = args.length;
    	        if (argPos) {
    	          args = reorder(args, argPos);
    	        } else if (isFlip && length > 1) {
    	          args.reverse();
    	        }
    	        if (isAry && ary < length) {
    	          args.length = ary;
    	        }
    	        if (this && this !== root && this instanceof wrapper) {
    	          fn = Ctor || createCtor(fn);
    	        }
    	        return fn.apply(thisBinding, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a function like `_.invertBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} toIteratee The function to resolve iteratees.
    	     * @returns {Function} Returns the new inverter function.
    	     */
    	    function createInverter(setter, toIteratee) {
    	      return function(object, iteratee) {
    	        return baseInverter(object, setter, toIteratee(iteratee), {});
    	      };
    	    }

    	    /**
    	     * Creates a function that performs a mathematical operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @param {number} [defaultValue] The value used for `undefined` arguments.
    	     * @returns {Function} Returns the new mathematical operation function.
    	     */
    	    function createMathOperation(operator, defaultValue) {
    	      return function(value, other) {
    	        var result;
    	        if (value === undefined$1 && other === undefined$1) {
    	          return defaultValue;
    	        }
    	        if (value !== undefined$1) {
    	          result = value;
    	        }
    	        if (other !== undefined$1) {
    	          if (result === undefined$1) {
    	            return other;
    	          }
    	          if (typeof value == 'string' || typeof other == 'string') {
    	            value = baseToString(value);
    	            other = baseToString(other);
    	          } else {
    	            value = baseToNumber(value);
    	            other = baseToNumber(other);
    	          }
    	          result = operator(value, other);
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.over`.
    	     *
    	     * @private
    	     * @param {Function} arrayFunc The function to iterate over iteratees.
    	     * @returns {Function} Returns the new over function.
    	     */
    	    function createOver(arrayFunc) {
    	      return flatRest(function(iteratees) {
    	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
    	        return baseRest(function(args) {
    	          var thisArg = this;
    	          return arrayFunc(iteratees, function(iteratee) {
    	            return apply(iteratee, thisArg, args);
    	          });
    	        });
    	      });
    	    }

    	    /**
    	     * Creates the padding for `string` based on `length`. The `chars` string
    	     * is truncated if the number of characters exceeds `length`.
    	     *
    	     * @private
    	     * @param {number} length The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padding for `string`.
    	     */
    	    function createPadding(length, chars) {
    	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

    	      var charsLength = chars.length;
    	      if (charsLength < 2) {
    	        return charsLength ? baseRepeat(chars, length) : chars;
    	      }
    	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
    	      return hasUnicode(chars)
    	        ? castSlice(stringToArray(result), 0, length).join('')
    	        : result.slice(0, length);
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with the `this` binding
    	     * of `thisArg` and `partials` prepended to the arguments it receives.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {Array} partials The arguments to prepend to those provided to
    	     *  the new function.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createPartial(func, bitmask, thisArg, partials) {
    	      var isBind = bitmask & WRAP_BIND_FLAG,
    	          Ctor = createCtor(func);

    	      function wrapper() {
    	        var argsIndex = -1,
    	            argsLength = arguments.length,
    	            leftIndex = -1,
    	            leftLength = partials.length,
    	            args = Array(leftLength + argsLength),
    	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    	        while (++leftIndex < leftLength) {
    	          args[leftIndex] = partials[leftIndex];
    	        }
    	        while (argsLength--) {
    	          args[leftIndex++] = arguments[++argsIndex];
    	        }
    	        return apply(fn, isBind ? thisArg : this, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a `_.range` or `_.rangeRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new range function.
    	     */
    	    function createRange(fromRight) {
    	      return function(start, end, step) {
    	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
    	          end = step = undefined$1;
    	        }
    	        // Ensure the sign of `-0` is preserved.
    	        start = toFinite(start);
    	        if (end === undefined$1) {
    	          end = start;
    	          start = 0;
    	        } else {
    	          end = toFinite(end);
    	        }
    	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
    	        return baseRange(start, end, step, fromRight);
    	      };
    	    }

    	    /**
    	     * Creates a function that performs a relational operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @returns {Function} Returns the new relational operation function.
    	     */
    	    function createRelationalOperation(operator) {
    	      return function(value, other) {
    	        if (!(typeof value == 'string' && typeof other == 'string')) {
    	          value = toNumber(value);
    	          other = toNumber(other);
    	        }
    	        return operator(value, other);
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to continue currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {Function} wrapFunc The function to create the `func` wrapper.
    	     * @param {*} placeholder The placeholder value.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    	      var isCurry = bitmask & WRAP_CURRY_FLAG,
    	          newHolders = isCurry ? holders : undefined$1,
    	          newHoldersRight = isCurry ? undefined$1 : holders,
    	          newPartials = isCurry ? partials : undefined$1,
    	          newPartialsRight = isCurry ? undefined$1 : partials;

    	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
    	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

    	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    	      }
    	      var newData = [
    	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    	        newHoldersRight, argPos, ary, arity
    	      ];

    	      var result = wrapFunc.apply(undefined$1, newData);
    	      if (isLaziable(func)) {
    	        setData(result, newData);
    	      }
    	      result.placeholder = placeholder;
    	      return setWrapToString(result, func, bitmask);
    	    }

    	    /**
    	     * Creates a function like `_.round`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `Math` method to use when rounding.
    	     * @returns {Function} Returns the new round function.
    	     */
    	    function createRound(methodName) {
    	      var func = Math[methodName];
    	      return function(number, precision) {
    	        number = toNumber(number);
    	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
    	        if (precision && nativeIsFinite(number)) {
    	          // Shift with exponential notation to avoid floating-point issues.
    	          // See [MDN](https://mdn.io/round#Examples) for more details.
    	          var pair = (toString(number) + 'e').split('e'),
    	              value = func(pair[0] + 'e' + (+pair[1] + precision));

    	          pair = (toString(value) + 'e').split('e');
    	          return +(pair[0] + 'e' + (+pair[1] - precision));
    	        }
    	        return func(number);
    	      };
    	    }

    	    /**
    	     * Creates a set object of `values`.
    	     *
    	     * @private
    	     * @param {Array} values The values to add to the set.
    	     * @returns {Object} Returns the new set.
    	     */
    	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    	      return new Set(values);
    	    };

    	    /**
    	     * Creates a `_.toPairs` or `_.toPairsIn` function.
    	     *
    	     * @private
    	     * @param {Function} keysFunc The function to get the keys of a given object.
    	     * @returns {Function} Returns the new pairs function.
    	     */
    	    function createToPairs(keysFunc) {
    	      return function(object) {
    	        var tag = getTag(object);
    	        if (tag == mapTag) {
    	          return mapToArray(object);
    	        }
    	        if (tag == setTag) {
    	          return setToPairs(object);
    	        }
    	        return baseToPairs(object, keysFunc(object));
    	      };
    	    }

    	    /**
    	     * Creates a function that either curries or invokes `func` with optional
    	     * `this` binding and partially applied arguments.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask flags.
    	     *    1 - `_.bind`
    	     *    2 - `_.bindKey`
    	     *    4 - `_.curry` or `_.curryRight` of a bound function
    	     *    8 - `_.curry`
    	     *   16 - `_.curryRight`
    	     *   32 - `_.partial`
    	     *   64 - `_.partialRight`
    	     *  128 - `_.rearg`
    	     *  256 - `_.ary`
    	     *  512 - `_.flip`
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to be partially applied.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    	      if (!isBindKey && typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var length = partials ? partials.length : 0;
    	      if (!length) {
    	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    	        partials = holders = undefined$1;
    	      }
    	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
    	      arity = arity === undefined$1 ? arity : toInteger(arity);
    	      length -= holders ? holders.length : 0;

    	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    	        var partialsRight = partials,
    	            holdersRight = holders;

    	        partials = holders = undefined$1;
    	      }
    	      var data = isBindKey ? undefined$1 : getData(func);

    	      var newData = [
    	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    	        argPos, ary, arity
    	      ];

    	      if (data) {
    	        mergeData(newData, data);
    	      }
    	      func = newData[0];
    	      bitmask = newData[1];
    	      thisArg = newData[2];
    	      partials = newData[3];
    	      holders = newData[4];
    	      arity = newData[9] = newData[9] === undefined$1
    	        ? (isBindKey ? 0 : func.length)
    	        : nativeMax(newData[9] - length, 0);

    	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    	      }
    	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    	        var result = createBind(func, bitmask, thisArg);
    	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    	        result = createCurry(func, bitmask, arity);
    	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    	        result = createPartial(func, bitmask, thisArg, partials);
    	      } else {
    	        result = createHybrid.apply(undefined$1, newData);
    	      }
    	      var setter = data ? baseSetData : setData;
    	      return setWrapToString(setter(result, newData), func, bitmask);
    	    }

    	    /**
    	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
    	     * of source objects to the destination object for all destination properties
    	     * that resolve to `undefined`.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to assign.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
    	      if (objValue === undefined$1 ||
    	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	        return srcValue;
    	      }
    	      return objValue;
    	    }

    	    /**
    	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
    	     * objects into destination objects that are passed thru.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to merge.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @param {Object} source The parent object of `srcValue`.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    	      if (isObject(objValue) && isObject(srcValue)) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        stack.set(srcValue, objValue);
    	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
    	        stack['delete'](srcValue);
    	      }
    	      return objValue;
    	    }

    	    /**
    	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
    	     * objects.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @param {string} key The key of the property to inspect.
    	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
    	     */
    	    function customOmitClone(value) {
    	      return isPlainObject(value) ? undefined$1 : value;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for arrays with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Array} array The array to compare.
    	     * @param {Array} other The other array to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `array` and `other` objects.
    	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    	     */
    	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	          arrLength = array.length,
    	          othLength = other.length;

    	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    	        return false;
    	      }
    	      // Check that cyclic values are equal.
    	      var arrStacked = stack.get(array);
    	      var othStacked = stack.get(other);
    	      if (arrStacked && othStacked) {
    	        return arrStacked == other && othStacked == array;
    	      }
    	      var index = -1,
    	          result = true,
    	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

    	      stack.set(array, other);
    	      stack.set(other, array);

    	      // Ignore non-index properties.
    	      while (++index < arrLength) {
    	        var arrValue = array[index],
    	            othValue = other[index];

    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, arrValue, index, other, array, stack)
    	            : customizer(arrValue, othValue, index, array, other, stack);
    	        }
    	        if (compared !== undefined$1) {
    	          if (compared) {
    	            continue;
    	          }
    	          result = false;
    	          break;
    	        }
    	        // Recursively compare arrays (susceptible to call stack limits).
    	        if (seen) {
    	          if (!arraySome(other, function(othValue, othIndex) {
    	                if (!cacheHas(seen, othIndex) &&
    	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
    	                  return seen.push(othIndex);
    	                }
    	              })) {
    	            result = false;
    	            break;
    	          }
    	        } else if (!(
    	              arrValue === othValue ||
    	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
    	            )) {
    	          result = false;
    	          break;
    	        }
    	      }
    	      stack['delete'](array);
    	      stack['delete'](other);
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for comparing objects of
    	     * the same `toStringTag`.
    	     *
    	     * **Note:** This function only supports comparing values with tags of
    	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {string} tag The `toStringTag` of the objects to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    	      switch (tag) {
    	        case dataViewTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              (object.byteOffset != other.byteOffset)) {
    	            return false;
    	          }
    	          object = object.buffer;
    	          other = other.buffer;

    	        case arrayBufferTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    	            return false;
    	          }
    	          return true;

    	        case boolTag:
    	        case dateTag:
    	        case numberTag:
    	          // Coerce booleans to `1` or `0` and dates to milliseconds.
    	          // Invalid dates are coerced to `NaN`.
    	          return eq(+object, +other);

    	        case errorTag:
    	          return object.name == other.name && object.message == other.message;

    	        case regexpTag:
    	        case stringTag:
    	          // Coerce regexes to strings and treat strings, primitives and objects,
    	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
    	          // for more details.
    	          return object == (other + '');

    	        case mapTag:
    	          var convert = mapToArray;

    	        case setTag:
    	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
    	          convert || (convert = setToArray);

    	          if (object.size != other.size && !isPartial) {
    	            return false;
    	          }
    	          // Assume cyclic values are equal.
    	          var stacked = stack.get(object);
    	          if (stacked) {
    	            return stacked == other;
    	          }
    	          bitmask |= COMPARE_UNORDERED_FLAG;

    	          // Recursively compare objects (susceptible to call stack limits).
    	          stack.set(object, other);
    	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
    	          stack['delete'](object);
    	          return result;

    	        case symbolTag:
    	          if (symbolValueOf) {
    	            return symbolValueOf.call(object) == symbolValueOf.call(other);
    	          }
    	      }
    	      return false;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for objects with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	          objProps = getAllKeys(object),
    	          objLength = objProps.length,
    	          othProps = getAllKeys(other),
    	          othLength = othProps.length;

    	      if (objLength != othLength && !isPartial) {
    	        return false;
    	      }
    	      var index = objLength;
    	      while (index--) {
    	        var key = objProps[index];
    	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
    	          return false;
    	        }
    	      }
    	      // Check that cyclic values are equal.
    	      var objStacked = stack.get(object);
    	      var othStacked = stack.get(other);
    	      if (objStacked && othStacked) {
    	        return objStacked == other && othStacked == object;
    	      }
    	      var result = true;
    	      stack.set(object, other);
    	      stack.set(other, object);

    	      var skipCtor = isPartial;
    	      while (++index < objLength) {
    	        key = objProps[index];
    	        var objValue = object[key],
    	            othValue = other[key];

    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, objValue, key, other, object, stack)
    	            : customizer(objValue, othValue, key, object, other, stack);
    	        }
    	        // Recursively compare objects (susceptible to call stack limits).
    	        if (!(compared === undefined$1
    	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
    	              : compared
    	            )) {
    	          result = false;
    	          break;
    	        }
    	        skipCtor || (skipCtor = key == 'constructor');
    	      }
    	      if (result && !skipCtor) {
    	        var objCtor = object.constructor,
    	            othCtor = other.constructor;

    	        // Non `Object` object instances with different constructors are not equal.
    	        if (objCtor != othCtor &&
    	            ('constructor' in object && 'constructor' in other) &&
    	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
    	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    	          result = false;
    	        }
    	      }
    	      stack['delete'](object);
    	      stack['delete'](other);
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseRest` which flattens the rest array.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function flatRest(func) {
    	      return setToString(overRest(func, undefined$1, flatten), func + '');
    	    }

    	    /**
    	     * Creates an array of own enumerable property names and symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeys(object) {
    	      return baseGetAllKeys(object, keys, getSymbols);
    	    }

    	    /**
    	     * Creates an array of own and inherited enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeysIn(object) {
    	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    	    }

    	    /**
    	     * Gets metadata for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {*} Returns the metadata for `func`.
    	     */
    	    var getData = !metaMap ? noop : function(func) {
    	      return metaMap.get(func);
    	    };

    	    /**
    	     * Gets the name of `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {string} Returns the function name.
    	     */
    	    function getFuncName(func) {
    	      var result = (func.name + ''),
    	          array = realNames[result],
    	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

    	      while (length--) {
    	        var data = array[length],
    	            otherFunc = data.func;
    	        if (otherFunc == null || otherFunc == func) {
    	          return data.name;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the argument placeholder value for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to inspect.
    	     * @returns {*} Returns the placeholder value.
    	     */
    	    function getHolder(func) {
    	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
    	      return object.placeholder;
    	    }

    	    /**
    	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
    	     * this function returns the custom method, otherwise it returns `baseIteratee`.
    	     * If arguments are provided, the chosen function is invoked with them and
    	     * its result is returned.
    	     *
    	     * @private
    	     * @param {*} [value] The value to convert to an iteratee.
    	     * @param {number} [arity] The arity of the created iteratee.
    	     * @returns {Function} Returns the chosen function or its result.
    	     */
    	    function getIteratee() {
    	      var result = lodash.iteratee || iteratee;
    	      result = result === iteratee ? baseIteratee : result;
    	      return arguments.length ? result(arguments[0], arguments[1]) : result;
    	    }

    	    /**
    	     * Gets the data for `map`.
    	     *
    	     * @private
    	     * @param {Object} map The map to query.
    	     * @param {string} key The reference key.
    	     * @returns {*} Returns the map data.
    	     */
    	    function getMapData(map, key) {
    	      var data = map.__data__;
    	      return isKeyable(key)
    	        ? data[typeof key == 'string' ? 'string' : 'hash']
    	        : data.map;
    	    }

    	    /**
    	     * Gets the property names, values, and compare flags of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the match data of `object`.
    	     */
    	    function getMatchData(object) {
    	      var result = keys(object),
    	          length = result.length;

    	      while (length--) {
    	        var key = result[length],
    	            value = object[key];

    	        result[length] = [key, value, isStrictComparable(value)];
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the native function at `key` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the method to get.
    	     * @returns {*} Returns the function if it's native, else `undefined`.
    	     */
    	    function getNative(object, key) {
    	      var value = getValue(object, key);
    	      return baseIsNative(value) ? value : undefined$1;
    	    }

    	    /**
    	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the raw `toStringTag`.
    	     */
    	    function getRawTag(value) {
    	      var isOwn = hasOwnProperty.call(value, symToStringTag),
    	          tag = value[symToStringTag];

    	      try {
    	        value[symToStringTag] = undefined$1;
    	        var unmasked = true;
    	      } catch (e) {}

    	      var result = nativeObjectToString.call(value);
    	      if (unmasked) {
    	        if (isOwn) {
    	          value[symToStringTag] = tag;
    	        } else {
    	          delete value[symToStringTag];
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates an array of the own enumerable symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    	      if (object == null) {
    	        return [];
    	      }
    	      object = Object(object);
    	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
    	        return propertyIsEnumerable.call(object, symbol);
    	      });
    	    };

    	    /**
    	     * Creates an array of the own and inherited enumerable symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    	      var result = [];
    	      while (object) {
    	        arrayPush(result, getSymbols(object));
    	        object = getPrototype(object);
    	      }
    	      return result;
    	    };

    	    /**
    	     * Gets the `toStringTag` of `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    var getTag = baseGetTag;

    	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	        (Map && getTag(new Map) != mapTag) ||
    	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	        (Set && getTag(new Set) != setTag) ||
    	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	      getTag = function(value) {
    	        var result = baseGetTag(value),
    	            Ctor = result == objectTag ? value.constructor : undefined$1,
    	            ctorString = Ctor ? toSource(Ctor) : '';

    	        if (ctorString) {
    	          switch (ctorString) {
    	            case dataViewCtorString: return dataViewTag;
    	            case mapCtorString: return mapTag;
    	            case promiseCtorString: return promiseTag;
    	            case setCtorString: return setTag;
    	            case weakMapCtorString: return weakMapTag;
    	          }
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
    	     *
    	     * @private
    	     * @param {number} start The start of the view.
    	     * @param {number} end The end of the view.
    	     * @param {Array} transforms The transformations to apply to the view.
    	     * @returns {Object} Returns an object containing the `start` and `end`
    	     *  positions of the view.
    	     */
    	    function getView(start, end, transforms) {
    	      var index = -1,
    	          length = transforms.length;

    	      while (++index < length) {
    	        var data = transforms[index],
    	            size = data.size;

    	        switch (data.type) {
    	          case 'drop':      start += size; break;
    	          case 'dropRight': end -= size; break;
    	          case 'take':      end = nativeMin(end, start + size); break;
    	          case 'takeRight': start = nativeMax(start, end - size); break;
    	        }
    	      }
    	      return { 'start': start, 'end': end };
    	    }

    	    /**
    	     * Extracts wrapper details from the `source` body comment.
    	     *
    	     * @private
    	     * @param {string} source The source to inspect.
    	     * @returns {Array} Returns the wrapper details.
    	     */
    	    function getWrapDetails(source) {
    	      var match = source.match(reWrapDetails);
    	      return match ? match[1].split(reSplitDetails) : [];
    	    }

    	    /**
    	     * Checks if `path` exists on `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @param {Function} hasFunc The function to check properties.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     */
    	    function hasPath(object, path, hasFunc) {
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length,
    	          result = false;

    	      while (++index < length) {
    	        var key = toKey(path[index]);
    	        if (!(result = object != null && hasFunc(object, key))) {
    	          break;
    	        }
    	        object = object[key];
    	      }
    	      if (result || ++index != length) {
    	        return result;
    	      }
    	      length = object == null ? 0 : object.length;
    	      return !!length && isLength(length) && isIndex(key, length) &&
    	        (isArray(object) || isArguments(object));
    	    }

    	    /**
    	     * Initializes an array clone.
    	     *
    	     * @private
    	     * @param {Array} array The array to clone.
    	     * @returns {Array} Returns the initialized clone.
    	     */
    	    function initCloneArray(array) {
    	      var length = array.length,
    	          result = new array.constructor(length);

    	      // Add properties assigned by `RegExp#exec`.
    	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    	        result.index = array.index;
    	        result.input = array.input;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Initializes an object clone.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneObject(object) {
    	      return (typeof object.constructor == 'function' && !isPrototype(object))
    	        ? baseCreate(getPrototype(object))
    	        : {};
    	    }

    	    /**
    	     * Initializes an object clone based on its `toStringTag`.
    	     *
    	     * **Note:** This function only supports cloning values with tags of
    	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @param {string} tag The `toStringTag` of the object to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneByTag(object, tag, isDeep) {
    	      var Ctor = object.constructor;
    	      switch (tag) {
    	        case arrayBufferTag:
    	          return cloneArrayBuffer(object);

    	        case boolTag:
    	        case dateTag:
    	          return new Ctor(+object);

    	        case dataViewTag:
    	          return cloneDataView(object, isDeep);

    	        case float32Tag: case float64Tag:
    	        case int8Tag: case int16Tag: case int32Tag:
    	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
    	          return cloneTypedArray(object, isDeep);

    	        case mapTag:
    	          return new Ctor;

    	        case numberTag:
    	        case stringTag:
    	          return new Ctor(object);

    	        case regexpTag:
    	          return cloneRegExp(object);

    	        case setTag:
    	          return new Ctor;

    	        case symbolTag:
    	          return cloneSymbol(object);
    	      }
    	    }

    	    /**
    	     * Inserts wrapper `details` in a comment at the top of the `source` body.
    	     *
    	     * @private
    	     * @param {string} source The source to modify.
    	     * @returns {Array} details The details to insert.
    	     * @returns {string} Returns the modified source.
    	     */
    	    function insertWrapDetails(source, details) {
    	      var length = details.length;
    	      if (!length) {
    	        return source;
    	      }
    	      var lastIndex = length - 1;
    	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    	      details = details.join(length > 2 ? ', ' : ' ');
    	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    	    }

    	    /**
    	     * Checks if `value` is a flattenable `arguments` object or array.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
    	     */
    	    function isFlattenable(value) {
    	      return isArray(value) || isArguments(value) ||
    	        !!(spreadableSymbol && value && value[spreadableSymbol]);
    	    }

    	    /**
    	     * Checks if `value` is a valid array-like index.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	     */
    	    function isIndex(value, length) {
    	      var type = typeof value;
    	      length = length == null ? MAX_SAFE_INTEGER : length;

    	      return !!length &&
    	        (type == 'number' ||
    	          (type != 'symbol' && reIsUint.test(value))) &&
    	            (value > -1 && value % 1 == 0 && value < length);
    	    }

    	    /**
    	     * Checks if the given arguments are from an iteratee call.
    	     *
    	     * @private
    	     * @param {*} value The potential iteratee value argument.
    	     * @param {*} index The potential iteratee index or key argument.
    	     * @param {*} object The potential iteratee object argument.
    	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
    	     *  else `false`.
    	     */
    	    function isIterateeCall(value, index, object) {
    	      if (!isObject(object)) {
    	        return false;
    	      }
    	      var type = typeof index;
    	      if (type == 'number'
    	            ? (isArrayLike(object) && isIndex(index, object.length))
    	            : (type == 'string' && index in object)
    	          ) {
    	        return eq(object[index], value);
    	      }
    	      return false;
    	    }

    	    /**
    	     * Checks if `value` is a property name and not a property path.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
    	     */
    	    function isKey(value, object) {
    	      if (isArray(value)) {
    	        return false;
    	      }
    	      var type = typeof value;
    	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
    	          value == null || isSymbol(value)) {
    	        return true;
    	      }
    	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    	        (object != null && value in Object(object));
    	    }

    	    /**
    	     * Checks if `value` is suitable for use as unique object key.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	     */
    	    function isKeyable(value) {
    	      var type = typeof value;
    	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	        ? (value !== '__proto__')
    	        : (value === null);
    	    }

    	    /**
    	     * Checks if `func` has a lazy counterpart.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
    	     *  else `false`.
    	     */
    	    function isLaziable(func) {
    	      var funcName = getFuncName(func),
    	          other = lodash[funcName];

    	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    	        return false;
    	      }
    	      if (func === other) {
    	        return true;
    	      }
    	      var data = getData(other);
    	      return !!data && func === data[0];
    	    }

    	    /**
    	     * Checks if `func` has its source masked.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	     */
    	    function isMasked(func) {
    	      return !!maskSrcKey && (maskSrcKey in func);
    	    }

    	    /**
    	     * Checks if `func` is capable of being masked.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
    	     */
    	    var isMaskable = coreJsData ? isFunction : stubFalse;

    	    /**
    	     * Checks if `value` is likely a prototype object.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	     */
    	    function isPrototype(value) {
    	      var Ctor = value && value.constructor,
    	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	      return value === proto;
    	    }

    	    /**
    	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` if suitable for strict
    	     *  equality comparisons, else `false`.
    	     */
    	    function isStrictComparable(value) {
    	      return value === value && !isObject(value);
    	    }

    	    /**
    	     * A specialized version of `matchesProperty` for source values suitable
    	     * for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {string} key The key of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function matchesStrictComparable(key, srcValue) {
    	      return function(object) {
    	        if (object == null) {
    	          return false;
    	        }
    	        return object[key] === srcValue &&
    	          (srcValue !== undefined$1 || (key in Object(object)));
    	      };
    	    }

    	    /**
    	     * A specialized version of `_.memoize` which clears the memoized function's
    	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
    	     *
    	     * @private
    	     * @param {Function} func The function to have its output memoized.
    	     * @returns {Function} Returns the new memoized function.
    	     */
    	    function memoizeCapped(func) {
    	      var result = memoize(func, function(key) {
    	        if (cache.size === MAX_MEMOIZE_SIZE) {
    	          cache.clear();
    	        }
    	        return key;
    	      });

    	      var cache = result.cache;
    	      return result;
    	    }

    	    /**
    	     * Merges the function metadata of `source` into `data`.
    	     *
    	     * Merging metadata reduces the number of wrappers used to invoke a function.
    	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
    	     * may be applied regardless of execution order. Methods like `_.ary` and
    	     * `_.rearg` modify function arguments, making the order in which they are
    	     * executed important, preventing the merging of metadata. However, we make
    	     * an exception for a safe combined case where curried functions have `_.ary`
    	     * and or `_.rearg` applied.
    	     *
    	     * @private
    	     * @param {Array} data The destination metadata.
    	     * @param {Array} source The source metadata.
    	     * @returns {Array} Returns `data`.
    	     */
    	    function mergeData(data, source) {
    	      var bitmask = data[1],
    	          srcBitmask = source[1],
    	          newBitmask = bitmask | srcBitmask,
    	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

    	      var isCombo =
    	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
    	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
    	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

    	      // Exit early if metadata can't be merged.
    	      if (!(isCommon || isCombo)) {
    	        return data;
    	      }
    	      // Use source `thisArg` if available.
    	      if (srcBitmask & WRAP_BIND_FLAG) {
    	        data[2] = source[2];
    	        // Set when currying a bound function.
    	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    	      }
    	      // Compose partial arguments.
    	      var value = source[3];
    	      if (value) {
    	        var partials = data[3];
    	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    	      }
    	      // Compose partial right arguments.
    	      value = source[5];
    	      if (value) {
    	        partials = data[5];
    	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    	      }
    	      // Use source `argPos` if available.
    	      value = source[7];
    	      if (value) {
    	        data[7] = value;
    	      }
    	      // Use source `ary` if it's smaller.
    	      if (srcBitmask & WRAP_ARY_FLAG) {
    	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    	      }
    	      // Use source `arity` if one is not provided.
    	      if (data[9] == null) {
    	        data[9] = source[9];
    	      }
    	      // Use source `func` and merge bitmasks.
    	      data[0] = source[0];
    	      data[1] = newBitmask;

    	      return data;
    	    }

    	    /**
    	     * This function is like
    	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	     * except that it includes inherited enumerable properties.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function nativeKeysIn(object) {
    	      var result = [];
    	      if (object != null) {
    	        for (var key in Object(object)) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `value` to a string using `Object.prototype.toString`.
    	     *
    	     * @private
    	     * @param {*} value The value to convert.
    	     * @returns {string} Returns the converted string.
    	     */
    	    function objectToString(value) {
    	      return nativeObjectToString.call(value);
    	    }

    	    /**
    	     * A specialized version of `baseRest` which transforms the rest array.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @param {Function} transform The rest array transform.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function overRest(func, start, transform) {
    	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
    	      return function() {
    	        var args = arguments,
    	            index = -1,
    	            length = nativeMax(args.length - start, 0),
    	            array = Array(length);

    	        while (++index < length) {
    	          array[index] = args[start + index];
    	        }
    	        index = -1;
    	        var otherArgs = Array(start + 1);
    	        while (++index < start) {
    	          otherArgs[index] = args[index];
    	        }
    	        otherArgs[start] = transform(array);
    	        return apply(func, this, otherArgs);
    	      };
    	    }

    	    /**
    	     * Gets the parent value at `path` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array} path The path to get the parent value of.
    	     * @returns {*} Returns the parent value.
    	     */
    	    function parent(object, path) {
    	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    	    }

    	    /**
    	     * Reorder `array` according to the specified indexes where the element at
    	     * the first index is assigned as the first element, the element at
    	     * the second index is assigned as the second element, and so on.
    	     *
    	     * @private
    	     * @param {Array} array The array to reorder.
    	     * @param {Array} indexes The arranged array indexes.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function reorder(array, indexes) {
    	      var arrLength = array.length,
    	          length = nativeMin(indexes.length, arrLength),
    	          oldArray = copyArray(array);

    	      while (length--) {
    	        var index = indexes[length];
    	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
    	      }
    	      return array;
    	    }

    	    /**
    	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the property to get.
    	     * @returns {*} Returns the property value.
    	     */
    	    function safeGet(object, key) {
    	      if (key === 'constructor' && typeof object[key] === 'function') {
    	        return;
    	      }

    	      if (key == '__proto__') {
    	        return;
    	      }

    	      return object[key];
    	    }

    	    /**
    	     * Sets metadata for `func`.
    	     *
    	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
    	     * period of time, it will trip its breaker and transition to an identity
    	     * function to avoid garbage collection pauses in V8. See
    	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
    	     * for more details.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setData = shortOut(baseSetData);

    	    /**
    	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @returns {number|Object} Returns the timer id or timeout object.
    	     */
    	    var setTimeout = ctxSetTimeout || function(func, wait) {
    	      return root.setTimeout(func, wait);
    	    };

    	    /**
    	     * Sets the `toString` method of `func` to return `string`.
    	     *
    	     * @private
    	     * @param {Function} func The function to modify.
    	     * @param {Function} string The `toString` result.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setToString = shortOut(baseSetToString);

    	    /**
    	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
    	     * with wrapper details in a comment at the top of the source body.
    	     *
    	     * @private
    	     * @param {Function} wrapper The function to modify.
    	     * @param {Function} reference The reference function.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @returns {Function} Returns `wrapper`.
    	     */
    	    function setWrapToString(wrapper, reference, bitmask) {
    	      var source = (reference + '');
    	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    	    }

    	    /**
    	     * Creates a function that'll short out and invoke `identity` instead
    	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
    	     * milliseconds.
    	     *
    	     * @private
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new shortable function.
    	     */
    	    function shortOut(func) {
    	      var count = 0,
    	          lastCalled = 0;

    	      return function() {
    	        var stamp = nativeNow(),
    	            remaining = HOT_SPAN - (stamp - lastCalled);

    	        lastCalled = stamp;
    	        if (remaining > 0) {
    	          if (++count >= HOT_COUNT) {
    	            return arguments[0];
    	          }
    	        } else {
    	          count = 0;
    	        }
    	        return func.apply(undefined$1, arguments);
    	      };
    	    }

    	    /**
    	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
    	     *
    	     * @private
    	     * @param {Array} array The array to shuffle.
    	     * @param {number} [size=array.length] The size of `array`.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function shuffleSelf(array, size) {
    	      var index = -1,
    	          length = array.length,
    	          lastIndex = length - 1;

    	      size = size === undefined$1 ? length : size;
    	      while (++index < size) {
    	        var rand = baseRandom(index, lastIndex),
    	            value = array[rand];

    	        array[rand] = array[index];
    	        array[index] = value;
    	      }
    	      array.length = size;
    	      return array;
    	    }

    	    /**
    	     * Converts `string` to a property path array.
    	     *
    	     * @private
    	     * @param {string} string The string to convert.
    	     * @returns {Array} Returns the property path array.
    	     */
    	    var stringToPath = memoizeCapped(function(string) {
    	      var result = [];
    	      if (string.charCodeAt(0) === 46 /* . */) {
    	        result.push('');
    	      }
    	      string.replace(rePropName, function(match, number, quote, subString) {
    	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    	      });
    	      return result;
    	    });

    	    /**
    	     * Converts `value` to a string key if it's not a string or symbol.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {string|symbol} Returns the key.
    	     */
    	    function toKey(value) {
    	      if (typeof value == 'string' || isSymbol(value)) {
    	        return value;
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }

    	    /**
    	     * Converts `func` to its source code.
    	     *
    	     * @private
    	     * @param {Function} func The function to convert.
    	     * @returns {string} Returns the source code.
    	     */
    	    function toSource(func) {
    	      if (func != null) {
    	        try {
    	          return funcToString.call(func);
    	        } catch (e) {}
    	        try {
    	          return (func + '');
    	        } catch (e) {}
    	      }
    	      return '';
    	    }

    	    /**
    	     * Updates wrapper `details` based on `bitmask` flags.
    	     *
    	     * @private
    	     * @returns {Array} details The details to modify.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @returns {Array} Returns `details`.
    	     */
    	    function updateWrapDetails(details, bitmask) {
    	      arrayEach(wrapFlags, function(pair) {
    	        var value = '_.' + pair[0];
    	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
    	          details.push(value);
    	        }
    	      });
    	      return details.sort();
    	    }

    	    /**
    	     * Creates a clone of `wrapper`.
    	     *
    	     * @private
    	     * @param {Object} wrapper The wrapper to clone.
    	     * @returns {Object} Returns the cloned wrapper.
    	     */
    	    function wrapperClone(wrapper) {
    	      if (wrapper instanceof LazyWrapper) {
    	        return wrapper.clone();
    	      }
    	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    	      result.__actions__ = copyArray(wrapper.__actions__);
    	      result.__index__  = wrapper.__index__;
    	      result.__values__ = wrapper.__values__;
    	      return result;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an array of elements split into groups the length of `size`.
    	     * If `array` can't be split evenly, the final chunk will be the remaining
    	     * elements.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to process.
    	     * @param {number} [size=1] The length of each chunk
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the new array of chunks.
    	     * @example
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 2);
    	     * // => [['a', 'b'], ['c', 'd']]
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 3);
    	     * // => [['a', 'b', 'c'], ['d']]
    	     */
    	    function chunk(array, size, guard) {
    	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
    	        size = 1;
    	      } else {
    	        size = nativeMax(toInteger(size), 0);
    	      }
    	      var length = array == null ? 0 : array.length;
    	      if (!length || size < 1) {
    	        return [];
    	      }
    	      var index = 0,
    	          resIndex = 0,
    	          result = Array(nativeCeil(length / size));

    	      while (index < length) {
    	        result[resIndex++] = baseSlice(array, index, (index += size));
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates an array with all falsey values removed. The values `false`, `null`,
    	     * `0`, `""`, `undefined`, and `NaN` are falsey.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to compact.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.compact([0, 1, false, 2, '', 3]);
    	     * // => [1, 2, 3]
    	     */
    	    function compact(array) {
    	      var index = -1,
    	          length = array == null ? 0 : array.length,
    	          resIndex = 0,
    	          result = [];

    	      while (++index < length) {
    	        var value = array[index];
    	        if (value) {
    	          result[resIndex++] = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates a new array concatenating `array` with any additional arrays
    	     * and/or values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to concatenate.
    	     * @param {...*} [values] The values to concatenate.
    	     * @returns {Array} Returns the new concatenated array.
    	     * @example
    	     *
    	     * var array = [1];
    	     * var other = _.concat(array, 2, [3], [[4]]);
    	     *
    	     * console.log(other);
    	     * // => [1, 2, 3, [4]]
    	     *
    	     * console.log(array);
    	     * // => [1]
    	     */
    	    function concat() {
    	      var length = arguments.length;
    	      if (!length) {
    	        return [];
    	      }
    	      var args = Array(length - 1),
    	          array = arguments[0],
    	          index = length;

    	      while (index--) {
    	        args[index - 1] = arguments[index];
    	      }
    	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    	    }

    	    /**
    	     * Creates an array of `array` values not included in the other given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. The order and references of result values are
    	     * determined by the first array.
    	     *
    	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.without, _.xor
    	     * @example
    	     *
    	     * _.difference([2, 1], [2, 3]);
    	     * // => [1]
    	     */
    	    var difference = baseRest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.difference` except that it accepts `iteratee` which
    	     * is invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The order and references of result values are
    	     * determined by the first array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var differenceBy = baseRest(function(array, values) {
    	      var iteratee = last(values);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.difference` except that it accepts `comparator`
    	     * which is invoked to compare elements of `array` to `values`. The order and
    	     * references of result values are determined by the first array. The comparator
    	     * is invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     *
    	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }]
    	     */
    	    var differenceWith = baseRest(function(array, values) {
    	      var comparator = last(values);
    	      if (isArrayLikeObject(comparator)) {
    	        comparator = undefined$1;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
    	        : [];
    	    });

    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.drop([1, 2, 3]);
    	     * // => [2, 3]
    	     *
    	     * _.drop([1, 2, 3], 2);
    	     * // => [3]
    	     *
    	     * _.drop([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.drop([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function drop(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.dropRight([1, 2, 3]);
    	     * // => [1, 2]
    	     *
    	     * _.dropRight([1, 2, 3], 2);
    	     * // => [1]
    	     *
    	     * _.dropRight([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.dropRight([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function dropRight(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }

    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the end.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.dropRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropRightWhile(users, ['active', false]);
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropRightWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
    	        : [];
    	    }

    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the beginning.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.dropWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropWhile(users, ['active', false]);
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true)
    	        : [];
    	    }

    	    /**
    	     * Fills elements of `array` with `value` from `start` up to, but not
    	     * including, `end`.
    	     *
    	     * **Note:** This method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Array
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.fill(array, 'a');
    	     * console.log(array);
    	     * // => ['a', 'a', 'a']
    	     *
    	     * _.fill(Array(3), 2);
    	     * // => [2, 2, 2]
    	     *
    	     * _.fill([4, 6, 8, 10], '*', 1, 3);
    	     * // => [4, '*', '*', 10]
    	     */
    	    function fill(array, value, start, end) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
    	        start = 0;
    	        end = length;
    	      }
    	      return baseFill(array, value, start, end);
    	    }

    	    /**
    	     * This method is like `_.find` except that it returns the index of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
    	     * // => 0
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findIndex(users, { 'user': 'fred', 'active': false });
    	     * // => 1
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findIndex(users, ['active', false]);
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findIndex(users, 'active');
    	     * // => 2
    	     */
    	    function findIndex(array, predicate, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index);
    	    }

    	    /**
    	     * This method is like `_.findIndex` except that it iterates over elements
    	     * of `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
    	     * // => 2
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
    	     * // => 0
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastIndex(users, ['active', false]);
    	     * // => 2
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastIndex(users, 'active');
    	     * // => 0
    	     */
    	    function findLastIndex(array, predicate, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length - 1;
    	      if (fromIndex !== undefined$1) {
    	        index = toInteger(fromIndex);
    	        index = fromIndex < 0
    	          ? nativeMax(length + index, 0)
    	          : nativeMin(index, length - 1);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    	    }

    	    /**
    	     * Flattens `array` a single level deep.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flatten([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, [3, [4]], 5]
    	     */
    	    function flatten(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseFlatten(array, 1) : [];
    	    }

    	    /**
    	     * Recursively flattens `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, 3, 4, 5]
    	     */
    	    function flattenDeep(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseFlatten(array, INFINITY) : [];
    	    }

    	    /**
    	     * Recursively flatten `array` up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * var array = [1, [2, [3, [4]], 5]];
    	     *
    	     * _.flattenDepth(array, 1);
    	     * // => [1, 2, [3, [4]], 5]
    	     *
    	     * _.flattenDepth(array, 2);
    	     * // => [1, 2, 3, [4], 5]
    	     */
    	    function flattenDepth(array, depth) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      depth = depth === undefined$1 ? 1 : toInteger(depth);
    	      return baseFlatten(array, depth);
    	    }

    	    /**
    	     * The inverse of `_.toPairs`; this method returns an object composed
    	     * from key-value `pairs`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} pairs The key-value pairs.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.fromPairs([['a', 1], ['b', 2]]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function fromPairs(pairs) {
    	      var index = -1,
    	          length = pairs == null ? 0 : pairs.length,
    	          result = {};

    	      while (++index < length) {
    	        var pair = pairs[index];
    	        result[pair[0]] = pair[1];
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias first
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the first element of `array`.
    	     * @example
    	     *
    	     * _.head([1, 2, 3]);
    	     * // => 1
    	     *
    	     * _.head([]);
    	     * // => undefined
    	     */
    	    function head(array) {
    	      return (array && array.length) ? array[0] : undefined$1;
    	    }

    	    /**
    	     * Gets the index at which the first occurrence of `value` is found in `array`
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. If `fromIndex` is negative, it's used as the
    	     * offset from the end of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.indexOf([1, 2, 1, 2], 2);
    	     * // => 1
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.indexOf([1, 2, 1, 2], 2, 2);
    	     * // => 3
    	     */
    	    function indexOf(array, value, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseIndexOf(array, value, index);
    	    }

    	    /**
    	     * Gets all but the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.initial([1, 2, 3]);
    	     * // => [1, 2]
    	     */
    	    function initial(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseSlice(array, 0, -1) : [];
    	    }

    	    /**
    	     * Creates an array of unique values that are included in all given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. The order and references of result values are
    	     * determined by the first array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersection([2, 1], [2, 3]);
    	     * // => [2]
    	     */
    	    var intersection = baseRest(function(arrays) {
    	      var mapped = arrayMap(arrays, castArrayLikeObject);
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped)
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.intersection` except that it accepts `iteratee`
    	     * which is invoked for each element of each `arrays` to generate the criterion
    	     * by which they're compared. The order and references of result values are
    	     * determined by the first array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [2.1]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }]
    	     */
    	    var intersectionBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);

    	      if (iteratee === last(mapped)) {
    	        iteratee = undefined$1;
    	      } else {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.intersection` except that it accepts `comparator`
    	     * which is invoked to compare elements of `arrays`. The order and references
    	     * of result values are determined by the first array. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.intersectionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }]
    	     */
    	    var intersectionWith = baseRest(function(arrays) {
    	      var comparator = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);

    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      if (comparator) {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, undefined$1, comparator)
    	        : [];
    	    });

    	    /**
    	     * Converts all elements in `array` into a string separated by `separator`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to convert.
    	     * @param {string} [separator=','] The element separator.
    	     * @returns {string} Returns the joined string.
    	     * @example
    	     *
    	     * _.join(['a', 'b', 'c'], '~');
    	     * // => 'a~b~c'
    	     */
    	    function join(array, separator) {
    	      return array == null ? '' : nativeJoin.call(array, separator);
    	    }

    	    /**
    	     * Gets the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the last element of `array`.
    	     * @example
    	     *
    	     * _.last([1, 2, 3]);
    	     * // => 3
    	     */
    	    function last(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? array[length - 1] : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.indexOf` except that it iterates over elements of
    	     * `array` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.lastIndexOf([1, 2, 1, 2], 2);
    	     * // => 3
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
    	     * // => 1
    	     */
    	    function lastIndexOf(array, value, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length;
    	      if (fromIndex !== undefined$1) {
    	        index = toInteger(fromIndex);
    	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
    	      }
    	      return value === value
    	        ? strictLastIndexOf(array, value, index)
    	        : baseFindIndex(array, baseIsNaN, index, true);
    	    }

    	    /**
    	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
    	     * element from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.11.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=0] The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     *
    	     * _.nth(array, 1);
    	     * // => 'b'
    	     *
    	     * _.nth(array, -2);
    	     * // => 'c';
    	     */
    	    function nth(array, n) {
    	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    	    }

    	    /**
    	     * Removes all given values from `array` using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
    	     * to remove elements from an array by predicate.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...*} [values] The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pull(array, 'a', 'c');
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    var pull = baseRest(pullAll);

    	    /**
    	     * This method is like `_.pull` except that it accepts an array of values to remove.
    	     *
    	     * **Note:** Unlike `_.difference`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pullAll(array, ['a', 'c']);
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    function pullAll(array, values) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values)
    	        : array;
    	    }

    	    /**
    	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
    	     * invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The iteratee is invoked with one argument: (value).
    	     *
    	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
    	     *
    	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
    	     * console.log(array);
    	     * // => [{ 'x': 2 }]
    	     */
    	    function pullAllBy(array, values, iteratee) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, getIteratee(iteratee, 2))
    	        : array;
    	    }

    	    /**
    	     * This method is like `_.pullAll` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array` to `values`. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
    	     *
    	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
    	     * console.log(array);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
    	     */
    	    function pullAllWith(array, values, comparator) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, undefined$1, comparator)
    	        : array;
    	    }

    	    /**
    	     * Removes elements from `array` corresponding to `indexes` and returns an
    	     * array of removed elements.
    	     *
    	     * **Note:** Unlike `_.at`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     * var pulled = _.pullAt(array, [1, 3]);
    	     *
    	     * console.log(array);
    	     * // => ['a', 'c']
    	     *
    	     * console.log(pulled);
    	     * // => ['b', 'd']
    	     */
    	    var pullAt = flatRest(function(array, indexes) {
    	      var length = array == null ? 0 : array.length,
    	          result = baseAt(array, indexes);

    	      basePullAt(array, arrayMap(indexes, function(index) {
    	        return isIndex(index, length) ? +index : index;
    	      }).sort(compareAscending));

    	      return result;
    	    });

    	    /**
    	     * Removes all elements from `array` that `predicate` returns truthy for
    	     * and returns an array of the removed elements. The predicate is invoked
    	     * with three arguments: (value, index, array).
    	     *
    	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
    	     * to pull elements from an array by value.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = [1, 2, 3, 4];
    	     * var evens = _.remove(array, function(n) {
    	     *   return n % 2 == 0;
    	     * });
    	     *
    	     * console.log(array);
    	     * // => [1, 3]
    	     *
    	     * console.log(evens);
    	     * // => [2, 4]
    	     */
    	    function remove(array, predicate) {
    	      var result = [];
    	      if (!(array && array.length)) {
    	        return result;
    	      }
    	      var index = -1,
    	          indexes = [],
    	          length = array.length;

    	      predicate = getIteratee(predicate, 3);
    	      while (++index < length) {
    	        var value = array[index];
    	        if (predicate(value, index, array)) {
    	          result.push(value);
    	          indexes.push(index);
    	        }
    	      }
    	      basePullAt(array, indexes);
    	      return result;
    	    }

    	    /**
    	     * Reverses `array` so that the first element becomes the last, the second
    	     * element becomes the second to last, and so on.
    	     *
    	     * **Note:** This method mutates `array` and is based on
    	     * [`Array#reverse`](https://mdn.io/Array/reverse).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.reverse(array);
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function reverse(array) {
    	      return array == null ? array : nativeReverse.call(array);
    	    }

    	    /**
    	     * Creates a slice of `array` from `start` up to, but not including, `end`.
    	     *
    	     * **Note:** This method is used instead of
    	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
    	     * returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function slice(array, start, end) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
    	        start = 0;
    	        end = length;
    	      }
    	      else {
    	        start = start == null ? 0 : toInteger(start);
    	        end = end === undefined$1 ? length : toInteger(end);
    	      }
    	      return baseSlice(array, start, end);
    	    }

    	    /**
    	     * Uses a binary search to determine the lowest index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedIndex([30, 50], 40);
    	     * // => 1
    	     */
    	    function sortedIndex(array, value) {
    	      return baseSortedIndex(array, value);
    	    }

    	    /**
    	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 0
    	     */
    	    function sortedIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    	    }

    	    /**
    	     * This method is like `_.indexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 1
    	     */
    	    function sortedIndexOf(array, value) {
    	      var length = array == null ? 0 : array.length;
    	      if (length) {
    	        var index = baseSortedIndex(array, value);
    	        if (index < length && eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * This method is like `_.sortedIndex` except that it returns the highest
    	     * index at which `value` should be inserted into `array` in order to
    	     * maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
    	     * // => 4
    	     */
    	    function sortedLastIndex(array, value) {
    	      return baseSortedIndex(array, value, true);
    	    }

    	    /**
    	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 1
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 1
    	     */
    	    function sortedLastIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    	    }

    	    /**
    	     * This method is like `_.lastIndexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 3
    	     */
    	    function sortedLastIndexOf(array, value) {
    	      var length = array == null ? 0 : array.length;
    	      if (length) {
    	        var index = baseSortedIndex(array, value, true) - 1;
    	        if (eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniq([1, 1, 2]);
    	     * // => [1, 2]
    	     */
    	    function sortedUniq(array) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array)
    	        : [];
    	    }

    	    /**
    	     * This method is like `_.uniqBy` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
    	     * // => [1.1, 2.3]
    	     */
    	    function sortedUniqBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
    	        : [];
    	    }

    	    /**
    	     * Gets all but the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.tail([1, 2, 3]);
    	     * // => [2, 3]
    	     */
    	    function tail(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseSlice(array, 1, length) : [];
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.take([1, 2, 3]);
    	     * // => [1]
    	     *
    	     * _.take([1, 2, 3], 2);
    	     * // => [1, 2]
    	     *
    	     * _.take([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.take([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function take(array, n, guard) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.takeRight([1, 2, 3]);
    	     * // => [3]
    	     *
    	     * _.takeRight([1, 2, 3], 2);
    	     * // => [2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function takeRight(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }

    	    /**
    	     * Creates a slice of `array` with elements taken from the end. Elements are
    	     * taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.takeRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeRightWhile(users, ['active', false]);
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeRightWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
    	        : [];
    	    }

    	    /**
    	     * Creates a slice of `array` with elements taken from the beginning. Elements
    	     * are taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.takeWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeWhile(users, ['active', false]);
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3))
    	        : [];
    	    }

    	    /**
    	     * Creates an array of unique values, in order, from all given arrays using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.union([2], [1, 2]);
    	     * // => [2, 1]
    	     */
    	    var union = baseRest(function(arrays) {
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    	    });

    	    /**
    	     * This method is like `_.union` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which uniqueness is computed. Result values are chosen from the first
    	     * array in which the value occurs. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    var unionBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    	    });

    	    /**
    	     * This method is like `_.union` except that it accepts `comparator` which
    	     * is invoked to compare elements of `arrays`. Result values are chosen from
    	     * the first array in which the value occurs. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.unionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var unionWith = baseRest(function(arrays) {
    	      var comparator = last(arrays);
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    	    });

    	    /**
    	     * Creates a duplicate-free version of an array, using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons, in which only the first occurrence of each element
    	     * is kept. The order of result values is determined by the order they occur
    	     * in the array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniq([2, 1, 2]);
    	     * // => [2, 1]
    	     */
    	    function uniq(array) {
    	      return (array && array.length) ? baseUniq(array) : [];
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * uniqueness is computed. The order of result values is determined by the
    	     * order they occur in the array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    function uniqBy(array, iteratee) {
    	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array`. The order of result values is
    	     * determined by the order they occur in the array.The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.uniqWith(objects, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
    	     */
    	    function uniqWith(array, comparator) {
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    	    }

    	    /**
    	     * This method is like `_.zip` except that it accepts an array of grouped
    	     * elements and creates an array regrouping the elements to their pre-zip
    	     * configuration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.2.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
    	     * // => [['a', 1, true], ['b', 2, false]]
    	     *
    	     * _.unzip(zipped);
    	     * // => [['a', 'b'], [1, 2], [true, false]]
    	     */
    	    function unzip(array) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var length = 0;
    	      array = arrayFilter(array, function(group) {
    	        if (isArrayLikeObject(group)) {
    	          length = nativeMax(group.length, length);
    	          return true;
    	        }
    	      });
    	      return baseTimes(length, function(index) {
    	        return arrayMap(array, baseProperty(index));
    	      });
    	    }

    	    /**
    	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
    	     * how regrouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  regrouped values.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
    	     * // => [[1, 10, 100], [2, 20, 200]]
    	     *
    	     * _.unzipWith(zipped, _.add);
    	     * // => [3, 30, 300]
    	     */
    	    function unzipWith(array, iteratee) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var result = unzip(array);
    	      if (iteratee == null) {
    	        return result;
    	      }
    	      return arrayMap(result, function(group) {
    	        return apply(iteratee, undefined$1, group);
    	      });
    	    }

    	    /**
    	     * Creates an array excluding all given values using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.pull`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...*} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.xor
    	     * @example
    	     *
    	     * _.without([2, 1, 2, 3], 1, 2);
    	     * // => [3]
    	     */
    	    var without = baseRest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, values)
    	        : [];
    	    });

    	    /**
    	     * Creates an array of unique values that is the
    	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
    	     * of the given arrays. The order of result values is determined by the order
    	     * they occur in the arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.without
    	     * @example
    	     *
    	     * _.xor([2, 1], [2, 3]);
    	     * // => [1, 3]
    	     */
    	    var xor = baseRest(function(arrays) {
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    	    });

    	    /**
    	     * This method is like `_.xor` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which by which they're compared. The order of result values is determined
    	     * by the order they occur in the arrays. The iteratee is invoked with one
    	     * argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2, 3.4]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var xorBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    	    });

    	    /**
    	     * This method is like `_.xor` except that it accepts `comparator` which is
    	     * invoked to compare elements of `arrays`. The order of result values is
    	     * determined by the order they occur in the arrays. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.xorWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var xorWith = baseRest(function(arrays) {
    	      var comparator = last(arrays);
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    	    });

    	    /**
    	     * Creates an array of grouped elements, the first of which contains the
    	     * first elements of the given arrays, the second of which contains the
    	     * second elements of the given arrays, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zip(['a', 'b'], [1, 2], [true, false]);
    	     * // => [['a', 1, true], ['b', 2, false]]
    	     */
    	    var zip = baseRest(unzip);

    	    /**
    	     * This method is like `_.fromPairs` except that it accepts two arrays,
    	     * one of property identifiers and one of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.4.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObject(['a', 'b'], [1, 2]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function zipObject(props, values) {
    	      return baseZipObject(props || [], values || [], assignValue);
    	    }

    	    /**
    	     * This method is like `_.zipObject` except that it supports property paths.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
    	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
    	     */
    	    function zipObjectDeep(props, values) {
    	      return baseZipObject(props || [], values || [], baseSet);
    	    }

    	    /**
    	     * This method is like `_.zip` except that it accepts `iteratee` to specify
    	     * how grouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  grouped values.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
    	     *   return a + b + c;
    	     * });
    	     * // => [111, 222]
    	     */
    	    var zipWith = baseRest(function(arrays) {
    	      var length = arrays.length,
    	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

    	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
    	      return unzipWith(arrays, iteratee);
    	    });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
    	     * chain sequences enabled. The result of such sequences must be unwrapped
    	     * with `_#value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Seq
    	     * @param {*} value The value to wrap.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36 },
    	     *   { 'user': 'fred',    'age': 40 },
    	     *   { 'user': 'pebbles', 'age': 1 }
    	     * ];
    	     *
    	     * var youngest = _
    	     *   .chain(users)
    	     *   .sortBy('age')
    	     *   .map(function(o) {
    	     *     return o.user + ' is ' + o.age;
    	     *   })
    	     *   .head()
    	     *   .value();
    	     * // => 'pebbles is 1'
    	     */
    	    function chain(value) {
    	      var result = lodash(value);
    	      result.__chain__ = true;
    	      return result;
    	    }

    	    /**
    	     * This method invokes `interceptor` and returns `value`. The interceptor
    	     * is invoked with one argument; (value). The purpose of this method is to
    	     * "tap into" a method chain sequence in order to modify intermediate results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * _([1, 2, 3])
    	     *  .tap(function(array) {
    	     *    // Mutate input array.
    	     *    array.pop();
    	     *  })
    	     *  .reverse()
    	     *  .value();
    	     * // => [2, 1]
    	     */
    	    function tap(value, interceptor) {
    	      interceptor(value);
    	      return value;
    	    }

    	    /**
    	     * This method is like `_.tap` except that it returns the result of `interceptor`.
    	     * The purpose of this method is to "pass thru" values replacing intermediate
    	     * results in a method chain sequence.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns the result of `interceptor`.
    	     * @example
    	     *
    	     * _('  abc  ')
    	     *  .chain()
    	     *  .trim()
    	     *  .thru(function(value) {
    	     *    return [value];
    	     *  })
    	     *  .value();
    	     * // => ['abc']
    	     */
    	    function thru(value, interceptor) {
    	      return interceptor(value);
    	    }

    	    /**
    	     * This method is the wrapper version of `_.at`.
    	     *
    	     * @name at
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Seq
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _(object).at(['a[0].b.c', 'a[1]']).value();
    	     * // => [3, 4]
    	     */
    	    var wrapperAt = flatRest(function(paths) {
    	      var length = paths.length,
    	          start = length ? paths[0] : 0,
    	          value = this.__wrapped__,
    	          interceptor = function(object) { return baseAt(object, paths); };

    	      if (length > 1 || this.__actions__.length ||
    	          !(value instanceof LazyWrapper) || !isIndex(start)) {
    	        return this.thru(interceptor);
    	      }
    	      value = value.slice(start, +start + (length ? 1 : 0));
    	      value.__actions__.push({
    	        'func': thru,
    	        'args': [interceptor],
    	        'thisArg': undefined$1
    	      });
    	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
    	        if (length && !array.length) {
    	          array.push(undefined$1);
    	        }
    	        return array;
    	      });
    	    });

    	    /**
    	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
    	     *
    	     * @name chain
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 40 }
    	     * ];
    	     *
    	     * // A sequence without explicit chaining.
    	     * _(users).head();
    	     * // => { 'user': 'barney', 'age': 36 }
    	     *
    	     * // A sequence with explicit chaining.
    	     * _(users)
    	     *   .chain()
    	     *   .head()
    	     *   .pick('user')
    	     *   .value();
    	     * // => { 'user': 'barney' }
    	     */
    	    function wrapperChain() {
    	      return chain(this);
    	    }

    	    /**
    	     * Executes the chain sequence and returns the wrapped result.
    	     *
    	     * @name commit
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2];
    	     * var wrapped = _(array).push(3);
    	     *
    	     * console.log(array);
    	     * // => [1, 2]
    	     *
    	     * wrapped = wrapped.commit();
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     *
    	     * wrapped.last();
    	     * // => 3
    	     *
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperCommit() {
    	      return new LodashWrapper(this.value(), this.__chain__);
    	    }

    	    /**
    	     * Gets the next value on a wrapped object following the
    	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
    	     *
    	     * @name next
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the next iterator value.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 1 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 2 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': true, 'value': undefined }
    	     */
    	    function wrapperNext() {
    	      if (this.__values__ === undefined$1) {
    	        this.__values__ = toArray(this.value());
    	      }
    	      var done = this.__index__ >= this.__values__.length,
    	          value = done ? undefined$1 : this.__values__[this.__index__++];

    	      return { 'done': done, 'value': value };
    	    }

    	    /**
    	     * Enables the wrapper to be iterable.
    	     *
    	     * @name Symbol.iterator
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the wrapper object.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped[Symbol.iterator]() === wrapped;
    	     * // => true
    	     *
    	     * Array.from(wrapped);
    	     * // => [1, 2]
    	     */
    	    function wrapperToIterator() {
    	      return this;
    	    }

    	    /**
    	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
    	     *
    	     * @name plant
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @param {*} value The value to plant.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2]).map(square);
    	     * var other = wrapped.plant([3, 4]);
    	     *
    	     * other.value();
    	     * // => [9, 16]
    	     *
    	     * wrapped.value();
    	     * // => [1, 4]
    	     */
    	    function wrapperPlant(value) {
    	      var result,
    	          parent = this;

    	      while (parent instanceof baseLodash) {
    	        var clone = wrapperClone(parent);
    	        clone.__index__ = 0;
    	        clone.__values__ = undefined$1;
    	        if (result) {
    	          previous.__wrapped__ = clone;
    	        } else {
    	          result = clone;
    	        }
    	        var previous = clone;
    	        parent = parent.__wrapped__;
    	      }
    	      previous.__wrapped__ = value;
    	      return result;
    	    }

    	    /**
    	     * This method is the wrapper version of `_.reverse`.
    	     *
    	     * **Note:** This method mutates the wrapped array.
    	     *
    	     * @name reverse
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _(array).reverse().value()
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function wrapperReverse() {
    	      var value = this.__wrapped__;
    	      if (value instanceof LazyWrapper) {
    	        var wrapped = value;
    	        if (this.__actions__.length) {
    	          wrapped = new LazyWrapper(this);
    	        }
    	        wrapped = wrapped.reverse();
    	        wrapped.__actions__.push({
    	          'func': thru,
    	          'args': [reverse],
    	          'thisArg': undefined$1
    	        });
    	        return new LodashWrapper(wrapped, this.__chain__);
    	      }
    	      return this.thru(reverse);
    	    }

    	    /**
    	     * Executes the chain sequence to resolve the unwrapped value.
    	     *
    	     * @name value
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias toJSON, valueOf
    	     * @category Seq
    	     * @returns {*} Returns the resolved unwrapped value.
    	     * @example
    	     *
    	     * _([1, 2, 3]).value();
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperValue() {
    	      return baseWrapperValue(this.__wrapped__, this.__actions__);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the number of times the key was returned by `iteratee`. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': 1, '6': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.countBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': 2, '5': 1 }
    	     */
    	    var countBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        ++result[key];
    	      } else {
    	        baseAssignValue(result, key, 1);
    	      }
    	    });

    	    /**
    	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
    	     * Iteration is stopped once `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * **Note:** This method returns `true` for
    	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
    	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
    	     * elements of empty collections.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.every([true, 1, null, 'yes'], Boolean);
    	     * // => false
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.every(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.every(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.every(users, 'active');
    	     * // => false
    	     */
    	    function every(collection, predicate, guard) {
    	      var func = isArray(collection) ? arrayEvery : baseEvery;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined$1;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Iterates over elements of `collection`, returning an array of all elements
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * **Note:** Unlike `_.remove`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.reject
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * _.filter(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, { 'age': 36, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.filter(users, 'active');
    	     * // => objects for ['barney']
    	     *
    	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
    	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
    	     * // => objects for ['fred', 'barney']
    	     */
    	    function filter(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Iterates over elements of `collection`, returning the first element
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': true },
    	     *   { 'user': 'fred',    'age': 40, 'active': false },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
    	     * ];
    	     *
    	     * _.find(users, function(o) { return o.age < 40; });
    	     * // => object for 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.find(users, { 'age': 1, 'active': true });
    	     * // => object for 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.find(users, ['active', false]);
    	     * // => object for 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.find(users, 'active');
    	     * // => object for 'barney'
    	     */
    	    var find = createFind(findIndex);

    	    /**
    	     * This method is like `_.find` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=collection.length-1] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * _.findLast([1, 2, 3, 4], function(n) {
    	     *   return n % 2 == 1;
    	     * });
    	     * // => 3
    	     */
    	    var findLast = createFind(findLastIndex);

    	    /**
    	     * Creates a flattened array of values by running each element in `collection`
    	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
    	     * with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [n, n];
    	     * }
    	     *
    	     * _.flatMap([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMap(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), 1);
    	    }

    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDeep([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMapDeep(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), INFINITY);
    	    }

    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDepth([1, 2], duplicate, 2);
    	     * // => [[1, 1], [2, 2]]
    	     */
    	    function flatMapDepth(collection, iteratee, depth) {
    	      depth = depth === undefined$1 ? 1 : toInteger(depth);
    	      return baseFlatten(map(collection, iteratee), depth);
    	    }

    	    /**
    	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
    	     * The iteratee is invoked with three arguments: (value, index|key, collection).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * **Note:** As with other "Collections" methods, objects with a "length"
    	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
    	     * or `_.forOwn` for object iteration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias each
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEachRight
    	     * @example
    	     *
    	     * _.forEach([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `1` then `2`.
    	     *
    	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forEach(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEach : baseEach;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.forEach` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @alias eachRight
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEach
    	     * @example
    	     *
    	     * _.forEachRight([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `2` then `1`.
    	     */
    	    function forEachRight(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The order of grouped values
    	     * is determined by the order they occur in `collection`. The corresponding
    	     * value of each key is an array of elements responsible for generating the
    	     * key. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': [4.2], '6': [6.1, 6.3] }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.groupBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': ['one', 'two'], '5': ['three'] }
    	     */
    	    var groupBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        result[key].push(value);
    	      } else {
    	        baseAssignValue(result, key, [value]);
    	      }
    	    });

    	    /**
    	     * Checks if `value` is in `collection`. If `collection` is a string, it's
    	     * checked for a substring of `value`, otherwise
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
    	     * the offset from the end of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
    	     * @example
    	     *
    	     * _.includes([1, 2, 3], 1);
    	     * // => true
    	     *
    	     * _.includes([1, 2, 3], 1, 2);
    	     * // => false
    	     *
    	     * _.includes({ 'a': 1, 'b': 2 }, 1);
    	     * // => true
    	     *
    	     * _.includes('abcd', 'bc');
    	     * // => true
    	     */
    	    function includes(collection, value, fromIndex, guard) {
    	      collection = isArrayLike(collection) ? collection : values(collection);
    	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    	      var length = collection.length;
    	      if (fromIndex < 0) {
    	        fromIndex = nativeMax(length + fromIndex, 0);
    	      }
    	      return isString(collection)
    	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    	    }

    	    /**
    	     * Invokes the method at `path` of each element in `collection`, returning
    	     * an array of the results of each invoked method. Any additional arguments
    	     * are provided to each invoked method. If `path` is a function, it's invoked
    	     * for, and `this` bound to, each element in `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|string} path The path of the method to invoke or
    	     *  the function invoked per iteration.
    	     * @param {...*} [args] The arguments to invoke each method with.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
    	     * // => [[1, 5, 7], [1, 2, 3]]
    	     *
    	     * _.invokeMap([123, 456], String.prototype.split, '');
    	     * // => [['1', '2', '3'], ['4', '5', '6']]
    	     */
    	    var invokeMap = baseRest(function(collection, path, args) {
    	      var index = -1,
    	          isFunc = typeof path == 'function',
    	          result = isArrayLike(collection) ? Array(collection.length) : [];

    	      baseEach(collection, function(value) {
    	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
    	      });
    	      return result;
    	    });

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the last element responsible for generating the key. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * var array = [
    	     *   { 'dir': 'left', 'code': 97 },
    	     *   { 'dir': 'right', 'code': 100 }
    	     * ];
    	     *
    	     * _.keyBy(array, function(o) {
    	     *   return String.fromCharCode(o.code);
    	     * });
    	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
    	     *
    	     * _.keyBy(array, 'dir');
    	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
    	     */
    	    var keyBy = createAggregator(function(result, value, key) {
    	      baseAssignValue(result, key, value);
    	    });

    	    /**
    	     * Creates an array of values by running each element in `collection` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
    	     *
    	     * The guarded methods are:
    	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
    	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
    	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
    	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * _.map([4, 8], square);
    	     * // => [16, 64]
    	     *
    	     * _.map({ 'a': 4, 'b': 8 }, square);
    	     * // => [16, 64] (iteration order is not guaranteed)
    	     *
    	     * var users = [
    	     *   { 'user': 'barney' },
    	     *   { 'user': 'fred' }
    	     * ];
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, 'user');
    	     * // => ['barney', 'fred']
    	     */
    	    function map(collection, iteratee) {
    	      var func = isArray(collection) ? arrayMap : baseMap;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.sortBy` except that it allows specifying the sort
    	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
    	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
    	     * descending or "asc" for ascending sort order of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @param {string[]} [orders] The sort orders of `iteratees`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 34 },
    	     *   { 'user': 'fred',   'age': 40 },
    	     *   { 'user': 'barney', 'age': 36 }
    	     * ];
    	     *
    	     * // Sort by `user` in ascending order and by `age` in descending order.
    	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    	     */
    	    function orderBy(collection, iteratees, orders, guard) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      if (!isArray(iteratees)) {
    	        iteratees = iteratees == null ? [] : [iteratees];
    	      }
    	      orders = guard ? undefined$1 : orders;
    	      if (!isArray(orders)) {
    	        orders = orders == null ? [] : [orders];
    	      }
    	      return baseOrderBy(collection, iteratees, orders);
    	    }

    	    /**
    	     * Creates an array of elements split into two groups, the first of which
    	     * contains elements `predicate` returns truthy for, the second of which
    	     * contains elements `predicate` returns falsey for. The predicate is
    	     * invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of grouped elements.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': false },
    	     *   { 'user': 'fred',    'age': 40, 'active': true },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
    	     * ];
    	     *
    	     * _.partition(users, function(o) { return o.active; });
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.partition(users, { 'age': 1, 'active': false });
    	     * // => objects for [['pebbles'], ['barney', 'fred']]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.partition(users, ['active', false]);
    	     * // => objects for [['barney', 'pebbles'], ['fred']]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.partition(users, 'active');
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     */
    	    var partition = createAggregator(function(result, value, key) {
    	      result[key ? 0 : 1].push(value);
    	    }, function() { return [[], []]; });

    	    /**
    	     * Reduces `collection` to a value which is the accumulated result of running
    	     * each element in `collection` thru `iteratee`, where each successive
    	     * invocation is supplied the return value of the previous. If `accumulator`
    	     * is not given, the first element of `collection` is used as the initial
    	     * value. The iteratee is invoked with four arguments:
    	     * (accumulator, value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
    	     *
    	     * The guarded methods are:
    	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
    	     * and `sortBy`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduceRight
    	     * @example
    	     *
    	     * _.reduce([1, 2], function(sum, n) {
    	     *   return sum + n;
    	     * }, 0);
    	     * // => 3
    	     *
    	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     *   return result;
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
    	     */
    	    function reduce(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduce : baseReduce,
    	          initAccum = arguments.length < 3;

    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    	    }

    	    /**
    	     * This method is like `_.reduce` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduce
    	     * @example
    	     *
    	     * var array = [[0, 1], [2, 3], [4, 5]];
    	     *
    	     * _.reduceRight(array, function(flattened, other) {
    	     *   return flattened.concat(other);
    	     * }, []);
    	     * // => [4, 5, 2, 3, 0, 1]
    	     */
    	    function reduceRight(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
    	          initAccum = arguments.length < 3;

    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    	    }

    	    /**
    	     * The opposite of `_.filter`; this method returns the elements of `collection`
    	     * that `predicate` does **not** return truthy for.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.filter
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': true }
    	     * ];
    	     *
    	     * _.reject(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.reject(users, { 'age': 40, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.reject(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.reject(users, 'active');
    	     * // => objects for ['barney']
    	     */
    	    function reject(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, negate(getIteratee(predicate, 3)));
    	    }

    	    /**
    	     * Gets a random element from `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     * @example
    	     *
    	     * _.sample([1, 2, 3, 4]);
    	     * // => 2
    	     */
    	    function sample(collection) {
    	      var func = isArray(collection) ? arraySample : baseSample;
    	      return func(collection);
    	    }

    	    /**
    	     * Gets `n` random elements at unique keys from `collection` up to the
    	     * size of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} [n=1] The number of elements to sample.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the random elements.
    	     * @example
    	     *
    	     * _.sampleSize([1, 2, 3], 2);
    	     * // => [3, 1]
    	     *
    	     * _.sampleSize([1, 2, 3], 4);
    	     * // => [2, 3, 1]
    	     */
    	    function sampleSize(collection, n, guard) {
    	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
    	      return func(collection, n);
    	    }

    	    /**
    	     * Creates an array of shuffled values, using a version of the
    	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     * @example
    	     *
    	     * _.shuffle([1, 2, 3, 4]);
    	     * // => [4, 1, 3, 2]
    	     */
    	    function shuffle(collection) {
    	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
    	      return func(collection);
    	    }

    	    /**
    	     * Gets the size of `collection` by returning its length for array-like
    	     * values or the number of own enumerable string keyed properties for objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to inspect.
    	     * @returns {number} Returns the collection size.
    	     * @example
    	     *
    	     * _.size([1, 2, 3]);
    	     * // => 3
    	     *
    	     * _.size({ 'a': 1, 'b': 2 });
    	     * // => 2
    	     *
    	     * _.size('pebbles');
    	     * // => 7
    	     */
    	    function size(collection) {
    	      if (collection == null) {
    	        return 0;
    	      }
    	      if (isArrayLike(collection)) {
    	        return isString(collection) ? stringSize(collection) : collection.length;
    	      }
    	      var tag = getTag(collection);
    	      if (tag == mapTag || tag == setTag) {
    	        return collection.size;
    	      }
    	      return baseKeys(collection).length;
    	    }

    	    /**
    	     * Checks if `predicate` returns truthy for **any** element of `collection`.
    	     * Iteration is stopped once `predicate` returns truthy. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.some([null, 0, 'yes', false], Boolean);
    	     * // => true
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'active': true },
    	     *   { 'user': 'fred',   'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.some(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.some(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.some(users, 'active');
    	     * // => true
    	     */
    	    function some(collection, predicate, guard) {
    	      var func = isArray(collection) ? arraySome : baseSome;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined$1;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Creates an array of elements, sorted in ascending order by the results of
    	     * running each element in a collection thru each iteratee. This method
    	     * performs a stable sort, that is, it preserves the original sort order of
    	     * equal elements. The iteratees are invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 30 },
    	     *   { 'user': 'barney', 'age': 34 }
    	     * ];
    	     *
    	     * _.sortBy(users, [function(o) { return o.user; }]);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
    	     *
    	     * _.sortBy(users, ['user', 'age']);
    	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
    	     */
    	    var sortBy = baseRest(function(collection, iteratees) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      var length = iteratees.length;
    	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    	        iteratees = [];
    	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    	        iteratees = [iteratees[0]];
    	      }
    	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    	    });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Gets the timestamp of the number of milliseconds that have elapsed since
    	     * the Unix epoch (1 January 1970 00:00:00 UTC).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Date
    	     * @returns {number} Returns the timestamp.
    	     * @example
    	     *
    	     * _.defer(function(stamp) {
    	     *   console.log(_.now() - stamp);
    	     * }, _.now());
    	     * // => Logs the number of milliseconds it took for the deferred invocation.
    	     */
    	    var now = ctxNow || function() {
    	      return root.Date.now();
    	    };

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * The opposite of `_.before`; this method creates a function that invokes
    	     * `func` once it's called `n` or more times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {number} n The number of calls before `func` is invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var saves = ['profile', 'settings'];
    	     *
    	     * var done = _.after(saves.length, function() {
    	     *   console.log('done saving!');
    	     * });
    	     *
    	     * _.forEach(saves, function(type) {
    	     *   asyncSave({ 'type': type, 'complete': done });
    	     * });
    	     * // => Logs 'done saving!' after the two async saves have completed.
    	     */
    	    function after(n, func) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n < 1) {
    	          return func.apply(this, arguments);
    	        }
    	      };
    	    }

    	    /**
    	     * Creates a function that invokes `func`, with up to `n` arguments,
    	     * ignoring any additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @param {number} [n=func.length] The arity cap.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
    	     * // => [6, 8, 10]
    	     */
    	    function ary(func, n, guard) {
    	      n = guard ? undefined$1 : n;
    	      n = (func && n == null) ? func.length : n;
    	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    	    }

    	    /**
    	     * Creates a function that invokes `func`, with the `this` binding and arguments
    	     * of the created function, while it's called less than `n` times. Subsequent
    	     * calls to the created function return the result of the last `func` invocation.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {number} n The number of calls at which `func` is no longer invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * jQuery(element).on('click', _.before(5, addContactToList));
    	     * // => Allows adding up to 4 contacts to the list.
    	     */
    	    function before(n, func) {
    	      var result;
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n > 0) {
    	          result = func.apply(this, arguments);
    	        }
    	        if (n <= 1) {
    	          func = undefined$1;
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
    	     * and `partials` prepended to the arguments it receives.
    	     *
    	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
    	     * property of bound functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to bind.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * function greet(greeting, punctuation) {
    	     *   return greeting + ' ' + this.user + punctuation;
    	     * }
    	     *
    	     * var object = { 'user': 'fred' };
    	     *
    	     * var bound = _.bind(greet, object, 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bind(greet, object, _, '!');
    	     * bound('hi');
    	     * // => 'hi fred!'
    	     */
    	    var bind = baseRest(function(func, thisArg, partials) {
    	      var bitmask = WRAP_BIND_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bind));
    	        bitmask |= WRAP_PARTIAL_FLAG;
    	      }
    	      return createWrap(func, bitmask, thisArg, partials, holders);
    	    });

    	    /**
    	     * Creates a function that invokes the method at `object[key]` with `partials`
    	     * prepended to the arguments it receives.
    	     *
    	     * This method differs from `_.bind` by allowing bound functions to reference
    	     * methods that may be redefined or don't yet exist. See
    	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
    	     * for more details.
    	     *
    	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Function
    	     * @param {Object} object The object to invoke the method on.
    	     * @param {string} key The key of the method.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * var object = {
    	     *   'user': 'fred',
    	     *   'greet': function(greeting, punctuation) {
    	     *     return greeting + ' ' + this.user + punctuation;
    	     *   }
    	     * };
    	     *
    	     * var bound = _.bindKey(object, 'greet', 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * object.greet = function(greeting, punctuation) {
    	     *   return greeting + 'ya ' + this.user + punctuation;
    	     * };
    	     *
    	     * bound('!');
    	     * // => 'hiya fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bindKey(object, 'greet', _, '!');
    	     * bound('hi');
    	     * // => 'hiya fred!'
    	     */
    	    var bindKey = baseRest(function(object, key, partials) {
    	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bindKey));
    	        bitmask |= WRAP_PARTIAL_FLAG;
    	      }
    	      return createWrap(key, bitmask, object, partials, holders);
    	    });

    	    /**
    	     * Creates a function that accepts arguments of `func` and either invokes
    	     * `func` returning its result, if at least `arity` number of arguments have
    	     * been provided, or returns a function that accepts the remaining `func`
    	     * arguments, and so on. The arity of `func` may be specified if `func.length`
    	     * is not sufficient.
    	     *
    	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curry(abc);
    	     *
    	     * curried(1)(2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(1)(_, 3)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curry(func, arity, guard) {
    	      arity = guard ? undefined$1 : arity;
    	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
    	      result.placeholder = curry.placeholder;
    	      return result;
    	    }

    	    /**
    	     * This method is like `_.curry` except that arguments are applied to `func`
    	     * in the manner of `_.partialRight` instead of `_.partial`.
    	     *
    	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curryRight(abc);
    	     *
    	     * curried(3)(2)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(2, 3)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(3)(1, _)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curryRight(func, arity, guard) {
    	      arity = guard ? undefined$1 : arity;
    	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
    	      result.placeholder = curryRight.placeholder;
    	      return result;
    	    }

    	    /**
    	     * Creates a debounced function that delays invoking `func` until after `wait`
    	     * milliseconds have elapsed since the last time the debounced function was
    	     * invoked. The debounced function comes with a `cancel` method to cancel
    	     * delayed `func` invocations and a `flush` method to immediately invoke them.
    	     * Provide `options` to indicate whether `func` should be invoked on the
    	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
    	     * with the last arguments provided to the debounced function. Subsequent
    	     * calls to the debounced function return the result of the last `func`
    	     * invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the debounced function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
    	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.debounce` and `_.throttle`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to debounce.
    	     * @param {number} [wait=0] The number of milliseconds to delay.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=false]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {number} [options.maxWait]
    	     *  The maximum time `func` is allowed to be delayed before it's invoked.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new debounced function.
    	     * @example
    	     *
    	     * // Avoid costly calculations while the window size is in flux.
    	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
    	     *
    	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
    	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
    	     *   'leading': true,
    	     *   'trailing': false
    	     * }));
    	     *
    	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
    	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
    	     * var source = new EventSource('/stream');
    	     * jQuery(source).on('message', debounced);
    	     *
    	     * // Cancel the trailing debounced invocation.
    	     * jQuery(window).on('popstate', debounced.cancel);
    	     */
    	    function debounce(func, wait, options) {
    	      var lastArgs,
    	          lastThis,
    	          maxWait,
    	          result,
    	          timerId,
    	          lastCallTime,
    	          lastInvokeTime = 0,
    	          leading = false,
    	          maxing = false,
    	          trailing = true;

    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      wait = toNumber(wait) || 0;
    	      if (isObject(options)) {
    	        leading = !!options.leading;
    	        maxing = 'maxWait' in options;
    	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }

    	      function invokeFunc(time) {
    	        var args = lastArgs,
    	            thisArg = lastThis;

    	        lastArgs = lastThis = undefined$1;
    	        lastInvokeTime = time;
    	        result = func.apply(thisArg, args);
    	        return result;
    	      }

    	      function leadingEdge(time) {
    	        // Reset any `maxWait` timer.
    	        lastInvokeTime = time;
    	        // Start the timer for the trailing edge.
    	        timerId = setTimeout(timerExpired, wait);
    	        // Invoke the leading edge.
    	        return leading ? invokeFunc(time) : result;
    	      }

    	      function remainingWait(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime,
    	            timeWaiting = wait - timeSinceLastCall;

    	        return maxing
    	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
    	          : timeWaiting;
    	      }

    	      function shouldInvoke(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime;

    	        // Either this is the first call, activity has stopped and we're at the
    	        // trailing edge, the system time has gone backwards and we're treating
    	        // it as the trailing edge, or we've hit the `maxWait` limit.
    	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
    	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    	      }

    	      function timerExpired() {
    	        var time = now();
    	        if (shouldInvoke(time)) {
    	          return trailingEdge(time);
    	        }
    	        // Restart the timer.
    	        timerId = setTimeout(timerExpired, remainingWait(time));
    	      }

    	      function trailingEdge(time) {
    	        timerId = undefined$1;

    	        // Only invoke if we have `lastArgs` which means `func` has been
    	        // debounced at least once.
    	        if (trailing && lastArgs) {
    	          return invokeFunc(time);
    	        }
    	        lastArgs = lastThis = undefined$1;
    	        return result;
    	      }

    	      function cancel() {
    	        if (timerId !== undefined$1) {
    	          clearTimeout(timerId);
    	        }
    	        lastInvokeTime = 0;
    	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
    	      }

    	      function flush() {
    	        return timerId === undefined$1 ? result : trailingEdge(now());
    	      }

    	      function debounced() {
    	        var time = now(),
    	            isInvoking = shouldInvoke(time);

    	        lastArgs = arguments;
    	        lastThis = this;
    	        lastCallTime = time;

    	        if (isInvoking) {
    	          if (timerId === undefined$1) {
    	            return leadingEdge(lastCallTime);
    	          }
    	          if (maxing) {
    	            // Handle invocations in a tight loop.
    	            clearTimeout(timerId);
    	            timerId = setTimeout(timerExpired, wait);
    	            return invokeFunc(lastCallTime);
    	          }
    	        }
    	        if (timerId === undefined$1) {
    	          timerId = setTimeout(timerExpired, wait);
    	        }
    	        return result;
    	      }
    	      debounced.cancel = cancel;
    	      debounced.flush = flush;
    	      return debounced;
    	    }

    	    /**
    	     * Defers invoking the `func` until the current call stack has cleared. Any
    	     * additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to defer.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.defer(function(text) {
    	     *   console.log(text);
    	     * }, 'deferred');
    	     * // => Logs 'deferred' after one millisecond.
    	     */
    	    var defer = baseRest(function(func, args) {
    	      return baseDelay(func, 1, args);
    	    });

    	    /**
    	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
    	     * provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.delay(function(text) {
    	     *   console.log(text);
    	     * }, 1000, 'later');
    	     * // => Logs 'later' after one second.
    	     */
    	    var delay = baseRest(function(func, wait, args) {
    	      return baseDelay(func, toNumber(wait) || 0, args);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with arguments reversed.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to flip arguments for.
    	     * @returns {Function} Returns the new flipped function.
    	     * @example
    	     *
    	     * var flipped = _.flip(function() {
    	     *   return _.toArray(arguments);
    	     * });
    	     *
    	     * flipped('a', 'b', 'c', 'd');
    	     * // => ['d', 'c', 'b', 'a']
    	     */
    	    function flip(func) {
    	      return createWrap(func, WRAP_FLIP_FLAG);
    	    }

    	    /**
    	     * Creates a function that memoizes the result of `func`. If `resolver` is
    	     * provided, it determines the cache key for storing the result based on the
    	     * arguments provided to the memoized function. By default, the first argument
    	     * provided to the memoized function is used as the map cache key. The `func`
    	     * is invoked with the `this` binding of the memoized function.
    	     *
    	     * **Note:** The cache is exposed as the `cache` property on the memoized
    	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
    	     * constructor with one whose instances implement the
    	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
    	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to have its output memoized.
    	     * @param {Function} [resolver] The function to resolve the cache key.
    	     * @returns {Function} Returns the new memoized function.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     * var other = { 'c': 3, 'd': 4 };
    	     *
    	     * var values = _.memoize(_.values);
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * values(other);
    	     * // => [3, 4]
    	     *
    	     * object.a = 2;
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * // Modify the result cache.
    	     * values.cache.set(object, ['a', 'b']);
    	     * values(object);
    	     * // => ['a', 'b']
    	     *
    	     * // Replace `_.memoize.Cache`.
    	     * _.memoize.Cache = WeakMap;
    	     */
    	    function memoize(func, resolver) {
    	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var memoized = function() {
    	        var args = arguments,
    	            key = resolver ? resolver.apply(this, args) : args[0],
    	            cache = memoized.cache;

    	        if (cache.has(key)) {
    	          return cache.get(key);
    	        }
    	        var result = func.apply(this, args);
    	        memoized.cache = cache.set(key, result) || cache;
    	        return result;
    	      };
    	      memoized.cache = new (memoize.Cache || MapCache);
    	      return memoized;
    	    }

    	    // Expose `MapCache`.
    	    memoize.Cache = MapCache;

    	    /**
    	     * Creates a function that negates the result of the predicate `func`. The
    	     * `func` predicate is invoked with the `this` binding and arguments of the
    	     * created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} predicate The predicate to negate.
    	     * @returns {Function} Returns the new negated function.
    	     * @example
    	     *
    	     * function isEven(n) {
    	     *   return n % 2 == 0;
    	     * }
    	     *
    	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
    	     * // => [1, 3, 5]
    	     */
    	    function negate(predicate) {
    	      if (typeof predicate != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return function() {
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return !predicate.call(this);
    	          case 1: return !predicate.call(this, args[0]);
    	          case 2: return !predicate.call(this, args[0], args[1]);
    	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
    	        }
    	        return !predicate.apply(this, args);
    	      };
    	    }

    	    /**
    	     * Creates a function that is restricted to invoking `func` once. Repeat calls
    	     * to the function return the value of the first invocation. The `func` is
    	     * invoked with the `this` binding and arguments of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var initialize = _.once(createApplication);
    	     * initialize();
    	     * initialize();
    	     * // => `createApplication` is invoked once
    	     */
    	    function once(func) {
    	      return before(2, func);
    	    }

    	    /**
    	     * Creates a function that invokes `func` with its arguments transformed.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Function
    	     * @param {Function} func The function to wrap.
    	     * @param {...(Function|Function[])} [transforms=[_.identity]]
    	     *  The argument transforms.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * function doubled(n) {
    	     *   return n * 2;
    	     * }
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var func = _.overArgs(function(x, y) {
    	     *   return [x, y];
    	     * }, [square, doubled]);
    	     *
    	     * func(9, 3);
    	     * // => [81, 6]
    	     *
    	     * func(10, 5);
    	     * // => [100, 10]
    	     */
    	    var overArgs = castRest(function(func, transforms) {
    	      transforms = (transforms.length == 1 && isArray(transforms[0]))
    	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
    	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

    	      var funcsLength = transforms.length;
    	      return baseRest(function(args) {
    	        var index = -1,
    	            length = nativeMin(args.length, funcsLength);

    	        while (++index < length) {
    	          args[index] = transforms[index].call(this, args[index]);
    	        }
    	        return apply(func, this, args);
    	      });
    	    });

    	    /**
    	     * Creates a function that invokes `func` with `partials` prepended to the
    	     * arguments it receives. This method is like `_.bind` except it does **not**
    	     * alter the `this` binding.
    	     *
    	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.2.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * function greet(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * }
    	     *
    	     * var sayHelloTo = _.partial(greet, 'hello');
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var greetFred = _.partial(greet, _, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     */
    	    var partial = baseRest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partial));
    	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    	    });

    	    /**
    	     * This method is like `_.partial` except that partially applied arguments
    	     * are appended to the arguments it receives.
    	     *
    	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * function greet(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * }
    	     *
    	     * var greetFred = _.partialRight(greet, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     */
    	    var partialRight = baseRest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partialRight));
    	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with arguments arranged according
    	     * to the specified `indexes` where the argument value at the first index is
    	     * provided as the first argument, the argument value at the second index is
    	     * provided as the second argument, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to rearrange arguments for.
    	     * @param {...(number|number[])} indexes The arranged argument indexes.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var rearged = _.rearg(function(a, b, c) {
    	     *   return [a, b, c];
    	     * }, [2, 0, 1]);
    	     *
    	     * rearged('b', 'c', 'a')
    	     * // => ['a', 'b', 'c']
    	     */
    	    var rearg = flatRest(function(func, indexes) {
    	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * created function and arguments from `start` and beyond provided as
    	     * an array.
    	     *
    	     * **Note:** This method is based on the
    	     * [rest parameter](https://mdn.io/rest_parameters).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.rest(function(what, names) {
    	     *   return what + ' ' + _.initial(names).join(', ') +
    	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
    	     * });
    	     *
    	     * say('hello', 'fred', 'barney', 'pebbles');
    	     * // => 'hello fred, barney, & pebbles'
    	     */
    	    function rest(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start === undefined$1 ? start : toInteger(start);
    	      return baseRest(func, start);
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * create function and an array of arguments much like
    	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
    	     *
    	     * **Note:** This method is based on the
    	     * [spread operator](https://mdn.io/spread_operator).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Function
    	     * @param {Function} func The function to spread arguments over.
    	     * @param {number} [start=0] The start position of the spread.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.spread(function(who, what) {
    	     *   return who + ' says ' + what;
    	     * });
    	     *
    	     * say(['fred', 'hello']);
    	     * // => 'fred says hello'
    	     *
    	     * var numbers = Promise.all([
    	     *   Promise.resolve(40),
    	     *   Promise.resolve(36)
    	     * ]);
    	     *
    	     * numbers.then(_.spread(function(x, y) {
    	     *   return x + y;
    	     * }));
    	     * // => a Promise of 76
    	     */
    	    function spread(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
    	      return baseRest(function(args) {
    	        var array = args[start],
    	            otherArgs = castSlice(args, 0, start);

    	        if (array) {
    	          arrayPush(otherArgs, array);
    	        }
    	        return apply(func, this, otherArgs);
    	      });
    	    }

    	    /**
    	     * Creates a throttled function that only invokes `func` at most once per
    	     * every `wait` milliseconds. The throttled function comes with a `cancel`
    	     * method to cancel delayed `func` invocations and a `flush` method to
    	     * immediately invoke them. Provide `options` to indicate whether `func`
    	     * should be invoked on the leading and/or trailing edge of the `wait`
    	     * timeout. The `func` is invoked with the last arguments provided to the
    	     * throttled function. Subsequent calls to the throttled function return the
    	     * result of the last `func` invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the throttled function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
    	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.throttle` and `_.debounce`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to throttle.
    	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=true]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new throttled function.
    	     * @example
    	     *
    	     * // Avoid excessively updating the position while scrolling.
    	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
    	     *
    	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
    	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
    	     * jQuery(element).on('click', throttled);
    	     *
    	     * // Cancel the trailing throttled invocation.
    	     * jQuery(window).on('popstate', throttled.cancel);
    	     */
    	    function throttle(func, wait, options) {
    	      var leading = true,
    	          trailing = true;

    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      if (isObject(options)) {
    	        leading = 'leading' in options ? !!options.leading : leading;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }
    	      return debounce(func, wait, {
    	        'leading': leading,
    	        'maxWait': wait,
    	        'trailing': trailing
    	      });
    	    }

    	    /**
    	     * Creates a function that accepts up to one argument, ignoring any
    	     * additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.unary(parseInt));
    	     * // => [6, 8, 10]
    	     */
    	    function unary(func) {
    	      return ary(func, 1);
    	    }

    	    /**
    	     * Creates a function that provides `value` to `wrapper` as its first
    	     * argument. Any additional arguments provided to the function are appended
    	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
    	     * binding of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {*} value The value to wrap.
    	     * @param {Function} [wrapper=identity] The wrapper function.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var p = _.wrap(_.escape, function(func, text) {
    	     *   return '<p>' + func(text) + '</p>';
    	     * });
    	     *
    	     * p('fred, barney, & pebbles');
    	     * // => '<p>fred, barney, &amp; pebbles</p>'
    	     */
    	    function wrap(value, wrapper) {
    	      return partial(castFunction(wrapper), value);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Casts `value` as an array if it's not one.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Lang
    	     * @param {*} value The value to inspect.
    	     * @returns {Array} Returns the cast array.
    	     * @example
    	     *
    	     * _.castArray(1);
    	     * // => [1]
    	     *
    	     * _.castArray({ 'a': 1 });
    	     * // => [{ 'a': 1 }]
    	     *
    	     * _.castArray('abc');
    	     * // => ['abc']
    	     *
    	     * _.castArray(null);
    	     * // => [null]
    	     *
    	     * _.castArray(undefined);
    	     * // => [undefined]
    	     *
    	     * _.castArray();
    	     * // => []
    	     *
    	     * var array = [1, 2, 3];
    	     * console.log(_.castArray(array) === array);
    	     * // => true
    	     */
    	    function castArray() {
    	      if (!arguments.length) {
    	        return [];
    	      }
    	      var value = arguments[0];
    	      return isArray(value) ? value : [value];
    	    }

    	    /**
    	     * Creates a shallow clone of `value`.
    	     *
    	     * **Note:** This method is loosely based on the
    	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
    	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
    	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
    	     * arrays. The own enumerable properties of `arguments` objects are cloned
    	     * as plain objects. An empty object is returned for uncloneable values such
    	     * as error objects, functions, DOM nodes, and WeakMaps.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeep
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var shallow = _.clone(objects);
    	     * console.log(shallow[0] === objects[0]);
    	     * // => true
    	     */
    	    function clone(value) {
    	      return baseClone(value, CLONE_SYMBOLS_FLAG);
    	    }

    	    /**
    	     * This method is like `_.clone` except that it accepts `customizer` which
    	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
    	     * cloning is handled by the method instead. The `customizer` is invoked with
    	     * up to four arguments; (value [, index|key, object, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeepWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(false);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 0
    	     */
    	    function cloneWith(value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    	    }

    	    /**
    	     * This method is like `_.clone` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.clone
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var deep = _.cloneDeep(objects);
    	     * console.log(deep[0] === objects[0]);
    	     * // => false
    	     */
    	    function cloneDeep(value) {
    	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    	    }

    	    /**
    	     * This method is like `_.cloneWith` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.cloneWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(true);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneDeepWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 20
    	     */
    	    function cloneDeepWith(value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    	    }

    	    /**
    	     * Checks if `object` conforms to `source` by invoking the predicate
    	     * properties of `source` with the corresponding property values of `object`.
    	     *
    	     * **Note:** This method is equivalent to `_.conforms` when `source` is
    	     * partially applied.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.14.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     *
    	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
    	     * // => true
    	     *
    	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
    	     * // => false
    	     */
    	    function conformsTo(object, source) {
    	      return source == null || baseConformsTo(object, source, keys(source));
    	    }

    	    /**
    	     * Performs a
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * comparison between two values to determine if they are equivalent.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     * var other = { 'a': 1 };
    	     *
    	     * _.eq(object, object);
    	     * // => true
    	     *
    	     * _.eq(object, other);
    	     * // => false
    	     *
    	     * _.eq('a', 'a');
    	     * // => true
    	     *
    	     * _.eq('a', Object('a'));
    	     * // => false
    	     *
    	     * _.eq(NaN, NaN);
    	     * // => true
    	     */
    	    function eq(value, other) {
    	      return value === other || (value !== value && other !== other);
    	    }

    	    /**
    	     * Checks if `value` is greater than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     * @see _.lt
    	     * @example
    	     *
    	     * _.gt(3, 1);
    	     * // => true
    	     *
    	     * _.gt(3, 3);
    	     * // => false
    	     *
    	     * _.gt(1, 3);
    	     * // => false
    	     */
    	    var gt = createRelationalOperation(baseGt);

    	    /**
    	     * Checks if `value` is greater than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
    	     *  `other`, else `false`.
    	     * @see _.lte
    	     * @example
    	     *
    	     * _.gte(3, 1);
    	     * // => true
    	     *
    	     * _.gte(3, 3);
    	     * // => true
    	     *
    	     * _.gte(1, 3);
    	     * // => false
    	     */
    	    var gte = createRelationalOperation(function(value, other) {
    	      return value >= other;
    	    });

    	    /**
    	     * Checks if `value` is likely an `arguments` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArguments(function() { return arguments; }());
    	     * // => true
    	     *
    	     * _.isArguments([1, 2, 3]);
    	     * // => false
    	     */
    	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    	        !propertyIsEnumerable.call(value, 'callee');
    	    };

    	    /**
    	     * Checks if `value` is classified as an `Array` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	     * @example
    	     *
    	     * _.isArray([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArray(document.body.children);
    	     * // => false
    	     *
    	     * _.isArray('abc');
    	     * // => false
    	     *
    	     * _.isArray(_.noop);
    	     * // => false
    	     */
    	    var isArray = Array.isArray;

    	    /**
    	     * Checks if `value` is classified as an `ArrayBuffer` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
    	     * @example
    	     *
    	     * _.isArrayBuffer(new ArrayBuffer(2));
    	     * // => true
    	     *
    	     * _.isArrayBuffer(new Array(2));
    	     * // => false
    	     */
    	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    	    /**
    	     * Checks if `value` is array-like. A value is considered array-like if it's
    	     * not a function and has a `value.length` that's an integer greater than or
    	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	     * @example
    	     *
    	     * _.isArrayLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLike(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLike('abc');
    	     * // => true
    	     *
    	     * _.isArrayLike(_.noop);
    	     * // => false
    	     */
    	    function isArrayLike(value) {
    	      return value != null && isLength(value.length) && !isFunction(value);
    	    }

    	    /**
    	     * This method is like `_.isArrayLike` except that it also checks if `value`
    	     * is an object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array-like object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArrayLikeObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject('abc');
    	     * // => false
    	     *
    	     * _.isArrayLikeObject(_.noop);
    	     * // => false
    	     */
    	    function isArrayLikeObject(value) {
    	      return isObjectLike(value) && isArrayLike(value);
    	    }

    	    /**
    	     * Checks if `value` is classified as a boolean primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
    	     * @example
    	     *
    	     * _.isBoolean(false);
    	     * // => true
    	     *
    	     * _.isBoolean(null);
    	     * // => false
    	     */
    	    function isBoolean(value) {
    	      return value === true || value === false ||
    	        (isObjectLike(value) && baseGetTag(value) == boolTag);
    	    }

    	    /**
    	     * Checks if `value` is a buffer.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	     * @example
    	     *
    	     * _.isBuffer(new Buffer(2));
    	     * // => true
    	     *
    	     * _.isBuffer(new Uint8Array(2));
    	     * // => false
    	     */
    	    var isBuffer = nativeIsBuffer || stubFalse;

    	    /**
    	     * Checks if `value` is classified as a `Date` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
    	     * @example
    	     *
    	     * _.isDate(new Date);
    	     * // => true
    	     *
    	     * _.isDate('Mon April 23 2012');
    	     * // => false
    	     */
    	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    	    /**
    	     * Checks if `value` is likely a DOM element.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
    	     * @example
    	     *
    	     * _.isElement(document.body);
    	     * // => true
    	     *
    	     * _.isElement('<body>');
    	     * // => false
    	     */
    	    function isElement(value) {
    	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    	    }

    	    /**
    	     * Checks if `value` is an empty object, collection, map, or set.
    	     *
    	     * Objects are considered empty if they have no own enumerable string keyed
    	     * properties.
    	     *
    	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
    	     * jQuery-like collections are considered empty if they have a `length` of `0`.
    	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
    	     * @example
    	     *
    	     * _.isEmpty(null);
    	     * // => true
    	     *
    	     * _.isEmpty(true);
    	     * // => true
    	     *
    	     * _.isEmpty(1);
    	     * // => true
    	     *
    	     * _.isEmpty([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isEmpty({ 'a': 1 });
    	     * // => false
    	     */
    	    function isEmpty(value) {
    	      if (value == null) {
    	        return true;
    	      }
    	      if (isArrayLike(value) &&
    	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
    	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    	        return !value.length;
    	      }
    	      var tag = getTag(value);
    	      if (tag == mapTag || tag == setTag) {
    	        return !value.size;
    	      }
    	      if (isPrototype(value)) {
    	        return !baseKeys(value).length;
    	      }
    	      for (var key in value) {
    	        if (hasOwnProperty.call(value, key)) {
    	          return false;
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * Performs a deep comparison between two values to determine if they are
    	     * equivalent.
    	     *
    	     * **Note:** This method supports comparing arrays, array buffers, booleans,
    	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
    	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
    	     * by their own, not inherited, enumerable properties. Functions and DOM
    	     * nodes are compared by strict equality, i.e. `===`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     * var other = { 'a': 1 };
    	     *
    	     * _.isEqual(object, other);
    	     * // => true
    	     *
    	     * object === other;
    	     * // => false
    	     */
    	    function isEqual(value, other) {
    	      return baseIsEqual(value, other);
    	    }

    	    /**
    	     * This method is like `_.isEqual` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with up to
    	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, othValue) {
    	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var array = ['hello', 'goodbye'];
    	     * var other = ['hi', 'goodbye'];
    	     *
    	     * _.isEqualWith(array, other, customizer);
    	     * // => true
    	     */
    	    function isEqualWith(value, other, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      var result = customizer ? customizer(value, other) : undefined$1;
    	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    	    }

    	    /**
    	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
    	     * `SyntaxError`, `TypeError`, or `URIError` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
    	     * @example
    	     *
    	     * _.isError(new Error);
    	     * // => true
    	     *
    	     * _.isError(Error);
    	     * // => false
    	     */
    	    function isError(value) {
    	      if (!isObjectLike(value)) {
    	        return false;
    	      }
    	      var tag = baseGetTag(value);
    	      return tag == errorTag || tag == domExcTag ||
    	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    	    }

    	    /**
    	     * Checks if `value` is a finite primitive number.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
    	     * @example
    	     *
    	     * _.isFinite(3);
    	     * // => true
    	     *
    	     * _.isFinite(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isFinite(Infinity);
    	     * // => false
    	     *
    	     * _.isFinite('3');
    	     * // => false
    	     */
    	    function isFinite(value) {
    	      return typeof value == 'number' && nativeIsFinite(value);
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Function` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	     * @example
    	     *
    	     * _.isFunction(_);
    	     * // => true
    	     *
    	     * _.isFunction(/abc/);
    	     * // => false
    	     */
    	    function isFunction(value) {
    	      if (!isObject(value)) {
    	        return false;
    	      }
    	      // The use of `Object#toString` avoids issues with the `typeof` operator
    	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
    	      var tag = baseGetTag(value);
    	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    	    }

    	    /**
    	     * Checks if `value` is an integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
    	     * @example
    	     *
    	     * _.isInteger(3);
    	     * // => true
    	     *
    	     * _.isInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isInteger('3');
    	     * // => false
    	     */
    	    function isInteger(value) {
    	      return typeof value == 'number' && value == toInteger(value);
    	    }

    	    /**
    	     * Checks if `value` is a valid array-like length.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	     * @example
    	     *
    	     * _.isLength(3);
    	     * // => true
    	     *
    	     * _.isLength(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isLength(Infinity);
    	     * // => false
    	     *
    	     * _.isLength('3');
    	     * // => false
    	     */
    	    function isLength(value) {
    	      return typeof value == 'number' &&
    	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	    }

    	    /**
    	     * Checks if `value` is the
    	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	     * @example
    	     *
    	     * _.isObject({});
    	     * // => true
    	     *
    	     * _.isObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObject(_.noop);
    	     * // => true
    	     *
    	     * _.isObject(null);
    	     * // => false
    	     */
    	    function isObject(value) {
    	      var type = typeof value;
    	      return value != null && (type == 'object' || type == 'function');
    	    }

    	    /**
    	     * Checks if `value` is object-like. A value is object-like if it's not `null`
    	     * and has a `typeof` result of "object".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	     * @example
    	     *
    	     * _.isObjectLike({});
    	     * // => true
    	     *
    	     * _.isObjectLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObjectLike(_.noop);
    	     * // => false
    	     *
    	     * _.isObjectLike(null);
    	     * // => false
    	     */
    	    function isObjectLike(value) {
    	      return value != null && typeof value == 'object';
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Map` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
    	     * @example
    	     *
    	     * _.isMap(new Map);
    	     * // => true
    	     *
    	     * _.isMap(new WeakMap);
    	     * // => false
    	     */
    	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    	    /**
    	     * Performs a partial deep comparison between `object` and `source` to
    	     * determine if `object` contains equivalent property values.
    	     *
    	     * **Note:** This method is equivalent to `_.matches` when `source` is
    	     * partially applied.
    	     *
    	     * Partial comparisons will match empty array and empty object `source`
    	     * values against any array or object value, respectively. See `_.isEqual`
    	     * for a list of supported value comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     *
    	     * _.isMatch(object, { 'b': 2 });
    	     * // => true
    	     *
    	     * _.isMatch(object, { 'b': 1 });
    	     * // => false
    	     */
    	    function isMatch(object, source) {
    	      return object === source || baseIsMatch(object, source, getMatchData(source));
    	    }

    	    /**
    	     * This method is like `_.isMatch` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with five
    	     * arguments: (objValue, srcValue, index|key, object, source).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var object = { 'greeting': 'hello' };
    	     * var source = { 'greeting': 'hi' };
    	     *
    	     * _.isMatchWith(object, source, customizer);
    	     * // => true
    	     */
    	    function isMatchWith(object, source, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseIsMatch(object, source, getMatchData(source), customizer);
    	    }

    	    /**
    	     * Checks if `value` is `NaN`.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
    	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
    	     * `undefined` and other non-number values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	     * @example
    	     *
    	     * _.isNaN(NaN);
    	     * // => true
    	     *
    	     * _.isNaN(new Number(NaN));
    	     * // => true
    	     *
    	     * isNaN(undefined);
    	     * // => true
    	     *
    	     * _.isNaN(undefined);
    	     * // => false
    	     */
    	    function isNaN(value) {
    	      // An `NaN` primitive is the only value that is not equal to itself.
    	      // Perform the `toStringTag` check first to avoid errors with some
    	      // ActiveX objects in IE.
    	      return isNumber(value) && value != +value;
    	    }

    	    /**
    	     * Checks if `value` is a pristine native function.
    	     *
    	     * **Note:** This method can't reliably detect native functions in the presence
    	     * of the core-js package because core-js circumvents this kind of detection.
    	     * Despite multiple requests, the core-js maintainer has made it clear: any
    	     * attempt to fix the detection will be obstructed. As a result, we're left
    	     * with little choice but to throw an error. Unfortunately, this also affects
    	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
    	     * which rely on core-js.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isNative(Array.prototype.push);
    	     * // => true
    	     *
    	     * _.isNative(_);
    	     * // => false
    	     */
    	    function isNative(value) {
    	      if (isMaskable(value)) {
    	        throw new Error(CORE_ERROR_TEXT);
    	      }
    	      return baseIsNative(value);
    	    }

    	    /**
    	     * Checks if `value` is `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
    	     * @example
    	     *
    	     * _.isNull(null);
    	     * // => true
    	     *
    	     * _.isNull(void 0);
    	     * // => false
    	     */
    	    function isNull(value) {
    	      return value === null;
    	    }

    	    /**
    	     * Checks if `value` is `null` or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
    	     * @example
    	     *
    	     * _.isNil(null);
    	     * // => true
    	     *
    	     * _.isNil(void 0);
    	     * // => true
    	     *
    	     * _.isNil(NaN);
    	     * // => false
    	     */
    	    function isNil(value) {
    	      return value == null;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Number` primitive or object.
    	     *
    	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
    	     * classified as numbers, use the `_.isFinite` method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
    	     * @example
    	     *
    	     * _.isNumber(3);
    	     * // => true
    	     *
    	     * _.isNumber(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isNumber(Infinity);
    	     * // => true
    	     *
    	     * _.isNumber('3');
    	     * // => false
    	     */
    	    function isNumber(value) {
    	      return typeof value == 'number' ||
    	        (isObjectLike(value) && baseGetTag(value) == numberTag);
    	    }

    	    /**
    	     * Checks if `value` is a plain object, that is, an object created by the
    	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.8.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * _.isPlainObject(new Foo);
    	     * // => false
    	     *
    	     * _.isPlainObject([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isPlainObject({ 'x': 0, 'y': 0 });
    	     * // => true
    	     *
    	     * _.isPlainObject(Object.create(null));
    	     * // => true
    	     */
    	    function isPlainObject(value) {
    	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    	        return false;
    	      }
    	      var proto = getPrototype(value);
    	      if (proto === null) {
    	        return true;
    	      }
    	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    	        funcToString.call(Ctor) == objectCtorString;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `RegExp` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
    	     * @example
    	     *
    	     * _.isRegExp(/abc/);
    	     * // => true
    	     *
    	     * _.isRegExp('/abc/');
    	     * // => false
    	     */
    	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    	    /**
    	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
    	     * double precision number which isn't the result of a rounded unsafe integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
    	     * @example
    	     *
    	     * _.isSafeInteger(3);
    	     * // => true
    	     *
    	     * _.isSafeInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isSafeInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isSafeInteger('3');
    	     * // => false
    	     */
    	    function isSafeInteger(value) {
    	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Set` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
    	     * @example
    	     *
    	     * _.isSet(new Set);
    	     * // => true
    	     *
    	     * _.isSet(new WeakSet);
    	     * // => false
    	     */
    	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    	    /**
    	     * Checks if `value` is classified as a `String` primitive or object.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
    	     * @example
    	     *
    	     * _.isString('abc');
    	     * // => true
    	     *
    	     * _.isString(1);
    	     * // => false
    	     */
    	    function isString(value) {
    	      return typeof value == 'string' ||
    	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Symbol` primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
    	     * @example
    	     *
    	     * _.isSymbol(Symbol.iterator);
    	     * // => true
    	     *
    	     * _.isSymbol('abc');
    	     * // => false
    	     */
    	    function isSymbol(value) {
    	      return typeof value == 'symbol' ||
    	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    	    }

    	    /**
    	     * Checks if `value` is classified as a typed array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	     * @example
    	     *
    	     * _.isTypedArray(new Uint8Array);
    	     * // => true
    	     *
    	     * _.isTypedArray([]);
    	     * // => false
    	     */
    	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    	    /**
    	     * Checks if `value` is `undefined`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
    	     * @example
    	     *
    	     * _.isUndefined(void 0);
    	     * // => true
    	     *
    	     * _.isUndefined(null);
    	     * // => false
    	     */
    	    function isUndefined(value) {
    	      return value === undefined$1;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `WeakMap` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
    	     * @example
    	     *
    	     * _.isWeakMap(new WeakMap);
    	     * // => true
    	     *
    	     * _.isWeakMap(new Map);
    	     * // => false
    	     */
    	    function isWeakMap(value) {
    	      return isObjectLike(value) && getTag(value) == weakMapTag;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `WeakSet` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
    	     * @example
    	     *
    	     * _.isWeakSet(new WeakSet);
    	     * // => true
    	     *
    	     * _.isWeakSet(new Set);
    	     * // => false
    	     */
    	    function isWeakSet(value) {
    	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    	    }

    	    /**
    	     * Checks if `value` is less than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     * @see _.gt
    	     * @example
    	     *
    	     * _.lt(1, 3);
    	     * // => true
    	     *
    	     * _.lt(3, 3);
    	     * // => false
    	     *
    	     * _.lt(3, 1);
    	     * // => false
    	     */
    	    var lt = createRelationalOperation(baseLt);

    	    /**
    	     * Checks if `value` is less than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than or equal to
    	     *  `other`, else `false`.
    	     * @see _.gte
    	     * @example
    	     *
    	     * _.lte(1, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 1);
    	     * // => false
    	     */
    	    var lte = createRelationalOperation(function(value, other) {
    	      return value <= other;
    	    });

    	    /**
    	     * Converts `value` to an array.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the converted array.
    	     * @example
    	     *
    	     * _.toArray({ 'a': 1, 'b': 2 });
    	     * // => [1, 2]
    	     *
    	     * _.toArray('abc');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toArray(1);
    	     * // => []
    	     *
    	     * _.toArray(null);
    	     * // => []
    	     */
    	    function toArray(value) {
    	      if (!value) {
    	        return [];
    	      }
    	      if (isArrayLike(value)) {
    	        return isString(value) ? stringToArray(value) : copyArray(value);
    	      }
    	      if (symIterator && value[symIterator]) {
    	        return iteratorToArray(value[symIterator]());
    	      }
    	      var tag = getTag(value),
    	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

    	      return func(value);
    	    }

    	    /**
    	     * Converts `value` to a finite number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.12.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted number.
    	     * @example
    	     *
    	     * _.toFinite(3.2);
    	     * // => 3.2
    	     *
    	     * _.toFinite(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toFinite(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toFinite('3.2');
    	     * // => 3.2
    	     */
    	    function toFinite(value) {
    	      if (!value) {
    	        return value === 0 ? value : 0;
    	      }
    	      value = toNumber(value);
    	      if (value === INFINITY || value === -INFINITY) {
    	        var sign = (value < 0 ? -1 : 1);
    	        return sign * MAX_INTEGER;
    	      }
    	      return value === value ? value : 0;
    	    }

    	    /**
    	     * Converts `value` to an integer.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toInteger(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toInteger('3.2');
    	     * // => 3
    	     */
    	    function toInteger(value) {
    	      var result = toFinite(value),
    	          remainder = result % 1;

    	      return result === result ? (remainder ? result - remainder : result) : 0;
    	    }

    	    /**
    	     * Converts `value` to an integer suitable for use as the length of an
    	     * array-like object.
    	     *
    	     * **Note:** This method is based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toLength(3.2);
    	     * // => 3
    	     *
    	     * _.toLength(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toLength(Infinity);
    	     * // => 4294967295
    	     *
    	     * _.toLength('3.2');
    	     * // => 3
    	     */
    	    function toLength(value) {
    	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    	    }

    	    /**
    	     * Converts `value` to a number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     * @example
    	     *
    	     * _.toNumber(3.2);
    	     * // => 3.2
    	     *
    	     * _.toNumber(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toNumber(Infinity);
    	     * // => Infinity
    	     *
    	     * _.toNumber('3.2');
    	     * // => 3.2
    	     */
    	    function toNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      if (isObject(value)) {
    	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    	        value = isObject(other) ? (other + '') : other;
    	      }
    	      if (typeof value != 'string') {
    	        return value === 0 ? value : +value;
    	      }
    	      value = baseTrim(value);
    	      var isBinary = reIsBinary.test(value);
    	      return (isBinary || reIsOctal.test(value))
    	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    	        : (reIsBadHex.test(value) ? NAN : +value);
    	    }

    	    /**
    	     * Converts `value` to a plain object flattening inherited enumerable string
    	     * keyed properties of `value` to own properties of the plain object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Object} Returns the converted plain object.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.assign({ 'a': 1 }, new Foo);
    	     * // => { 'a': 1, 'b': 2 }
    	     *
    	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
    	     * // => { 'a': 1, 'b': 2, 'c': 3 }
    	     */
    	    function toPlainObject(value) {
    	      return copyObject(value, keysIn(value));
    	    }

    	    /**
    	     * Converts `value` to a safe integer. A safe integer can be compared and
    	     * represented correctly.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toSafeInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toSafeInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toSafeInteger(Infinity);
    	     * // => 9007199254740991
    	     *
    	     * _.toSafeInteger('3.2');
    	     * // => 3
    	     */
    	    function toSafeInteger(value) {
    	      return value
    	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
    	        : (value === 0 ? value : 0);
    	    }

    	    /**
    	     * Converts `value` to a string. An empty string is returned for `null`
    	     * and `undefined` values. The sign of `-0` is preserved.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.toString(null);
    	     * // => ''
    	     *
    	     * _.toString(-0);
    	     * // => '-0'
    	     *
    	     * _.toString([1, 2, 3]);
    	     * // => '1,2,3'
    	     */
    	    function toString(value) {
    	      return value == null ? '' : baseToString(value);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Assigns own enumerable string keyed properties of source objects to the
    	     * destination object. Source objects are applied from left to right.
    	     * Subsequent sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object` and is loosely based on
    	     * [`Object.assign`](https://mdn.io/Object/assign).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * Foo.prototype.b = 2;
    	     * Bar.prototype.d = 4;
    	     *
    	     * _.assign({ 'a': 0 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var assign = createAssigner(function(object, source) {
    	      if (isPrototype(source) || isArrayLike(source)) {
    	        copyObject(source, keys(source), object);
    	        return;
    	      }
    	      for (var key in source) {
    	        if (hasOwnProperty.call(source, key)) {
    	          assignValue(object, key, source[key]);
    	        }
    	      }
    	    });

    	    /**
    	     * This method is like `_.assign` except that it iterates over own and
    	     * inherited source properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extend
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assign
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * Foo.prototype.b = 2;
    	     * Bar.prototype.d = 4;
    	     *
    	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
    	     */
    	    var assignIn = createAssigner(function(object, source) {
    	      copyObject(source, keysIn(source), object);
    	    });

    	    /**
    	     * This method is like `_.assignIn` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extendWith
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignInWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keysIn(source), object, customizer);
    	    });

    	    /**
    	     * This method is like `_.assign` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignInWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keys(source), object, customizer);
    	    });

    	    /**
    	     * Creates an array of values corresponding to `paths` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Array} Returns the picked values.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _.at(object, ['a[0].b.c', 'a[1]']);
    	     * // => [3, 4]
    	     */
    	    var at = flatRest(baseAt);

    	    /**
    	     * Creates an object that inherits from the `prototype` object. If a
    	     * `properties` object is given, its own enumerable string keyed properties
    	     * are assigned to the created object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Object
    	     * @param {Object} prototype The object to inherit from.
    	     * @param {Object} [properties] The properties to assign to the object.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * function Shape() {
    	     *   this.x = 0;
    	     *   this.y = 0;
    	     * }
    	     *
    	     * function Circle() {
    	     *   Shape.call(this);
    	     * }
    	     *
    	     * Circle.prototype = _.create(Shape.prototype, {
    	     *   'constructor': Circle
    	     * });
    	     *
    	     * var circle = new Circle;
    	     * circle instanceof Circle;
    	     * // => true
    	     *
    	     * circle instanceof Shape;
    	     * // => true
    	     */
    	    function create(prototype, properties) {
    	      var result = baseCreate(prototype);
    	      return properties == null ? result : baseAssign(result, properties);
    	    }

    	    /**
    	     * Assigns own and inherited enumerable string keyed properties of source
    	     * objects to the destination object for all destination properties that
    	     * resolve to `undefined`. Source objects are applied from left to right.
    	     * Once a property is set, additional values of the same property are ignored.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaultsDeep
    	     * @example
    	     *
    	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var defaults = baseRest(function(object, sources) {
    	      object = Object(object);

    	      var index = -1;
    	      var length = sources.length;
    	      var guard = length > 2 ? sources[2] : undefined$1;

    	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	        length = 1;
    	      }

    	      while (++index < length) {
    	        var source = sources[index];
    	        var props = keysIn(source);
    	        var propsIndex = -1;
    	        var propsLength = props.length;

    	        while (++propsIndex < propsLength) {
    	          var key = props[propsIndex];
    	          var value = object[key];

    	          if (value === undefined$1 ||
    	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	            object[key] = source[key];
    	          }
    	        }
    	      }

    	      return object;
    	    });

    	    /**
    	     * This method is like `_.defaults` except that it recursively assigns
    	     * default properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaults
    	     * @example
    	     *
    	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
    	     * // => { 'a': { 'b': 2, 'c': 3 } }
    	     */
    	    var defaultsDeep = baseRest(function(args) {
    	      args.push(undefined$1, customDefaultsMerge);
    	      return apply(mergeWith, undefined$1, args);
    	    });

    	    /**
    	     * This method is like `_.find` except that it returns the key of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findKey(users, function(o) { return o.age < 40; });
    	     * // => 'barney' (iteration order is not guaranteed)
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findKey(users, { 'age': 1, 'active': true });
    	     * // => 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findKey(users, 'active');
    	     * // => 'barney'
    	     */
    	    function findKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    	    }

    	    /**
    	     * This method is like `_.findKey` except that it iterates over elements of
    	     * a collection in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findLastKey(users, function(o) { return o.age < 40; });
    	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastKey(users, { 'age': 36, 'active': true });
    	     * // => 'barney'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastKey(users, 'active');
    	     * // => 'pebbles'
    	     */
    	    function findLastKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    	    }

    	    /**
    	     * Iterates over own and inherited enumerable string keyed properties of an
    	     * object and invokes `iteratee` for each property. The iteratee is invoked
    	     * with three arguments: (value, key, object). Iteratee functions may exit
    	     * iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forInRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forIn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
    	     */
    	    function forIn(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    	    }

    	    /**
    	     * This method is like `_.forIn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forInRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
    	     */
    	    function forInRight(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    	    }

    	    /**
    	     * Iterates over own enumerable string keyed properties of an object and
    	     * invokes `iteratee` for each property. The iteratee is invoked with three
    	     * arguments: (value, key, object). Iteratee functions may exit iteration
    	     * early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwnRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forOwn(object, iteratee) {
    	      return object && baseForOwn(object, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.forOwn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwnRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
    	     */
    	    function forOwnRight(object, iteratee) {
    	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * Creates an array of function property names from own enumerable properties
    	     * of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functionsIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functions(new Foo);
    	     * // => ['a', 'b']
    	     */
    	    function functions(object) {
    	      return object == null ? [] : baseFunctions(object, keys(object));
    	    }

    	    /**
    	     * Creates an array of function property names from own and inherited
    	     * enumerable properties of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functions
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functionsIn(new Foo);
    	     * // => ['a', 'b', 'c']
    	     */
    	    function functionsIn(object) {
    	      return object == null ? [] : baseFunctions(object, keysIn(object));
    	    }

    	    /**
    	     * Gets the value at `path` of `object`. If the resolved value is
    	     * `undefined`, the `defaultValue` is returned in its place.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.get(object, 'a[0].b.c');
    	     * // => 3
    	     *
    	     * _.get(object, ['a', '0', 'b', 'c']);
    	     * // => 3
    	     *
    	     * _.get(object, 'a.b.c', 'default');
    	     * // => 'default'
    	     */
    	    function get(object, path, defaultValue) {
    	      var result = object == null ? undefined$1 : baseGet(object, path);
    	      return result === undefined$1 ? defaultValue : result;
    	    }

    	    /**
    	     * Checks if `path` is a direct property of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': { 'b': 2 } };
    	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.has(object, 'a');
    	     * // => true
    	     *
    	     * _.has(object, 'a.b');
    	     * // => true
    	     *
    	     * _.has(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.has(other, 'a');
    	     * // => false
    	     */
    	    function has(object, path) {
    	      return object != null && hasPath(object, path, baseHas);
    	    }

    	    /**
    	     * Checks if `path` is a direct or inherited property of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.hasIn(object, 'a');
    	     * // => true
    	     *
    	     * _.hasIn(object, 'a.b');
    	     * // => true
    	     *
    	     * _.hasIn(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.hasIn(object, 'b');
    	     * // => false
    	     */
    	    function hasIn(object, path) {
    	      return object != null && hasPath(object, path, baseHasIn);
    	    }

    	    /**
    	     * Creates an object composed of the inverted keys and values of `object`.
    	     * If `object` contains duplicate values, subsequent values overwrite
    	     * property assignments of previous values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invert(object);
    	     * // => { '1': 'c', '2': 'b' }
    	     */
    	    var invert = createInverter(function(result, value, key) {
    	      if (value != null &&
    	          typeof value.toString != 'function') {
    	        value = nativeObjectToString.call(value);
    	      }

    	      result[value] = key;
    	    }, constant(identity));

    	    /**
    	     * This method is like `_.invert` except that the inverted object is generated
    	     * from the results of running each element of `object` thru `iteratee`. The
    	     * corresponding inverted value of each inverted key is an array of keys
    	     * responsible for generating the inverted value. The iteratee is invoked
    	     * with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invertBy(object);
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     *
    	     * _.invertBy(object, function(value) {
    	     *   return 'group' + value;
    	     * });
    	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
    	     */
    	    var invertBy = createInverter(function(result, value, key) {
    	      if (value != null &&
    	          typeof value.toString != 'function') {
    	        value = nativeObjectToString.call(value);
    	      }

    	      if (hasOwnProperty.call(result, value)) {
    	        result[value].push(key);
    	      } else {
    	        result[value] = [key];
    	      }
    	    }, getIteratee);

    	    /**
    	     * Invokes the method at `path` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
    	     *
    	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
    	     * // => [2, 3]
    	     */
    	    var invoke = baseRest(baseInvoke);

    	    /**
    	     * Creates an array of the own enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects. See the
    	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	     * for more details.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keys(new Foo);
    	     * // => ['a', 'b'] (iteration order is not guaranteed)
    	     *
    	     * _.keys('hi');
    	     * // => ['0', '1']
    	     */
    	    function keys(object) {
    	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    	    }

    	    /**
    	     * Creates an array of the own and inherited enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keysIn(new Foo);
    	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
    	     */
    	    function keysIn(object) {
    	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    	    }

    	    /**
    	     * The opposite of `_.mapValues`; this method creates an object with the
    	     * same values as `object` and keys generated by running each own enumerable
    	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
    	     * with three arguments: (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapValues
    	     * @example
    	     *
    	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   return key + value;
    	     * });
    	     * // => { 'a1': 1, 'b2': 2 }
    	     */
    	    function mapKeys(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);

    	      baseForOwn(object, function(value, key, object) {
    	        baseAssignValue(result, iteratee(value, key, object), value);
    	      });
    	      return result;
    	    }

    	    /**
    	     * Creates an object with the same keys as `object` and values generated
    	     * by running each own enumerable string keyed property of `object` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapKeys
    	     * @example
    	     *
    	     * var users = {
    	     *   'fred':    { 'user': 'fred',    'age': 40 },
    	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
    	     * };
    	     *
    	     * _.mapValues(users, function(o) { return o.age; });
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.mapValues(users, 'age');
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     */
    	    function mapValues(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);

    	      baseForOwn(object, function(value, key, object) {
    	        baseAssignValue(result, key, iteratee(value, key, object));
    	      });
    	      return result;
    	    }

    	    /**
    	     * This method is like `_.assign` except that it recursively merges own and
    	     * inherited enumerable string keyed properties of source objects into the
    	     * destination object. Source properties that resolve to `undefined` are
    	     * skipped if a destination value exists. Array and plain object properties
    	     * are merged recursively. Other objects and value types are overridden by
    	     * assignment. Source objects are applied from left to right. Subsequent
    	     * sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {
    	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
    	     * };
    	     *
    	     * var other = {
    	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
    	     * };
    	     *
    	     * _.merge(object, other);
    	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
    	     */
    	    var merge = createAssigner(function(object, source, srcIndex) {
    	      baseMerge(object, source, srcIndex);
    	    });

    	    /**
    	     * This method is like `_.merge` except that it accepts `customizer` which
    	     * is invoked to produce the merged values of the destination and source
    	     * properties. If `customizer` returns `undefined`, merging is handled by the
    	     * method instead. The `customizer` is invoked with six arguments:
    	     * (objValue, srcValue, key, object, source, stack).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} customizer The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (_.isArray(objValue)) {
    	     *     return objValue.concat(srcValue);
    	     *   }
    	     * }
    	     *
    	     * var object = { 'a': [1], 'b': [2] };
    	     * var other = { 'a': [3], 'b': [4] };
    	     *
    	     * _.mergeWith(object, other, customizer);
    	     * // => { 'a': [1, 3], 'b': [2, 4] }
    	     */
    	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      baseMerge(object, source, srcIndex, customizer);
    	    });

    	    /**
    	     * The opposite of `_.pick`; this method creates an object composed of the
    	     * own and inherited enumerable property paths of `object` that are not omitted.
    	     *
    	     * **Note:** This method is considerably slower than `_.pick`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [paths] The property paths to omit.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omit(object, ['a', 'c']);
    	     * // => { 'b': '2' }
    	     */
    	    var omit = flatRest(function(object, paths) {
    	      var result = {};
    	      if (object == null) {
    	        return result;
    	      }
    	      var isDeep = false;
    	      paths = arrayMap(paths, function(path) {
    	        path = castPath(path, object);
    	        isDeep || (isDeep = path.length > 1);
    	        return path;
    	      });
    	      copyObject(object, getAllKeysIn(object), result);
    	      if (isDeep) {
    	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    	      }
    	      var length = paths.length;
    	      while (length--) {
    	        baseUnset(result, paths[length]);
    	      }
    	      return result;
    	    });

    	    /**
    	     * The opposite of `_.pickBy`; this method creates an object composed of
    	     * the own and inherited enumerable string keyed properties of `object` that
    	     * `predicate` doesn't return truthy for. The predicate is invoked with two
    	     * arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Function} [predicate=_.identity] The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omitBy(object, _.isNumber);
    	     * // => { 'b': '2' }
    	     */
    	    function omitBy(object, predicate) {
    	      return pickBy(object, negate(getIteratee(predicate)));
    	    }

    	    /**
    	     * Creates an object composed of the picked `object` properties.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pick(object, ['a', 'c']);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var pick = flatRest(function(object, paths) {
    	      return object == null ? {} : basePick(object, paths);
    	    });

    	    /**
    	     * Creates an object composed of the `object` properties `predicate` returns
    	     * truthy for. The predicate is invoked with two arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Function} [predicate=_.identity] The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pickBy(object, _.isNumber);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    function pickBy(object, predicate) {
    	      if (object == null) {
    	        return {};
    	      }
    	      var props = arrayMap(getAllKeysIn(object), function(prop) {
    	        return [prop];
    	      });
    	      predicate = getIteratee(predicate);
    	      return basePickBy(object, props, function(value, path) {
    	        return predicate(value, path[0]);
    	      });
    	    }

    	    /**
    	     * This method is like `_.get` except that if the resolved value is a
    	     * function it's invoked with the `this` binding of its parent object and
    	     * its result is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to resolve.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
    	     *
    	     * _.result(object, 'a[0].b.c1');
    	     * // => 3
    	     *
    	     * _.result(object, 'a[0].b.c2');
    	     * // => 4
    	     *
    	     * _.result(object, 'a[0].b.c3', 'default');
    	     * // => 'default'
    	     *
    	     * _.result(object, 'a[0].b.c3', _.constant('default'));
    	     * // => 'default'
    	     */
    	    function result(object, path, defaultValue) {
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length;

    	      // Ensure the loop is entered when path is empty.
    	      if (!length) {
    	        length = 1;
    	        object = undefined$1;
    	      }
    	      while (++index < length) {
    	        var value = object == null ? undefined$1 : object[toKey(path[index])];
    	        if (value === undefined$1) {
    	          index = length;
    	          value = defaultValue;
    	        }
    	        object = isFunction(value) ? value.call(object) : value;
    	      }
    	      return object;
    	    }

    	    /**
    	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
    	     * it's created. Arrays are created for missing index properties while objects
    	     * are created for all other missing properties. Use `_.setWith` to customize
    	     * `path` creation.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.set(object, 'a[0].b.c', 4);
    	     * console.log(object.a[0].b.c);
    	     * // => 4
    	     *
    	     * _.set(object, ['x', '0', 'y', 'z'], 5);
    	     * console.log(object.x[0].y.z);
    	     * // => 5
    	     */
    	    function set(object, path, value) {
    	      return object == null ? object : baseSet(object, path, value);
    	    }

    	    /**
    	     * This method is like `_.set` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.setWith(object, '[0][1]', 'a', Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function setWith(object, path, value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return object == null ? object : baseSet(object, path, value, customizer);
    	    }

    	    /**
    	     * Creates an array of own enumerable string keyed-value pairs for `object`
    	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
    	     * entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entries
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairs(new Foo);
    	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
    	     */
    	    var toPairs = createToPairs(keys);

    	    /**
    	     * Creates an array of own and inherited enumerable string keyed-value pairs
    	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
    	     * or set, its entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entriesIn
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairsIn(new Foo);
    	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
    	     */
    	    var toPairsIn = createToPairs(keysIn);

    	    /**
    	     * An alternative to `_.reduce`; this method transforms `object` to a new
    	     * `accumulator` object which is the result of running each of its own
    	     * enumerable string keyed properties thru `iteratee`, with each invocation
    	     * potentially mutating the `accumulator` object. If `accumulator` is not
    	     * provided, a new object with the same `[[Prototype]]` will be used. The
    	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The custom accumulator value.
    	     * @returns {*} Returns the accumulated value.
    	     * @example
    	     *
    	     * _.transform([2, 3, 4], function(result, n) {
    	     *   result.push(n *= n);
    	     *   return n % 2 == 0;
    	     * }, []);
    	     * // => [4, 9]
    	     *
    	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     */
    	    function transform(object, iteratee, accumulator) {
    	      var isArr = isArray(object),
    	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

    	      iteratee = getIteratee(iteratee, 4);
    	      if (accumulator == null) {
    	        var Ctor = object && object.constructor;
    	        if (isArrLike) {
    	          accumulator = isArr ? new Ctor : [];
    	        }
    	        else if (isObject(object)) {
    	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    	        }
    	        else {
    	          accumulator = {};
    	        }
    	      }
    	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    	        return iteratee(accumulator, value, index, object);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * Removes the property at `path` of `object`.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
    	     * _.unset(object, 'a[0].b.c');
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     *
    	     * _.unset(object, ['a', '0', 'b', 'c']);
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     */
    	    function unset(object, path) {
    	      return object == null ? true : baseUnset(object, path);
    	    }

    	    /**
    	     * This method is like `_.set` except that accepts `updater` to produce the
    	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
    	     * is invoked with one argument: (value).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
    	     * console.log(object.a[0].b.c);
    	     * // => 9
    	     *
    	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
    	     * console.log(object.x[0].y.z);
    	     * // => 0
    	     */
    	    function update(object, path, updater) {
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    	    }

    	    /**
    	     * This method is like `_.update` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function updateWith(object, path, updater, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    	    }

    	    /**
    	     * Creates an array of the own enumerable string keyed property values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.values(new Foo);
    	     * // => [1, 2] (iteration order is not guaranteed)
    	     *
    	     * _.values('hi');
    	     * // => ['h', 'i']
    	     */
    	    function values(object) {
    	      return object == null ? [] : baseValues(object, keys(object));
    	    }

    	    /**
    	     * Creates an array of the own and inherited enumerable string keyed property
    	     * values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.valuesIn(new Foo);
    	     * // => [1, 2, 3] (iteration order is not guaranteed)
    	     */
    	    function valuesIn(object) {
    	      return object == null ? [] : baseValues(object, keysIn(object));
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Number
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     * @example
    	     *
    	     * _.clamp(-10, -5, 5);
    	     * // => -5
    	     *
    	     * _.clamp(10, -5, 5);
    	     * // => 5
    	     */
    	    function clamp(number, lower, upper) {
    	      if (upper === undefined$1) {
    	        upper = lower;
    	        lower = undefined$1;
    	      }
    	      if (upper !== undefined$1) {
    	        upper = toNumber(upper);
    	        upper = upper === upper ? upper : 0;
    	      }
    	      if (lower !== undefined$1) {
    	        lower = toNumber(lower);
    	        lower = lower === lower ? lower : 0;
    	      }
    	      return baseClamp(toNumber(number), lower, upper);
    	    }

    	    /**
    	     * Checks if `n` is between `start` and up to, but not including, `end`. If
    	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
    	     * If `start` is greater than `end` the params are swapped to support
    	     * negative ranges.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.3.0
    	     * @category Number
    	     * @param {number} number The number to check.
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     * @see _.range, _.rangeRight
    	     * @example
    	     *
    	     * _.inRange(3, 2, 4);
    	     * // => true
    	     *
    	     * _.inRange(4, 8);
    	     * // => true
    	     *
    	     * _.inRange(4, 2);
    	     * // => false
    	     *
    	     * _.inRange(2, 2);
    	     * // => false
    	     *
    	     * _.inRange(1.2, 2);
    	     * // => true
    	     *
    	     * _.inRange(5.2, 4);
    	     * // => false
    	     *
    	     * _.inRange(-3, -2, -6);
    	     * // => true
    	     */
    	    function inRange(number, start, end) {
    	      start = toFinite(start);
    	      if (end === undefined$1) {
    	        end = start;
    	        start = 0;
    	      } else {
    	        end = toFinite(end);
    	      }
    	      number = toNumber(number);
    	      return baseInRange(number, start, end);
    	    }

    	    /**
    	     * Produces a random number between the inclusive `lower` and `upper` bounds.
    	     * If only one argument is provided a number between `0` and the given number
    	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
    	     * floats, a floating-point number is returned instead of an integer.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Number
    	     * @param {number} [lower=0] The lower bound.
    	     * @param {number} [upper=1] The upper bound.
    	     * @param {boolean} [floating] Specify returning a floating-point number.
    	     * @returns {number} Returns the random number.
    	     * @example
    	     *
    	     * _.random(0, 5);
    	     * // => an integer between 0 and 5
    	     *
    	     * _.random(5);
    	     * // => also an integer between 0 and 5
    	     *
    	     * _.random(5, true);
    	     * // => a floating-point number between 0 and 5
    	     *
    	     * _.random(1.2, 5.2);
    	     * // => a floating-point number between 1.2 and 5.2
    	     */
    	    function random(lower, upper, floating) {
    	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    	        upper = floating = undefined$1;
    	      }
    	      if (floating === undefined$1) {
    	        if (typeof upper == 'boolean') {
    	          floating = upper;
    	          upper = undefined$1;
    	        }
    	        else if (typeof lower == 'boolean') {
    	          floating = lower;
    	          lower = undefined$1;
    	        }
    	      }
    	      if (lower === undefined$1 && upper === undefined$1) {
    	        lower = 0;
    	        upper = 1;
    	      }
    	      else {
    	        lower = toFinite(lower);
    	        if (upper === undefined$1) {
    	          upper = lower;
    	          lower = 0;
    	        } else {
    	          upper = toFinite(upper);
    	        }
    	      }
    	      if (lower > upper) {
    	        var temp = lower;
    	        lower = upper;
    	        upper = temp;
    	      }
    	      if (floating || lower % 1 || upper % 1) {
    	        var rand = nativeRandom();
    	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
    	      }
    	      return baseRandom(lower, upper);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the camel cased string.
    	     * @example
    	     *
    	     * _.camelCase('Foo Bar');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('--foo-bar--');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('__FOO_BAR__');
    	     * // => 'fooBar'
    	     */
    	    var camelCase = createCompounder(function(result, word, index) {
    	      word = word.toLowerCase();
    	      return result + (index ? capitalize(word) : word);
    	    });

    	    /**
    	     * Converts the first character of `string` to upper case and the remaining
    	     * to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to capitalize.
    	     * @returns {string} Returns the capitalized string.
    	     * @example
    	     *
    	     * _.capitalize('FRED');
    	     * // => 'Fred'
    	     */
    	    function capitalize(string) {
    	      return upperFirst(toString(string).toLowerCase());
    	    }

    	    /**
    	     * Deburrs `string` by converting
    	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
    	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
    	     * letters to basic Latin letters and removing
    	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to deburr.
    	     * @returns {string} Returns the deburred string.
    	     * @example
    	     *
    	     * _.deburr('déjà vu');
    	     * // => 'deja vu'
    	     */
    	    function deburr(string) {
    	      string = toString(string);
    	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    	    }

    	    /**
    	     * Checks if `string` ends with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=string.length] The position to search up to.
    	     * @returns {boolean} Returns `true` if `string` ends with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.endsWith('abc', 'c');
    	     * // => true
    	     *
    	     * _.endsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.endsWith('abc', 'b', 2);
    	     * // => true
    	     */
    	    function endsWith(string, target, position) {
    	      string = toString(string);
    	      target = baseToString(target);

    	      var length = string.length;
    	      position = position === undefined$1
    	        ? length
    	        : baseClamp(toInteger(position), 0, length);

    	      var end = position;
    	      position -= target.length;
    	      return position >= 0 && string.slice(position, end) == target;
    	    }

    	    /**
    	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
    	     * corresponding HTML entities.
    	     *
    	     * **Note:** No other characters are escaped. To escape additional
    	     * characters use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * Though the ">" character is escaped for symmetry, characters like
    	     * ">" and "/" don't need escaping in HTML and have no special meaning
    	     * unless they're part of a tag or unquoted attribute value. See
    	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
    	     * (under "semi-related fun fact") for more details.
    	     *
    	     * When working with HTML you should always
    	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
    	     * XSS vectors.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escape('fred, barney, & pebbles');
    	     * // => 'fred, barney, &amp; pebbles'
    	     */
    	    function escape(string) {
    	      string = toString(string);
    	      return (string && reHasUnescapedHtml.test(string))
    	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
    	        : string;
    	    }

    	    /**
    	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
    	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escapeRegExp('[lodash](https://lodash.com/)');
    	     * // => '\[lodash\]\(https://lodash\.com/\)'
    	     */
    	    function escapeRegExp(string) {
    	      string = toString(string);
    	      return (string && reHasRegExpChar.test(string))
    	        ? string.replace(reRegExpChar, '\\$&')
    	        : string;
    	    }

    	    /**
    	     * Converts `string` to
    	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the kebab cased string.
    	     * @example
    	     *
    	     * _.kebabCase('Foo Bar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('fooBar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('__FOO_BAR__');
    	     * // => 'foo-bar'
    	     */
    	    var kebabCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '-' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Converts `string`, as space separated words, to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.lowerCase('--Foo-Bar--');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('fooBar');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('__FOO_BAR__');
    	     * // => 'foo bar'
    	     */
    	    var lowerCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Converts the first character of `string` to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.lowerFirst('Fred');
    	     * // => 'fred'
    	     *
    	     * _.lowerFirst('FRED');
    	     * // => 'fRED'
    	     */
    	    var lowerFirst = createCaseFirst('toLowerCase');

    	    /**
    	     * Pads `string` on the left and right sides if it's shorter than `length`.
    	     * Padding characters are truncated if they can't be evenly divided by `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.pad('abc', 8);
    	     * // => '  abc   '
    	     *
    	     * _.pad('abc', 8, '_-');
    	     * // => '_-abc_-_'
    	     *
    	     * _.pad('abc', 3);
    	     * // => 'abc'
    	     */
    	    function pad(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      if (!length || strLength >= length) {
    	        return string;
    	      }
    	      var mid = (length - strLength) / 2;
    	      return (
    	        createPadding(nativeFloor(mid), chars) +
    	        string +
    	        createPadding(nativeCeil(mid), chars)
    	      );
    	    }

    	    /**
    	     * Pads `string` on the right side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padEnd('abc', 6);
    	     * // => 'abc   '
    	     *
    	     * _.padEnd('abc', 6, '_-');
    	     * // => 'abc_-_'
    	     *
    	     * _.padEnd('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padEnd(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (string + createPadding(length - strLength, chars))
    	        : string;
    	    }

    	    /**
    	     * Pads `string` on the left side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padStart('abc', 6);
    	     * // => '   abc'
    	     *
    	     * _.padStart('abc', 6, '_-');
    	     * // => '_-_abc'
    	     *
    	     * _.padStart('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padStart(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (createPadding(length - strLength, chars) + string)
    	        : string;
    	    }

    	    /**
    	     * Converts `string` to an integer of the specified radix. If `radix` is
    	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
    	     * hexadecimal, in which case a `radix` of `16` is used.
    	     *
    	     * **Note:** This method aligns with the
    	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category String
    	     * @param {string} string The string to convert.
    	     * @param {number} [radix=10] The radix to interpret `value` by.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.parseInt('08');
    	     * // => 8
    	     *
    	     * _.map(['6', '08', '10'], _.parseInt);
    	     * // => [6, 8, 10]
    	     */
    	    function parseInt(string, radix, guard) {
    	      if (guard || radix == null) {
    	        radix = 0;
    	      } else if (radix) {
    	        radix = +radix;
    	      }
    	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    	    }

    	    /**
    	     * Repeats the given string `n` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to repeat.
    	     * @param {number} [n=1] The number of times to repeat the string.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the repeated string.
    	     * @example
    	     *
    	     * _.repeat('*', 3);
    	     * // => '***'
    	     *
    	     * _.repeat('abc', 2);
    	     * // => 'abcabc'
    	     *
    	     * _.repeat('abc', 0);
    	     * // => ''
    	     */
    	    function repeat(string, n, guard) {
    	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      return baseRepeat(toString(string), n);
    	    }

    	    /**
    	     * Replaces matches for `pattern` in `string` with `replacement`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#replace`](https://mdn.io/String/replace).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to modify.
    	     * @param {RegExp|string} pattern The pattern to replace.
    	     * @param {Function|string} replacement The match replacement.
    	     * @returns {string} Returns the modified string.
    	     * @example
    	     *
    	     * _.replace('Hi Fred', 'Fred', 'Barney');
    	     * // => 'Hi Barney'
    	     */
    	    function replace() {
    	      var args = arguments,
    	          string = toString(args[0]);

    	      return args.length < 3 ? string : string.replace(args[1], args[2]);
    	    }

    	    /**
    	     * Converts `string` to
    	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the snake cased string.
    	     * @example
    	     *
    	     * _.snakeCase('Foo Bar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('fooBar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('--FOO-BAR--');
    	     * // => 'foo_bar'
    	     */
    	    var snakeCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '_' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Splits `string` by `separator`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#split`](https://mdn.io/String/split).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to split.
    	     * @param {RegExp|string} separator The separator pattern to split by.
    	     * @param {number} [limit] The length to truncate results to.
    	     * @returns {Array} Returns the string segments.
    	     * @example
    	     *
    	     * _.split('a-b-c', '-', 2);
    	     * // => ['a', 'b']
    	     */
    	    function split(string, separator, limit) {
    	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
    	        separator = limit = undefined$1;
    	      }
    	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
    	      if (!limit) {
    	        return [];
    	      }
    	      string = toString(string);
    	      if (string && (
    	            typeof separator == 'string' ||
    	            (separator != null && !isRegExp(separator))
    	          )) {
    	        separator = baseToString(separator);
    	        if (!separator && hasUnicode(string)) {
    	          return castSlice(stringToArray(string), 0, limit);
    	        }
    	      }
    	      return string.split(separator, limit);
    	    }

    	    /**
    	     * Converts `string` to
    	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.1.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the start cased string.
    	     * @example
    	     *
    	     * _.startCase('--foo-bar--');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('fooBar');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('__FOO_BAR__');
    	     * // => 'FOO BAR'
    	     */
    	    var startCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + upperFirst(word);
    	    });

    	    /**
    	     * Checks if `string` starts with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=0] The position to search from.
    	     * @returns {boolean} Returns `true` if `string` starts with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.startsWith('abc', 'a');
    	     * // => true
    	     *
    	     * _.startsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.startsWith('abc', 'b', 1);
    	     * // => true
    	     */
    	    function startsWith(string, target, position) {
    	      string = toString(string);
    	      position = position == null
    	        ? 0
    	        : baseClamp(toInteger(position), 0, string.length);

    	      target = baseToString(target);
    	      return string.slice(position, position + target.length) == target;
    	    }

    	    /**
    	     * Creates a compiled template function that can interpolate data properties
    	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
    	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
    	     * properties may be accessed as free variables in the template. If a setting
    	     * object is given, it takes precedence over `_.templateSettings` values.
    	     *
    	     * **Note:** In the development build `_.template` utilizes
    	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
    	     * for easier debugging.
    	     *
    	     * For more information on precompiling templates see
    	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
    	     *
    	     * For more information on Chrome extension sandboxes see
    	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The template string.
    	     * @param {Object} [options={}] The options object.
    	     * @param {RegExp} [options.escape=_.templateSettings.escape]
    	     *  The HTML "escape" delimiter.
    	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
    	     *  The "evaluate" delimiter.
    	     * @param {Object} [options.imports=_.templateSettings.imports]
    	     *  An object to import into the template as free variables.
    	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
    	     *  The "interpolate" delimiter.
    	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
    	     *  The sourceURL of the compiled template.
    	     * @param {string} [options.variable='obj']
    	     *  The data object variable name.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the compiled template function.
    	     * @example
    	     *
    	     * // Use the "interpolate" delimiter to create a compiled template.
    	     * var compiled = _.template('hello <%= user %>!');
    	     * compiled({ 'user': 'fred' });
    	     * // => 'hello fred!'
    	     *
    	     * // Use the HTML "escape" delimiter to escape data property values.
    	     * var compiled = _.template('<b><%- value %></b>');
    	     * compiled({ 'value': '<script>' });
    	     * // => '<b>&lt;script&gt;</b>'
    	     *
    	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
    	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the internal `print` function in "evaluate" delimiters.
    	     * var compiled = _.template('<% print("hello " + user); %>!');
    	     * compiled({ 'user': 'barney' });
    	     * // => 'hello barney!'
    	     *
    	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
    	     * // Disable support by replacing the "interpolate" delimiter.
    	     * var compiled = _.template('hello ${ user }!');
    	     * compiled({ 'user': 'pebbles' });
    	     * // => 'hello pebbles!'
    	     *
    	     * // Use backslashes to treat delimiters as plain text.
    	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
    	     * compiled({ 'value': 'ignored' });
    	     * // => '<%- value %>'
    	     *
    	     * // Use the `imports` option to import `jQuery` as `jq`.
    	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
    	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
    	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
    	     * compiled(data);
    	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
    	     *
    	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
    	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
    	     * compiled.source;
    	     * // => function(data) {
    	     * //   var __t, __p = '';
    	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
    	     * //   return __p;
    	     * // }
    	     *
    	     * // Use custom template delimiters.
    	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
    	     * var compiled = _.template('hello {{ user }}!');
    	     * compiled({ 'user': 'mustache' });
    	     * // => 'hello mustache!'
    	     *
    	     * // Use the `source` property to inline compiled templates for meaningful
    	     * // line numbers in error messages and stack traces.
    	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
    	     *   var JST = {\
    	     *     "main": ' + _.template(mainText).source + '\
    	     *   };\
    	     * ');
    	     */
    	    function template(string, options, guard) {
    	      // Based on John Resig's `tmpl` implementation
    	      // (http://ejohn.org/blog/javascript-micro-templating/)
    	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    	      var settings = lodash.templateSettings;

    	      if (guard && isIterateeCall(string, options, guard)) {
    	        options = undefined$1;
    	      }
    	      string = toString(string);
    	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

    	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
    	          importsKeys = keys(imports),
    	          importsValues = baseValues(imports, importsKeys);

    	      var isEscaping,
    	          isEvaluating,
    	          index = 0,
    	          interpolate = options.interpolate || reNoMatch,
    	          source = "__p += '";

    	      // Compile the regexp to match each delimiter.
    	      var reDelimiters = RegExp(
    	        (options.escape || reNoMatch).source + '|' +
    	        interpolate.source + '|' +
    	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
    	        (options.evaluate || reNoMatch).source + '|$'
    	      , 'g');

    	      // Use a sourceURL for easier debugging.
    	      // The sourceURL gets injected into the source that's eval-ed, so be careful
    	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    	      // and escape the comment, thus injecting code that gets evaled.
    	      var sourceURL = '//# sourceURL=' +
    	        (hasOwnProperty.call(options, 'sourceURL')
    	          ? (options.sourceURL + '').replace(/\s/g, ' ')
    	          : ('lodash.templateSources[' + (++templateCounter) + ']')
    	        ) + '\n';

    	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    	        interpolateValue || (interpolateValue = esTemplateValue);

    	        // Escape characters that can't be included in string literals.
    	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

    	        // Replace delimiters with snippets.
    	        if (escapeValue) {
    	          isEscaping = true;
    	          source += "' +\n__e(" + escapeValue + ") +\n'";
    	        }
    	        if (evaluateValue) {
    	          isEvaluating = true;
    	          source += "';\n" + evaluateValue + ";\n__p += '";
    	        }
    	        if (interpolateValue) {
    	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    	        }
    	        index = offset + match.length;

    	        // The JS engine embedded in Adobe products needs `match` returned in
    	        // order to produce the correct `offset` value.
    	        return match;
    	      });

    	      source += "';\n";

    	      // If `variable` is not specified wrap a with-statement around the generated
    	      // code to add the data object to the top of the scope chain.
    	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
    	      if (!variable) {
    	        source = 'with (obj) {\n' + source + '\n}\n';
    	      }
    	      // Throw an error if a forbidden character was found in `variable`, to prevent
    	      // potential command injection attacks.
    	      else if (reForbiddenIdentifierChars.test(variable)) {
    	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    	      }

    	      // Cleanup code by stripping empty strings.
    	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
    	        .replace(reEmptyStringMiddle, '$1')
    	        .replace(reEmptyStringTrailing, '$1;');

    	      // Frame code as the function body.
    	      source = 'function(' + (variable || 'obj') + ') {\n' +
    	        (variable
    	          ? ''
    	          : 'obj || (obj = {});\n'
    	        ) +
    	        "var __t, __p = ''" +
    	        (isEscaping
    	           ? ', __e = _.escape'
    	           : ''
    	        ) +
    	        (isEvaluating
    	          ? ', __j = Array.prototype.join;\n' +
    	            "function print() { __p += __j.call(arguments, '') }\n"
    	          : ';\n'
    	        ) +
    	        source +
    	        'return __p\n}';

    	      var result = attempt(function() {
    	        return Function(importsKeys, sourceURL + 'return ' + source)
    	          .apply(undefined$1, importsValues);
    	      });

    	      // Provide the compiled function's source by its `toString` method or
    	      // the `source` property as a convenience for inlining compiled templates.
    	      result.source = source;
    	      if (isError(result)) {
    	        throw result;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `string`, as a whole, to lower case just like
    	     * [String#toLowerCase](https://mdn.io/toLowerCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.toLower('--Foo-Bar--');
    	     * // => '--foo-bar--'
    	     *
    	     * _.toLower('fooBar');
    	     * // => 'foobar'
    	     *
    	     * _.toLower('__FOO_BAR__');
    	     * // => '__foo_bar__'
    	     */
    	    function toLower(value) {
    	      return toString(value).toLowerCase();
    	    }

    	    /**
    	     * Converts `string`, as a whole, to upper case just like
    	     * [String#toUpperCase](https://mdn.io/toUpperCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.toUpper('--foo-bar--');
    	     * // => '--FOO-BAR--'
    	     *
    	     * _.toUpper('fooBar');
    	     * // => 'FOOBAR'
    	     *
    	     * _.toUpper('__foo_bar__');
    	     * // => '__FOO_BAR__'
    	     */
    	    function toUpper(value) {
    	      return toString(value).toUpperCase();
    	    }

    	    /**
    	     * Removes leading and trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trim('  abc  ');
    	     * // => 'abc'
    	     *
    	     * _.trim('-_-abc-_-', '_-');
    	     * // => 'abc'
    	     *
    	     * _.map(['  foo  ', '  bar  '], _.trim);
    	     * // => ['foo', 'bar']
    	     */
    	    function trim(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return baseTrim(string);
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          chrSymbols = stringToArray(chars),
    	          start = charsStartIndex(strSymbols, chrSymbols),
    	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

    	      return castSlice(strSymbols, start, end).join('');
    	    }

    	    /**
    	     * Removes trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimEnd('  abc  ');
    	     * // => '  abc'
    	     *
    	     * _.trimEnd('-_-abc-_-', '_-');
    	     * // => '-_-abc'
    	     */
    	    function trimEnd(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return string.slice(0, trimmedEndIndex(string) + 1);
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

    	      return castSlice(strSymbols, 0, end).join('');
    	    }

    	    /**
    	     * Removes leading whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimStart('  abc  ');
    	     * // => 'abc  '
    	     *
    	     * _.trimStart('-_-abc-_-', '_-');
    	     * // => 'abc-_-'
    	     */
    	    function trimStart(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return string.replace(reTrimStart, '');
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          start = charsStartIndex(strSymbols, stringToArray(chars));

    	      return castSlice(strSymbols, start).join('');
    	    }

    	    /**
    	     * Truncates `string` if it's longer than the given maximum string length.
    	     * The last characters of the truncated string are replaced with the omission
    	     * string which defaults to "...".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to truncate.
    	     * @param {Object} [options={}] The options object.
    	     * @param {number} [options.length=30] The maximum string length.
    	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
    	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
    	     * @returns {string} Returns the truncated string.
    	     * @example
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino');
    	     * // => 'hi-diddly-ho there, neighbo...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': ' '
    	     * });
    	     * // => 'hi-diddly-ho there,...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': /,? +/
    	     * });
    	     * // => 'hi-diddly-ho there...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'omission': ' [...]'
    	     * });
    	     * // => 'hi-diddly-ho there, neig [...]'
    	     */
    	    function truncate(string, options) {
    	      var length = DEFAULT_TRUNC_LENGTH,
    	          omission = DEFAULT_TRUNC_OMISSION;

    	      if (isObject(options)) {
    	        var separator = 'separator' in options ? options.separator : separator;
    	        length = 'length' in options ? toInteger(options.length) : length;
    	        omission = 'omission' in options ? baseToString(options.omission) : omission;
    	      }
    	      string = toString(string);

    	      var strLength = string.length;
    	      if (hasUnicode(string)) {
    	        var strSymbols = stringToArray(string);
    	        strLength = strSymbols.length;
    	      }
    	      if (length >= strLength) {
    	        return string;
    	      }
    	      var end = length - stringSize(omission);
    	      if (end < 1) {
    	        return omission;
    	      }
    	      var result = strSymbols
    	        ? castSlice(strSymbols, 0, end).join('')
    	        : string.slice(0, end);

    	      if (separator === undefined$1) {
    	        return result + omission;
    	      }
    	      if (strSymbols) {
    	        end += (result.length - end);
    	      }
    	      if (isRegExp(separator)) {
    	        if (string.slice(end).search(separator)) {
    	          var match,
    	              substring = result;

    	          if (!separator.global) {
    	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
    	          }
    	          separator.lastIndex = 0;
    	          while ((match = separator.exec(substring))) {
    	            var newEnd = match.index;
    	          }
    	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
    	        }
    	      } else if (string.indexOf(baseToString(separator), end) != end) {
    	        var index = result.lastIndexOf(separator);
    	        if (index > -1) {
    	          result = result.slice(0, index);
    	        }
    	      }
    	      return result + omission;
    	    }

    	    /**
    	     * The inverse of `_.escape`; this method converts the HTML entities
    	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
    	     * their corresponding characters.
    	     *
    	     * **Note:** No other HTML entities are unescaped. To unescape additional
    	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.6.0
    	     * @category String
    	     * @param {string} [string=''] The string to unescape.
    	     * @returns {string} Returns the unescaped string.
    	     * @example
    	     *
    	     * _.unescape('fred, barney, &amp; pebbles');
    	     * // => 'fred, barney, & pebbles'
    	     */
    	    function unescape(string) {
    	      string = toString(string);
    	      return (string && reHasEscapedHtml.test(string))
    	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
    	        : string;
    	    }

    	    /**
    	     * Converts `string`, as space separated words, to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.upperCase('--foo-bar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('fooBar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('__foo_bar__');
    	     * // => 'FOO BAR'
    	     */
    	    var upperCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toUpperCase();
    	    });

    	    /**
    	     * Converts the first character of `string` to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.upperFirst('fred');
    	     * // => 'Fred'
    	     *
    	     * _.upperFirst('FRED');
    	     * // => 'FRED'
    	     */
    	    var upperFirst = createCaseFirst('toUpperCase');

    	    /**
    	     * Splits `string` into an array of its words.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {RegExp|string} [pattern] The pattern to match words.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the words of `string`.
    	     * @example
    	     *
    	     * _.words('fred, barney, & pebbles');
    	     * // => ['fred', 'barney', 'pebbles']
    	     *
    	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
    	     * // => ['fred', 'barney', '&', 'pebbles']
    	     */
    	    function words(string, pattern, guard) {
    	      string = toString(string);
    	      pattern = guard ? undefined$1 : pattern;

    	      if (pattern === undefined$1) {
    	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    	      }
    	      return string.match(pattern) || [];
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Attempts to invoke `func`, returning either the result or the caught error
    	     * object. Any additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Function} func The function to attempt.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {*} Returns the `func` result or error object.
    	     * @example
    	     *
    	     * // Avoid throwing errors for invalid selectors.
    	     * var elements = _.attempt(function(selector) {
    	     *   return document.querySelectorAll(selector);
    	     * }, '>_>');
    	     *
    	     * if (_.isError(elements)) {
    	     *   elements = [];
    	     * }
    	     */
    	    var attempt = baseRest(function(func, args) {
    	      try {
    	        return apply(func, undefined$1, args);
    	      } catch (e) {
    	        return isError(e) ? e : new Error(e);
    	      }
    	    });

    	    /**
    	     * Binds methods of an object to the object itself, overwriting the existing
    	     * method.
    	     *
    	     * **Note:** This method doesn't set the "length" property of bound functions.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Object} object The object to bind and assign the bound methods to.
    	     * @param {...(string|string[])} methodNames The object method names to bind.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var view = {
    	     *   'label': 'docs',
    	     *   'click': function() {
    	     *     console.log('clicked ' + this.label);
    	     *   }
    	     * };
    	     *
    	     * _.bindAll(view, ['click']);
    	     * jQuery(element).on('click', view.click);
    	     * // => Logs 'clicked docs' when clicked.
    	     */
    	    var bindAll = flatRest(function(object, methodNames) {
    	      arrayEach(methodNames, function(key) {
    	        key = toKey(key);
    	        baseAssignValue(object, key, bind(object[key], object));
    	      });
    	      return object;
    	    });

    	    /**
    	     * Creates a function that iterates over `pairs` and invokes the corresponding
    	     * function of the first predicate to return truthy. The predicate-function
    	     * pairs are invoked with the `this` binding and arguments of the created
    	     * function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Array} pairs The predicate-function pairs.
    	     * @returns {Function} Returns the new composite function.
    	     * @example
    	     *
    	     * var func = _.cond([
    	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
    	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
    	     *   [_.stubTrue,                      _.constant('no match')]
    	     * ]);
    	     *
    	     * func({ 'a': 1, 'b': 2 });
    	     * // => 'matches A'
    	     *
    	     * func({ 'a': 0, 'b': 1 });
    	     * // => 'matches B'
    	     *
    	     * func({ 'a': '1', 'b': '2' });
    	     * // => 'no match'
    	     */
    	    function cond(pairs) {
    	      var length = pairs == null ? 0 : pairs.length,
    	          toIteratee = getIteratee();

    	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
    	        if (typeof pair[1] != 'function') {
    	          throw new TypeError(FUNC_ERROR_TEXT);
    	        }
    	        return [toIteratee(pair[0]), pair[1]];
    	      });

    	      return baseRest(function(args) {
    	        var index = -1;
    	        while (++index < length) {
    	          var pair = pairs[index];
    	          if (apply(pair[0], this, args)) {
    	            return apply(pair[1], this, args);
    	          }
    	        }
    	      });
    	    }

    	    /**
    	     * Creates a function that invokes the predicate properties of `source` with
    	     * the corresponding property values of a given object, returning `true` if
    	     * all predicates return truthy, else `false`.
    	     *
    	     * **Note:** The created function is equivalent to `_.conformsTo` with
    	     * `source` partially applied.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 2, 'b': 1 },
    	     *   { 'a': 1, 'b': 2 }
    	     * ];
    	     *
    	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
    	     * // => [{ 'a': 1, 'b': 2 }]
    	     */
    	    function conforms(source) {
    	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that returns `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {*} value The value to return from the new function.
    	     * @returns {Function} Returns the new constant function.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.constant({ 'a': 1 }));
    	     *
    	     * console.log(objects);
    	     * // => [{ 'a': 1 }, { 'a': 1 }]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => true
    	     */
    	    function constant(value) {
    	      return function() {
    	        return value;
    	      };
    	    }

    	    /**
    	     * Checks `value` to determine whether a default value should be returned in
    	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
    	     * or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.14.0
    	     * @category Util
    	     * @param {*} value The value to check.
    	     * @param {*} defaultValue The default value.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * _.defaultTo(1, 10);
    	     * // => 1
    	     *
    	     * _.defaultTo(undefined, 10);
    	     * // => 10
    	     */
    	    function defaultTo(value, defaultValue) {
    	      return (value == null || value !== value) ? defaultValue : value;
    	    }

    	    /**
    	     * Creates a function that returns the result of invoking the given functions
    	     * with the `this` binding of the created function, where each successive
    	     * invocation is supplied the return value of the previous.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flowRight
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flow([_.add, square]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flow = createFlow();

    	    /**
    	     * This method is like `_.flow` except that it creates a function that
    	     * invokes the given functions from right to left.
    	     *
    	     * @static
    	     * @since 3.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flow
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flowRight([square, _.add]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flowRight = createFlow(true);

    	    /**
    	     * This method returns the first argument it receives.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} value Any value.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     *
    	     * console.log(_.identity(object) === object);
    	     * // => true
    	     */
    	    function identity(value) {
    	      return value;
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the arguments of the created
    	     * function. If `func` is a property name, the created function returns the
    	     * property value for a given element. If `func` is an array or object, the
    	     * created function returns `true` for elements that contain the equivalent
    	     * source properties, otherwise it returns `false`.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} [func=_.identity] The value to convert to a callback.
    	     * @returns {Function} Returns the callback.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
    	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, _.iteratee(['user', 'fred']));
    	     * // => [{ 'user': 'fred', 'age': 40 }]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, _.iteratee('user'));
    	     * // => ['barney', 'fred']
    	     *
    	     * // Create custom iteratee shorthands.
    	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
    	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
    	     *     return func.test(string);
    	     *   };
    	     * });
    	     *
    	     * _.filter(['abc', 'def'], /ef/);
    	     * // => ['def']
    	     */
    	    function iteratee(func) {
    	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that performs a partial deep comparison between a given
    	     * object and `source`, returning `true` if the given object has equivalent
    	     * property values, else `false`.
    	     *
    	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
    	     * partially applied.
    	     *
    	     * Partial comparisons will match empty array and empty object `source`
    	     * values against any array or object value, respectively. See `_.isEqual`
    	     * for a list of supported value comparisons.
    	     *
    	     * **Note:** Multiple values can be checked by combining several matchers
    	     * using `_.overSome`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 1, 'b': 2, 'c': 3 },
    	     *   { 'a': 4, 'b': 5, 'c': 6 }
    	     * ];
    	     *
    	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
    	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
    	     *
    	     * // Checking for several possible values
    	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
    	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
    	     */
    	    function matches(source) {
    	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that performs a partial deep comparison between the
    	     * value at `path` of a given object to `srcValue`, returning `true` if the
    	     * object value is equivalent, else `false`.
    	     *
    	     * **Note:** Partial comparisons will match empty array and empty object
    	     * `srcValue` values against any array or object value, respectively. See
    	     * `_.isEqual` for a list of supported value comparisons.
    	     *
    	     * **Note:** Multiple values can be checked by combining several matchers
    	     * using `_.overSome`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 1, 'b': 2, 'c': 3 },
    	     *   { 'a': 4, 'b': 5, 'c': 6 }
    	     * ];
    	     *
    	     * _.find(objects, _.matchesProperty('a', 4));
    	     * // => { 'a': 4, 'b': 5, 'c': 6 }
    	     *
    	     * // Checking for several possible values
    	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
    	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
    	     */
    	    function matchesProperty(path, srcValue) {
    	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that invokes the method at `path` of a given object.
    	     * Any additional arguments are provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': _.constant(2) } },
    	     *   { 'a': { 'b': _.constant(1) } }
    	     * ];
    	     *
    	     * _.map(objects, _.method('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(objects, _.method(['a', 'b']));
    	     * // => [2, 1]
    	     */
    	    var method = baseRest(function(path, args) {
    	      return function(object) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });

    	    /**
    	     * The opposite of `_.method`; this method creates a function that invokes
    	     * the method at a given path of `object`. Any additional arguments are
    	     * provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var array = _.times(3, _.constant),
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
    	     * // => [2, 0]
    	     */
    	    var methodOf = baseRest(function(object, args) {
    	      return function(path) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });

    	    /**
    	     * Adds all own enumerable string keyed function properties of a source
    	     * object to the destination object. If `object` is a function, then methods
    	     * are added to its prototype as well.
    	     *
    	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
    	     * avoid conflicts caused by modifying the original.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Function|Object} [object=lodash] The destination object.
    	     * @param {Object} source The object of functions to add.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
    	     * @returns {Function|Object} Returns `object`.
    	     * @example
    	     *
    	     * function vowels(string) {
    	     *   return _.filter(string, function(v) {
    	     *     return /[aeiou]/i.test(v);
    	     *   });
    	     * }
    	     *
    	     * _.mixin({ 'vowels': vowels });
    	     * _.vowels('fred');
    	     * // => ['e']
    	     *
    	     * _('fred').vowels().value();
    	     * // => ['e']
    	     *
    	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
    	     * _('fred').vowels();
    	     * // => ['e']
    	     */
    	    function mixin(object, source, options) {
    	      var props = keys(source),
    	          methodNames = baseFunctions(source, props);

    	      if (options == null &&
    	          !(isObject(source) && (methodNames.length || !props.length))) {
    	        options = source;
    	        source = object;
    	        object = this;
    	        methodNames = baseFunctions(source, keys(source));
    	      }
    	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
    	          isFunc = isFunction(object);

    	      arrayEach(methodNames, function(methodName) {
    	        var func = source[methodName];
    	        object[methodName] = func;
    	        if (isFunc) {
    	          object.prototype[methodName] = function() {
    	            var chainAll = this.__chain__;
    	            if (chain || chainAll) {
    	              var result = object(this.__wrapped__),
    	                  actions = result.__actions__ = copyArray(this.__actions__);

    	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
    	              result.__chain__ = chainAll;
    	              return result;
    	            }
    	            return func.apply(object, arrayPush([this.value()], arguments));
    	          };
    	        }
    	      });

    	      return object;
    	    }

    	    /**
    	     * Reverts the `_` variable to its previous value and returns a reference to
    	     * the `lodash` function.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @returns {Function} Returns the `lodash` function.
    	     * @example
    	     *
    	     * var lodash = _.noConflict();
    	     */
    	    function noConflict() {
    	      if (root._ === this) {
    	        root._ = oldDash;
    	      }
    	      return this;
    	    }

    	    /**
    	     * This method returns `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Util
    	     * @example
    	     *
    	     * _.times(2, _.noop);
    	     * // => [undefined, undefined]
    	     */
    	    function noop() {
    	      // No operation performed.
    	    }

    	    /**
    	     * Creates a function that gets the argument at index `n`. If `n` is negative,
    	     * the nth argument from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [n=0] The index of the argument to return.
    	     * @returns {Function} Returns the new pass-thru function.
    	     * @example
    	     *
    	     * var func = _.nthArg(1);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'b'
    	     *
    	     * var func = _.nthArg(-2);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'c'
    	     */
    	    function nthArg(n) {
    	      n = toInteger(n);
    	      return baseRest(function(args) {
    	        return baseNth(args, n);
    	      });
    	    }

    	    /**
    	     * Creates a function that invokes `iteratees` with the arguments it receives
    	     * and returns their results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
    	     *  The iteratees to invoke.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.over([Math.max, Math.min]);
    	     *
    	     * func(1, 2, 3, 4);
    	     * // => [4, 1]
    	     */
    	    var over = createOver(arrayMap);

    	    /**
    	     * Creates a function that checks if **all** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * Following shorthands are possible for providing predicates.
    	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
    	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [predicates=[_.identity]]
    	     *  The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overEvery([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => false
    	     *
    	     * func(NaN);
    	     * // => false
    	     */
    	    var overEvery = createOver(arrayEvery);

    	    /**
    	     * Creates a function that checks if **any** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * Following shorthands are possible for providing predicates.
    	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
    	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [predicates=[_.identity]]
    	     *  The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overSome([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => true
    	     *
    	     * func(NaN);
    	     * // => false
    	     *
    	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
    	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
    	     */
    	    var overSome = createOver(arraySome);

    	    /**
    	     * Creates a function that returns the value at `path` of a given object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': 2 } },
    	     *   { 'a': { 'b': 1 } }
    	     * ];
    	     *
    	     * _.map(objects, _.property('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
    	     * // => [1, 2]
    	     */
    	    function property(path) {
    	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    	    }

    	    /**
    	     * The opposite of `_.property`; this method creates a function that returns
    	     * the value at a given path of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var array = [0, 1, 2],
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
    	     * // => [2, 0]
    	     */
    	    function propertyOf(object) {
    	      return function(path) {
    	        return object == null ? undefined$1 : baseGet(object, path);
    	      };
    	    }

    	    /**
    	     * Creates an array of numbers (positive and/or negative) progressing from
    	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
    	     * `start` is specified without an `end` or `step`. If `end` is not specified,
    	     * it's set to `start` with `start` then set to `0`.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.rangeRight
    	     * @example
    	     *
    	     * _.range(4);
    	     * // => [0, 1, 2, 3]
    	     *
    	     * _.range(-4);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 5);
    	     * // => [1, 2, 3, 4]
    	     *
    	     * _.range(0, 20, 5);
    	     * // => [0, 5, 10, 15]
    	     *
    	     * _.range(0, -4, -1);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.range(0);
    	     * // => []
    	     */
    	    var range = createRange();

    	    /**
    	     * This method is like `_.range` except that it populates values in
    	     * descending order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.range
    	     * @example
    	     *
    	     * _.rangeRight(4);
    	     * // => [3, 2, 1, 0]
    	     *
    	     * _.rangeRight(-4);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 5);
    	     * // => [4, 3, 2, 1]
    	     *
    	     * _.rangeRight(0, 20, 5);
    	     * // => [15, 10, 5, 0]
    	     *
    	     * _.rangeRight(0, -4, -1);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.rangeRight(0);
    	     * // => []
    	     */
    	    var rangeRight = createRange(true);

    	    /**
    	     * This method returns a new empty array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Array} Returns the new empty array.
    	     * @example
    	     *
    	     * var arrays = _.times(2, _.stubArray);
    	     *
    	     * console.log(arrays);
    	     * // => [[], []]
    	     *
    	     * console.log(arrays[0] === arrays[1]);
    	     * // => false
    	     */
    	    function stubArray() {
    	      return [];
    	    }

    	    /**
    	     * This method returns `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `false`.
    	     * @example
    	     *
    	     * _.times(2, _.stubFalse);
    	     * // => [false, false]
    	     */
    	    function stubFalse() {
    	      return false;
    	    }

    	    /**
    	     * This method returns a new empty object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Object} Returns the new empty object.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.stubObject);
    	     *
    	     * console.log(objects);
    	     * // => [{}, {}]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => false
    	     */
    	    function stubObject() {
    	      return {};
    	    }

    	    /**
    	     * This method returns an empty string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {string} Returns the empty string.
    	     * @example
    	     *
    	     * _.times(2, _.stubString);
    	     * // => ['', '']
    	     */
    	    function stubString() {
    	      return '';
    	    }

    	    /**
    	     * This method returns `true`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `true`.
    	     * @example
    	     *
    	     * _.times(2, _.stubTrue);
    	     * // => [true, true]
    	     */
    	    function stubTrue() {
    	      return true;
    	    }

    	    /**
    	     * Invokes the iteratee `n` times, returning an array of the results of
    	     * each invocation. The iteratee is invoked with one argument; (index).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} n The number of times to invoke `iteratee`.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.times(3, String);
    	     * // => ['0', '1', '2']
    	     *
    	     *  _.times(4, _.constant(0));
    	     * // => [0, 0, 0, 0]
    	     */
    	    function times(n, iteratee) {
    	      n = toInteger(n);
    	      if (n < 1 || n > MAX_SAFE_INTEGER) {
    	        return [];
    	      }
    	      var index = MAX_ARRAY_LENGTH,
    	          length = nativeMin(n, MAX_ARRAY_LENGTH);

    	      iteratee = getIteratee(iteratee);
    	      n -= MAX_ARRAY_LENGTH;

    	      var result = baseTimes(length, iteratee);
    	      while (++index < n) {
    	        iteratee(index);
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `value` to a property path array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the new property path array.
    	     * @example
    	     *
    	     * _.toPath('a.b.c');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toPath('a[0].b.c');
    	     * // => ['a', '0', 'b', 'c']
    	     */
    	    function toPath(value) {
    	      if (isArray(value)) {
    	        return arrayMap(value, toKey);
    	      }
    	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    	    }

    	    /**
    	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {string} [prefix=''] The value to prefix the ID with.
    	     * @returns {string} Returns the unique ID.
    	     * @example
    	     *
    	     * _.uniqueId('contact_');
    	     * // => 'contact_104'
    	     *
    	     * _.uniqueId();
    	     * // => '105'
    	     */
    	    function uniqueId(prefix) {
    	      var id = ++idCounter;
    	      return toString(prefix) + id;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Adds two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {number} augend The first number in an addition.
    	     * @param {number} addend The second number in an addition.
    	     * @returns {number} Returns the total.
    	     * @example
    	     *
    	     * _.add(6, 4);
    	     * // => 10
    	     */
    	    var add = createMathOperation(function(augend, addend) {
    	      return augend + addend;
    	    }, 0);

    	    /**
    	     * Computes `number` rounded up to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round up.
    	     * @param {number} [precision=0] The precision to round up to.
    	     * @returns {number} Returns the rounded up number.
    	     * @example
    	     *
    	     * _.ceil(4.006);
    	     * // => 5
    	     *
    	     * _.ceil(6.004, 2);
    	     * // => 6.01
    	     *
    	     * _.ceil(6040, -2);
    	     * // => 6100
    	     */
    	    var ceil = createRound('ceil');

    	    /**
    	     * Divide two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} dividend The first number in a division.
    	     * @param {number} divisor The second number in a division.
    	     * @returns {number} Returns the quotient.
    	     * @example
    	     *
    	     * _.divide(6, 4);
    	     * // => 1.5
    	     */
    	    var divide = createMathOperation(function(dividend, divisor) {
    	      return dividend / divisor;
    	    }, 1);

    	    /**
    	     * Computes `number` rounded down to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round down.
    	     * @param {number} [precision=0] The precision to round down to.
    	     * @returns {number} Returns the rounded down number.
    	     * @example
    	     *
    	     * _.floor(4.006);
    	     * // => 4
    	     *
    	     * _.floor(0.046, 2);
    	     * // => 0.04
    	     *
    	     * _.floor(4060, -2);
    	     * // => 4000
    	     */
    	    var floor = createRound('floor');

    	    /**
    	     * Computes the maximum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * _.max([4, 2, 8, 6]);
    	     * // => 8
    	     *
    	     * _.max([]);
    	     * // => undefined
    	     */
    	    function max(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseGt)
    	        : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.max` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.maxBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.maxBy(objects, 'n');
    	     * // => { 'n': 2 }
    	     */
    	    function maxBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
    	        : undefined$1;
    	    }

    	    /**
    	     * Computes the mean of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * _.mean([4, 2, 8, 6]);
    	     * // => 5
    	     */
    	    function mean(array) {
    	      return baseMean(array, identity);
    	    }

    	    /**
    	     * This method is like `_.mean` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be averaged.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.meanBy(objects, function(o) { return o.n; });
    	     * // => 5
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.meanBy(objects, 'n');
    	     * // => 5
    	     */
    	    function meanBy(array, iteratee) {
    	      return baseMean(array, getIteratee(iteratee, 2));
    	    }

    	    /**
    	     * Computes the minimum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * _.min([4, 2, 8, 6]);
    	     * // => 2
    	     *
    	     * _.min([]);
    	     * // => undefined
    	     */
    	    function min(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseLt)
    	        : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.min` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.minBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 1 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.minBy(objects, 'n');
    	     * // => { 'n': 1 }
    	     */
    	    function minBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
    	        : undefined$1;
    	    }

    	    /**
    	     * Multiply two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} multiplier The first number in a multiplication.
    	     * @param {number} multiplicand The second number in a multiplication.
    	     * @returns {number} Returns the product.
    	     * @example
    	     *
    	     * _.multiply(6, 4);
    	     * // => 24
    	     */
    	    var multiply = createMathOperation(function(multiplier, multiplicand) {
    	      return multiplier * multiplicand;
    	    }, 1);

    	    /**
    	     * Computes `number` rounded to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round.
    	     * @param {number} [precision=0] The precision to round to.
    	     * @returns {number} Returns the rounded number.
    	     * @example
    	     *
    	     * _.round(4.006);
    	     * // => 4
    	     *
    	     * _.round(4.006, 2);
    	     * // => 4.01
    	     *
    	     * _.round(4060, -2);
    	     * // => 4100
    	     */
    	    var round = createRound('round');

    	    /**
    	     * Subtract two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {number} minuend The first number in a subtraction.
    	     * @param {number} subtrahend The second number in a subtraction.
    	     * @returns {number} Returns the difference.
    	     * @example
    	     *
    	     * _.subtract(6, 4);
    	     * // => 2
    	     */
    	    var subtract = createMathOperation(function(minuend, subtrahend) {
    	      return minuend - subtrahend;
    	    }, 0);

    	    /**
    	     * Computes the sum of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * _.sum([4, 2, 8, 6]);
    	     * // => 20
    	     */
    	    function sum(array) {
    	      return (array && array.length)
    	        ? baseSum(array, identity)
    	        : 0;
    	    }

    	    /**
    	     * This method is like `_.sum` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be summed.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.sumBy(objects, function(o) { return o.n; });
    	     * // => 20
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sumBy(objects, 'n');
    	     * // => 20
    	     */
    	    function sumBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSum(array, getIteratee(iteratee, 2))
    	        : 0;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    // Add methods that return wrapped values in chain sequences.
    	    lodash.after = after;
    	    lodash.ary = ary;
    	    lodash.assign = assign;
    	    lodash.assignIn = assignIn;
    	    lodash.assignInWith = assignInWith;
    	    lodash.assignWith = assignWith;
    	    lodash.at = at;
    	    lodash.before = before;
    	    lodash.bind = bind;
    	    lodash.bindAll = bindAll;
    	    lodash.bindKey = bindKey;
    	    lodash.castArray = castArray;
    	    lodash.chain = chain;
    	    lodash.chunk = chunk;
    	    lodash.compact = compact;
    	    lodash.concat = concat;
    	    lodash.cond = cond;
    	    lodash.conforms = conforms;
    	    lodash.constant = constant;
    	    lodash.countBy = countBy;
    	    lodash.create = create;
    	    lodash.curry = curry;
    	    lodash.curryRight = curryRight;
    	    lodash.debounce = debounce;
    	    lodash.defaults = defaults;
    	    lodash.defaultsDeep = defaultsDeep;
    	    lodash.defer = defer;
    	    lodash.delay = delay;
    	    lodash.difference = difference;
    	    lodash.differenceBy = differenceBy;
    	    lodash.differenceWith = differenceWith;
    	    lodash.drop = drop;
    	    lodash.dropRight = dropRight;
    	    lodash.dropRightWhile = dropRightWhile;
    	    lodash.dropWhile = dropWhile;
    	    lodash.fill = fill;
    	    lodash.filter = filter;
    	    lodash.flatMap = flatMap;
    	    lodash.flatMapDeep = flatMapDeep;
    	    lodash.flatMapDepth = flatMapDepth;
    	    lodash.flatten = flatten;
    	    lodash.flattenDeep = flattenDeep;
    	    lodash.flattenDepth = flattenDepth;
    	    lodash.flip = flip;
    	    lodash.flow = flow;
    	    lodash.flowRight = flowRight;
    	    lodash.fromPairs = fromPairs;
    	    lodash.functions = functions;
    	    lodash.functionsIn = functionsIn;
    	    lodash.groupBy = groupBy;
    	    lodash.initial = initial;
    	    lodash.intersection = intersection;
    	    lodash.intersectionBy = intersectionBy;
    	    lodash.intersectionWith = intersectionWith;
    	    lodash.invert = invert;
    	    lodash.invertBy = invertBy;
    	    lodash.invokeMap = invokeMap;
    	    lodash.iteratee = iteratee;
    	    lodash.keyBy = keyBy;
    	    lodash.keys = keys;
    	    lodash.keysIn = keysIn;
    	    lodash.map = map;
    	    lodash.mapKeys = mapKeys;
    	    lodash.mapValues = mapValues;
    	    lodash.matches = matches;
    	    lodash.matchesProperty = matchesProperty;
    	    lodash.memoize = memoize;
    	    lodash.merge = merge;
    	    lodash.mergeWith = mergeWith;
    	    lodash.method = method;
    	    lodash.methodOf = methodOf;
    	    lodash.mixin = mixin;
    	    lodash.negate = negate;
    	    lodash.nthArg = nthArg;
    	    lodash.omit = omit;
    	    lodash.omitBy = omitBy;
    	    lodash.once = once;
    	    lodash.orderBy = orderBy;
    	    lodash.over = over;
    	    lodash.overArgs = overArgs;
    	    lodash.overEvery = overEvery;
    	    lodash.overSome = overSome;
    	    lodash.partial = partial;
    	    lodash.partialRight = partialRight;
    	    lodash.partition = partition;
    	    lodash.pick = pick;
    	    lodash.pickBy = pickBy;
    	    lodash.property = property;
    	    lodash.propertyOf = propertyOf;
    	    lodash.pull = pull;
    	    lodash.pullAll = pullAll;
    	    lodash.pullAllBy = pullAllBy;
    	    lodash.pullAllWith = pullAllWith;
    	    lodash.pullAt = pullAt;
    	    lodash.range = range;
    	    lodash.rangeRight = rangeRight;
    	    lodash.rearg = rearg;
    	    lodash.reject = reject;
    	    lodash.remove = remove;
    	    lodash.rest = rest;
    	    lodash.reverse = reverse;
    	    lodash.sampleSize = sampleSize;
    	    lodash.set = set;
    	    lodash.setWith = setWith;
    	    lodash.shuffle = shuffle;
    	    lodash.slice = slice;
    	    lodash.sortBy = sortBy;
    	    lodash.sortedUniq = sortedUniq;
    	    lodash.sortedUniqBy = sortedUniqBy;
    	    lodash.split = split;
    	    lodash.spread = spread;
    	    lodash.tail = tail;
    	    lodash.take = take;
    	    lodash.takeRight = takeRight;
    	    lodash.takeRightWhile = takeRightWhile;
    	    lodash.takeWhile = takeWhile;
    	    lodash.tap = tap;
    	    lodash.throttle = throttle;
    	    lodash.thru = thru;
    	    lodash.toArray = toArray;
    	    lodash.toPairs = toPairs;
    	    lodash.toPairsIn = toPairsIn;
    	    lodash.toPath = toPath;
    	    lodash.toPlainObject = toPlainObject;
    	    lodash.transform = transform;
    	    lodash.unary = unary;
    	    lodash.union = union;
    	    lodash.unionBy = unionBy;
    	    lodash.unionWith = unionWith;
    	    lodash.uniq = uniq;
    	    lodash.uniqBy = uniqBy;
    	    lodash.uniqWith = uniqWith;
    	    lodash.unset = unset;
    	    lodash.unzip = unzip;
    	    lodash.unzipWith = unzipWith;
    	    lodash.update = update;
    	    lodash.updateWith = updateWith;
    	    lodash.values = values;
    	    lodash.valuesIn = valuesIn;
    	    lodash.without = without;
    	    lodash.words = words;
    	    lodash.wrap = wrap;
    	    lodash.xor = xor;
    	    lodash.xorBy = xorBy;
    	    lodash.xorWith = xorWith;
    	    lodash.zip = zip;
    	    lodash.zipObject = zipObject;
    	    lodash.zipObjectDeep = zipObjectDeep;
    	    lodash.zipWith = zipWith;

    	    // Add aliases.
    	    lodash.entries = toPairs;
    	    lodash.entriesIn = toPairsIn;
    	    lodash.extend = assignIn;
    	    lodash.extendWith = assignInWith;

    	    // Add methods to `lodash.prototype`.
    	    mixin(lodash, lodash);

    	    /*------------------------------------------------------------------------*/

    	    // Add methods that return unwrapped values in chain sequences.
    	    lodash.add = add;
    	    lodash.attempt = attempt;
    	    lodash.camelCase = camelCase;
    	    lodash.capitalize = capitalize;
    	    lodash.ceil = ceil;
    	    lodash.clamp = clamp;
    	    lodash.clone = clone;
    	    lodash.cloneDeep = cloneDeep;
    	    lodash.cloneDeepWith = cloneDeepWith;
    	    lodash.cloneWith = cloneWith;
    	    lodash.conformsTo = conformsTo;
    	    lodash.deburr = deburr;
    	    lodash.defaultTo = defaultTo;
    	    lodash.divide = divide;
    	    lodash.endsWith = endsWith;
    	    lodash.eq = eq;
    	    lodash.escape = escape;
    	    lodash.escapeRegExp = escapeRegExp;
    	    lodash.every = every;
    	    lodash.find = find;
    	    lodash.findIndex = findIndex;
    	    lodash.findKey = findKey;
    	    lodash.findLast = findLast;
    	    lodash.findLastIndex = findLastIndex;
    	    lodash.findLastKey = findLastKey;
    	    lodash.floor = floor;
    	    lodash.forEach = forEach;
    	    lodash.forEachRight = forEachRight;
    	    lodash.forIn = forIn;
    	    lodash.forInRight = forInRight;
    	    lodash.forOwn = forOwn;
    	    lodash.forOwnRight = forOwnRight;
    	    lodash.get = get;
    	    lodash.gt = gt;
    	    lodash.gte = gte;
    	    lodash.has = has;
    	    lodash.hasIn = hasIn;
    	    lodash.head = head;
    	    lodash.identity = identity;
    	    lodash.includes = includes;
    	    lodash.indexOf = indexOf;
    	    lodash.inRange = inRange;
    	    lodash.invoke = invoke;
    	    lodash.isArguments = isArguments;
    	    lodash.isArray = isArray;
    	    lodash.isArrayBuffer = isArrayBuffer;
    	    lodash.isArrayLike = isArrayLike;
    	    lodash.isArrayLikeObject = isArrayLikeObject;
    	    lodash.isBoolean = isBoolean;
    	    lodash.isBuffer = isBuffer;
    	    lodash.isDate = isDate;
    	    lodash.isElement = isElement;
    	    lodash.isEmpty = isEmpty;
    	    lodash.isEqual = isEqual;
    	    lodash.isEqualWith = isEqualWith;
    	    lodash.isError = isError;
    	    lodash.isFinite = isFinite;
    	    lodash.isFunction = isFunction;
    	    lodash.isInteger = isInteger;
    	    lodash.isLength = isLength;
    	    lodash.isMap = isMap;
    	    lodash.isMatch = isMatch;
    	    lodash.isMatchWith = isMatchWith;
    	    lodash.isNaN = isNaN;
    	    lodash.isNative = isNative;
    	    lodash.isNil = isNil;
    	    lodash.isNull = isNull;
    	    lodash.isNumber = isNumber;
    	    lodash.isObject = isObject;
    	    lodash.isObjectLike = isObjectLike;
    	    lodash.isPlainObject = isPlainObject;
    	    lodash.isRegExp = isRegExp;
    	    lodash.isSafeInteger = isSafeInteger;
    	    lodash.isSet = isSet;
    	    lodash.isString = isString;
    	    lodash.isSymbol = isSymbol;
    	    lodash.isTypedArray = isTypedArray;
    	    lodash.isUndefined = isUndefined;
    	    lodash.isWeakMap = isWeakMap;
    	    lodash.isWeakSet = isWeakSet;
    	    lodash.join = join;
    	    lodash.kebabCase = kebabCase;
    	    lodash.last = last;
    	    lodash.lastIndexOf = lastIndexOf;
    	    lodash.lowerCase = lowerCase;
    	    lodash.lowerFirst = lowerFirst;
    	    lodash.lt = lt;
    	    lodash.lte = lte;
    	    lodash.max = max;
    	    lodash.maxBy = maxBy;
    	    lodash.mean = mean;
    	    lodash.meanBy = meanBy;
    	    lodash.min = min;
    	    lodash.minBy = minBy;
    	    lodash.stubArray = stubArray;
    	    lodash.stubFalse = stubFalse;
    	    lodash.stubObject = stubObject;
    	    lodash.stubString = stubString;
    	    lodash.stubTrue = stubTrue;
    	    lodash.multiply = multiply;
    	    lodash.nth = nth;
    	    lodash.noConflict = noConflict;
    	    lodash.noop = noop;
    	    lodash.now = now;
    	    lodash.pad = pad;
    	    lodash.padEnd = padEnd;
    	    lodash.padStart = padStart;
    	    lodash.parseInt = parseInt;
    	    lodash.random = random;
    	    lodash.reduce = reduce;
    	    lodash.reduceRight = reduceRight;
    	    lodash.repeat = repeat;
    	    lodash.replace = replace;
    	    lodash.result = result;
    	    lodash.round = round;
    	    lodash.runInContext = runInContext;
    	    lodash.sample = sample;
    	    lodash.size = size;
    	    lodash.snakeCase = snakeCase;
    	    lodash.some = some;
    	    lodash.sortedIndex = sortedIndex;
    	    lodash.sortedIndexBy = sortedIndexBy;
    	    lodash.sortedIndexOf = sortedIndexOf;
    	    lodash.sortedLastIndex = sortedLastIndex;
    	    lodash.sortedLastIndexBy = sortedLastIndexBy;
    	    lodash.sortedLastIndexOf = sortedLastIndexOf;
    	    lodash.startCase = startCase;
    	    lodash.startsWith = startsWith;
    	    lodash.subtract = subtract;
    	    lodash.sum = sum;
    	    lodash.sumBy = sumBy;
    	    lodash.template = template;
    	    lodash.times = times;
    	    lodash.toFinite = toFinite;
    	    lodash.toInteger = toInteger;
    	    lodash.toLength = toLength;
    	    lodash.toLower = toLower;
    	    lodash.toNumber = toNumber;
    	    lodash.toSafeInteger = toSafeInteger;
    	    lodash.toString = toString;
    	    lodash.toUpper = toUpper;
    	    lodash.trim = trim;
    	    lodash.trimEnd = trimEnd;
    	    lodash.trimStart = trimStart;
    	    lodash.truncate = truncate;
    	    lodash.unescape = unescape;
    	    lodash.uniqueId = uniqueId;
    	    lodash.upperCase = upperCase;
    	    lodash.upperFirst = upperFirst;

    	    // Add aliases.
    	    lodash.each = forEach;
    	    lodash.eachRight = forEachRight;
    	    lodash.first = head;

    	    mixin(lodash, (function() {
    	      var source = {};
    	      baseForOwn(lodash, function(func, methodName) {
    	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
    	          source[methodName] = func;
    	        }
    	      });
    	      return source;
    	    }()), { 'chain': false });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * The semantic version number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {string}
    	     */
    	    lodash.VERSION = VERSION;

    	    // Assign default placeholders.
    	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
    	      lodash[methodName].placeholder = lodash;
    	    });

    	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    	    arrayEach(['drop', 'take'], function(methodName, index) {
    	      LazyWrapper.prototype[methodName] = function(n) {
    	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

    	        var result = (this.__filtered__ && !index)
    	          ? new LazyWrapper(this)
    	          : this.clone();

    	        if (result.__filtered__) {
    	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
    	        } else {
    	          result.__views__.push({
    	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
    	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
    	          });
    	        }
    	        return result;
    	      };

    	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
    	        return this.reverse()[methodName](n).reverse();
    	      };
    	    });

    	    // Add `LazyWrapper` methods that accept an `iteratee` value.
    	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
    	      var type = index + 1,
    	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

    	      LazyWrapper.prototype[methodName] = function(iteratee) {
    	        var result = this.clone();
    	        result.__iteratees__.push({
    	          'iteratee': getIteratee(iteratee, 3),
    	          'type': type
    	        });
    	        result.__filtered__ = result.__filtered__ || isFilter;
    	        return result;
    	      };
    	    });

    	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    	    arrayEach(['head', 'last'], function(methodName, index) {
    	      var takeName = 'take' + (index ? 'Right' : '');

    	      LazyWrapper.prototype[methodName] = function() {
    	        return this[takeName](1).value()[0];
    	      };
    	    });

    	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    	    arrayEach(['initial', 'tail'], function(methodName, index) {
    	      var dropName = 'drop' + (index ? '' : 'Right');

    	      LazyWrapper.prototype[methodName] = function() {
    	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
    	      };
    	    });

    	    LazyWrapper.prototype.compact = function() {
    	      return this.filter(identity);
    	    };

    	    LazyWrapper.prototype.find = function(predicate) {
    	      return this.filter(predicate).head();
    	    };

    	    LazyWrapper.prototype.findLast = function(predicate) {
    	      return this.reverse().find(predicate);
    	    };

    	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
    	      if (typeof path == 'function') {
    	        return new LazyWrapper(this);
    	      }
    	      return this.map(function(value) {
    	        return baseInvoke(value, path, args);
    	      });
    	    });

    	    LazyWrapper.prototype.reject = function(predicate) {
    	      return this.filter(negate(getIteratee(predicate)));
    	    };

    	    LazyWrapper.prototype.slice = function(start, end) {
    	      start = toInteger(start);

    	      var result = this;
    	      if (result.__filtered__ && (start > 0 || end < 0)) {
    	        return new LazyWrapper(result);
    	      }
    	      if (start < 0) {
    	        result = result.takeRight(-start);
    	      } else if (start) {
    	        result = result.drop(start);
    	      }
    	      if (end !== undefined$1) {
    	        end = toInteger(end);
    	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    	      }
    	      return result;
    	    };

    	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
    	      return this.reverse().takeWhile(predicate).reverse();
    	    };

    	    LazyWrapper.prototype.toArray = function() {
    	      return this.take(MAX_ARRAY_LENGTH);
    	    };

    	    // Add `LazyWrapper` methods to `lodash.prototype`.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
    	          isTaker = /^(?:head|last)$/.test(methodName),
    	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
    	          retUnwrapped = isTaker || /^find/.test(methodName);

    	      if (!lodashFunc) {
    	        return;
    	      }
    	      lodash.prototype[methodName] = function() {
    	        var value = this.__wrapped__,
    	            args = isTaker ? [1] : arguments,
    	            isLazy = value instanceof LazyWrapper,
    	            iteratee = args[0],
    	            useLazy = isLazy || isArray(value);

    	        var interceptor = function(value) {
    	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
    	          return (isTaker && chainAll) ? result[0] : result;
    	        };

    	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
    	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
    	          isLazy = useLazy = false;
    	        }
    	        var chainAll = this.__chain__,
    	            isHybrid = !!this.__actions__.length,
    	            isUnwrapped = retUnwrapped && !chainAll,
    	            onlyLazy = isLazy && !isHybrid;

    	        if (!retUnwrapped && useLazy) {
    	          value = onlyLazy ? value : new LazyWrapper(this);
    	          var result = func.apply(value, args);
    	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
    	          return new LodashWrapper(result, chainAll);
    	        }
    	        if (isUnwrapped && onlyLazy) {
    	          return func.apply(this, args);
    	        }
    	        result = this.thru(interceptor);
    	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
    	      };
    	    });

    	    // Add `Array` methods to `lodash.prototype`.
    	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    	      var func = arrayProto[methodName],
    	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
    	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

    	      lodash.prototype[methodName] = function() {
    	        var args = arguments;
    	        if (retUnwrapped && !this.__chain__) {
    	          var value = this.value();
    	          return func.apply(isArray(value) ? value : [], args);
    	        }
    	        return this[chainName](function(value) {
    	          return func.apply(isArray(value) ? value : [], args);
    	        });
    	      };
    	    });

    	    // Map minified method names to their real names.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var lodashFunc = lodash[methodName];
    	      if (lodashFunc) {
    	        var key = lodashFunc.name + '';
    	        if (!hasOwnProperty.call(realNames, key)) {
    	          realNames[key] = [];
    	        }
    	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
    	      }
    	    });

    	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
    	      'name': 'wrapper',
    	      'func': undefined$1
    	    }];

    	    // Add methods to `LazyWrapper`.
    	    LazyWrapper.prototype.clone = lazyClone;
    	    LazyWrapper.prototype.reverse = lazyReverse;
    	    LazyWrapper.prototype.value = lazyValue;

    	    // Add chain sequence methods to the `lodash` wrapper.
    	    lodash.prototype.at = wrapperAt;
    	    lodash.prototype.chain = wrapperChain;
    	    lodash.prototype.commit = wrapperCommit;
    	    lodash.prototype.next = wrapperNext;
    	    lodash.prototype.plant = wrapperPlant;
    	    lodash.prototype.reverse = wrapperReverse;
    	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    	    // Add lazy aliases.
    	    lodash.prototype.first = lodash.prototype.head;

    	    if (symIterator) {
    	      lodash.prototype[symIterator] = wrapperToIterator;
    	    }
    	    return lodash;
    	  });

    	  /*--------------------------------------------------------------------------*/

    	  // Export lodash.
    	  var _ = runInContext();

    	  // Some AMD build optimizers, like r.js, check for condition patterns like:
    	  if (freeModule) {
    	    // Export for Node.js.
    	    (freeModule.exports = _)._ = _;
    	    // Export for CommonJS support.
    	    freeExports._ = _;
    	  }
    	  else {
    	    // Export to the global object.
    	    root._ = _;
    	  }
    	}.call(commonjsGlobal));
    } (lodash, lodashExports));

    const timespan = timespan$2;
    const PS_SUPPORTED = psSupported;
    const validateAsymmetricKey = validateAsymmetricKey$2;
    const jws = jws$3;
    const {includes, isBoolean, isInteger, isNumber, isPlainObject, isString, once} = lodashExports;
    const { KeyObject, createSecretKey, createPrivateKey } = require$$2$3;

    const SUPPORTED_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none'];
    if (PS_SUPPORTED) {
      SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');
    }

    const sign_options_schema = {
      expiresIn: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '"expiresIn" should be a number of seconds or string representing a timespan' },
      notBefore: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '"notBefore" should be a number of seconds or string representing a timespan' },
      audience: { isValid: function(value) { return isString(value) || Array.isArray(value); }, message: '"audience" must be a string or array' },
      algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' },
      header: { isValid: isPlainObject, message: '"header" must be an object' },
      encoding: { isValid: isString, message: '"encoding" must be a string' },
      issuer: { isValid: isString, message: '"issuer" must be a string' },
      subject: { isValid: isString, message: '"subject" must be a string' },
      jwtid: { isValid: isString, message: '"jwtid" must be a string' },
      noTimestamp: { isValid: isBoolean, message: '"noTimestamp" must be a boolean' },
      keyid: { isValid: isString, message: '"keyid" must be a string' },
      mutatePayload: { isValid: isBoolean, message: '"mutatePayload" must be a boolean' },
      allowInsecureKeySizes: { isValid: isBoolean, message: '"allowInsecureKeySizes" must be a boolean'},
      allowInvalidAsymmetricKeyTypes: { isValid: isBoolean, message: '"allowInvalidAsymmetricKeyTypes" must be a boolean'}
    };

    const registered_claims_schema = {
      iat: { isValid: isNumber, message: '"iat" should be a number of seconds' },
      exp: { isValid: isNumber, message: '"exp" should be a number of seconds' },
      nbf: { isValid: isNumber, message: '"nbf" should be a number of seconds' }
    };

    function validate(schema, allowUnknown, object, parameterName) {
      if (!isPlainObject(object)) {
        throw new Error('Expected "' + parameterName + '" to be a plain object.');
      }
      Object.keys(object)
        .forEach(function(key) {
          const validator = schema[key];
          if (!validator) {
            if (!allowUnknown) {
              throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
            }
            return;
          }
          if (!validator.isValid(object[key])) {
            throw new Error(validator.message);
          }
        });
    }

    function validateOptions(options) {
      return validate(sign_options_schema, false, options, 'options');
    }

    function validatePayload(payload) {
      return validate(registered_claims_schema, true, payload, 'payload');
    }

    const options_to_payload = {
      'audience': 'aud',
      'issuer': 'iss',
      'subject': 'sub',
      'jwtid': 'jti'
    };

    const options_for_objects = [
      'expiresIn',
      'notBefore',
      'noTimestamp',
      'audience',
      'issuer',
      'subject',
      'jwtid',
    ];

    var sign = function (payload, secretOrPrivateKey, options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      } else {
        options = options || {};
      }

      const isObjectPayload = typeof payload === 'object' &&
                            !Buffer.isBuffer(payload);

      const header = Object.assign({
        alg: options.algorithm || 'HS256',
        typ: isObjectPayload ? 'JWT' : undefined,
        kid: options.keyid
      }, options.header);

      function failure(err) {
        if (callback) {
          return callback(err);
        }
        throw err;
      }

      if (!secretOrPrivateKey && options.algorithm !== 'none') {
        return failure(new Error('secretOrPrivateKey must have a value'));
      }

      if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {
        try {
          secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
        } catch (_) {
          try {
            secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === 'string' ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);
          } catch (_) {
            return failure(new Error('secretOrPrivateKey is not valid key material'));
          }
        }
      }

      if (header.alg.startsWith('HS') && secretOrPrivateKey.type !== 'secret') {
        return failure(new Error((`secretOrPrivateKey must be a symmetric key when using ${header.alg}`)))
      } else if (/^(?:RS|PS|ES)/.test(header.alg)) {
        if (secretOrPrivateKey.type !== 'private') {
          return failure(new Error((`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`)))
        }
        if (!options.allowInsecureKeySizes &&
          !header.alg.startsWith('ES') &&
          secretOrPrivateKey.asymmetricKeyDetails !== undefined && //KeyObject.asymmetricKeyDetails is supported in Node 15+
          secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {
          return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
        }
      }

      if (typeof payload === 'undefined') {
        return failure(new Error('payload is required'));
      } else if (isObjectPayload) {
        try {
          validatePayload(payload);
        }
        catch (error) {
          return failure(error);
        }
        if (!options.mutatePayload) {
          payload = Object.assign({},payload);
        }
      } else {
        const invalid_options = options_for_objects.filter(function (opt) {
          return typeof options[opt] !== 'undefined';
        });

        if (invalid_options.length > 0) {
          return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + (typeof payload ) + ' payload'));
        }
      }

      if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {
        return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
      }

      if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {
        return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
      }

      try {
        validateOptions(options);
      }
      catch (error) {
        return failure(error);
      }

      if (!options.allowInvalidAsymmetricKeyTypes) {
        try {
          validateAsymmetricKey(header.alg, secretOrPrivateKey);
        } catch (error) {
          return failure(error);
        }
      }

      const timestamp = payload.iat || Math.floor(Date.now() / 1000);

      if (options.noTimestamp) {
        delete payload.iat;
      } else if (isObjectPayload) {
        payload.iat = timestamp;
      }

      if (typeof options.notBefore !== 'undefined') {
        try {
          payload.nbf = timespan(options.notBefore, timestamp);
        }
        catch (err) {
          return failure(err);
        }
        if (typeof payload.nbf === 'undefined') {
          return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }

      if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {
        try {
          payload.exp = timespan(options.expiresIn, timestamp);
        }
        catch (err) {
          return failure(err);
        }
        if (typeof payload.exp === 'undefined') {
          return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }

      Object.keys(options_to_payload).forEach(function (key) {
        const claim = options_to_payload[key];
        if (typeof options[key] !== 'undefined') {
          if (typeof payload[claim] !== 'undefined') {
            return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
          }
          payload[claim] = options[key];
        }
      });

      const encoding = options.encoding || 'utf8';

      if (typeof callback === 'function') {
        callback = callback && once(callback);

        jws.createSign({
          header: header,
          privateKey: secretOrPrivateKey,
          payload: payload,
          encoding: encoding
        }).once('error', callback)
          .once('done', function (signature) {
            // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version
            if(!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
              return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`))
            }
            callback(null, signature);
          });
      } else {
        let signature = jws.sign({header: header, payload: payload, secret: secretOrPrivateKey, encoding: encoding});
        // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version
        if(!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
          throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`)
        }
        return signature
      }
    };

    (function (module) {
    	module.exports = {
    	  verify: verify,
    	  sign: sign,
    	  JsonWebTokenError: JsonWebTokenError_1,
    	  NotBeforeError: NotBeforeError_1,
    	  TokenExpiredError: TokenExpiredError_1,
    	};

    	Object.defineProperty(module.exports, 'decode', {
    	  enumerable: false,
    	  value: decode$1,
    	});
    } (jsonwebtoken));

    /**
     * @description Generates a new json web token (JWT)
     *
     * @example
     * const token = sign({some: payload});
     *
     */
    function JWT(payload = '', privateKey = '', options = {}) {
        if (!privateKey)
            privateKey = fromFormat('aAaAaAaAaAaAaAaA');
        return jsonwebtokenExports.sign(payload, privateKey, options);
    }
    /**
     * @description generates a random alpha numeric token
     *
     * @example
     * const t = token(); // hA76dcB12l
     */
    function token(len = 10) {
        return alphaN(len);
    }
    const Authentication = {
        JWT,
        token
    };

    var md5Exports = {};
    var md5$1 = {
      get exports(){ return md5Exports; },
      set exports(v){ md5Exports = v; },
    };

    var cryptExports = {};
    var crypt = {
      get exports(){ return cryptExports; },
      set exports(v){ cryptExports = v; },
    };

    (function() {
      var base64map
          = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

      crypt$1 = {
        // Bit-wise rotation left
        rotl: function(n, b) {
          return (n << b) | (n >>> (32 - b));
        },

        // Bit-wise rotation right
        rotr: function(n, b) {
          return (n << (32 - b)) | (n >>> b);
        },

        // Swap big-endian to little-endian and vice versa
        endian: function(n) {
          // If number given, swap endian
          if (n.constructor == Number) {
            return crypt$1.rotl(n, 8) & 0x00FF00FF | crypt$1.rotl(n, 24) & 0xFF00FF00;
          }

          // Else, assume array and swap all items
          for (var i = 0; i < n.length; i++)
            n[i] = crypt$1.endian(n[i]);
          return n;
        },

        // Generate an array of any length of random bytes
        randomBytes: function(n) {
          for (var bytes = []; n > 0; n--)
            bytes.push(Math.floor(Math.random() * 256));
          return bytes;
        },

        // Convert a byte array to big-endian 32-bit words
        bytesToWords: function(bytes) {
          for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
            words[b >>> 5] |= bytes[i] << (24 - b % 32);
          return words;
        },

        // Convert big-endian 32-bit words to a byte array
        wordsToBytes: function(words) {
          for (var bytes = [], b = 0; b < words.length * 32; b += 8)
            bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
          return bytes;
        },

        // Convert a byte array to a hex string
        bytesToHex: function(bytes) {
          for (var hex = [], i = 0; i < bytes.length; i++) {
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 0xF).toString(16));
          }
          return hex.join('');
        },

        // Convert a hex string to a byte array
        hexToBytes: function(hex) {
          for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
          return bytes;
        },

        // Convert a byte array to a base-64 string
        bytesToBase64: function(bytes) {
          for (var base64 = [], i = 0; i < bytes.length; i += 3) {
            var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
            for (var j = 0; j < 4; j++)
              if (i * 8 + j * 6 <= bytes.length * 8)
                base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
              else
                base64.push('=');
          }
          return base64.join('');
        },

        // Convert a base-64 string to a byte array
        base64ToBytes: function(base64) {
          // Remove non-base-64 characters
          base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

          for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
              imod4 = ++i % 4) {
            if (imod4 == 0) continue;
            bytes.push(((base64map.indexOf(base64.charAt(i - 1))
                & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
                | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
          }
          return bytes;
        }
      };

      crypt.exports = crypt$1;
    })();

    var charenc = {
      // UTF-8 encoding
      utf8: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
        },

        // Convert a byte array to a string
        bytesToString: function(bytes) {
          return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
        }
      },

      // Binary encoding
      bin: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          for (var bytes = [], i = 0; i < str.length; i++)
            bytes.push(str.charCodeAt(i) & 0xFF);
          return bytes;
        },

        // Convert a byte array to a string
        bytesToString: function(bytes) {
          for (var str = [], i = 0; i < bytes.length; i++)
            str.push(String.fromCharCode(bytes[i]));
          return str.join('');
        }
      }
    };

    var charenc_1 = charenc;

    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    var isBuffer_1 = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    };

    function isBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }

    (function(){
      var crypt = cryptExports,
          utf8 = charenc_1.utf8,
          isBuffer = isBuffer_1,
          bin = charenc_1.bin,

      // The core
      md5 = function (message, options) {
        // Convert to byte array
        if (message.constructor == String)
          if (options && options.encoding === 'binary')
            message = bin.stringToBytes(message);
          else
            message = utf8.stringToBytes(message);
        else if (isBuffer(message))
          message = Array.prototype.slice.call(message, 0);
        else if (!Array.isArray(message) && message.constructor !== Uint8Array)
          message = message.toString();
        // else, assume byte array already

        var m = crypt.bytesToWords(message),
            l = message.length * 8,
            a =  1732584193,
            b = -271733879,
            c = -1732584194,
            d =  271733878;

        // Swap endian
        for (var i = 0; i < m.length; i++) {
          m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
                 ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
        }

        // Padding
        m[l >>> 5] |= 0x80 << (l % 32);
        m[(((l + 64) >>> 9) << 4) + 14] = l;

        // Method shortcuts
        var FF = md5._ff,
            GG = md5._gg,
            HH = md5._hh,
            II = md5._ii;

        for (var i = 0; i < m.length; i += 16) {

          var aa = a,
              bb = b,
              cc = c,
              dd = d;

          a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
          d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
          c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
          b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
          a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
          d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
          c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
          b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
          a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
          d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
          c = FF(c, d, a, b, m[i+10], 17, -42063);
          b = FF(b, c, d, a, m[i+11], 22, -1990404162);
          a = FF(a, b, c, d, m[i+12],  7,  1804603682);
          d = FF(d, a, b, c, m[i+13], 12, -40341101);
          c = FF(c, d, a, b, m[i+14], 17, -1502002290);
          b = FF(b, c, d, a, m[i+15], 22,  1236535329);

          a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
          d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
          c = GG(c, d, a, b, m[i+11], 14,  643717713);
          b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
          a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
          d = GG(d, a, b, c, m[i+10],  9,  38016083);
          c = GG(c, d, a, b, m[i+15], 14, -660478335);
          b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
          a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
          d = GG(d, a, b, c, m[i+14],  9, -1019803690);
          c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
          b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
          a = GG(a, b, c, d, m[i+13],  5, -1444681467);
          d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
          c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
          b = GG(b, c, d, a, m[i+12], 20, -1926607734);

          a = HH(a, b, c, d, m[i+ 5],  4, -378558);
          d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
          c = HH(c, d, a, b, m[i+11], 16,  1839030562);
          b = HH(b, c, d, a, m[i+14], 23, -35309556);
          a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
          d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
          c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
          b = HH(b, c, d, a, m[i+10], 23, -1094730640);
          a = HH(a, b, c, d, m[i+13],  4,  681279174);
          d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
          c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
          b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
          a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
          d = HH(d, a, b, c, m[i+12], 11, -421815835);
          c = HH(c, d, a, b, m[i+15], 16,  530742520);
          b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

          a = II(a, b, c, d, m[i+ 0],  6, -198630844);
          d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
          c = II(c, d, a, b, m[i+14], 15, -1416354905);
          b = II(b, c, d, a, m[i+ 5], 21, -57434055);
          a = II(a, b, c, d, m[i+12],  6,  1700485571);
          d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
          c = II(c, d, a, b, m[i+10], 15, -1051523);
          b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
          a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
          d = II(d, a, b, c, m[i+15], 10, -30611744);
          c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
          b = II(b, c, d, a, m[i+13], 21,  1309151649);
          a = II(a, b, c, d, m[i+ 4],  6, -145523070);
          d = II(d, a, b, c, m[i+11], 10, -1120210379);
          c = II(c, d, a, b, m[i+ 2], 15,  718787259);
          b = II(b, c, d, a, m[i+ 9], 21, -343485551);

          a = (a + aa) >>> 0;
          b = (b + bb) >>> 0;
          c = (c + cc) >>> 0;
          d = (d + dd) >>> 0;
        }

        return crypt.endian([a, b, c, d]);
      };

      // Auxiliary functions
      md5._ff  = function (a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + (x >>> 0) + t;
        return ((n << s) | (n >>> (32 - s))) + b;
      };
      md5._gg  = function (a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + (x >>> 0) + t;
        return ((n << s) | (n >>> (32 - s))) + b;
      };
      md5._hh  = function (a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + (x >>> 0) + t;
        return ((n << s) | (n >>> (32 - s))) + b;
      };
      md5._ii  = function (a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
        return ((n << s) | (n >>> (32 - s))) + b;
      };

      // Package private blocksize
      md5._blocksize = 16;
      md5._digestsize = 16;

      md5$1.exports = function (message, options) {
        if (message === undefined || message === null)
          throw new Error('Illegal argument ' + message);

        var digestbytes = crypt.wordsToBytes(md5(message, options));
        return options && options.asBytes ? digestbytes :
            options && options.asString ? bin.bytesToString(digestbytes) :
            crypt.bytesToHex(digestbytes);
      };

    })();

    /**
     * @module
     * @category Generators
     * @subcategory Internet
     * @description Some awesome description for this generator...
     */
    /**
     * @function md5
     * @description Hash any string input with MD5
     *
     * @param {string} [input] input string to hash
     * @returns {string} the hashed string
     *
     * @example typescript const hash = md5('my-string');
     */
    function md5(input) {
        let rngString;
        if (!input) {
            rngString = fromFormat('AAAAAAAAAA');
        }
        else {
            rngString = input;
        }
        return md5Exports(rngString);
    }
    /**
     * @function salt
     * @description Generates a random salt
     *
     * @param {number} [len=10] input string to hash
     * @returns {string} the hashed string
     *
     * @example const randomSalt = salt();
     *
     * const randomSalt2 = salt(12);
     */
    function salt(len = 10) {
        return fromFormat('A'.repeat(len));
    }
    // export const sha1BlockLength = ['1', '224', '256', '384', '512'] as const;
    // export function sha(blockLength: typeof sha1BlockLength[number]) {
    // 	if(blockLength === '512') {
    // 	}
    // }
    // export const sha3BlockLength = ['224', '256', '384', '512'] as const;
    // export function sha3() {
    // }
    // export function crc() {
    // }
    const Password = {
        md5,
        salt
    };

    exports.API = API;
    exports.Address = Address;
    exports.Array = Array$1;
    exports.Authentication = Authentication;
    exports.Bank = Bank;
    exports.Config = Config;
    exports.Contingency = Contingency;
    exports.Core = Core;
    exports.Factory = Factory;
    exports.Generators = Generators;
    exports.Locales = locales;
    exports.Map = Map$1;
    exports.Number = Number$1;
    exports.Password = Password;
    exports.Person = Person;
    exports.Probability = Probability;
    exports.Server = Server;
    exports.string = string;

}));
